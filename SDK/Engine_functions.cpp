// Name: LOSTARK, Version: 1

#include "../SDK.h"

/*!!DEFINE!!*/

/*!!HELPER_DEF!!*/

/*!!HELPER_INC!!*/

#ifdef _MSC_VER
	#pragma pack(push, 0x01)
#endif

namespace CG
{
//---------------------------------------------------------------------------
// Functions
//---------------------------------------------------------------------------

// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetActorSpriteComponent
//		Flags  -> ()
// Parameters:
//		class USpriteComponent*                            ReturnValue                                                (Parm, OutParm, ReturnParm, EditInline)
class USpriteComponent* AActor::GetActorSpriteComponent()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorSpriteComponent");

	AActor_GetActorSpriteComponent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetActorMetrics
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_EActorMetricsType>              MetricsType                                                (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int AActor::GetActorMetrics(TEnumAsByte<Engine_EActorMetricsType> MetricsType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorMetrics");

	AActor_GetActorMetrics_Params params {};
	params.MetricsType = MetricsType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.OnMobileTouch
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           InPC                                                       (Parm)
//		struct FVector2D                                   TouchLocation                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::OnMobileTouch(class APlayerController* InPC, const struct FVector2D& TouchLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnMobileTouch");

	AActor_OnMobileTouch_Params params {};
	params.InPC = InPC;
	params.TouchLocation = TouchLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.IsMobileTouchEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::IsMobileTouchEnabled()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsMobileTouchEnabled");

	AActor_IsMobileTouchEnabled_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ShouldBeHiddenBySHOW_NavigationNodes
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::ShouldBeHiddenBySHOW_NavigationNodes()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ShouldBeHiddenBySHOW_NavigationNodes");

	AActor_ShouldBeHiddenBySHOW_NavigationNodes_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.WillOverlap
//		Flags  -> ()
// Parameters:
//		struct FVector                                     PosA                                                       (Parm)
//		struct FVector                                     VelA                                                       (Parm)
//		struct FVector                                     PosB                                                       (Parm)
//		struct FVector                                     VelB                                                       (Parm)
//		float                                              StepSize                                                   (Parm)
//		float                                              Radius                                                     (Parm)
//		float                                              Time                                                       (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::WillOverlap(const struct FVector& PosA, const struct FVector& VelA, const struct FVector& PosB, const struct FVector& VelB, float StepSize, float Radius, float* Time)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.WillOverlap");

	AActor_WillOverlap_Params params {};
	params.PosA = PosA;
	params.VelA = VelA;
	params.PosB = PosB;
	params.VelB = VelB;
	params.StepSize = StepSize;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Time != nullptr)
		*Time = params.Time;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetAvoidanceVector
//		Flags  -> ()
// Parameters:
//		TArray<class AActor*>                              Obstacles                                                  (Const, Parm, OutParm, NeedCtorLink)
//		struct FVector                                     GoalLocation                                               (Parm)
//		float                                              CollisionRadius                                            (Parm)
//		float                                              MaxSpeed                                                   (Parm)
//		int                                                NumSamples                                                 (OptionalParm, Parm)
//		float                                              VelocityStepRate                                           (OptionalParm, Parm)
//		float                                              MaxTimeTilOverlap                                          (OptionalParm, Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector AActor::GetAvoidanceVector(TArray<class AActor*>* Obstacles, const struct FVector& GoalLocation, float CollisionRadius, float MaxSpeed, int NumSamples, float VelocityStepRate, float MaxTimeTilOverlap)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAvoidanceVector");

	AActor_GetAvoidanceVector_Params params {};
	params.GoalLocation = GoalLocation;
	params.CollisionRadius = CollisionRadius;
	params.MaxSpeed = MaxSpeed;
	params.NumSamples = NumSamples;
	params.VelocityStepRate = VelocityStepRate;
	params.MaxTimeTilOverlap = MaxTimeTilOverlap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Obstacles != nullptr)
		*Obstacles = params.Obstacles;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ReplicationEnded
//		Flags  -> ()
void AActor::ReplicationEnded()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReplicationEnded");

	AActor_ReplicationEnded_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PostDemoRewind
//		Flags  -> ()
void AActor::PostDemoRewind()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostDemoRewind");

	AActor_PostDemoRewind_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.AnimTreeUpdated
//		Flags  -> ()
// Parameters:
//		class USkeletalMeshComponent*                      SkelMesh                                                   (Parm, EditInline)
void AActor::AnimTreeUpdated(class USkeletalMeshComponent* SkelMesh)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.AnimTreeUpdated");

	AActor_AnimTreeUpdated_Params params {};
	params.SkelMesh = SkelMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SupportsKismetModification
//		Flags  -> ()
// Parameters:
//		class USequenceOp*                                 AskingOp                                                   (Parm)
//		struct FString                                     Reason                                                     (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::SupportsKismetModification(class USequenceOp* AskingOp, struct FString* Reason)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SupportsKismetModification");

	AActor_SupportsKismetModification_Params params {};
	params.AskingOp = AskingOp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Reason != nullptr)
		*Reason = params.Reason;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetAnimTrailParticleSystem
//		Flags  -> ()
// Parameters:
//		class UAnimNotify_Trails*                          AnimNotifyData                                             (Const, Parm)
//		class UParticleSystem*                             ReturnValue                                                (Parm, OutParm, ReturnParm)
class UParticleSystem* AActor::GetAnimTrailParticleSystem(class UAnimNotify_Trails* AnimNotifyData)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAnimTrailParticleSystem");

	AActor_GetAnimTrailParticleSystem_Params params {};
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.TrailsNotifyEnd
//		Flags  -> ()
// Parameters:
//		class UAnimNotify_Trails*                          AnimNotifyData                                             (Const, Parm)
void AActor::TrailsNotifyEnd(class UAnimNotify_Trails* AnimNotifyData)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.TrailsNotifyEnd");

	AActor_TrailsNotifyEnd_Params params {};
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.TrailsNotifyTick
//		Flags  -> ()
// Parameters:
//		class UAnimNotify_Trails*                          AnimNotifyData                                             (Const, Parm)
void AActor::TrailsNotifyTick(class UAnimNotify_Trails* AnimNotifyData)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.TrailsNotifyTick");

	AActor_TrailsNotifyTick_Params params {};
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.TrailsNotify
//		Flags  -> ()
// Parameters:
//		class UAnimNotify_Trails*                          AnimNotifyData                                             (Const, Parm)
void AActor::TrailsNotify(class UAnimNotify_Trails* AnimNotifyData)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.TrailsNotify");

	AActor_TrailsNotify_Params params {};
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.CreateForceField
//		Flags  -> ()
// Parameters:
//		class UAnimNotify_ForceField*                      AnimNotifyData                                             (Const, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::CreateForceField(class UAnimNotify_ForceField* AnimNotifyData)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.CreateForceField");

	AActor_CreateForceField_Params params {};
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PlayParticleEffect
//		Flags  -> ()
// Parameters:
//		class UAnimNotify_PlayParticleEffect*              AnimNotifyData                                             (Const, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::PlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayParticleEffect");

	AActor_PlayParticleEffect_Params params {};
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetAimAdhesionExtent
//		Flags  -> ()
// Parameters:
//		float                                              Width                                                      (Parm, OutParm)
//		float                                              Height                                                     (Parm, OutParm)
//		struct FVector                                     Center                                                     (Parm, OutParm)
void AActor::GetAimAdhesionExtent(float* Width, float* Height, struct FVector* Center)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAimAdhesionExtent");

	AActor_GetAimAdhesionExtent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Width != nullptr)
		*Width = params.Width;
	if (Height != nullptr)
		*Height = params.Height;
	if (Center != nullptr)
		*Center = params.Center;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetAimFrictionExtent
//		Flags  -> ()
// Parameters:
//		float                                              Width                                                      (Parm, OutParm)
//		float                                              Height                                                     (Parm, OutParm)
//		struct FVector                                     Center                                                     (Parm, OutParm)
void AActor::GetAimFrictionExtent(float* Width, float* Height, struct FVector* Center)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAimFrictionExtent");

	AActor_GetAimFrictionExtent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Width != nullptr)
		*Width = params.Width;
	if (Height != nullptr)
		*Height = params.Height;
	if (Center != nullptr)
		*Center = params.Center;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.IsInPersistentLevel
//		Flags  -> ()
// Parameters:
//		bool                                               bIncludeLevelStreamingPersistent                           (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::IsInPersistentLevel(bool bIncludeLevelStreamingPersistent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsInPersistentLevel");

	AActor_IsInPersistentLevel_Params params {};
	params.bIncludeLevelStreamingPersistent = bIncludeLevelStreamingPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.OnRigidBodySpringOverextension
//		Flags  -> ()
// Parameters:
//		class URB_BodyInstance*                            BodyInstance                                               (Parm)
void AActor::OnRigidBodySpringOverextension(class URB_BodyInstance* BodyInstance)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRigidBodySpringOverextension");

	AActor_OnRigidBodySpringOverextension_Params params {};
	params.BodyInstance = BodyInstance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetPackageGuid
//		Flags  -> ()
// Parameters:
//		struct FName                                       PackageName                                                (Parm)
//		struct FGuid                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FGuid AActor::GetPackageGuid(const struct FName& PackageName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetPackageGuid");

	AActor_GetPackageGuid_Params params {};
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PostInitAnimTree
//		Flags  -> ()
// Parameters:
//		class USkeletalMeshComponent*                      SkelComp                                                   (Parm, EditInline)
void AActor::PostInitAnimTree(class USkeletalMeshComponent* SkelComp)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostInitAnimTree");

	AActor_PostInitAnimTree_Params params {};
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.RootMotionExtracted
//		Flags  -> ()
// Parameters:
//		class USkeletalMeshComponent*                      SkelComp                                                   (Parm, EditInline)
//		struct FBoneAtom                                   ExtractedRootMotionDelta                                   (Parm, OutParm)
void AActor::RootMotionExtracted(class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.RootMotionExtracted");

	AActor_RootMotionExtracted_Params params {};
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ExtractedRootMotionDelta != nullptr)
		*ExtractedRootMotionDelta = params.ExtractedRootMotionDelta;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.RootMotionProcessed
//		Flags  -> ()
// Parameters:
//		class USkeletalMeshComponent*                      SkelComp                                                   (Parm, EditInline)
void AActor::RootMotionProcessed(class USkeletalMeshComponent* SkelComp)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.RootMotionProcessed");

	AActor_RootMotionProcessed_Params params {};
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.RootMotionModeChanged
//		Flags  -> ()
// Parameters:
//		class USkeletalMeshComponent*                      SkelComp                                                   (Parm, EditInline)
void AActor::RootMotionModeChanged(class USkeletalMeshComponent* SkelComp)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.RootMotionModeChanged");

	AActor_RootMotionModeChanged_Params params {};
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PostRenderFor
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           PC                                                         (Parm)
//		class UCanvas*                                     Canvas                                                     (Parm)
//		struct FVector                                     CameraPosition                                             (Parm)
//		struct FVector                                     CameraDir                                                  (Parm)
void AActor::PostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostRenderFor");

	AActor_PostRenderFor_Params params {};
	params.PC = PC;
	params.Canvas = Canvas;
	params.CameraPosition = CameraPosition;
	params.CameraDir = CameraDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.NativePostRenderFor
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           PC                                                         (Parm)
//		class UCanvas*                                     Canvas                                                     (Parm)
//		struct FVector                                     CameraPosition                                             (Parm)
//		struct FVector                                     CameraDir                                                  (Parm)
void AActor::NativePostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.NativePostRenderFor");

	AActor_NativePostRenderFor_Params params {};
	params.PC = PC;
	params.Canvas = Canvas;
	params.CameraPosition = CameraPosition;
	params.CameraDir = CameraDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetHUDLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewHUDLocation                                             (Parm)
void AActor::SetHUDLocation(const struct FVector& NewHUDLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetHUDLocation");

	AActor_SetHUDLocation_Params params {};
	params.NewHUDLocation = NewHUDLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.OnRanOver
//		Flags  -> ()
// Parameters:
//		class ASVehicle*                                   Vehicle                                                    (Parm)
//		class UPrimitiveComponent*                         RunOverComponent                                           (Parm, EditInline)
//		int                                                WheelIndex                                                 (Parm)
void AActor::OnRanOver(class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRanOver");

	AActor_OnRanOver_Params params {};
	params.Vehicle = Vehicle;
	params.RunOverComponent = RunOverComponent;
	params.WheelIndex = WheelIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.RigidBodyCollision
//		Flags  -> ()
// Parameters:
//		class UPrimitiveComponent*                         HitComponent                                               (Parm, EditInline)
//		class UPrimitiveComponent*                         OtherComponent                                             (Parm, EditInline)
//		struct FCollisionImpactData                        RigidCollisionData                                         (Const, Parm, OutParm, NeedCtorLink)
//		int                                                ContactIndex                                               (Parm)
void AActor::RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, struct FCollisionImpactData* RigidCollisionData, int ContactIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.RigidBodyCollision");

	AActor_RigidBodyCollision_Params params {};
	params.HitComponent = HitComponent;
	params.OtherComponent = OtherComponent;
	params.ContactIndex = ContactIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (RigidCollisionData != nullptr)
		*RigidCollisionData = params.RigidCollisionData;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.InterpolationChanged
//		Flags  -> ()
// Parameters:
//		class USeqAct_Interp*                              InterpAction                                               (Parm)
void AActor::InterpolationChanged(class USeqAct_Interp* InterpAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.InterpolationChanged");

	AActor_InterpolationChanged_Params params {};
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.InterpolationFinished
//		Flags  -> ()
// Parameters:
//		class USeqAct_Interp*                              InterpAction                                               (Parm)
void AActor::InterpolationFinished(class USeqAct_Interp* InterpAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.InterpolationFinished");

	AActor_InterpolationFinished_Params params {};
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.InterpolationStarted
//		Flags  -> ()
// Parameters:
//		class USeqAct_Interp*                              InterpAction                                               (Parm)
//		class UInterpGroupInst*                            GroupInst                                                  (Parm)
void AActor::InterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.InterpolationStarted");

	AActor_InterpolationStarted_Params params {};
	params.InterpAction = InterpAction;
	params.GroupInst = GroupInst;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SpawnedByKismet
//		Flags  -> ()
void AActor::SpawnedByKismet()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SpawnedByKismet");

	AActor_SpawnedByKismet_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetTargetLocation
//		Flags  -> ()
// Parameters:
//		class AActor*                                      RequestedBy                                                (OptionalParm, Parm)
//		bool                                               bRequestAlternateLoc                                       (OptionalParm, Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector AActor::GetTargetLocation(class AActor* RequestedBy, bool bRequestAlternateLoc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTargetLocation");

	AActor_GetTargetLocation_Params params {};
	params.RequestedBy = RequestedBy;
	params.bRequestAlternateLoc = bRequestAlternateLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.FindGoodEndView
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           PC                                                         (Parm)
//		struct FRotator                                    GoodRotation                                               (Parm, OutParm)
void AActor::FindGoodEndView(class APlayerController* PC, struct FRotator* GoodRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.FindGoodEndView");

	AActor_FindGoodEndView_Params params {};
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (GoodRotation != nullptr)
		*GoodRotation = params.GoodRotation;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.NotifyLocalPlayerTeamReceived
//		Flags  -> ()
void AActor::NotifyLocalPlayerTeamReceived()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.NotifyLocalPlayerTeamReceived");

	AActor_NotifyLocalPlayerTeamReceived_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ScriptGetTeamNum
//		Flags  -> ()
// Parameters:
//		unsigned char                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
unsigned char AActor::ScriptGetTeamNum()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ScriptGetTeamNum");

	AActor_ScriptGetTeamNum_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetTeamNum
//		Flags  -> ()
// Parameters:
//		unsigned char                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
unsigned char AActor::GetTeamNum()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTeamNum");

	AActor_GetTeamNum_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PawnBaseDied
//		Flags  -> ()
void AActor::PawnBaseDied()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PawnBaseDied");

	AActor_PawnBaseDied_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.IsPlayerOwned
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::IsPlayerOwned()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsPlayerOwned");

	AActor_IsPlayerOwned_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetActorEyesViewPoint
//		Flags  -> ()
// Parameters:
//		struct FVector                                     out_Location                                               (Parm, OutParm)
//		struct FRotator                                    out_Rotation                                               (Parm, OutParm)
void AActor::GetActorEyesViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorEyesViewPoint");

	AActor_GetActorEyesViewPoint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Rotation != nullptr)
		*out_Rotation = params.out_Rotation;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.IsStationary
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::IsStationary()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsStationary");

	AActor_IsStationary_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetActorFaceFXAsset
//		Flags  -> ()
// Parameters:
//		class UFaceFXAsset*                                ReturnValue                                                (Parm, OutParm, ReturnParm)
class UFaceFXAsset* AActor::GetActorFaceFXAsset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorFaceFXAsset");

	AActor_GetActorFaceFXAsset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.CanActorPlayFaceFXAnim
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::CanActorPlayFaceFXAnim()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.CanActorPlayFaceFXAnim");

	AActor_CanActorPlayFaceFXAnim_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.IsActorPlayingFaceFXAnim
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::IsActorPlayingFaceFXAnim()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsActorPlayingFaceFXAnim");

	AActor_IsActorPlayingFaceFXAnim_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.TickSkelControl
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
//		class USkeletalMeshComponent*                      SkelComp                                                   (Parm, EditInline)
//		class USkelControlBase*                            SkelCtrl                                                   (Parm)
void AActor::TickSkelControl(float DeltaTime, class USkeletalMeshComponent* SkelComp, class USkelControlBase* SkelCtrl)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.TickSkelControl");

	AActor_TickSkelControl_Params params {};
	params.DeltaTime = DeltaTime;
	params.SkelComp = SkelComp;
	params.SkelCtrl = SkelCtrl;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetSkelControlScale
//		Flags  -> ()
// Parameters:
//		struct FName                                       SkelControlName                                            (Parm)
//		float                                              Scale                                                      (Parm)
void AActor::SetSkelControlScale(const struct FName& SkelControlName, float Scale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetSkelControlScale");

	AActor_SetSkelControlScale_Params params {};
	params.SkelControlName = SkelControlName;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetMorphWeight
//		Flags  -> ()
// Parameters:
//		struct FName                                       MorphNodeName                                              (Parm)
//		float                                              MorphWeight                                                (Parm)
void AActor::SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetMorphWeight");

	AActor_SetMorphWeight_Params params {};
	params.MorphNodeName = MorphNodeName;
	params.MorphWeight = MorphWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.StopActorFaceFXAnim
//		Flags  -> ()
void AActor::StopActorFaceFXAnim()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.StopActorFaceFXAnim");

	AActor_StopActorFaceFXAnim_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PlayActorFaceFXAnim
//		Flags  -> ()
// Parameters:
//		class UFaceFXAnimSet*                              AnimSet                                                    (Parm)
//		struct FString                                     GroupName                                                  (Parm, NeedCtorLink)
//		struct FString                                     SeqName                                                    (Parm, NeedCtorLink)
//		class USoundCue*                                   SoundCueToPlay                                             (Parm)
//		class UAkEvent*                                    AkEventToPlay                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayActorFaceFXAnim");

	AActor_PlayActorFaceFXAnim_Params params {};
	params.AnimSet = AnimSet;
	params.GroupName = GroupName;
	params.SeqName = SeqName;
	params.SoundCueToPlay = SoundCueToPlay;
	params.AkEventToPlay = AkEventToPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.FinishAnimControl
//		Flags  -> ()
// Parameters:
//		class UInterpGroup*                                InInterpGroup                                              (Parm)
void AActor::FinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.FinishAnimControl");

	AActor_FinishAnimControl_Params params {};
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetAnimPosition
//		Flags  -> ()
// Parameters:
//		struct FName                                       SlotName                                                   (Parm)
//		int                                                ChannelIndex                                               (Parm)
//		struct FName                                       InAnimSeqName                                              (Parm)
//		float                                              InPosition                                                 (Parm)
//		bool                                               bFireNotifies                                              (Parm)
//		bool                                               bLooping                                                   (Parm)
//		bool                                               bEnableRootMotion                                          (Parm)
//		struct FPointer                                    pRootBoneOption                                            (OptionalParm, Parm)
//		struct FPointer                                    pRootBoneRotationOption                                    (OptionalParm, Parm)
void AActor::SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion, const struct FPointer& pRootBoneOption, const struct FPointer& pRootBoneRotationOption)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetAnimPosition");

	AActor_SetAnimPosition_Params params {};
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;
	params.bEnableRootMotion = bEnableRootMotion;
	params.pRootBoneOption = pRootBoneOption;
	params.pRootBoneRotationOption = pRootBoneRotationOption;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.BeginAnimControl
//		Flags  -> ()
// Parameters:
//		class UInterpGroup*                                InInterpGroup                                              (Parm)
void AActor::BeginAnimControl(class UInterpGroup* InInterpGroup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.BeginAnimControl");

	AActor_BeginAnimControl_Params params {};
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.OnAnimPlay
//		Flags  -> ()
// Parameters:
//		class UAnimNodeSequence*                           SeqNode                                                    (Parm)
void AActor::OnAnimPlay(class UAnimNodeSequence* SeqNode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnAnimPlay");

	AActor_OnAnimPlay_Params params {};
	params.SeqNode = SeqNode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.OnAnimEnd
//		Flags  -> ()
// Parameters:
//		class UAnimNodeSequence*                           SeqNode                                                    (Parm)
//		float                                              PlayedTime                                                 (Parm)
//		float                                              ExcessTime                                                 (Parm)
void AActor::OnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnAnimEnd");

	AActor_OnAnimEnd_Params params {};
	params.SeqNode = SeqNode;
	params.PlayedTime = PlayedTime;
	params.ExcessTime = ExcessTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.DoKismetAttachment
//		Flags  -> (Simulated, Event, Static, Protected, NetServer, K2Call, K2Pure)
// Parameters:
//		class AActor*                                      Attachment                                                 (Parm)
//		class USeqAct_AttachToActor*                       Action                                                     (Parm)
void AActor::STATIC_DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.DoKismetAttachment");

	AActor_DoKismetAttachment_Params params {};
	params.Attachment = Attachment;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.OnAttachToActor
//		Flags  -> ()
// Parameters:
//		class USeqAct_AttachToActor*                       Action                                                     (Parm)
void AActor::OnAttachToActor(class USeqAct_AttachToActor* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnAttachToActor");

	AActor_OnAttachToActor_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.OnToggleHidden
//		Flags  -> ()
// Parameters:
//		class USeqAct_ToggleHidden*                        Action                                                     (Parm)
void AActor::OnToggleHidden(class USeqAct_ToggleHidden* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnToggleHidden");

	AActor_OnToggleHidden_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.OnChangeCollision
//		Flags  -> ()
// Parameters:
//		class USeqAct_ChangeCollision*                     Action                                                     (Parm)
void AActor::OnChangeCollision(class USeqAct_ChangeCollision* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnChangeCollision");

	AActor_OnChangeCollision_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.OnSetPhysics
//		Flags  -> ()
// Parameters:
//		class USeqAct_SetPhysics*                          Action                                                     (Parm)
void AActor::OnSetPhysics(class USeqAct_SetPhysics* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnSetPhysics");

	AActor_OnSetPhysics_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.OnSetBlockRigidBody
//		Flags  -> ()
// Parameters:
//		class USeqAct_SetBlockRigidBody*                   Action                                                     (Parm)
void AActor::OnSetBlockRigidBody(class USeqAct_SetBlockRigidBody* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnSetBlockRigidBody");

	AActor_OnSetBlockRigidBody_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.OnSetVelocity
//		Flags  -> (Singular, Simulated, Event, Operator, Static, HasOptionalParms, Const, Public, Private, NetServer, K2Call, K2Pure)
// Parameters:
//		class USeqAct_SetVelocity*                         Action                                                     (Parm)
void AActor::STATIC_OnSetVelocity(class USeqAct_SetVelocity* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnSetVelocity");

	AActor_OnSetVelocity_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.OnTeleport
//		Flags  -> (Singular, Net, NetReliable, Event, Static, HasOptionalParms, Const, Public, Private, NetServer, K2Call, K2Pure)
// Parameters:
//		class USeqAct_Teleport*                            Action                                                     (Parm)
void AActor::STATIC_OnTeleport(class USeqAct_Teleport* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnTeleport");

	AActor_OnTeleport_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.OnModifyHealth
//		Flags  -> ()
// Parameters:
//		class USeqAct_ModifyHealth*                        Action                                                     (Parm)
void AActor::OnModifyHealth(class USeqAct_ModifyHealth* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnModifyHealth");

	AActor_OnModifyHealth_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PrestreamTextures
//		Flags  -> ()
// Parameters:
//		float                                              Seconds                                                    (Parm)
//		bool                                               bEnableStreaming                                           (Parm)
//		int                                                CinematicTextureGroups                                     (OptionalParm, Parm)
void AActor::PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PrestreamTextures");

	AActor_PrestreamTextures_Params params {};
	params.Seconds = Seconds;
	params.bEnableStreaming = bEnableStreaming;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ShutDown
//		Flags  -> ()
void AActor::ShutDown()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ShutDown");

	AActor_ShutDown_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetNetUpdateTime
//		Flags  -> ()
// Parameters:
//		float                                              NewUpdateTime                                              (Parm)
void AActor::SetNetUpdateTime(float NewUpdateTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetNetUpdateTime");

	AActor_SetNetUpdateTime_Params params {};
	params.NewUpdateTime = NewUpdateTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ForceNetRelevant
//		Flags  -> ()
void AActor::ForceNetRelevant()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ForceNetRelevant");

	AActor_ForceNetRelevant_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.OnDestroy
//		Flags  -> ()
// Parameters:
//		class USeqAct_Destroy*                             Action                                                     (Parm)
void AActor::OnDestroy(class USeqAct_Destroy* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnDestroy");

	AActor_OnDestroy_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ClearLatentAction
//		Flags  -> ()
// Parameters:
//		class UClass*                                      actionClass                                                (Parm)
//		bool                                               bAborted                                                   (OptionalParm, Parm)
//		class USeqAct_Latent*                              exceptionAction                                            (OptionalParm, Parm)
void AActor::ClearLatentAction(class UClass* actionClass, bool bAborted, class USeqAct_Latent* exceptionAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ClearLatentAction");

	AActor_ClearLatentAction_Params params {};
	params.actionClass = actionClass;
	params.bAborted = bAborted;
	params.exceptionAction = exceptionAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.FindEventsOfClass
//		Flags  -> ()
// Parameters:
//		class UClass*                                      EventClass                                                 (Parm)
//		TArray<class USequenceEvent*>                      out_EventList                                              (OptionalParm, Parm, OutParm, NeedCtorLink)
//		bool                                               bIncludeDisabled                                           (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::FindEventsOfClass(class UClass* EventClass, TArray<class USequenceEvent*>* out_EventList, bool bIncludeDisabled)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.FindEventsOfClass");

	AActor_FindEventsOfClass_Params params {};
	params.EventClass = EventClass;
	params.bIncludeDisabled = bIncludeDisabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_EventList != nullptr)
		*out_EventList = params.out_EventList;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ActivateEventClass
//		Flags  -> ()
// Parameters:
//		class UClass*                                      InClass                                                    (Parm)
//		class AActor*                                      InInstigator                                               (Parm)
//		TArray<class USequenceEvent*>                      EventList                                                  (Const, Parm, OutParm, NeedCtorLink)
//		TArray<int>                                        ActivateIndices                                            (Const, OptionalParm, Parm, OutParm, NeedCtorLink)
//		bool                                               bTest                                                      (OptionalParm, Parm)
//		TArray<class USequenceEvent*>                      ActivatedEvents                                            (OptionalParm, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::ActivateEventClass(class UClass* InClass, class AActor* InInstigator, TArray<class USequenceEvent*>* EventList, TArray<int>* ActivateIndices, bool bTest, TArray<class USequenceEvent*>* ActivatedEvents)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActivateEventClass");

	AActor_ActivateEventClass_Params params {};
	params.InClass = InClass;
	params.InInstigator = InInstigator;
	params.bTest = bTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (EventList != nullptr)
		*EventList = params.EventList;
	if (ActivateIndices != nullptr)
		*ActivateIndices = params.ActivateIndices;
	if (ActivatedEvents != nullptr)
		*ActivatedEvents = params.ActivatedEvents;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.TriggerGlobalEventClass
//		Flags  -> ()
// Parameters:
//		class UClass*                                      InEventClass                                               (Parm)
//		class AActor*                                      InInstigator                                               (Parm)
//		int                                                ActivateIndex                                              (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::TriggerGlobalEventClass(class UClass* InEventClass, class AActor* InInstigator, int ActivateIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.TriggerGlobalEventClass");

	AActor_TriggerGlobalEventClass_Params params {};
	params.InEventClass = InEventClass;
	params.InInstigator = InInstigator;
	params.ActivateIndex = ActivateIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ReceivedNewEvent
//		Flags  -> ()
// Parameters:
//		class USequenceEvent*                              Evt                                                        (Parm)
void AActor::ReceivedNewEvent(class USequenceEvent* Evt)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceivedNewEvent");

	AActor_ReceivedNewEvent_Params params {};
	params.Evt = Evt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.TriggerEventClass
//		Flags  -> ()
// Parameters:
//		class UClass*                                      InEventClass                                               (Parm)
//		class AActor*                                      InInstigator                                               (Parm)
//		int                                                ActivateIndex                                              (OptionalParm, Parm)
//		bool                                               bTest                                                      (OptionalParm, Parm)
//		TArray<class USequenceEvent*>                      ActivatedEvents                                            (OptionalParm, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::TriggerEventClass(class UClass* InEventClass, class AActor* InInstigator, int ActivateIndex, bool bTest, TArray<class USequenceEvent*>* ActivatedEvents)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.TriggerEventClass");

	AActor_TriggerEventClass_Params params {};
	params.InEventClass = InEventClass;
	params.InInstigator = InInstigator;
	params.ActivateIndex = ActivateIndex;
	params.bTest = bTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ActivatedEvents != nullptr)
		*ActivatedEvents = params.ActivatedEvents;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.DebugMessagePlayer
//		Flags  -> ()
// Parameters:
//		struct FString                                     msg                                                        (Parm, CoerceParm, NeedCtorLink)
void AActor::DebugMessagePlayer(const struct FString& msg)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.DebugMessagePlayer");

	AActor_DebugMessagePlayer_Params params {};
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ImpactEffectIsRelevant
//		Flags  -> (Net, NetReliable, Native, Event, HasOptionalParms, Const, Public, Private, NetServer, K2Call, K2Pure)
// Parameters:
//		class APawn*                                       EffectInstigator                                           (Parm)
//		struct FVector                                     SpawnLocation                                              (Parm)
//		bool                                               bForceDedicated                                            (Parm)
//		float                                              VisibleCullDistance                                        (OptionalParm, Parm)
//		float                                              HiddenCullDistance                                         (OptionalParm, Parm)
//		bool                                               bSkipLOSCheck                                              (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::ImpactEffectIsRelevant(class APawn* EffectInstigator, const struct FVector& SpawnLocation, bool bForceDedicated, float VisibleCullDistance, float HiddenCullDistance, bool bSkipLOSCheck)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ImpactEffectIsRelevant");

	AActor_ImpactEffectIsRelevant_Params params {};
	params.EffectInstigator = EffectInstigator;
	params.SpawnLocation = SpawnLocation;
	params.bForceDedicated = bForceDedicated;
	params.VisibleCullDistance = VisibleCullDistance;
	params.HiddenCullDistance = HiddenCullDistance;
	params.bSkipLOSCheck = bSkipLOSCheck;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ActorEffectIsRelevant
//		Flags  -> (Singular, Exec, Native, Event, Static, Const, Public, Private, NetServer, K2Call, K2Pure)
// Parameters:
//		class APawn*                                       EffectInstigator                                           (Parm)
//		bool                                               bForceDedicated                                            (Parm)
//		float                                              VisibleCullDistance                                        (OptionalParm, Parm)
//		float                                              HiddenCullDistance                                         (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::STATIC_ActorEffectIsRelevant(class APawn* EffectInstigator, bool bForceDedicated, float VisibleCullDistance, float HiddenCullDistance)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorEffectIsRelevant");

	AActor_ActorEffectIsRelevant_Params params {};
	params.EffectInstigator = EffectInstigator;
	params.bForceDedicated = bForceDedicated;
	params.VisibleCullDistance = VisibleCullDistance;
	params.HiddenCullDistance = HiddenCullDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.EffectIsRelevant
//		Flags  -> ()
// Parameters:
//		struct FVector                                     SpawnLocation                                              (Parm)
//		bool                                               bForceDedicated                                            (Parm)
//		float                                              VisibleCullDistance                                        (OptionalParm, Parm)
//		float                                              HiddenCullDistance                                         (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::EffectIsRelevant(const struct FVector& SpawnLocation, bool bForceDedicated, float VisibleCullDistance, float HiddenCullDistance)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.EffectIsRelevant");

	AActor_EffectIsRelevant_Params params {};
	params.SpawnLocation = SpawnLocation;
	params.bForceDedicated = bForceDedicated;
	params.VisibleCullDistance = VisibleCullDistance;
	params.HiddenCullDistance = HiddenCullDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ApplyFluidSurfaceContinuousForce
//		Flags  -> ()
// Parameters:
//		class AFluidSurfaceActor*                          Fluid                                                      (Parm)
void AActor::ApplyFluidSurfaceContinuousForce(class AFluidSurfaceActor* Fluid)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ApplyFluidSurfaceContinuousForce");

	AActor_ApplyFluidSurfaceContinuousForce_Params params {};
	params.Fluid = Fluid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ApplyFluidSurfaceImpact
//		Flags  -> ()
// Parameters:
//		class AFluidSurfaceActor*                          Fluid                                                      (Parm)
//		struct FVector                                     HitLocation                                                (Const, Parm, OutParm)
void AActor::ApplyFluidSurfaceImpact(class AFluidSurfaceActor* Fluid, struct FVector* HitLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ApplyFluidSurfaceImpact");

	AActor_ApplyFluidSurfaceImpact_Params params {};
	params.Fluid = Fluid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.CanSplash
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::CanSplash()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.CanSplash");

	AActor_CanSplash_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PlayTeleportEffect
//		Flags  -> ()
// Parameters:
//		bool                                               bOut                                                       (Parm)
//		bool                                               bSound                                                     (Parm)
void AActor::PlayTeleportEffect(bool bOut, bool bSound)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayTeleportEffect");

	AActor_PlayTeleportEffect_Params params {};
	params.bOut = bOut;
	params.bSound = bSound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.IsInPain
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::IsInPain()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsInPain");

	AActor_IsInPain_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.Reset
//		Flags  -> ()
void AActor::Reset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.Reset");

	AActor_Reset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetFaceFXAudioComponent
//		Flags  -> ()
// Parameters:
//		class UAudioComponent*                             ReturnValue                                                (Parm, OutParm, ReturnParm, EditInline)
class UAudioComponent* AActor::GetFaceFXAudioComponent()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetFaceFXAudioComponent");

	AActor_GetFaceFXAudioComponent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ModifyHearSoundComponent
//		Flags  -> ()
// Parameters:
//		class UAudioComponent*                             AC                                                         (Parm, EditInline)
void AActor::ModifyHearSoundComponent(class UAudioComponent* AC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ModifyHearSoundComponent");

	AActor_ModifyHearSoundComponent_Params params {};
	params.AC = AC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetPhysicsName
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString AActor::GetPhysicsName()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetPhysicsName");

	AActor_GetPhysicsName_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.DisplayDebug
//		Flags  -> ()
// Parameters:
//		class AHUD*                                        HUD                                                        (Parm)
//		float                                              out_YL                                                     (Parm, OutParm)
//		float                                              out_YPos                                                   (Parm, OutParm)
void AActor::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.DisplayDebug");

	AActor_DisplayDebug_Params params {};
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetDebugName
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString AActor::GetDebugName()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetDebugName");

	AActor_GetDebugName_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.MatchStarting
//		Flags  -> ()
void AActor::MatchStarting()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.MatchStarting");

	AActor_MatchStarting_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetLocalString
//		Flags  -> ()
// Parameters:
//		int                                                Switch                                                     (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_2                                               (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_3                                               (OptionalParm, Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString AActor::GetLocalString(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetLocalString");

	AActor_GetLocalString_Params params {};
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ReplaceText
//		Flags  -> ()
// Parameters:
//		struct FString                                     Text                                                       (Parm, OutParm, NeedCtorLink)
//		struct FString                                     Replace                                                    (Parm, NeedCtorLink)
//		struct FString                                     With                                                       (Parm, NeedCtorLink)
void AActor::ReplaceText(struct FString* Text, const struct FString& Replace, const struct FString& With)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReplaceText");

	AActor_ReplaceText_Params params {};
	params.Replace = Replace;
	params.With = With;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Text != nullptr)
		*Text = params.Text;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetHumanReadableName
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString AActor::GetHumanReadableName()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetHumanReadableName");

	AActor_GetHumanReadableName_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetItemName
//		Flags  -> ()
// Parameters:
//		struct FString                                     FullName                                                   (Parm, NeedCtorLink)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString AActor::GetItemName(const struct FString& FullName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetItemName");

	AActor_GetItemName_Params params {};
	params.FullName = FullName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.CalcCamera
//		Flags  -> (Net, NetReliable, Exec, Native, Const, Public, Private, NetServer, K2Call, K2Pure)
// Parameters:
//		float                                              fDeltaTime                                                 (Parm)
//		struct FVector                                     out_CamLoc                                                 (Parm, OutParm)
//		struct FRotator                                    out_CamRot                                                 (Parm, OutParm)
//		float                                              out_FOV                                                    (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.CalcCamera");

	AActor_CalcCamera_Params params {};
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_CamLoc != nullptr)
		*out_CamLoc = params.out_CamLoc;
	if (out_CamRot != nullptr)
		*out_CamRot = params.out_CamRot;
	if (out_FOV != nullptr)
		*out_FOV = params.out_FOV;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.EndViewTarget
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           PC                                                         (Parm)
void AActor::EndViewTarget(class APlayerController* PC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.EndViewTarget");

	AActor_EndViewTarget_Params params {};
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.BecomeViewTarget
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           PC                                                         (Parm)
void AActor::BecomeViewTarget(class APlayerController* PC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.BecomeViewTarget");

	AActor_BecomeViewTarget_Params params {};
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.CheckForErrors
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::CheckForErrors()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.CheckForErrors");

	AActor_CheckForErrors_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.DebugFreezeGame
//		Flags  -> ()
// Parameters:
//		class AActor*                                      ActorToLookAt                                              (OptionalParm, Parm)
void AActor::DebugFreezeGame(class AActor* ActorToLookAt)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.DebugFreezeGame");

	AActor_DebugFreezeGame_Params params {};
	params.ActorToLookAt = ActorToLookAt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetGravityZ
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AActor::GetGravityZ()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetGravityZ");

	AActor_GetGravityZ_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.CheckHitInfo
//		Flags  -> (Singular, Net, NetReliable, Exec, Native, Event, Const, Public, Private, NetServer, K2Call, K2Pure)
// Parameters:
//		struct FTraceHitInfo                               HitInfo                                                    (Parm, OutParm)
//		class UPrimitiveComponent*                         FallBackComponent                                          (Parm, EditInline)
//		struct FVector                                     Dir                                                        (Parm)
//		struct FVector                                     out_HitLocation                                            (Parm, OutParm)
void AActor::CheckHitInfo(struct FTraceHitInfo* HitInfo, class UPrimitiveComponent* FallBackComponent, const struct FVector& Dir, struct FVector* out_HitLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.CheckHitInfo");

	AActor_CheckHitInfo_Params params {};
	params.FallBackComponent = FallBackComponent;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (HitInfo != nullptr)
		*HitInfo = params.HitInfo;
	if (out_HitLocation != nullptr)
		*out_HitLocation = params.out_HitLocation;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.TakeRadiusDamage
//		Flags  -> (Singular, Exec, Operator, Static, HasOptionalParms, Public, Private, NetServer, K2Call, K2Pure)
// Parameters:
//		class AController*                                 InstigatedBy                                               (Parm)
//		float                                              BaseDamage                                                 (Parm)
//		float                                              DamageRadius                                               (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		float                                              Momentum                                                   (Parm)
//		struct FVector                                     HurtOrigin                                                 (Parm)
//		bool                                               bFullDamage                                                (Parm)
//		class AActor*                                      DamageCauser                                               (Parm)
//		float                                              DamageFalloffExponent                                      (OptionalParm, Parm)
void AActor::STATIC_TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.TakeRadiusDamage");

	AActor_TakeRadiusDamage_Params params {};
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.HealDamage
//		Flags  -> ()
// Parameters:
//		int                                                Amount                                                     (Parm)
//		class AController*                                 Healer                                                     (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::HealDamage(int Amount, class AController* Healer, class UClass* DamageType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.HealDamage");

	AActor_HealDamage_Params params {};
	params.Amount = Amount;
	params.Healer = Healer;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.TakeDamage
//		Flags  -> ()
// Parameters:
//		int                                                DamageAmount                                               (Parm)
//		class AController*                                 EventInstigator                                            (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     Momentum                                                   (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (OptionalParm, Parm)
//		class AActor*                                      DamageCauser                                               (OptionalParm, Parm)
void AActor::TakeDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.TakeDamage");

	AActor_TakeDamage_Params params {};
	params.DamageAmount = DamageAmount;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.KilledBy
//		Flags  -> ()
// Parameters:
//		class APawn*                                       EventInstigator                                            (Parm)
void AActor::KilledBy(class APawn* EventInstigator)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.KilledBy");

	AActor_KilledBy_Params params {};
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.HurtRadius
//		Flags  -> (Singular, Exec, Native, Event, Operator, HasOptionalParms, Public, Private, NetServer, K2Call, K2Pure)
// Parameters:
//		float                                              BaseDamage                                                 (Parm)
//		float                                              DamageRadius                                               (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		float                                              Momentum                                                   (Parm)
//		struct FVector                                     HurtOrigin                                                 (Parm)
//		class AActor*                                      IgnoredActor                                               (OptionalParm, Parm)
//		class AController*                                 InstigatedByController                                     (OptionalParm, Parm)
//		bool                                               bDoFullDamage                                              (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::HurtRadius(float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, bool bDoFullDamage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.HurtRadius");

	AActor_HurtRadius_Params params {};
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.IgnoredActor = IgnoredActor;
	params.InstigatedByController = InstigatedByController;
	params.bDoFullDamage = bDoFullDamage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.StopsProjectile
//		Flags  -> ()
// Parameters:
//		class AProjectile*                                 P                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::StopsProjectile(class AProjectile* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.StopsProjectile");

	AActor_StopsProjectile_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.NotifySkelControlBeyondLimit
//		Flags  -> ()
// Parameters:
//		class USkelControlLookAt*                          LookAt                                                     (Parm)
void AActor::NotifySkelControlBeyondLimit(class USkelControlLookAt* LookAt)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.NotifySkelControlBeyondLimit");

	AActor_NotifySkelControlBeyondLimit_Params params {};
	params.LookAt = LookAt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ConstraintBrokenNotify
//		Flags  -> ()
// Parameters:
//		class AActor*                                      ConOwner                                                   (Parm)
//		class URB_ConstraintSetup*                         ConSetup                                                   (Parm)
//		class URB_ConstraintInstance*                      ConInstance                                                (Parm)
void AActor::ConstraintBrokenNotify(class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ConstraintBrokenNotify");

	AActor_ConstraintBrokenNotify_Params params {};
	params.ConOwner = ConOwner;
	params.ConSetup = ConSetup;
	params.ConInstance = ConInstance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetInitialState
//		Flags  -> ()
void AActor::SetInitialState()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetInitialState");

	AActor_SetInitialState_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PostBeginPlay
//		Flags  -> ()
void AActor::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostBeginPlay");

	AActor_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.BroadcastLocalizedTeamMessage
//		Flags  -> ()
// Parameters:
//		int                                                TeamIndex                                                  (Parm)
//		class UClass*                                      InMessageClass                                             (Parm)
//		int                                                Switch                                                     (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_2                                               (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_3                                               (OptionalParm, Parm)
//		class UObject*                                     OptionalObject                                             (OptionalParm, Parm)
void AActor::BroadcastLocalizedTeamMessage(int TeamIndex, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.BroadcastLocalizedTeamMessage");

	AActor_BroadcastLocalizedTeamMessage_Params params {};
	params.TeamIndex = TeamIndex;
	params.InMessageClass = InMessageClass;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.BroadcastLocalizedMessage
//		Flags  -> ()
// Parameters:
//		class UClass*                                      InMessageClass                                             (Parm)
//		int                                                Switch                                                     (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_2                                               (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_3                                               (OptionalParm, Parm)
//		class UObject*                                     OptionalObject                                             (OptionalParm, Parm)
void AActor::BroadcastLocalizedMessage(class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.BroadcastLocalizedMessage");

	AActor_BroadcastLocalizedMessage_Params params {};
	params.InMessageClass = InMessageClass;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PreBeginPlay
//		Flags  -> ()
void AActor::PreBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PreBeginPlay");

	AActor_PreBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetALocalPlayerController
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class APlayerController* AActor::GetALocalPlayerController()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetALocalPlayerController");

	AActor_GetALocalPlayerController_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.LocalPlayerControllers
//		Flags  -> ()
// Parameters:
//		class UClass*                                      BaseClass                                                  (Parm)
//		class APlayerController*                           PC                                                         (Parm, OutParm)
void AActor::LocalPlayerControllers(class UClass* BaseClass, class APlayerController** PC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.LocalPlayerControllers");

	AActor_LocalPlayerControllers_Params params {};
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (PC != nullptr)
		*PC = params.PC;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.AllOwnedComponents
//		Flags  -> ()
// Parameters:
//		class UClass*                                      BaseClass                                                  (Parm)
//		class UActorComponent*                             OutComponent                                               (Parm, OutParm, EditInline)
void AActor::AllOwnedComponents(class UClass* BaseClass, class UActorComponent** OutComponent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.AllOwnedComponents");

	AActor_AllOwnedComponents_Params params {};
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutComponent != nullptr)
		*OutComponent = params.OutComponent;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ComponentList
//		Flags  -> ()
// Parameters:
//		class UClass*                                      BaseClass                                                  (Parm)
//		class UActorComponent*                             out_Component                                              (Parm, OutParm, EditInline)
void AActor::ComponentList(class UClass* BaseClass, class UActorComponent** out_Component)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ComponentList");

	AActor_ComponentList_Params params {};
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Component != nullptr)
		*out_Component = params.out_Component;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.OverlappingActors
//		Flags  -> ()
// Parameters:
//		class UClass*                                      BaseClass                                                  (Parm)
//		class AActor*                                      out_Actor                                                  (Parm, OutParm)
//		float                                              Radius                                                     (Parm)
//		struct FVector                                     Loc                                                        (OptionalParm, Parm)
//		bool                                               bIgnoreHidden                                              (OptionalParm, Parm)
void AActor::OverlappingActors(class UClass* BaseClass, class AActor** out_Actor, float Radius, const struct FVector& Loc, bool bIgnoreHidden)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.OverlappingActors");

	AActor_OverlappingActors_Params params {};
	params.BaseClass = BaseClass;
	params.Radius = Radius;
	params.Loc = Loc;
	params.bIgnoreHidden = bIgnoreHidden;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Actor != nullptr)
		*out_Actor = params.out_Actor;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.CollidingActors
//		Flags  -> ()
// Parameters:
//		class UClass*                                      BaseClass                                                  (Parm)
//		class AActor*                                      Actor                                                      (Parm, OutParm)
//		float                                              Radius                                                     (Parm)
//		struct FVector                                     Loc                                                        (OptionalParm, Parm)
//		bool                                               bUseOverlapCheck                                           (OptionalParm, Parm)
//		class UClass*                                      InterfaceClass                                             (OptionalParm, Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (OptionalParm, Parm, OutParm)
void AActor::CollidingActors(class UClass* BaseClass, class AActor** Actor, float Radius, const struct FVector& Loc, bool bUseOverlapCheck, class UClass* InterfaceClass, struct FTraceHitInfo* HitInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.CollidingActors");

	AActor_CollidingActors_Params params {};
	params.BaseClass = BaseClass;
	params.Radius = Radius;
	params.Loc = Loc;
	params.bUseOverlapCheck = bUseOverlapCheck;
	params.InterfaceClass = InterfaceClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
	if (HitInfo != nullptr)
		*HitInfo = params.HitInfo;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.VisibleCollidingActors
//		Flags  -> ()
// Parameters:
//		class UClass*                                      BaseClass                                                  (Parm)
//		class AActor*                                      Actor                                                      (Parm, OutParm)
//		float                                              Radius                                                     (Parm)
//		struct FVector                                     Loc                                                        (OptionalParm, Parm)
//		bool                                               bIgnoreHidden                                              (OptionalParm, Parm)
//		struct FVector                                     Extent                                                     (OptionalParm, Parm)
//		bool                                               bTraceActors                                               (OptionalParm, Parm)
//		class UClass*                                      InterfaceClass                                             (OptionalParm, Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (OptionalParm, Parm, OutParm)
void AActor::VisibleCollidingActors(class UClass* BaseClass, class AActor** Actor, float Radius, const struct FVector& Loc, bool bIgnoreHidden, const struct FVector& Extent, bool bTraceActors, class UClass* InterfaceClass, struct FTraceHitInfo* HitInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.VisibleCollidingActors");

	AActor_VisibleCollidingActors_Params params {};
	params.BaseClass = BaseClass;
	params.Radius = Radius;
	params.Loc = Loc;
	params.bIgnoreHidden = bIgnoreHidden;
	params.Extent = Extent;
	params.bTraceActors = bTraceActors;
	params.InterfaceClass = InterfaceClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
	if (HitInfo != nullptr)
		*HitInfo = params.HitInfo;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.VisibleActors
//		Flags  -> ()
// Parameters:
//		class UClass*                                      BaseClass                                                  (Parm)
//		class AActor*                                      Actor                                                      (Parm, OutParm)
//		float                                              Radius                                                     (OptionalParm, Parm)
//		struct FVector                                     Loc                                                        (OptionalParm, Parm)
void AActor::VisibleActors(class UClass* BaseClass, class AActor** Actor, float Radius, const struct FVector& Loc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.VisibleActors");

	AActor_VisibleActors_Params params {};
	params.BaseClass = BaseClass;
	params.Radius = Radius;
	params.Loc = Loc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.TraceActors
//		Flags  -> ()
// Parameters:
//		class UClass*                                      BaseClass                                                  (Parm)
//		class AActor*                                      Actor                                                      (Parm, OutParm)
//		struct FVector                                     HitLoc                                                     (Parm, OutParm)
//		struct FVector                                     HitNorm                                                    (Parm, OutParm)
//		struct FVector                                     End                                                        (Parm)
//		struct FVector                                     Start                                                      (OptionalParm, Parm)
//		struct FVector                                     Extent                                                     (OptionalParm, Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (OptionalParm, Parm, OutParm)
//		int                                                ExtraTraceFlags                                            (OptionalParm, Parm)
void AActor::TraceActors(class UClass* BaseClass, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm, const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, struct FTraceHitInfo* HitInfo, int ExtraTraceFlags)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.TraceActors");

	AActor_TraceActors_Params params {};
	params.BaseClass = BaseClass;
	params.End = End;
	params.Start = Start;
	params.Extent = Extent;
	params.ExtraTraceFlags = ExtraTraceFlags;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
	if (HitLoc != nullptr)
		*HitLoc = params.HitLoc;
	if (HitNorm != nullptr)
		*HitNorm = params.HitNorm;
	if (HitInfo != nullptr)
		*HitInfo = params.HitInfo;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.TouchingActors
//		Flags  -> ()
// Parameters:
//		class UClass*                                      BaseClass                                                  (Parm)
//		class AActor*                                      Actor                                                      (Parm, OutParm)
void AActor::TouchingActors(class UClass* BaseClass, class AActor** Actor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.TouchingActors");

	AActor_TouchingActors_Params params {};
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.BasedActors
//		Flags  -> ()
// Parameters:
//		class UClass*                                      BaseClass                                                  (Parm)
//		class AActor*                                      Actor                                                      (Parm, OutParm)
void AActor::BasedActors(class UClass* BaseClass, class AActor** Actor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.BasedActors");

	AActor_BasedActors_Params params {};
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ChildActors
//		Flags  -> ()
// Parameters:
//		class UClass*                                      BaseClass                                                  (Parm)
//		class AActor*                                      Actor                                                      (Parm, OutParm)
void AActor::ChildActors(class UClass* BaseClass, class AActor** Actor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ChildActors");

	AActor_ChildActors_Params params {};
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.DynamicActors
//		Flags  -> ()
// Parameters:
//		class UClass*                                      BaseClass                                                  (Parm)
//		class AActor*                                      Actor                                                      (Parm, OutParm)
//		class UClass*                                      InterfaceClass                                             (OptionalParm, Parm)
void AActor::DynamicActors(class UClass* BaseClass, class AActor** Actor, class UClass* InterfaceClass)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.DynamicActors");

	AActor_DynamicActors_Params params {};
	params.BaseClass = BaseClass;
	params.InterfaceClass = InterfaceClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.AllActors
//		Flags  -> ()
// Parameters:
//		class UClass*                                      BaseClass                                                  (Parm)
//		class AActor*                                      Actor                                                      (Parm, OutParm)
//		class UClass*                                      InterfaceClass                                             (OptionalParm, Parm)
void AActor::AllActors(class UClass* BaseClass, class AActor** Actor, class UClass* InterfaceClass)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.AllActors");

	AActor_AllActors_Params params {};
	params.BaseClass = BaseClass;
	params.InterfaceClass = InterfaceClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetURLMap
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString AActor::GetURLMap()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetURLMap");

	AActor_GetURLMap_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PostTeleport
//		Flags  -> ()
// Parameters:
//		class ATeleporter*                                 OutTeleporter                                              (Parm)
void AActor::PostTeleport(class ATeleporter* OutTeleporter)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostTeleport");

	AActor_PostTeleport_Params params {};
	params.OutTeleporter = OutTeleporter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PreTeleport
//		Flags  -> ()
// Parameters:
//		class ATeleporter*                                 InTeleporter                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::PreTeleport(class ATeleporter* InTeleporter)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PreTeleport");

	AActor_PreTeleport_Params params {};
	params.InTeleporter = InTeleporter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetDestination
//		Flags  -> ()
// Parameters:
//		class AController*                                 C                                                          (Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector AActor::GetDestination(class AController* C)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetDestination");

	AActor_GetDestination_Params params {};
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.CalculateMinSpeedTrajectory
//		Flags  -> ()
// Parameters:
//		struct FVector                                     out_Velocity                                               (Parm, OutParm)
//		struct FVector                                     End                                                        (Parm)
//		struct FVector                                     Start                                                      (Parm)
//		float                                              MaxTossSpeed                                               (Parm)
//		float                                              MinTossSpeed                                               (Parm)
//		struct FVector                                     CollisionSize                                              (OptionalParm, Parm)
//		float                                              TerminalVelocity                                           (OptionalParm, Parm)
//		float                                              GravityZ                                                   (OptionalParm, Parm)
//		bool                                               bOnlyTraceUp                                               (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::CalculateMinSpeedTrajectory(struct FVector* out_Velocity, const struct FVector& End, const struct FVector& Start, float MaxTossSpeed, float MinTossSpeed, const struct FVector& CollisionSize, float TerminalVelocity, float GravityZ, bool bOnlyTraceUp)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.CalculateMinSpeedTrajectory");

	AActor_CalculateMinSpeedTrajectory_Params params {};
	params.End = End;
	params.Start = Start;
	params.MaxTossSpeed = MaxTossSpeed;
	params.MinTossSpeed = MinTossSpeed;
	params.CollisionSize = CollisionSize;
	params.TerminalVelocity = TerminalVelocity;
	params.GravityZ = GravityZ;
	params.bOnlyTraceUp = bOnlyTraceUp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Velocity != nullptr)
		*out_Velocity = params.out_Velocity;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SuggestTossVelocity
//		Flags  -> ()
// Parameters:
//		struct FVector                                     TossVelocity                                               (Parm, OutParm)
//		struct FVector                                     Destination                                                (Parm)
//		struct FVector                                     Start                                                      (Parm)
//		float                                              TossSpeed                                                  (Parm)
//		float                                              BaseTossZ                                                  (OptionalParm, Parm)
//		float                                              DesiredZPct                                                (OptionalParm, Parm)
//		struct FVector                                     CollisionSize                                              (OptionalParm, Parm)
//		float                                              TerminalVelocity                                           (OptionalParm, Parm)
//		float                                              OverrideGravityZ                                           (OptionalParm, Parm)
//		bool                                               bOnlyTraceUp                                               (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::SuggestTossVelocity(struct FVector* TossVelocity, const struct FVector& Destination, const struct FVector& Start, float TossSpeed, float BaseTossZ, float DesiredZPct, const struct FVector& CollisionSize, float TerminalVelocity, float OverrideGravityZ, bool bOnlyTraceUp)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SuggestTossVelocity");

	AActor_SuggestTossVelocity_Params params {};
	params.Destination = Destination;
	params.Start = Start;
	params.TossSpeed = TossSpeed;
	params.BaseTossZ = BaseTossZ;
	params.DesiredZPct = DesiredZPct;
	params.CollisionSize = CollisionSize;
	params.TerminalVelocity = TerminalVelocity;
	params.OverrideGravityZ = OverrideGravityZ;
	params.bOnlyTraceUp = bOnlyTraceUp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (TossVelocity != nullptr)
		*TossVelocity = params.TossVelocity;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PlayerCanSeeMe
//		Flags  -> ()
// Parameters:
//		bool                                               bForceLOSCheck                                             (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::PlayerCanSeeMe(bool bForceLOSCheck)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayerCanSeeMe");

	AActor_PlayerCanSeeMe_Params params {};
	params.bForceLOSCheck = bForceLOSCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.MakeNoise
//		Flags  -> ()
// Parameters:
//		float                                              Loudness                                                   (Parm)
//		struct FName                                       NoiseType                                                  (OptionalParm, Parm)
void AActor::MakeNoise(float Loudness, const struct FName& NoiseType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.MakeNoise");

	AActor_MakeNoise_Params params {};
	params.Loudness = Loudness;
	params.NoiseType = NoiseType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ActivateOcclusion
//		Flags  -> ()
// Parameters:
//		bool                                               bInActivate                                                (Parm)
void AActor::ActivateOcclusion(bool bInActivate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActivateOcclusion");

	AActor_ActivateOcclusion_Params params {};
	params.bInActivate = bInActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PostTrigger
//		Flags  -> ()
// Parameters:
//		struct FName                                       InTrigger                                                  (Parm)
void AActor::PostTrigger(const struct FName& InTrigger)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostTrigger");

	AActor_PostTrigger_Params params {};
	params.InTrigger = InTrigger;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetSwitch
//		Flags  -> ()
// Parameters:
//		struct FName                                       InSwitchGroup                                              (Parm)
//		struct FName                                       InSwitch                                                   (Parm)
void AActor::SetSwitch(const struct FName& InSwitchGroup, const struct FName& InSwitch)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetSwitch");

	AActor_SetSwitch_Params params {};
	params.InSwitchGroup = InSwitchGroup;
	params.InSwitch = InSwitch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetState
//		Flags  -> ()
// Parameters:
//		struct FName                                       InStateGroup                                               (Parm)
//		struct FName                                       InState                                                    (Parm)
void AActor::SetState(const struct FName& InStateGroup, const struct FName& InState)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetState");

	AActor_SetState_Params params {};
	params.InStateGroup = InStateGroup;
	params.InState = InState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetRTPCValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       InRTPC                                                     (Parm)
//		float                                              targetvalue                                                (Parm)
void AActor::SetRTPCValue(const struct FName& InRTPC, float targetvalue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetRTPCValue");

	AActor_SetRTPCValue_Params params {};
	params.InRTPC = InRTPC;
	params.targetvalue = targetvalue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PostAkEventOnBone
//		Flags  -> ()
// Parameters:
//		class UAkEvent*                                    InAkEvent                                                  (Parm)
//		struct FName                                       BoneName                                                   (Parm)
void AActor::PostAkEventOnBone(class UAkEvent* InAkEvent, const struct FName& BoneName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostAkEventOnBone");

	AActor_PostAkEventOnBone_Params params {};
	params.InAkEvent = InAkEvent;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PostAkEvent
//		Flags  -> ()
// Parameters:
//		class UAkEvent*                                    InAkEvent                                                  (Parm)
void AActor::PostAkEvent(class UAkEvent* InAkEvent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostAkEvent");

	AActor_PostAkEvent_Params params {};
	params.InAkEvent = InAkEvent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PlaySoundBase
//		Flags  -> ()
// Parameters:
//		class UAkBaseSoundObject*                          InSoundCue                                                 (Parm)
//		bool                                               bNotReplicated                                             (OptionalParm, Parm)
//		bool                                               bNoRepToOwner                                              (OptionalParm, Parm)
//		bool                                               bStopWhenOwnerDestroyed                                    (OptionalParm, Parm)
//		struct FVector                                     SoundLocation                                              (OptionalParm, Parm)
//		bool                                               bNoRepToRelevant                                           (OptionalParm, Parm)
void AActor::PlaySoundBase(class UAkBaseSoundObject* InSoundCue, bool bNotReplicated, bool bNoRepToOwner, bool bStopWhenOwnerDestroyed, const struct FVector& SoundLocation, bool bNoRepToRelevant)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlaySoundBase");

	AActor_PlaySoundBase_Params params {};
	params.InSoundCue = InSoundCue;
	params.bNotReplicated = bNotReplicated;
	params.bNoRepToOwner = bNoRepToOwner;
	params.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	params.SoundLocation = SoundLocation;
	params.bNoRepToRelevant = bNoRepToRelevant;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PlayAkEvent
//		Flags  -> ()
// Parameters:
//		class UAkEvent*                                    InSoundCue                                                 (Parm)
//		bool                                               bNotReplicated                                             (OptionalParm, Parm)
//		bool                                               bNoRepToOwner                                              (OptionalParm, Parm)
//		bool                                               bStopWhenOwnerDestroyed                                    (OptionalParm, Parm)
//		struct FVector                                     SoundLocation                                              (OptionalParm, Parm)
//		bool                                               bNoRepToRelevant                                           (OptionalParm, Parm)
void AActor::PlayAkEvent(class UAkEvent* InSoundCue, bool bNotReplicated, bool bNoRepToOwner, bool bStopWhenOwnerDestroyed, const struct FVector& SoundLocation, bool bNoRepToRelevant)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayAkEvent");

	AActor_PlayAkEvent_Params params {};
	params.InSoundCue = InSoundCue;
	params.bNotReplicated = bNotReplicated;
	params.bNoRepToOwner = bNoRepToOwner;
	params.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	params.SoundLocation = SoundLocation;
	params.bNoRepToRelevant = bNoRepToRelevant;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PlaySound
//		Flags  -> ()
// Parameters:
//		class USoundCue*                                   InSoundCue                                                 (Parm)
//		bool                                               bNotReplicated                                             (OptionalParm, Parm)
//		bool                                               bNoRepToOwner                                              (OptionalParm, Parm)
//		bool                                               bStopWhenOwnerDestroyed                                    (OptionalParm, Parm)
//		struct FVector                                     SoundLocation                                              (OptionalParm, Parm)
//		bool                                               bNoRepToRelevant                                           (OptionalParm, Parm)
void AActor::PlaySound(class USoundCue* InSoundCue, bool bNotReplicated, bool bNoRepToOwner, bool bStopWhenOwnerDestroyed, const struct FVector& SoundLocation, bool bNoRepToRelevant)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlaySound");

	AActor_PlaySound_Params params {};
	params.InSoundCue = InSoundCue;
	params.bNotReplicated = bNotReplicated;
	params.bNoRepToOwner = bNoRepToOwner;
	params.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	params.SoundLocation = SoundLocation;
	params.bNoRepToRelevant = bNoRepToRelevant;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.CreateAudioComponent
//		Flags  -> ()
// Parameters:
//		class USoundCue*                                   InSoundCue                                                 (Parm)
//		bool                                               bPlay                                                      (OptionalParm, Parm)
//		bool                                               bStopWhenOwnerDestroyed                                    (OptionalParm, Parm)
//		bool                                               bUseLocation                                               (OptionalParm, Parm)
//		struct FVector                                     SourceLocation                                             (OptionalParm, Parm)
//		bool                                               bAttachToSelf                                              (OptionalParm, Parm)
//		class UAudioComponent*                             ReturnValue                                                (Parm, OutParm, ReturnParm, EditInline)
class UAudioComponent* AActor::CreateAudioComponent(class USoundCue* InSoundCue, bool bPlay, bool bStopWhenOwnerDestroyed, bool bUseLocation, const struct FVector& SourceLocation, bool bAttachToSelf)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.CreateAudioComponent");

	AActor_CreateAudioComponent_Params params {};
	params.InSoundCue = InSoundCue;
	params.bPlay = bPlay;
	params.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	params.bUseLocation = bUseLocation;
	params.SourceLocation = SourceLocation;
	params.bAttachToSelf = bAttachToSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ResetTimerTimeDilation
//		Flags  -> ()
// Parameters:
//		struct FName                                       TimerName                                                  (Const, Parm)
//		class UObject*                                     inObj                                                      (OptionalParm, Parm)
void AActor::ResetTimerTimeDilation(const struct FName& TimerName, class UObject* inObj)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ResetTimerTimeDilation");

	AActor_ResetTimerTimeDilation_Params params {};
	params.TimerName = TimerName;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ModifyTimerTimeDilation
//		Flags  -> ()
// Parameters:
//		struct FName                                       TimerName                                                  (Const, Parm)
//		float                                              InTimerTimeDilation                                        (Const, Parm)
//		class UObject*                                     inObj                                                      (OptionalParm, Parm)
void AActor::ModifyTimerTimeDilation(const struct FName& TimerName, float InTimerTimeDilation, class UObject* inObj)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ModifyTimerTimeDilation");

	AActor_ModifyTimerTimeDilation_Params params {};
	params.TimerName = TimerName;
	params.InTimerTimeDilation = InTimerTimeDilation;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetRemainingTimeForTimer
//		Flags  -> ()
// Parameters:
//		struct FName                                       TimerFuncName                                              (OptionalParm, Parm)
//		class UObject*                                     inObj                                                      (OptionalParm, Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AActor::GetRemainingTimeForTimer(const struct FName& TimerFuncName, class UObject* inObj)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetRemainingTimeForTimer");

	AActor_GetRemainingTimeForTimer_Params params {};
	params.TimerFuncName = TimerFuncName;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetTimerRate
//		Flags  -> ()
// Parameters:
//		struct FName                                       TimerFuncName                                              (OptionalParm, Parm)
//		class UObject*                                     inObj                                                      (OptionalParm, Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AActor::GetTimerRate(const struct FName& TimerFuncName, class UObject* inObj)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTimerRate");

	AActor_GetTimerRate_Params params {};
	params.TimerFuncName = TimerFuncName;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetTimerCount
//		Flags  -> ()
// Parameters:
//		struct FName                                       inTimerFunc                                                (OptionalParm, Parm)
//		class UObject*                                     inObj                                                      (OptionalParm, Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AActor::GetTimerCount(const struct FName& inTimerFunc, class UObject* inObj)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTimerCount");

	AActor_GetTimerCount_Params params {};
	params.inTimerFunc = inTimerFunc;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.IsTimerActive
//		Flags  -> ()
// Parameters:
//		struct FName                                       inTimerFunc                                                (OptionalParm, Parm)
//		class UObject*                                     inObj                                                      (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::IsTimerActive(const struct FName& inTimerFunc, class UObject* inObj)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsTimerActive");

	AActor_IsTimerActive_Params params {};
	params.inTimerFunc = inTimerFunc;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PauseTimer
//		Flags  -> ()
// Parameters:
//		bool                                               bPause                                                     (Parm)
//		struct FName                                       inTimerFunc                                                (OptionalParm, Parm)
//		class UObject*                                     inObj                                                      (OptionalParm, Parm)
void AActor::PauseTimer(bool bPause, const struct FName& inTimerFunc, class UObject* inObj)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PauseTimer");

	AActor_PauseTimer_Params params {};
	params.bPause = bPause;
	params.inTimerFunc = inTimerFunc;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ClearAllTimers
//		Flags  -> ()
// Parameters:
//		class UObject*                                     inObj                                                      (OptionalParm, Parm)
void AActor::ClearAllTimers(class UObject* inObj)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ClearAllTimers");

	AActor_ClearAllTimers_Params params {};
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ClearTimer
//		Flags  -> ()
// Parameters:
//		struct FName                                       inTimerFunc                                                (OptionalParm, Parm)
//		class UObject*                                     inObj                                                      (OptionalParm, Parm)
void AActor::ClearTimer(const struct FName& inTimerFunc, class UObject* inObj)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ClearTimer");

	AActor_ClearTimer_Params params {};
	params.inTimerFunc = inTimerFunc;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetTimer
//		Flags  -> ()
// Parameters:
//		float                                              InRate                                                     (Parm)
//		bool                                               inbLoop                                                    (OptionalParm, Parm)
//		struct FName                                       inTimerFunc                                                (OptionalParm, Parm)
//		class UObject*                                     inObj                                                      (OptionalParm, Parm)
void AActor::SetTimer(float InRate, bool inbLoop, const struct FName& inTimerFunc, class UObject* inObj)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetTimer");

	AActor_SetTimer_Params params {};
	params.InRate = InRate;
	params.inbLoop = inbLoop;
	params.inTimerFunc = inTimerFunc;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.TornOff
//		Flags  -> ()
void AActor::TornOff()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.TornOff");

	AActor_TornOff_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.Destroy
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::Destroy()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.Destroy");

	AActor_Destroy_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.Spawn
//		Flags  -> ()
// Parameters:
//		class UClass*                                      SpawnClass                                                 (Parm)
//		class AActor*                                      SpawnOwner                                                 (OptionalParm, Parm)
//		struct FName                                       SpawnTag                                                   (OptionalParm, Parm)
//		struct FVector                                     SpawnLocation                                              (OptionalParm, Parm)
//		struct FRotator                                    SpawnRotation                                              (OptionalParm, Parm)
//		class AActor*                                      ActorTemplate                                              (OptionalParm, Parm)
//		bool                                               bNoCollisionFail                                           (OptionalParm, Parm)
//		class AActor*                                      ReturnValue                                                (Parm, OutParm, ReturnParm, CoerceParm)
class AActor* AActor::Spawn(class UClass* SpawnClass, class AActor* SpawnOwner, const struct FName& SpawnTag, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class AActor* ActorTemplate, bool bNoCollisionFail)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.Spawn");

	AActor_Spawn_Params params {};
	params.SpawnClass = SpawnClass;
	params.SpawnOwner = SpawnOwner;
	params.SpawnTag = SpawnTag;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;
	params.ActorTemplate = ActorTemplate;
	params.bNoCollisionFail = bNoCollisionFail;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.IsBlockedBy
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Const, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::IsBlockedBy(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsBlockedBy");

	AActor_IsBlockedBy_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetBoundingCylinder
//		Flags  -> ()
// Parameters:
//		float                                              CollisionRadius                                            (Parm, OutParm)
//		float                                              CollisionHeight                                            (Parm, OutParm)
void AActor::GetBoundingCylinder(float* CollisionRadius, float* CollisionHeight)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetBoundingCylinder");

	AActor_GetBoundingCylinder_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (CollisionRadius != nullptr)
		*CollisionRadius = params.CollisionRadius;
	if (CollisionHeight != nullptr)
		*CollisionHeight = params.CollisionHeight;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetComponentsBoundingBox
//		Flags  -> ()
// Parameters:
//		struct FBox                                        ActorBox                                                   (Parm, OutParm)
void AActor::GetComponentsBoundingBox(struct FBox* ActorBox)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetComponentsBoundingBox");

	AActor_GetComponentsBoundingBox_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ActorBox != nullptr)
		*ActorBox = params.ActorBox;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.IsOverlapping
//		Flags  -> ()
// Parameters:
//		class AActor*                                      A                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::IsOverlapping(class AActor* A)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsOverlapping");

	AActor_IsOverlapping_Params params {};
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ContainsPoint
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Spot                                                       (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::ContainsPoint(const struct FVector& Spot)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ContainsPoint");

	AActor_ContainsPoint_Params params {};
	params.Spot = Spot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.FindSpot
//		Flags  -> ()
// Parameters:
//		struct FVector                                     BoxExtent                                                  (Parm)
//		struct FVector                                     SpotLocation                                               (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::FindSpot(const struct FVector& BoxExtent, struct FVector* SpotLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.FindSpot");

	AActor_FindSpot_Params params {};
	params.BoxExtent = BoxExtent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SpotLocation != nullptr)
		*SpotLocation = params.SpotLocation;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.TraceAllPhysicsAssetInteractions
//		Flags  -> ()
// Parameters:
//		class USkeletalMeshComponent*                      SkelMeshComp                                               (Parm, EditInline)
//		struct FVector                                     EndTrace                                                   (Parm)
//		struct FVector                                     StartTrace                                                 (Parm)
//		TArray<struct FImpactInfo>                         out_Hits                                                   (Parm, OutParm, NeedCtorLink)
//		struct FVector                                     Extent                                                     (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::TraceAllPhysicsAssetInteractions(class USkeletalMeshComponent* SkelMeshComp, const struct FVector& EndTrace, const struct FVector& StartTrace, TArray<struct FImpactInfo>* out_Hits, const struct FVector& Extent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.TraceAllPhysicsAssetInteractions");

	AActor_TraceAllPhysicsAssetInteractions_Params params {};
	params.SkelMeshComp = SkelMeshComp;
	params.EndTrace = EndTrace;
	params.StartTrace = StartTrace;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Hits != nullptr)
		*out_Hits = params.out_Hits;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.FastTrace
//		Flags  -> ()
// Parameters:
//		struct FVector                                     TraceEnd                                                   (Parm)
//		struct FVector                                     TraceStart                                                 (OptionalParm, Parm)
//		struct FVector                                     BoxExtent                                                  (OptionalParm, Parm)
//		bool                                               bTraceBullet                                               (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::FastTrace(const struct FVector& TraceEnd, const struct FVector& TraceStart, const struct FVector& BoxExtent, bool bTraceBullet)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.FastTrace");

	AActor_FastTrace_Params params {};
	params.TraceEnd = TraceEnd;
	params.TraceStart = TraceStart;
	params.BoxExtent = BoxExtent;
	params.bTraceBullet = bTraceBullet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PointCheckComponent
//		Flags  -> ()
// Parameters:
//		class UPrimitiveComponent*                         InComponent                                                (Parm, EditInline)
//		struct FVector                                     PointLocation                                              (Parm)
//		struct FVector                                     PointExtent                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::PointCheckComponent(class UPrimitiveComponent* InComponent, const struct FVector& PointLocation, const struct FVector& PointExtent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PointCheckComponent");

	AActor_PointCheckComponent_Params params {};
	params.InComponent = InComponent;
	params.PointLocation = PointLocation;
	params.PointExtent = PointExtent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.TraceComponent
//		Flags  -> ()
// Parameters:
//		struct FVector                                     HitLocation                                                (Parm, OutParm)
//		struct FVector                                     HitNormal                                                  (Parm, OutParm)
//		class UPrimitiveComponent*                         InComponent                                                (Parm, EditInline)
//		struct FVector                                     TraceEnd                                                   (Parm)
//		struct FVector                                     TraceStart                                                 (OptionalParm, Parm)
//		struct FVector                                     Extent                                                     (OptionalParm, Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (OptionalParm, Parm, OutParm)
//		bool                                               bComplexCollision                                          (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::TraceComponent(struct FVector* HitLocation, struct FVector* HitNormal, class UPrimitiveComponent* InComponent, const struct FVector& TraceEnd, const struct FVector& TraceStart, const struct FVector& Extent, struct FTraceHitInfo* HitInfo, bool bComplexCollision)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.TraceComponent");

	AActor_TraceComponent_Params params {};
	params.InComponent = InComponent;
	params.TraceEnd = TraceEnd;
	params.TraceStart = TraceStart;
	params.Extent = Extent;
	params.bComplexCollision = bComplexCollision;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;
	if (HitInfo != nullptr)
		*HitInfo = params.HitInfo;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.Trace
//		Flags  -> ()
// Parameters:
//		struct FVector                                     HitLocation                                                (Parm, OutParm)
//		struct FVector                                     HitNormal                                                  (Parm, OutParm)
//		struct FVector                                     TraceEnd                                                   (Parm)
//		struct FVector                                     TraceStart                                                 (OptionalParm, Parm)
//		bool                                               bTraceActors                                               (OptionalParm, Parm)
//		struct FVector                                     Extent                                                     (OptionalParm, Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (OptionalParm, Parm, OutParm)
//		int                                                ExtraTraceFlags                                            (OptionalParm, Parm)
//		class AActor*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class AActor* AActor::Trace(struct FVector* HitLocation, struct FVector* HitNormal, const struct FVector& TraceEnd, const struct FVector& TraceStart, bool bTraceActors, const struct FVector& Extent, struct FTraceHitInfo* HitInfo, int ExtraTraceFlags)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.Trace");

	AActor_Trace_Params params {};
	params.TraceEnd = TraceEnd;
	params.TraceStart = TraceStart;
	params.bTraceActors = bTraceActors;
	params.Extent = Extent;
	params.ExtraTraceFlags = ExtraTraceFlags;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;
	if (HitInfo != nullptr)
		*HitInfo = params.HitInfo;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.VolumeBasedDestroy
//		Flags  -> ()
// Parameters:
//		class APhysicsVolume*                              PV                                                         (Parm)
void AActor::VolumeBasedDestroy(class APhysicsVolume* PV)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.VolumeBasedDestroy");

	AActor_VolumeBasedDestroy_Params params {};
	params.PV = PV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.OutsideWorldBounds
//		Flags  -> ()
void AActor::OutsideWorldBounds()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.OutsideWorldBounds");

	AActor_OutsideWorldBounds_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.FellOutOfWorld
//		Flags  -> ()
// Parameters:
//		class UClass*                                      dmgType                                                    (Parm)
void AActor::FellOutOfWorld(class UClass* dmgType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.FellOutOfWorld");

	AActor_FellOutOfWorld_Params params {};
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.UsedBy
//		Flags  -> ()
// Parameters:
//		class APawn*                                       User                                                       (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::UsedBy(class APawn* User)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.UsedBy");

	AActor_UsedBy_Params params {};
	params.User = User;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.OverRotated
//		Flags  -> ()
// Parameters:
//		struct FRotator                                    out_Desired                                                (Parm, OutParm)
//		struct FRotator                                    out_Actual                                                 (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::OverRotated(struct FRotator* out_Desired, struct FRotator* out_Actual)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.OverRotated");

	AActor_OverRotated_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Desired != nullptr)
		*out_Desired = params.out_Desired;
	if (out_Actual != nullptr)
		*out_Actual = params.out_Actual;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ClampRotation
//		Flags  -> ()
// Parameters:
//		struct FRotator                                    out_Rot                                                    (Parm, OutParm)
//		struct FRotator                                    rBase                                                      (Parm)
//		struct FRotator                                    rUpperLimits                                               (Parm)
//		struct FRotator                                    rLowerLimits                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::ClampRotation(struct FRotator* out_Rot, const struct FRotator& rBase, const struct FRotator& rUpperLimits, const struct FRotator& rLowerLimits)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ClampRotation");

	AActor_ClampRotation_Params params {};
	params.rBase = rBase;
	params.rUpperLimits = rUpperLimits;
	params.rLowerLimits = rLowerLimits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Rot != nullptr)
		*out_Rot = params.out_Rot;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.OnSleepRBPhysics
//		Flags  -> ()
void AActor::OnSleepRBPhysics()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnSleepRBPhysics");

	AActor_OnSleepRBPhysics_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.OnWakeRBPhysics
//		Flags  -> ()
void AActor::OnWakeRBPhysics()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnWakeRBPhysics");

	AActor_OnWakeRBPhysics_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.RanInto
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void AActor::RanInto(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.RanInto");

	AActor_RanInto_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.EncroachedBy
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void AActor::EncroachedBy(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.EncroachedBy");

	AActor_EncroachedBy_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.EncroachingOn
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::EncroachingOn(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.EncroachingOn");

	AActor_EncroachingOn_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.CollisionChanged
//		Flags  -> ()
void AActor::CollisionChanged()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.CollisionChanged");

	AActor_CollisionChanged_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SpecialHandling
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		class AActor*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class AActor* AActor::SpecialHandling(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SpecialHandling");

	AActor_SpecialHandling_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.Detach
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void AActor::Detach(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.Detach");

	AActor_Detach_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.Attach
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void AActor::Attach(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.Attach");

	AActor_Attach_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.BaseChange
//		Flags  -> ()
void AActor::BaseChange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.BaseChange");

	AActor_BaseChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.Bump
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		class UPrimitiveComponent*                         OtherComp                                                  (Parm, EditInline)
//		struct FVector                                     HitNormal                                                  (Parm)
void AActor::Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.Bump");

	AActor_Bump_Params params {};
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.UnTouch
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void AActor::UnTouch(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.UnTouch");

	AActor_UnTouch_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PostTouch
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void AActor::PostTouch(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostTouch");

	AActor_PostTouch_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.Touch
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		class UPrimitiveComponent*                         OtherComp                                                  (Parm, EditInline)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     HitNormal                                                  (Parm)
void AActor::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.Touch");

	AActor_Touch_Params params {};
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.PhysicsVolumeChange
//		Flags  -> ()
// Parameters:
//		class APhysicsVolume*                              NewVolume                                                  (Parm)
void AActor::PhysicsVolumeChange(class APhysicsVolume* NewVolume)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.PhysicsVolumeChange");

	AActor_PhysicsVolumeChange_Params params {};
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.Landed
//		Flags  -> ()
// Parameters:
//		struct FVector                                     HitNormal                                                  (Parm)
//		class AActor*                                      FloorActor                                                 (Parm)
void AActor::Landed(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.Landed");

	AActor_Landed_Params params {};
	params.HitNormal = HitNormal;
	params.FloorActor = FloorActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.Falling
//		Flags  -> ()
void AActor::Falling()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.Falling");

	AActor_Falling_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.HitWall
//		Flags  -> ()
// Parameters:
//		struct FVector                                     HitNormal                                                  (Parm)
//		class AActor*                                      Wall                                                       (Parm)
//		class UPrimitiveComponent*                         WallComp                                                   (Parm, EditInline)
void AActor::HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.HitWall");

	AActor_HitWall_Params params {};
	params.HitNormal = HitNormal;
	params.Wall = Wall;
	params.WallComp = WallComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.Timer
//		Flags  -> ()
void AActor::Timer()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.Timer");

	AActor_Timer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.Tick
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
void AActor::Tick(float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.Tick");

	AActor_Tick_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.LostChild
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void AActor::LostChild(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.LostChild");

	AActor_LostChild_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GainedChild
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void AActor::GainedChild(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GainedChild");

	AActor_GainedChild_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.Destroyed
//		Flags  -> ()
void AActor::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.Destroyed");

	AActor_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetTickIsDisabled
//		Flags  -> ()
// Parameters:
//		bool                                               bInDisabled                                                (Parm)
void AActor::SetTickIsDisabled(bool bInDisabled)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetTickIsDisabled");

	AActor_SetTickIsDisabled_Params params {};
	params.bInDisabled = bInDisabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetTickGroup
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Core_ETickingGroup>                    NewTickGroup                                               (Parm)
void AActor::SetTickGroup(TEnumAsByte<Core_ETickingGroup> NewTickGroup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetTickGroup");

	AActor_SetTickGroup_Params params {};
	params.NewTickGroup = NewTickGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ReattachComponent
//		Flags  -> ()
// Parameters:
//		class UActorComponent*                             ComponentToReattach                                        (Parm, EditInline)
void AActor::ReattachComponent(class UActorComponent* ComponentToReattach)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReattachComponent");

	AActor_ReattachComponent_Params params {};
	params.ComponentToReattach = ComponentToReattach;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.DetachComponent
//		Flags  -> ()
// Parameters:
//		class UActorComponent*                             ExComponent                                                (Parm, EditInline)
void AActor::DetachComponent(class UActorComponent* ExComponent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.DetachComponent");

	AActor_DetachComponent_Params params {};
	params.ExComponent = ExComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.AttachComponent
//		Flags  -> ()
// Parameters:
//		class UActorComponent*                             NewComponent                                               (Parm, EditInline)
void AActor::AttachComponent(class UActorComponent* NewComponent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.AttachComponent");

	AActor_AttachComponent_Params params {};
	params.NewComponent = NewComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.UnClock
//		Flags  -> ()
// Parameters:
//		float                                              Time                                                       (Parm, OutParm)
void AActor::UnClock(float* Time)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.UnClock");

	AActor_UnClock_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Time != nullptr)
		*Time = params.Time;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.Clock
//		Flags  -> ()
// Parameters:
//		float                                              Time                                                       (Parm, OutParm)
void AActor::Clock(float* Time)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.Clock");

	AActor_Clock_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Time != nullptr)
		*Time = params.Time;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetPhysics
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_EPhysics>                       newPhysics                                                 (Parm)
void AActor::SetPhysics(TEnumAsByte<Engine_EPhysics> newPhysics)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetPhysics");

	AActor_SetPhysics_Params params {};
	params.newPhysics = newPhysics;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetOnlyOwnerSee
//		Flags  -> ()
// Parameters:
//		bool                                               bNewOnlyOwnerSee                                           (Parm)
void AActor::SetOnlyOwnerSee(bool bNewOnlyOwnerSee)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetOnlyOwnerSee");

	AActor_SetOnlyOwnerSee_Params params {};
	params.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetHidden
//		Flags  -> ()
// Parameters:
//		bool                                               bNewHidden                                                 (Parm)
void AActor::SetHidden(bool bNewHidden)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetHidden");

	AActor_SetHidden_Params params {};
	params.bNewHidden = bNewHidden;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ChartData
//		Flags  -> ()
// Parameters:
//		struct FString                                     DataName                                                   (Parm, NeedCtorLink)
//		float                                              DataValue                                                  (Parm)
void AActor::ChartData(const struct FString& DataName, float DataValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ChartData");

	AActor_ChartData_Params params {};
	params.DataName = DataName;
	params.DataValue = DataValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.FlushDebugStrings
//		Flags  -> ()
void AActor::FlushDebugStrings()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.FlushDebugStrings");

	AActor_FlushDebugStrings_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.DrawDebugFrustrum
//		Flags  -> ()
// Parameters:
//		struct FMatrix                                     FrustumToWorld                                             (Const, Parm, OutParm)
//		unsigned char                                      R                                                          (Parm)
//		unsigned char                                      G                                                          (Parm)
//		unsigned char                                      B                                                          (Parm)
//		bool                                               bPersistentLines                                           (OptionalParm, Parm)
void AActor::DrawDebugFrustrum(struct FMatrix* FrustumToWorld, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugFrustrum");

	AActor_DrawDebugFrustrum_Params params {};
	params.R = R;
	params.G = G;
	params.B = B;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (FrustumToWorld != nullptr)
		*FrustumToWorld = params.FrustumToWorld;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.DrawDebugString
//		Flags  -> ()
// Parameters:
//		struct FVector                                     TextLocation                                               (Parm)
//		struct FString                                     Text                                                       (Parm, CoerceParm, NeedCtorLink)
//		class AActor*                                      TestBaseActor                                              (OptionalParm, Parm)
//		struct FColor                                      TextColor                                                  (OptionalParm, Parm)
//		float                                              Duration                                                   (OptionalParm, Parm)
void AActor::DrawDebugString(const struct FVector& TextLocation, const struct FString& Text, class AActor* TestBaseActor, const struct FColor& TextColor, float Duration)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugString");

	AActor_DrawDebugString_Params params {};
	params.TextLocation = TextLocation;
	params.Text = Text;
	params.TestBaseActor = TestBaseActor;
	params.TextColor = TextColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.DrawDebugCone
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Origin                                                     (Parm)
//		struct FVector                                     Direction                                                  (Parm)
//		float                                              Length                                                     (Parm)
//		float                                              AngleWidth                                                 (Parm)
//		float                                              AngleHeight                                                (Parm)
//		int                                                NumSides                                                   (Parm)
//		struct FColor                                      DrawColor                                                  (Parm)
//		bool                                               bPersistentLines                                           (OptionalParm, Parm)
void AActor::DrawDebugCone(const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FColor& DrawColor, bool bPersistentLines)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugCone");

	AActor_DrawDebugCone_Params params {};
	params.Origin = Origin;
	params.Direction = Direction;
	params.Length = Length;
	params.AngleWidth = AngleWidth;
	params.AngleHeight = AngleHeight;
	params.NumSides = NumSides;
	params.DrawColor = DrawColor;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.DrawDebugCylinder
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Start                                                      (Parm)
//		struct FVector                                     End                                                        (Parm)
//		float                                              Radius                                                     (Parm)
//		int                                                Segments                                                   (Parm)
//		unsigned char                                      R                                                          (Parm)
//		unsigned char                                      G                                                          (Parm)
//		unsigned char                                      B                                                          (Parm)
//		bool                                               bPersistentLines                                           (OptionalParm, Parm)
void AActor::DrawDebugCylinder(const struct FVector& Start, const struct FVector& End, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugCylinder");

	AActor_DrawDebugCylinder_Params params {};
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.Segments = Segments;
	params.R = R;
	params.G = G;
	params.B = B;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.DrawDebugSphere
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Center                                                     (Parm)
//		float                                              Radius                                                     (Parm)
//		int                                                Segments                                                   (Parm)
//		unsigned char                                      R                                                          (Parm)
//		unsigned char                                      G                                                          (Parm)
//		unsigned char                                      B                                                          (Parm)
//		bool                                               bPersistentLines                                           (OptionalParm, Parm)
void AActor::DrawDebugSphere(const struct FVector& Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugSphere");

	AActor_DrawDebugSphere_Params params {};
	params.Center = Center;
	params.Radius = Radius;
	params.Segments = Segments;
	params.R = R;
	params.G = G;
	params.B = B;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.DrawDebugCoordinateSystem
//		Flags  -> ()
// Parameters:
//		struct FVector                                     AxisLoc                                                    (Parm)
//		struct FRotator                                    AxisRot                                                    (Parm)
//		float                                              Scale                                                      (Parm)
//		bool                                               bPersistentLines                                           (OptionalParm, Parm)
void AActor::DrawDebugCoordinateSystem(const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, bool bPersistentLines)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugCoordinateSystem");

	AActor_DrawDebugCoordinateSystem_Params params {};
	params.AxisLoc = AxisLoc;
	params.AxisRot = AxisRot;
	params.Scale = Scale;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.DrawDebugStar
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Position                                                   (Parm)
//		float                                              Size                                                       (Parm)
//		unsigned char                                      R                                                          (Parm)
//		unsigned char                                      G                                                          (Parm)
//		unsigned char                                      B                                                          (Parm)
//		bool                                               bPersistentLines                                           (OptionalParm, Parm)
void AActor::DrawDebugStar(const struct FVector& Position, float Size, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugStar");

	AActor_DrawDebugStar_Params params {};
	params.Position = Position;
	params.Size = Size;
	params.R = R;
	params.G = G;
	params.B = B;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.DrawDebugBox
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Center                                                     (Parm)
//		struct FVector                                     Extent                                                     (Parm)
//		unsigned char                                      R                                                          (Parm)
//		unsigned char                                      G                                                          (Parm)
//		unsigned char                                      B                                                          (Parm)
//		bool                                               bPersistentLines                                           (OptionalParm, Parm)
void AActor::DrawDebugBox(const struct FVector& Center, const struct FVector& Extent, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugBox");

	AActor_DrawDebugBox_Params params {};
	params.Center = Center;
	params.Extent = Extent;
	params.R = R;
	params.G = G;
	params.B = B;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.DrawDebugPoint
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Position                                                   (Parm)
//		float                                              Size                                                       (Parm)
//		struct FLinearColor                                PointColor                                                 (Parm)
//		bool                                               bPersistentLines                                           (OptionalParm, Parm)
void AActor::DrawDebugPoint(const struct FVector& Position, float Size, const struct FLinearColor& PointColor, bool bPersistentLines)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugPoint");

	AActor_DrawDebugPoint_Params params {};
	params.Position = Position;
	params.Size = Size;
	params.PointColor = PointColor;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.DrawDebugLine
//		Flags  -> ()
// Parameters:
//		struct FVector                                     LineStart                                                  (Parm)
//		struct FVector                                     LineEnd                                                    (Parm)
//		unsigned char                                      R                                                          (Parm)
//		unsigned char                                      G                                                          (Parm)
//		unsigned char                                      B                                                          (Parm)
//		bool                                               bPersistentLines                                           (OptionalParm, Parm)
void AActor::DrawDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugLine");

	AActor_DrawDebugLine_Params params {};
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.R = R;
	params.G = G;
	params.B = B;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.FlushPersistentDebugLines
//		Flags  -> ()
void AActor::FlushPersistentDebugLines()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.FlushPersistentDebugLines");

	AActor_FlushPersistentDebugLines_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetBasedPosition
//		Flags  -> ()
// Parameters:
//		struct FBasedPosition                              BP                                                         (Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector AActor::GetBasedPosition(const struct FBasedPosition& BP)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetBasedPosition");

	AActor_GetBasedPosition_Params params {};
	params.BP = BP;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetBasedPosition
//		Flags  -> ()
// Parameters:
//		struct FBasedPosition                              BP                                                         (Parm, OutParm)
//		struct FVector                                     pos                                                        (Parm)
//		class AActor*                                      ForcedBase                                                 (OptionalParm, Parm)
void AActor::SetBasedPosition(struct FBasedPosition* BP, const struct FVector& pos, class AActor* ForcedBase)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetBasedPosition");

	AActor_SetBasedPosition_Params params {};
	params.pos = pos;
	params.ForcedBase = ForcedBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (BP != nullptr)
		*BP = params.BP;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.BP2Vect
//		Flags  -> ()
// Parameters:
//		struct FBasedPosition                              BP                                                         (Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector AActor::BP2Vect(const struct FBasedPosition& BP)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.BP2Vect");

	AActor_BP2Vect_Params params {};
	params.BP = BP;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.Vect2BP
//		Flags  -> ()
// Parameters:
//		struct FBasedPosition                              BP                                                         (Parm, OutParm)
//		struct FVector                                     pos                                                        (Parm)
//		class AActor*                                      ForcedBase                                                 (OptionalParm, Parm)
void AActor::Vect2BP(struct FBasedPosition* BP, const struct FVector& pos, class AActor* ForcedBase)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.Vect2BP");

	AActor_Vect2BP_Params params {};
	params.pos = pos;
	params.ForcedBase = ForcedBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (BP != nullptr)
		*BP = params.BP;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetForcedInitialReplicatedProperty
//		Flags  -> ()
// Parameters:
//		class UProperty*                                   PropToReplicate                                            (Parm)
//		bool                                               bAdd                                                       (Parm)
void AActor::SetForcedInitialReplicatedProperty(class UProperty* PropToReplicate, bool bAdd)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetForcedInitialReplicatedProperty");

	AActor_SetForcedInitialReplicatedProperty_Params params {};
	params.PropToReplicate = PropToReplicate;
	params.bAdd = bAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void AActor::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReplicatedEvent");

	AActor_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetAggregateBaseVelocity
//		Flags  -> ()
// Parameters:
//		class AActor*                                      TestBase                                                   (OptionalParm, Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector AActor::GetAggregateBaseVelocity(class AActor* TestBase)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAggregateBaseVelocity");

	AActor_GetAggregateBaseVelocity_Params params {};
	params.TestBase = TestBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.IsOwnedBy
//		Flags  -> ()
// Parameters:
//		class AActor*                                      TestActor                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::IsOwnedBy(class AActor* TestActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsOwnedBy");

	AActor_IsOwnedBy_Params params {};
	params.TestActor = TestActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetBaseMost
//		Flags  -> ()
// Parameters:
//		class AActor*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class AActor* AActor::GetBaseMost()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetBaseMost");

	AActor_GetBaseMost_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.IsBasedOn
//		Flags  -> ()
// Parameters:
//		class AActor*                                      TestActor                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::IsBasedOn(class AActor* TestActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsBasedOn");

	AActor_IsBasedOn_Params params {};
	params.TestActor = TestActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SearchForBaseBelow
//		Flags  -> ()
// Parameters:
//		float                                              HeightBelow                                                (Parm)
//		class AActor*                                      NewBase                                                    (Parm, OutParm)
//		struct FVector                                     HitNormal                                                  (Parm, OutParm)
void AActor::SearchForBaseBelow(float HeightBelow, class AActor** NewBase, struct FVector* HitNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SearchForBaseBelow");

	AActor_SearchForBaseBelow_Params params {};
	params.HeightBelow = HeightBelow;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (NewBase != nullptr)
		*NewBase = params.NewBase;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.FindBase
//		Flags  -> ()
void AActor::FindBase()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.FindBase");

	AActor_FindBase_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetOwner
//		Flags  -> ()
// Parameters:
//		class AActor*                                      NewOwner                                                   (Parm)
void AActor::SetOwner(class AActor* NewOwner)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetOwner");

	AActor_SetOwner_Params params {};
	params.NewOwner = NewOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetBase
//		Flags  -> ()
// Parameters:
//		class AActor*                                      NewBase                                                    (Parm)
//		struct FVector                                     NewFloor                                                   (OptionalParm, Parm)
//		class USkeletalMeshComponent*                      SkelComp                                                   (OptionalParm, Parm, EditInline)
//		struct FName                                       AttachName                                                 (OptionalParm, Parm)
void AActor::SetBase(class AActor* NewBase, const struct FVector& NewFloor, class USkeletalMeshComponent* SkelComp, const struct FName& AttachName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetBase");

	AActor_SetBase_Params params {};
	params.NewBase = NewBase;
	params.NewFloor = NewFloor;
	params.SkelComp = SkelComp;
	params.AttachName = AttachName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.GetTerminalVelocity
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AActor::GetTerminalVelocity()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTerminalVelocity");

	AActor_GetTerminalVelocity_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.AutonomousPhysics
//		Flags  -> ()
// Parameters:
//		float                                              DeltaSeconds                                               (Parm)
void AActor::AutonomousPhysics(float DeltaSeconds)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.AutonomousPhysics");

	AActor_AutonomousPhysics_Params params {};
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.MoveSmooth
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Delta                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::MoveSmooth(const struct FVector& Delta)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.MoveSmooth");

	AActor_MoveSmooth_Params params {};
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.fixedTurn
//		Flags  -> ()
// Parameters:
//		int                                                Current                                                    (Parm)
//		int                                                Desired                                                    (Parm)
//		int                                                DeltaRate                                                  (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int AActor::fixedTurn(int Current, int Desired, int DeltaRate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.fixedTurn");

	AActor_fixedTurn_Params params {};
	params.Current = Current;
	params.Desired = Desired;
	params.DeltaRate = DeltaRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetShadowParentOnAllAttachedComponents
//		Flags  -> ()
// Parameters:
//		class UPrimitiveComponent*                         MyPrimComp                                                 (Parm, EditInline)
//		class ULightEnvironmentComponent*                  MyLightEnv                                                 (Parm, EditInline)
void AActor::SetShadowParentOnAllAttachedComponents(class UPrimitiveComponent* MyPrimComp, class ULightEnvironmentComponent* MyLightEnv)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetShadowParentOnAllAttachedComponents");

	AActor_SetShadowParentOnAllAttachedComponents_Params params {};
	params.MyPrimComp = MyPrimComp;
	params.MyLightEnv = MyLightEnv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetHardAttach
//		Flags  -> ()
// Parameters:
//		bool                                               bNewHardAttach                                             (OptionalParm, Parm)
void AActor::SetHardAttach(bool bNewHardAttach)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetHardAttach");

	AActor_SetHardAttach_Params params {};
	params.bNewHardAttach = bNewHardAttach;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetRelativeLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewLocation                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::SetRelativeLocation(const struct FVector& NewLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetRelativeLocation");

	AActor_SetRelativeLocation_Params params {};
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetRelativeRotation
//		Flags  -> ()
// Parameters:
//		struct FRotator                                    NewRotation                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::SetRelativeRotation(const struct FRotator& NewRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetRelativeRotation");

	AActor_SetRelativeRotation_Params params {};
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetZone
//		Flags  -> ()
// Parameters:
//		bool                                               bForceRefresh                                              (Parm)
void AActor::SetZone(bool bForceRefresh)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetZone");

	AActor_SetZone_Params params {};
	params.bForceRefresh = bForceRefresh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.MovingWhichWay
//		Flags  -> ()
// Parameters:
//		float                                              Amount                                                     (Parm, OutParm)
//		TEnumAsByte<Engine_EMoveDir>                       ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_EMoveDir> AActor::MovingWhichWay(float* Amount)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.MovingWhichWay");

	AActor_MovingWhichWay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Amount != nullptr)
		*Amount = params.Amount;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetRotation
//		Flags  -> ()
// Parameters:
//		struct FRotator                                    NewRotation                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::SetRotation(const struct FRotator& NewRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetRotation");

	AActor_SetRotation_Params params {};
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewLocation                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::SetLocation(const struct FVector& NewLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetLocation");

	AActor_SetLocation_Params params {};
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.Move
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Delta                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AActor::Move(const struct FVector& Delta)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.Move");

	AActor_Move_Params params {};
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetDrawScale3D
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewScale3D                                                 (Parm)
void AActor::SetDrawScale3D(const struct FVector& NewScale3D)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetDrawScale3D");

	AActor_SetDrawScale3D_Params params {};
	params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetDrawScale
//		Flags  -> ()
// Parameters:
//		float                                              NewScale                                                   (Parm)
void AActor::SetDrawScale(float NewScale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetDrawScale");

	AActor_SetDrawScale_Params params {};
	params.NewScale = NewScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetCollisionType
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ECollisionType>                 NewCollisionType                                           (Parm)
void AActor::SetCollisionType(TEnumAsByte<Engine_ECollisionType> NewCollisionType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetCollisionType");

	AActor_SetCollisionType_Params params {};
	params.NewCollisionType = NewCollisionType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetCollisionSize
//		Flags  -> ()
// Parameters:
//		float                                              NewRadius                                                  (Parm)
//		float                                              NewHeight                                                  (Parm)
void AActor::SetCollisionSize(float NewRadius, float NewHeight)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetCollisionSize");

	AActor_SetCollisionSize_Params params {};
	params.NewRadius = NewRadius;
	params.NewHeight = NewHeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.SetCollision
//		Flags  -> ()
// Parameters:
//		bool                                               bNewColActors                                              (OptionalParm, Parm)
//		bool                                               bNewBlockActors                                            (OptionalParm, Parm)
//		bool                                               bNewIgnoreEncroachers                                      (OptionalParm, Parm)
void AActor::SetCollision(bool bNewColActors, bool bNewBlockActors, bool bNewIgnoreEncroachers)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetCollision");

	AActor_SetCollision_Params params {};
	params.bNewColActors = bNewColActors;
	params.bNewBlockActors = bNewBlockActors;
	params.bNewIgnoreEncroachers = bNewIgnoreEncroachers;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.FinishAnim
//		Flags  -> ()
// Parameters:
//		class UAnimNodeSequence*                           SeqNode                                                    (Parm)
//		bool                                               bFinishOnBlendOut                                          (OptionalParm, Parm)
void AActor::FinishAnim(class UAnimNodeSequence* SeqNode, bool bFinishOnBlendOut)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.FinishAnim");

	AActor_FinishAnim_Params params {};
	params.SeqNode = SeqNode;
	params.bFinishOnBlendOut = bFinishOnBlendOut;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.Sleep
//		Flags  -> ()
// Parameters:
//		float                                              Seconds                                                    (Parm)
void AActor::Sleep(float Seconds)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.Sleep");

	AActor_Sleep_Params params {};
	params.Seconds = Seconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ConsoleCommand
//		Flags  -> ()
// Parameters:
//		struct FString                                     Command                                                    (Parm, NeedCtorLink)
//		bool                                               bWriteToLog                                                (OptionalParm, Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString AActor::ConsoleCommand(const struct FString& Command, bool bWriteToLog)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ConsoleCommand");

	AActor_ConsoleCommand_Params params {};
	params.Command = Command;
	params.bWriteToLog = bWriteToLog;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Actor.ForceUpdateComponents
//		Flags  -> ()
// Parameters:
//		bool                                               bCollisionUpdate                                           (OptionalParm, Parm)
//		bool                                               bTransformOnly                                             (OptionalParm, Parm)
void AActor::ForceUpdateComponents(bool bCollisionUpdate, bool bTransformOnly)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Actor.ForceUpdateComponents");

	AActor_ForceUpdateComponents_Params params {};
	params.bCollisionUpdate = bCollisionUpdate;
	params.bTransformOnly = bTransformOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.ClearObjectPools
//		Flags  -> ()
void AWorldInfo::ClearObjectPools()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ClearObjectPools");

	AWorldInfo_ClearObjectPools_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.ToggleHostMigration
//		Flags  -> ()
// Parameters:
//		bool                                               bEnabled                                                   (Parm)
void AWorldInfo::ToggleHostMigration(bool bEnabled)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ToggleHostMigration");

	AWorldInfo_ToggleHostMigration_Params params {};
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.NotifyHostMigrationStateChanged
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_EHostMigrationProgress>         NewState                                                   (Parm)
//		TEnumAsByte<Engine_EHostMigrationProgress>         OldState                                                   (Parm)
void AWorldInfo::NotifyHostMigrationStateChanged(TEnumAsByte<Engine_EHostMigrationProgress> NewState, TEnumAsByte<Engine_EHostMigrationProgress> OldState)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.NotifyHostMigrationStateChanged");

	AWorldInfo_NotifyHostMigrationStateChanged_Params params {};
	params.NewState = NewState;
	params.OldState = OldState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.BeginHostMigration
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWorldInfo::BeginHostMigration()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.BeginHostMigration");

	AWorldInfo_BeginHostMigration_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.CanBeginHostMigration
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWorldInfo::CanBeginHostMigration()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.CanBeginHostMigration");

	AWorldInfo_CanBeginHostMigration_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.FindEnvironmentVolume
//		Flags  -> ()
// Parameters:
//		struct FVector                                     TestLocation                                               (Parm)
//		class AEnvironmentVolume*                          ReturnValue                                                (Parm, OutParm, ReturnParm)
class AEnvironmentVolume* AWorldInfo::FindEnvironmentVolume(const struct FVector& TestLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.FindEnvironmentVolume");

	AWorldInfo_FindEnvironmentVolume_Params params {};
	params.TestLocation = TestLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.GetWorldInfo
//		Flags  -> ()
// Parameters:
//		class AWorldInfo*                                  ReturnValue                                                (Parm, OutParm, ReturnParm)
class AWorldInfo* AWorldInfo::GetWorldInfo()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetWorldInfo");

	AWorldInfo_GetWorldInfo_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.GetWorldFractureSettings
//		Flags  -> ()
// Parameters:
//		struct FWorldFractureSettings                      ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FWorldFractureSettings AWorldInfo::GetWorldFractureSettings()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetWorldFractureSettings");

	AWorldInfo_GetWorldFractureSettings_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.DoMemoryTracking
//		Flags  -> ()
void AWorldInfo::DoMemoryTracking()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.DoMemoryTracking");

	AWorldInfo_DoMemoryTracking_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.GetDemoRewindPoints
//		Flags  -> ()
// Parameters:
//		TArray<int>                                        OutRewindPoints                                            (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWorldInfo::GetDemoRewindPoints(TArray<int>* OutRewindPoints)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetDemoRewindPoints");

	AWorldInfo_GetDemoRewindPoints_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutRewindPoints != nullptr)
		*OutRewindPoints = params.OutRewindPoints;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.GetDemoFrameInfo
//		Flags  -> ()
// Parameters:
//		int                                                CurrentFrame                                               (OptionalParm, Parm, OutParm)
//		int                                                TotalFrames                                                (OptionalParm, Parm, OutParm)
void AWorldInfo::GetDemoFrameInfo(int* CurrentFrame, int* TotalFrames)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetDemoFrameInfo");

	AWorldInfo_GetDemoFrameInfo_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (CurrentFrame != nullptr)
		*CurrentFrame = params.CurrentFrame;
	if (TotalFrames != nullptr)
		*TotalFrames = params.TotalFrames;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.IsPlayingDemo
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWorldInfo::IsPlayingDemo()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsPlayingDemo");

	AWorldInfo_IsPlayingDemo_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.IsRecordingDemo
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWorldInfo::IsRecordingDemo()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsRecordingDemo");

	AWorldInfo_IsRecordingDemo_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.GetDetailMode
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_EDetailMode>                    ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_EDetailMode> AWorldInfo::GetDetailMode()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetDetailMode");

	AWorldInfo_GetDetailMode_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.GetMapName
//		Flags  -> ()
// Parameters:
//		bool                                               bIncludePrefix                                             (OptionalParm, Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString AWorldInfo::GetMapName(bool bIncludePrefix)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetMapName");

	AWorldInfo_GetMapName_Params params {};
	params.bIncludePrefix = bIncludePrefix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.SetMapInfo
//		Flags  -> ()
// Parameters:
//		class UMapInfo*                                    NewMapInfo                                                 (Parm)
void AWorldInfo::SetMapInfo(class UMapInfo* NewMapInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.SetMapInfo");

	AWorldInfo_SetMapInfo_Params params {};
	params.NewMapInfo = NewMapInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.GetMapInfo
//		Flags  -> ()
// Parameters:
//		class UMapInfo*                                    ReturnValue                                                (Parm, OutParm, ReturnParm)
class UMapInfo* AWorldInfo::GetMapInfo()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetMapInfo");

	AWorldInfo_GetMapInfo_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.SetSeamlessTravelMidpointPause
//		Flags  -> ()
// Parameters:
//		bool                                               bNowPaused                                                 (Parm)
void AWorldInfo::SetSeamlessTravelMidpointPause(bool bNowPaused)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.SetSeamlessTravelMidpointPause");

	AWorldInfo_SetSeamlessTravelMidpointPause_Params params {};
	params.bNowPaused = bNowPaused;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.IsInSeamlessTravel
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWorldInfo::IsInSeamlessTravel()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsInSeamlessTravel");

	AWorldInfo_IsInSeamlessTravel_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.SeamlessTravel
//		Flags  -> ()
// Parameters:
//		struct FString                                     URL                                                        (Parm, NeedCtorLink)
//		bool                                               bAbsolute                                                  (OptionalParm, Parm)
//		struct FGuid                                       MapPackageGuid                                             (OptionalParm, Parm, AlwaysInit)
void AWorldInfo::SeamlessTravel(const struct FString& URL, bool bAbsolute, const struct FGuid& MapPackageGuid)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.SeamlessTravel");

	AWorldInfo_SeamlessTravel_Params params {};
	params.URL = URL;
	params.bAbsolute = bAbsolute;
	params.MapPackageGuid = MapPackageGuid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.CommitMapChange
//		Flags  -> ()
void AWorldInfo::CommitMapChange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.CommitMapChange");

	AWorldInfo_CommitMapChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.CancelPendingMapChange
//		Flags  -> ()
void AWorldInfo::CancelPendingMapChange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.CancelPendingMapChange");

	AWorldInfo_CancelPendingMapChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.IsMapChangeReady
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWorldInfo::IsMapChangeReady()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsMapChangeReady");

	AWorldInfo_IsMapChangeReady_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.IsPreparingMapChange
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWorldInfo::IsPreparingMapChange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsPreparingMapChange");

	AWorldInfo_IsPreparingMapChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.PrepareMapChange
//		Flags  -> ()
// Parameters:
//		TArray<struct FName>                               LevelNames                                                 (Const, Parm, OutParm, NeedCtorLink)
void AWorldInfo::PrepareMapChange(TArray<struct FName>* LevelNames)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.PrepareMapChange");

	AWorldInfo_PrepareMapChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (LevelNames != nullptr)
		*LevelNames = params.LevelNames;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.NotifyMatchStarted
//		Flags  -> ()
// Parameters:
//		bool                                               bShouldActivateLevelStartupEvents                          (OptionalParm, Parm)
//		bool                                               bShouldActivateLevelBeginningEvents                        (OptionalParm, Parm)
//		bool                                               bShouldActivateLevelLoadedEvents                           (OptionalParm, Parm)
void AWorldInfo::NotifyMatchStarted(bool bShouldActivateLevelStartupEvents, bool bShouldActivateLevelBeginningEvents, bool bShouldActivateLevelLoadedEvents)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.NotifyMatchStarted");

	AWorldInfo_NotifyMatchStarted_Params params {};
	params.bShouldActivateLevelStartupEvents = bShouldActivateLevelStartupEvents;
	params.bShouldActivateLevelBeginningEvents = bShouldActivateLevelBeginningEvents;
	params.bShouldActivateLevelLoadedEvents = bShouldActivateLevelLoadedEvents;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.AllClientConnections
//		Flags  -> ()
// Parameters:
//		class UPlayer*                                     ClientConnection                                           (Parm, OutParm)
//		int                                                ClientIP                                                   (Parm, OutParm)
//		int                                                ClientPort                                                 (Parm, OutParm)
void AWorldInfo::AllClientConnections(class UPlayer** ClientConnection, int* ClientIP, int* ClientPort)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.AllClientConnections");

	AWorldInfo_AllClientConnections_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ClientConnection != nullptr)
		*ClientConnection = params.ClientConnection;
	if (ClientIP != nullptr)
		*ClientIP = params.ClientIP;
	if (ClientPort != nullptr)
		*ClientPort = params.ClientPort;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.AllPawns
//		Flags  -> ()
// Parameters:
//		class UClass*                                      BaseClass                                                  (Parm)
//		class APawn*                                       P                                                          (Parm, OutParm)
//		struct FVector                                     TestLocation                                               (OptionalParm, Parm)
//		float                                              TestRadius                                                 (OptionalParm, Parm)
void AWorldInfo::AllPawns(class UClass* BaseClass, class APawn** P, const struct FVector& TestLocation, float TestRadius)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.AllPawns");

	AWorldInfo_AllPawns_Params params {};
	params.BaseClass = BaseClass;
	params.TestLocation = TestLocation;
	params.TestRadius = TestRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (P != nullptr)
		*P = params.P;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.AllControllers
//		Flags  -> ()
// Parameters:
//		class UClass*                                      BaseClass                                                  (Parm)
//		class AController*                                 C                                                          (Parm, OutParm)
void AWorldInfo::AllControllers(class UClass* BaseClass, class AController** C)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.AllControllers");

	AWorldInfo_AllControllers_Params params {};
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (C != nullptr)
		*C = params.C;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.NavigationPointCheck
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Point                                                      (Parm)
//		struct FVector                                     Extent                                                     (Parm)
//		TArray<class ANavigationPoint*>                    Navs                                                       (OptionalParm, Parm, OutParm, NeedCtorLink)
//		TArray<class UReachSpec*>                          Specs                                                      (OptionalParm, Parm, OutParm, NeedCtorLink)
void AWorldInfo::NavigationPointCheck(const struct FVector& Point, const struct FVector& Extent, TArray<class ANavigationPoint*>* Navs, TArray<class UReachSpec*>* Specs)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.NavigationPointCheck");

	AWorldInfo_NavigationPointCheck_Params params {};
	params.Point = Point;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Navs != nullptr)
		*Navs = params.Navs;
	if (Specs != nullptr)
		*Specs = params.Specs;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.RadiusNavigationPoints
//		Flags  -> ()
// Parameters:
//		class UClass*                                      BaseClass                                                  (Parm)
//		class ANavigationPoint*                            N                                                          (Parm, OutParm)
//		struct FVector                                     Point                                                      (Parm)
//		float                                              Radius                                                     (Parm)
void AWorldInfo::RadiusNavigationPoints(class UClass* BaseClass, class ANavigationPoint** N, const struct FVector& Point, float Radius)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.RadiusNavigationPoints");

	AWorldInfo_RadiusNavigationPoints_Params params {};
	params.BaseClass = BaseClass;
	params.Point = Point;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (N != nullptr)
		*N = params.N;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.AllNavigationPoints
//		Flags  -> ()
// Parameters:
//		class UClass*                                      BaseClass                                                  (Parm)
//		class ANavigationPoint*                            N                                                          (Parm, OutParm)
void AWorldInfo::AllNavigationPoints(class UClass* BaseClass, class ANavigationPoint** N)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.AllNavigationPoints");

	AWorldInfo_AllNavigationPoints_Params params {};
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (N != nullptr)
		*N = params.N;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.Reset
//		Flags  -> ()
void AWorldInfo::Reset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.Reset");

	AWorldInfo_Reset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.PostBeginPlay
//		Flags  -> ()
void AWorldInfo::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.PostBeginPlay");

	AWorldInfo_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.PreBeginPlay
//		Flags  -> ()
// Parameters:
void AWorldInfo::PreBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.PreBeginPlay");

	AWorldInfo_PreBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.ThisIsNeverExecuted
//		Flags  -> ()
// Parameters:
//		class ADefaultPhysicsVolume*                       P                                                          (Parm)
void AWorldInfo::ThisIsNeverExecuted(class ADefaultPhysicsVolume* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ThisIsNeverExecuted");

	AWorldInfo_ThisIsNeverExecuted_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.ServerTravel
//		Flags  -> ()
// Parameters:
//		struct FString                                     URL                                                        (Parm, NeedCtorLink)
//		bool                                               bAbsolute                                                  (OptionalParm, Parm)
//		bool                                               bShouldSkipGameNotify                                      (OptionalParm, Parm)
void AWorldInfo::ServerTravel(const struct FString& URL, bool bAbsolute, bool bShouldSkipGameNotify)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ServerTravel");

	AWorldInfo_ServerTravel_Params params {};
	params.URL = URL;
	params.bAbsolute = bAbsolute;
	params.bShouldSkipGameNotify = bShouldSkipGameNotify;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.GetGameClass
//		Flags  -> ()
// Parameters:
//		class UClass*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class UClass* AWorldInfo::GetGameClass()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetGameClass");

	AWorldInfo_GetGameClass_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.GetAddressURL
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString AWorldInfo::GetAddressURL()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetAddressURL");

	AWorldInfo_GetAddressURL_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.VerifyNavList
//		Flags  -> ()
void AWorldInfo::VerifyNavList()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.VerifyNavList");

	AWorldInfo_VerifyNavList_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.ForceGarbageCollection
//		Flags  -> ()
// Parameters:
//		bool                                               bFullPurge                                                 (OptionalParm, Parm)
void AWorldInfo::ForceGarbageCollection(bool bFullPurge)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ForceGarbageCollection");

	AWorldInfo_ForceGarbageCollection_Params params {};
	params.bFullPurge = bFullPurge;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.IsPlayInMobilePreview
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWorldInfo::IsPlayInMobilePreview()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsPlayInMobilePreview");

	AWorldInfo_IsPlayInMobilePreview_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.IsPlayInPreview
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWorldInfo::IsPlayInPreview()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsPlayInPreview");

	AWorldInfo_IsPlayInPreview_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.IsPlayInEditor
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWorldInfo::IsPlayInEditor()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsPlayInEditor");

	AWorldInfo_IsPlayInEditor_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.IsWithGFx
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWorldInfo::IsWithGFx()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsWithGFx");

	AWorldInfo_IsWithGFx_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.IsConsoleBuild
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_EConsoleType>                   ConsoleType                                                (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWorldInfo::IsConsoleBuild(TEnumAsByte<Engine_EConsoleType> ConsoleType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsConsoleBuild");

	AWorldInfo_IsConsoleBuild_Params params {};
	params.ConsoleType = ConsoleType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.IsDemoBuild
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWorldInfo::IsDemoBuild()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsDemoBuild");

	AWorldInfo_IsDemoBuild_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.GetLocalURL
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString AWorldInfo::GetLocalURL()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetLocalURL");

	AWorldInfo_GetLocalURL_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.SetLevelRBGravity
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewGrav                                                    (Parm)
void AWorldInfo::SetLevelRBGravity(const struct FVector& NewGrav)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.SetLevelRBGravity");

	AWorldInfo_SetLevelRBGravity_Params params {};
	params.NewGrav = NewGrav;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.GetAllRootSequences
//		Flags  -> ()
// Parameters:
//		TArray<class USequence*>                           ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
TArray<class USequence*> AWorldInfo::GetAllRootSequences()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetAllRootSequences");

	AWorldInfo_GetAllRootSequences_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.GetGameSequence
//		Flags  -> ()
// Parameters:
//		class USequence*                                   ReturnValue                                                (Parm, OutParm, ReturnParm)
class USequence* AWorldInfo::GetGameSequence()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetGameSequence");

	AWorldInfo_GetGameSequence_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.GetGravityZ
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AWorldInfo::GetGravityZ()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetGravityZ");

	AWorldInfo_GetGravityZ_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.UpdateMusicTrack
//		Flags  -> ()
// Parameters:
//		struct FMusicTrackStruct                           NewMusicTrack                                              (Parm, NeedCtorLink)
void AWorldInfo::UpdateMusicTrack(const struct FMusicTrackStruct& NewMusicTrack)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.UpdateMusicTrack");

	AWorldInfo_UpdateMusicTrack_Params params {};
	params.NewMusicTrack = NewMusicTrack;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.SetMusicVolume
//		Flags  -> ()
// Parameters:
//		float                                              VolumeMultiplier                                           (Parm)
void AWorldInfo::SetMusicVolume(float VolumeMultiplier)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.SetMusicVolume");

	AWorldInfo_SetMusicVolume_Params params {};
	params.VolumeMultiplier = VolumeMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.IsMenuLevel
//		Flags  -> ()
// Parameters:
//		struct FString                                     MapName                                                    (OptionalParm, Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWorldInfo::IsMenuLevel(const struct FString& MapName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsMenuLevel");

	AWorldInfo_IsMenuLevel_Params params {};
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.AddOnScreenDebugMessage
//		Flags  -> ()
// Parameters:
//		int                                                Key                                                        (Parm)
//		float                                              TimeToDisplay                                              (Parm)
//		struct FColor                                      DisplayColor                                               (Parm)
//		struct FString                                     DebugMessage                                               (Parm, NeedCtorLink)
void AWorldInfo::AddOnScreenDebugMessage(int Key, float TimeToDisplay, const struct FColor& DisplayColor, const struct FString& DebugMessage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.AddOnScreenDebugMessage");

	AWorldInfo_AddOnScreenDebugMessage_Params params {};
	params.Key = Key;
	params.TimeToDisplay = TimeToDisplay;
	params.DisplayColor = DisplayColor;
	params.DebugMessage = DebugMessage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void AWorldInfo::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ReplicatedEvent");

	AWorldInfo_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.GetNavMeshPathGoalEvaluatorFromCache
//		Flags  -> ()
// Parameters:
//		class UClass*                                      GoalEvalClass                                              (Parm)
//		class UNavigationHandle*                           Requestor                                                  (Parm)
//		class UNavMeshPathGoalEvaluator*                   ReturnValue                                                (Parm, OutParm, ReturnParm)
class UNavMeshPathGoalEvaluator* AWorldInfo::GetNavMeshPathGoalEvaluatorFromCache(class UClass* GoalEvalClass, class UNavigationHandle* Requestor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetNavMeshPathGoalEvaluatorFromCache");

	AWorldInfo_GetNavMeshPathGoalEvaluatorFromCache_Params params {};
	params.GoalEvalClass = GoalEvalClass;
	params.Requestor = Requestor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.GetNavMeshPathConstraintFromCache
//		Flags  -> ()
// Parameters:
//		class UClass*                                      ConstraintClass                                            (Parm)
//		class UNavigationHandle*                           Requestor                                                  (Parm)
//		class UNavMeshPathConstraint*                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class UNavMeshPathConstraint* AWorldInfo::GetNavMeshPathConstraintFromCache(class UClass* ConstraintClass, class UNavigationHandle* Requestor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetNavMeshPathConstraintFromCache");

	AWorldInfo_GetNavMeshPathConstraintFromCache_Params params {};
	params.ConstraintClass = ConstraintClass;
	params.Requestor = Requestor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldInfo.ReleaseCachedConstraintsAndEvaluators
//		Flags  -> ()
void AWorldInfo::ReleaseCachedConstraintsAndEvaluators()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ReleaseCachedConstraintsAndEvaluators");

	AWorldInfo_ReleaseCachedConstraintsAndEvaluators_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.SetDebugSpewLevel
//		Flags  -> ()
// Parameters:
//		int                                                DebugSpewLevel                                             (Parm)
void UOnlineSubsystem::SetDebugSpewLevel(int DebugSpewLevel)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetDebugSpewLevel");

	UOnlineSubsystem_SetDebugSpewLevel_Params params {};
	params.DebugSpewLevel = DebugSpewLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.DumpVoiceRegistration
//		Flags  -> ()
void UOnlineSubsystem::DumpVoiceRegistration()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.DumpVoiceRegistration");

	UOnlineSubsystem_DumpVoiceRegistration_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.DumpSessionState
//		Flags  -> (Exec, Native, Event, Static, Delegate, HasOutParms, K2Call, K2Pure)
// Parameters:
void UOnlineSubsystem::STATIC_DumpSessionState()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.DumpSessionState");

	UOnlineSubsystem_DumpSessionState_Params params {};

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.DumpGameSettings
//		Flags  -> ()
// Parameters:
//		class UOnlineGameSettings*                         GameSettings                                               (Const, Parm)
void UOnlineSubsystem::DumpGameSettings(class UOnlineGameSettings* GameSettings)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.DumpGameSettings");

	UOnlineSubsystem_DumpGameSettings_Params params {};
	params.GameSettings = GameSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.GetNumSupportedLogins
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UOnlineSubsystem::GetNumSupportedLogins()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.GetNumSupportedLogins");

	UOnlineSubsystem_GetNumSupportedLogins_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.GetBuildUniqueId
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UOnlineSubsystem::GetBuildUniqueId()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.GetBuildUniqueId");

	UOnlineSubsystem_GetBuildUniqueId_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.GetPlayerUniqueNetIdFromIndex
//		Flags  -> (Native, Event, HasOptionalParms, Delegate, HasOutParms, K2Call, K2Pure)
// Parameters:
//		int                                                UserIndex                                                  (Parm)
//		struct FUniqueNetId                                ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FUniqueNetId UOnlineSubsystem::GetPlayerUniqueNetIdFromIndex(int UserIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.GetPlayerUniqueNetIdFromIndex");

	UOnlineSubsystem_GetPlayerUniqueNetIdFromIndex_Params params {};
	params.UserIndex = UserIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.StringToUniqueNetId
//		Flags  -> ()
// Parameters:
//		struct FString                                     UniqueNetIdString                                          (Parm, NeedCtorLink)
//		struct FUniqueNetId                                out_UniqueId                                               (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSubsystem::StringToUniqueNetId(const struct FString& UniqueNetIdString, struct FUniqueNetId* out_UniqueId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.StringToUniqueNetId");

	UOnlineSubsystem_StringToUniqueNetId_Params params {};
	params.UniqueNetIdString = UniqueNetIdString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_UniqueId != nullptr)
		*out_UniqueId = params.out_UniqueId;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.UniqueNetIdToString
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                IdToConvert                                                (Const, Parm, OutParm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UOnlineSubsystem::UniqueNetIdToString(struct FUniqueNetId* IdToConvert)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.UniqueNetIdToString");

	UOnlineSubsystem_UniqueNetIdToString_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (IdToConvert != nullptr)
		*IdToConvert = params.IdToConvert;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.GetNamedInterface
//		Flags  -> ()
// Parameters:
//		struct FName                                       InterfaceName                                              (Parm)
//		class UObject*                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
class UObject* UOnlineSubsystem::GetNamedInterface(const struct FName& InterfaceName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.GetNamedInterface");

	UOnlineSubsystem_GetNamedInterface_Params params {};
	params.InterfaceName = InterfaceName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.SetNamedInterface
//		Flags  -> ()
// Parameters:
//		struct FName                                       InterfaceName                                              (Parm)
//		class UObject*                                     NewInterface                                               (Parm)
void UOnlineSubsystem::SetNamedInterface(const struct FName& InterfaceName, class UObject* NewInterface)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetNamedInterface");

	UOnlineSubsystem_SetNamedInterface_Params params {};
	params.InterfaceName = InterfaceName;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.SetSharedCloudInterface
//		Flags  -> ()
// Parameters:
//		class UObject*                                     InCloudInterface                                           (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSubsystem::SetSharedCloudInterface(class UObject* InCloudInterface)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetSharedCloudInterface");

	UOnlineSubsystem_SetSharedCloudInterface_Params params {};
	params.InCloudInterface = InCloudInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.SetUserCloudInterface
//		Flags  -> ()
// Parameters:
//		class UObject*                                     InCloudInterface                                           (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSubsystem::SetUserCloudInterface(class UObject* InCloudInterface)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetUserCloudInterface");

	UOnlineSubsystem_SetUserCloudInterface_Params params {};
	params.InCloudInterface = InCloudInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.SetAuthInterface
//		Flags  -> ()
// Parameters:
//		class UObject*                                     InAuthInterface                                            (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSubsystem::SetAuthInterface(class UObject* InAuthInterface)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetAuthInterface");

	UOnlineSubsystem_SetAuthInterface_Params params {};
	params.InAuthInterface = InAuthInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.SetSocialInterface
//		Flags  -> ()
// Parameters:
//		class UObject*                                     InSocialInterface                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSubsystem::SetSocialInterface(class UObject* InSocialInterface)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetSocialInterface");

	UOnlineSubsystem_SetSocialInterface_Params params {};
	params.InSocialInterface = InSocialInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.SetTitleFileCacheInterface
//		Flags  -> ()
// Parameters:
//		class UObject*                                     NewInterface                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSubsystem::SetTitleFileCacheInterface(class UObject* NewInterface)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetTitleFileCacheInterface");

	UOnlineSubsystem_SetTitleFileCacheInterface_Params params {};
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.SetTitleFileInterface
//		Flags  -> ()
// Parameters:
//		class UObject*                                     NewInterface                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSubsystem::SetTitleFileInterface(class UObject* NewInterface)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetTitleFileInterface");

	UOnlineSubsystem_SetTitleFileInterface_Params params {};
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.SetPartyChatInterface
//		Flags  -> ()
// Parameters:
//		class UObject*                                     NewInterface                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSubsystem::SetPartyChatInterface(class UObject* NewInterface)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetPartyChatInterface");

	UOnlineSubsystem_SetPartyChatInterface_Params params {};
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.SetNewsInterface
//		Flags  -> ()
// Parameters:
//		class UObject*                                     NewInterface                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSubsystem::SetNewsInterface(class UObject* NewInterface)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetNewsInterface");

	UOnlineSubsystem_SetNewsInterface_Params params {};
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.SetStatsInterface
//		Flags  -> ()
// Parameters:
//		class UObject*                                     NewInterface                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSubsystem::SetStatsInterface(class UObject* NewInterface)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetStatsInterface");

	UOnlineSubsystem_SetStatsInterface_Params params {};
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.SetVoiceInterface
//		Flags  -> ()
// Parameters:
//		class UObject*                                     NewInterface                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSubsystem::SetVoiceInterface(class UObject* NewInterface)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetVoiceInterface");

	UOnlineSubsystem_SetVoiceInterface_Params params {};
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.SetContentInterface
//		Flags  -> ()
// Parameters:
//		class UObject*                                     NewInterface                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSubsystem::SetContentInterface(class UObject* NewInterface)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetContentInterface");

	UOnlineSubsystem_SetContentInterface_Params params {};
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.SetGameInterface
//		Flags  -> ()
// Parameters:
//		class UObject*                                     NewInterface                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSubsystem::SetGameInterface(class UObject* NewInterface)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetGameInterface");

	UOnlineSubsystem_SetGameInterface_Params params {};
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.SetSystemInterface
//		Flags  -> ()
// Parameters:
//		class UObject*                                     NewInterface                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSubsystem::SetSystemInterface(class UObject* NewInterface)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetSystemInterface");

	UOnlineSubsystem_SetSystemInterface_Params params {};
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.SetPlayerInterfaceEx
//		Flags  -> ()
// Parameters:
//		class UObject*                                     NewInterface                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSubsystem::SetPlayerInterfaceEx(class UObject* NewInterface)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetPlayerInterfaceEx");

	UOnlineSubsystem_SetPlayerInterfaceEx_Params params {};
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.SetPlayerInterface
//		Flags  -> ()
// Parameters:
//		class UObject*                                     NewInterface                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSubsystem::SetPlayerInterface(class UObject* NewInterface)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetPlayerInterface");

	UOnlineSubsystem_SetPlayerInterface_Params params {};
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.SetAccountInterface
//		Flags  -> ()
// Parameters:
//		class UObject*                                     NewInterface                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSubsystem::SetAccountInterface(class UObject* NewInterface)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetAccountInterface");

	UOnlineSubsystem_SetAccountInterface_Params params {};
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.Exit
//		Flags  -> ()
void UOnlineSubsystem::Exit()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.Exit");

	UOnlineSubsystem_Exit_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.PostInit
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSubsystem::PostInit()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.PostInit");

	UOnlineSubsystem_PostInit_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSubsystem.Init
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSubsystem::Init()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.Init");

	UOnlineSubsystem_Init_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentEnumerator.TriggerFindDLCDelegates
//		Flags  -> ()
void UDownloadableContentEnumerator::TriggerFindDLCDelegates()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.TriggerFindDLCDelegates");

	UDownloadableContentEnumerator_TriggerFindDLCDelegates_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentEnumerator.InstallDLC
//		Flags  -> ()
// Parameters:
//		struct FString                                     DLCName                                                    (Parm, NeedCtorLink)
void UDownloadableContentEnumerator::InstallDLC(const struct FString& DLCName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.InstallDLC");

	UDownloadableContentEnumerator_InstallDLC_Params params {};
	params.DLCName = DLCName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentEnumerator.InstallAllDLC
//		Flags  -> ()
void UDownloadableContentEnumerator::InstallAllDLC()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.InstallAllDLC");

	UDownloadableContentEnumerator_InstallAllDLC_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentEnumerator.DeleteDLC
//		Flags  -> ()
// Parameters:
//		struct FString                                     DLCName                                                    (Parm, NeedCtorLink)
void UDownloadableContentEnumerator::DeleteDLC(const struct FString& DLCName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.DeleteDLC");

	UDownloadableContentEnumerator_DeleteDLC_Params params {};
	params.DLCName = DLCName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentEnumerator.ClearFindDLCDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             InDelegate                                                 (Parm, NeedCtorLink)
void UDownloadableContentEnumerator::ClearFindDLCDelegate(const struct FScriptDelegate& InDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.ClearFindDLCDelegate");

	UDownloadableContentEnumerator_ClearFindDLCDelegate_Params params {};
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentEnumerator.AddFindDLCDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             InDelegate                                                 (Parm, NeedCtorLink)
void UDownloadableContentEnumerator::AddFindDLCDelegate(const struct FScriptDelegate& InDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.AddFindDLCDelegate");

	UDownloadableContentEnumerator_AddFindDLCDelegate_Params params {};
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentEnumerator.OnFindDLCComplete
//		Flags  -> ()
void UDownloadableContentEnumerator::OnFindDLCComplete()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.OnFindDLCComplete");

	UDownloadableContentEnumerator_OnFindDLCComplete_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentEnumerator.FindDLC
//		Flags  -> ()
void UDownloadableContentEnumerator::FindDLC()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.FindDLC");

	UDownloadableContentEnumerator_FindDLC_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentManager.OnRefreshComplete
//		Flags  -> ()
void UDownloadableContentManager::OnRefreshComplete()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.OnRefreshComplete");

	UDownloadableContentManager_OnRefreshComplete_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentManager.AddPackagesToFullyLoad
//		Flags  -> ()
// Parameters:
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UDownloadableContentManager::AddPackagesToFullyLoad(const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.AddPackagesToFullyLoad");

	UDownloadableContentManager_AddPackagesToFullyLoad_Params params {};
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentManager.RefreshDLCEnumComplete
//		Flags  -> ()
void UDownloadableContentManager::RefreshDLCEnumComplete()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.RefreshDLCEnumComplete");

	UDownloadableContentManager_RefreshDLCEnumComplete_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentManager.RefreshDLC
//		Flags  -> ()
void UDownloadableContentManager::RefreshDLC()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.RefreshDLC");

	UDownloadableContentManager_RefreshDLC_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentManager.OnContentChange
//		Flags  -> ()
void UDownloadableContentManager::OnContentChange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.OnContentChange");

	UDownloadableContentManager_OnContentChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentManager.OnStorageDeviceChange
//		Flags  -> ()
void UDownloadableContentManager::OnStorageDeviceChange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.OnStorageDeviceChange");

	UDownloadableContentManager_OnStorageDeviceChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentManager.OnLoginChange
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
void UDownloadableContentManager::OnLoginChange(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.OnLoginChange");

	UDownloadableContentManager_OnLoginChange_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentManager.Init
//		Flags  -> ()
void UDownloadableContentManager::Init()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.Init");

	UDownloadableContentManager_Init_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentManager.InstallNonPackageFiles
//		Flags  -> ()
// Parameters:
//		struct FOnlineContent                              DLCBundle                                                  (Const, Parm, OutParm, NeedCtorLink)
void UDownloadableContentManager::InstallNonPackageFiles(struct FOnlineContent* DLCBundle)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.InstallNonPackageFiles");

	UDownloadableContentManager_InstallNonPackageFiles_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DLCBundle != nullptr)
		*DLCBundle = params.DLCBundle;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentManager.InstallPackages
//		Flags  -> ()
// Parameters:
//		struct FOnlineContent                              DLCBundle                                                  (Const, Parm, OutParm, NeedCtorLink)
void UDownloadableContentManager::InstallPackages(struct FOnlineContent* DLCBundle)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.InstallPackages");

	UDownloadableContentManager_InstallPackages_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DLCBundle != nullptr)
		*DLCBundle = params.DLCBundle;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentManager.UpdateObjectLists
//		Flags  -> ()
void UDownloadableContentManager::UpdateObjectLists()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.UpdateObjectLists");

	UDownloadableContentManager_UpdateObjectLists_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentManager.MarkPerObjectConfigPendingKill
//		Flags  -> ()
// Parameters:
//		struct FString                                     Section                                                    (Parm, NeedCtorLink)
void UDownloadableContentManager::MarkPerObjectConfigPendingKill(const struct FString& Section)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.MarkPerObjectConfigPendingKill");

	UDownloadableContentManager_MarkPerObjectConfigPendingKill_Params params {};
	params.Section = Section;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentManager.AddSectionToObjectList
//		Flags  -> ()
// Parameters:
//		struct FString                                     Section                                                    (Parm, NeedCtorLink)
void UDownloadableContentManager::AddSectionToObjectList(const struct FString& Section)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.AddSectionToObjectList");

	UDownloadableContentManager_AddSectionToObjectList_Params params {};
	params.Section = Section;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentManager.GetDLCNonPackageFilePath
//		Flags  -> ()
// Parameters:
//		struct FName                                       NonPackageFileName                                         (Parm)
//		struct FString                                     Path                                                       (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UDownloadableContentManager::GetDLCNonPackageFilePath(const struct FName& NonPackageFileName, struct FString* Path)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.GetDLCNonPackageFilePath");

	UDownloadableContentManager_GetDLCNonPackageFilePath_Params params {};
	params.NonPackageFileName = NonPackageFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Path != nullptr)
		*Path = params.Path;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentManager.ClearDLC
//		Flags  -> ()
void UDownloadableContentManager::ClearDLC()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.ClearDLC");

	UDownloadableContentManager_ClearDLC_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentManager.InstallDLCs
//		Flags  -> ()
// Parameters:
//		TArray<struct FOnlineContent>                      DLCBundles                                                 (Const, Parm, OutParm, NeedCtorLink)
void UDownloadableContentManager::InstallDLCs(TArray<struct FOnlineContent>* DLCBundles)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.InstallDLCs");

	UDownloadableContentManager_InstallDLCs_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DLCBundles != nullptr)
		*DLCBundles = params.DLCBundles;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DownloadableContentManager.InstallDLC
//		Flags  -> ()
// Parameters:
//		struct FOnlineContent                              DLCBundle                                                  (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UDownloadableContentManager::InstallDLC(struct FOnlineContent* DLCBundle)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.InstallDLC");

	UDownloadableContentManager_InstallDLC_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DLCBundle != nullptr)
		*DLCBundle = params.DLCBundle;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.GetIdentifierForVendor
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UEngine::GetIdentifierForVendor()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetIdentifierForVendor");

	UEngine_GetIdentifierForVendor_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.GetSystemSettingFloat
//		Flags  -> ()
// Parameters:
//		struct FString                                     SettingName                                                (Parm, NeedCtorLink)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UEngine::GetSystemSettingFloat(const struct FString& SettingName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetSystemSettingFloat");

	UEngine_GetSystemSettingFloat_Params params {};
	params.SettingName = SettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.GetSystemSettingInt
//		Flags  -> ()
// Parameters:
//		struct FString                                     SettingName                                                (Parm, NeedCtorLink)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UEngine::GetSystemSettingInt(const struct FString& SettingName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetSystemSettingInt");

	UEngine_GetSystemSettingInt_Params params {};
	params.SettingName = SettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.GetSystemSettingBool
//		Flags  -> ()
// Parameters:
//		struct FString                                     SettingName                                                (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UEngine::GetSystemSettingBool(const struct FString& SettingName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetSystemSettingBool");

	UEngine_GetSystemSettingBool_Params params {};
	params.SettingName = SettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.LaunchURL
//		Flags  -> ()
// Parameters:
//		struct FString                                     URL                                                        (Parm, NeedCtorLink)
void UEngine::LaunchURL(const struct FString& URL)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.LaunchURL");

	UEngine_LaunchURL_Params params {};
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.BasicLoadObject
//		Flags  -> ()
// Parameters:
//		class UObject*                                     Obj                                                        (Parm)
//		struct FString                                     PathName                                                   (Parm, NeedCtorLink)
//		bool                                               bIsSaveGame                                                (Parm)
//		int                                                Version                                                    (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UEngine::BasicLoadObject(class UObject* Obj, const struct FString& PathName, bool bIsSaveGame, int Version)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.BasicLoadObject");

	UEngine_BasicLoadObject_Params params {};
	params.Obj = Obj;
	params.PathName = PathName;
	params.bIsSaveGame = bIsSaveGame;
	params.Version = Version;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.BasicSaveObject
//		Flags  -> ()
// Parameters:
//		class UObject*                                     Obj                                                        (Parm)
//		struct FString                                     PathName                                                   (Parm, NeedCtorLink)
//		bool                                               bIsSaveGame                                                (Parm)
//		int                                                Version                                                    (Parm)
//		bool                                               bEncrypt                                                   (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UEngine::BasicSaveObject(class UObject* Obj, const struct FString& PathName, bool bIsSaveGame, int Version, bool bEncrypt)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.BasicSaveObject");

	UEngine_BasicSaveObject_Params params {};
	params.Obj = Obj;
	params.PathName = PathName;
	params.bIsSaveGame = bIsSaveGame;
	params.Version = Version;
	params.bEncrypt = bEncrypt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.AddTextureStreamingSlaveLoc
//		Flags  -> ()
// Parameters:
//		struct FVector                                     InLoc                                                      (Parm)
//		float                                              BoostFactor                                                (Parm)
//		bool                                               bOverrideLocation                                          (Parm)
//		float                                              OverrideDuration                                           (Parm)
void UEngine::AddTextureStreamingSlaveLoc(const struct FVector& InLoc, float BoostFactor, bool bOverrideLocation, float OverrideDuration)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.AddTextureStreamingSlaveLoc");

	UEngine_AddTextureStreamingSlaveLoc_Params params {};
	params.InLoc = InLoc;
	params.BoostFactor = BoostFactor;
	params.bOverrideLocation = bOverrideLocation;
	params.OverrideDuration = OverrideDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.GetWorldPostProcessChain
//		Flags  -> ()
// Parameters:
//		class UPostProcessChain*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class UPostProcessChain* UEngine::GetWorldPostProcessChain()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetWorldPostProcessChain");

	UEngine_GetWorldPostProcessChain_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.GetDefaultPostProcessChain
//		Flags  -> ()
// Parameters:
//		class UPostProcessChain*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class UPostProcessChain* UEngine::GetDefaultPostProcessChain()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetDefaultPostProcessChain");

	UEngine_GetDefaultPostProcessChain_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.GetEngine
//		Flags  -> ()
// Parameters:
//		class UEngine*                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
class UEngine* UEngine::GetEngine()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetEngine");

	UEngine_GetEngine_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.IsRealDStereoEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UEngine::IsRealDStereoEnabled()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.IsRealDStereoEnabled");

	UEngine_IsRealDStereoEnabled_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.AddOverlayWrapped
//		Flags  -> ()
// Parameters:
//		class UFont*                                       Font                                                       (Parm)
//		struct FString                                     Text                                                       (Parm, NeedCtorLink)
//		float                                              X                                                          (Parm)
//		float                                              Y                                                          (Parm)
//		float                                              ScaleX                                                     (Parm)
//		float                                              ScaleY                                                     (Parm)
//		float                                              WrapWidth                                                  (Parm)
void UEngine::AddOverlayWrapped(class UFont* Font, const struct FString& Text, float X, float Y, float ScaleX, float ScaleY, float WrapWidth)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.AddOverlayWrapped");

	UEngine_AddOverlayWrapped_Params params {};
	params.Font = Font;
	params.Text = Text;
	params.X = X;
	params.Y = Y;
	params.ScaleX = ScaleX;
	params.ScaleY = ScaleY;
	params.WrapWidth = WrapWidth;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.AddOverlay
//		Flags  -> ()
// Parameters:
//		class UFont*                                       Font                                                       (Parm)
//		struct FString                                     Text                                                       (Parm, NeedCtorLink)
//		float                                              X                                                          (Parm)
//		float                                              Y                                                          (Parm)
//		float                                              ScaleX                                                     (Parm)
//		float                                              ScaleY                                                     (Parm)
//		bool                                               bIsCentered                                                (Parm)
void UEngine::AddOverlay(class UFont* Font, const struct FString& Text, float X, float Y, float ScaleX, float ScaleY, bool bIsCentered)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.AddOverlay");

	UEngine_AddOverlay_Params params {};
	params.Font = Font;
	params.Text = Text;
	params.X = X;
	params.Y = Y;
	params.ScaleX = ScaleX;
	params.ScaleY = ScaleY;
	params.bIsCentered = bIsCentered;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.RemoveAllOverlays
//		Flags  -> ()
void UEngine::RemoveAllOverlays()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.RemoveAllOverlays");

	UEngine_RemoveAllOverlays_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.StopMovie
//		Flags  -> ()
// Parameters:
//		bool                                               bDelayStopUntilGameHasRendered                             (Parm)
void UEngine::StopMovie(bool bDelayStopUntilGameHasRendered)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.StopMovie");

	UEngine_StopMovie_Params params {};
	params.bDelayStopUntilGameHasRendered = bDelayStopUntilGameHasRendered;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.PlayLoadMapMovie
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UEngine::PlayLoadMapMovie()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.PlayLoadMapMovie");

	UEngine_PlayLoadMapMovie_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.GetLastMovieName
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UEngine::GetLastMovieName()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetLastMovieName");

	UEngine_GetLastMovieName_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.GetAudioDevice
//		Flags  -> ()
// Parameters:
//		class UAudioDevice*                                ReturnValue                                                (Parm, OutParm, ReturnParm)
class UAudioDevice* UEngine::GetAudioDevice()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetAudioDevice");

	UEngine_GetAudioDevice_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.IsUsingES2Renderer
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UEngine::IsUsingES2Renderer()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.IsUsingES2Renderer");

	UEngine_IsUsingES2Renderer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.IsStereoscopic3D
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UEngine::IsStereoscopic3D()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.IsStereoscopic3D");

	UEngine_IsStereoscopic3D_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.IsSplitScreen
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UEngine::IsSplitScreen()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.IsSplitScreen");

	UEngine_IsSplitScreen_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.GetAdditionalFont
//		Flags  -> ()
// Parameters:
//		int                                                AdditionalFontIndex                                        (Parm)
//		class UFont*                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class UFont* UEngine::GetAdditionalFont(int AdditionalFontIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetAdditionalFont");

	UEngine_GetAdditionalFont_Params params {};
	params.AdditionalFontIndex = AdditionalFontIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.GetUltraFont
//		Flags  -> ()
// Parameters:
//		class UFont*                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class UFont* UEngine::GetUltraFont()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetUltraFont");

	UEngine_GetUltraFont_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.GetSubtitleFont
//		Flags  -> ()
// Parameters:
//		class UFont*                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class UFont* UEngine::GetSubtitleFont()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetSubtitleFont");

	UEngine_GetSubtitleFont_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.GetLargeFont
//		Flags  -> ()
// Parameters:
//		class UFont*                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class UFont* UEngine::GetLargeFont()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetLargeFont");

	UEngine_GetLargeFont_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.GetMediumFont
//		Flags  -> ()
// Parameters:
//		class UFont*                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class UFont* UEngine::GetMediumFont()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetMediumFont");

	UEngine_GetMediumFont_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.GetSmallFont
//		Flags  -> ()
// Parameters:
//		class UFont*                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class UFont* UEngine::GetSmallFont()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetSmallFont");

	UEngine_GetSmallFont_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.GetTinyFont
//		Flags  -> ()
// Parameters:
//		class UFont*                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class UFont* UEngine::GetTinyFont()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetTinyFont");

	UEngine_GetTinyFont_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.HasNetworkConnection
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UEngine::HasNetworkConnection()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.HasNetworkConnection");

	UEngine_HasNetworkConnection_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.BuildBugSubmissionString
//		Flags  -> ()
// Parameters:
//		struct FString                                     BugField                                                   (Parm, NeedCtorLink)
//		struct FString                                     BugFieldData                                               (Parm, NeedCtorLink)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UEngine::BuildBugSubmissionString(const struct FString& BugField, const struct FString& BugFieldData)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.BuildBugSubmissionString");

	UEngine_BuildBugSubmissionString_Params params {};
	params.BugField = BugField;
	params.BugFieldData = BugFieldData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.GetDevicePushNotificationToken
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UEngine::GetDevicePushNotificationToken()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetDevicePushNotificationToken");

	UEngine_GetDevicePushNotificationToken_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.GetOSVersion
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UEngine::GetOSVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetOSVersion");

	UEngine_GetOSVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.GetDeviceUUID
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UEngine::GetDeviceUUID()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetDeviceUUID");

	UEngine_GetDeviceUUID_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.GetBuildDate
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UEngine::GetBuildDate()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetBuildDate");

	UEngine_GetBuildDate_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.GetCurrentWorldInfo
//		Flags  -> ()
// Parameters:
//		class AWorldInfo*                                  ReturnValue                                                (Parm, OutParm, ReturnParm)
class AWorldInfo* UEngine::GetCurrentWorldInfo()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetCurrentWorldInfo");

	UEngine_GetCurrentWorldInfo_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.IsGame
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UEngine::IsGame()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.IsGame");

	UEngine_IsGame_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Engine.IsEditor
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UEngine::IsEditor()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Engine.IsEditor");

	UEngine_IsEditor_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameEngine.HasSecondaryScreenActive
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameEngine::HasSecondaryScreenActive()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameEngine.HasSecondaryScreenActive");

	UGameEngine_HasSecondaryScreenActive_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameEngine.GetDLCManager
//		Flags  -> ()
// Parameters:
//		class UDownloadableContentManager*                 ReturnValue                                                (Parm, OutParm, ReturnParm)
class UDownloadableContentManager* UGameEngine::GetDLCManager()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameEngine.GetDLCManager");

	UGameEngine_GetDLCManager_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameEngine.GetDLCEnumerator
//		Flags  -> ()
// Parameters:
//		class UDownloadableContentEnumerator*              ReturnValue                                                (Parm, OutParm, ReturnParm)
class UDownloadableContentEnumerator* UGameEngine::GetDLCEnumerator()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameEngine.GetDLCEnumerator");

	UGameEngine_GetDLCEnumerator_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameEngine.GetOnlineSubsystem
//		Flags  -> ()
// Parameters:
//		class UOnlineSubsystem*                            ReturnValue                                                (Parm, OutParm, ReturnParm)
class UOnlineSubsystem* UGameEngine::GetOnlineSubsystem()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameEngine.GetOnlineSubsystem");

	UGameEngine_GetOnlineSubsystem_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameEngine.DestroyNamedNetDriver
//		Flags  -> ()
// Parameters:
//		struct FName                                       NetDriverName                                              (Parm)
void UGameEngine::DestroyNamedNetDriver(const struct FName& NetDriverName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameEngine.DestroyNamedNetDriver");

	UGameEngine_DestroyNamedNetDriver_Params params {};
	params.NetDriverName = NetDriverName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameEngine.CreateNamedNetDriver
//		Flags  -> ()
// Parameters:
//		struct FName                                       NetDriverName                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameEngine::CreateNamedNetDriver(const struct FName& NetDriverName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameEngine.CreateNamedNetDriver");

	UGameEngine_CreateNamedNetDriver_Params params {};
	params.NetDriverName = NetDriverName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Volume.ProcessActorSetVolume
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void AVolume::ProcessActorSetVolume(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Volume.ProcessActorSetVolume");

	AVolume_ProcessActorSetVolume_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Volume.CollisionChanged
//		Flags  -> ()
void AVolume::CollisionChanged()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Volume.CollisionChanged");

	AVolume_CollisionChanged_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Volume.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void AVolume::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Volume.OnToggle");

	AVolume_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Volume.DisplayDebug
//		Flags  -> ()
// Parameters:
//		class AHUD*                                        HUD                                                        (Parm)
//		float                                              out_YL                                                     (Parm, OutParm)
//		float                                              out_YPos                                                   (Parm, OutParm)
void AVolume::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Volume.DisplayDebug");

	AVolume_DisplayDebug_Params params {};
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Volume.PostBeginPlay
//		Flags  -> ()
void AVolume::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Volume.PostBeginPlay");

	AVolume_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Volume.EncompassesPoint
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Loc                                                        (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AVolume::EncompassesPoint(const struct FVector& Loc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Volume.EncompassesPoint");

	AVolume_EncompassesPoint_Params params {};
	params.Loc = Loc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Volume.Encompasses
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AVolume::Encompasses(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Volume.Encompasses");

	AVolume_Encompasses_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.BlockingVolume.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void ABlockingVolume::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.BlockingVolume.OnToggle");

	ABlockingVolume_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.DynamicBlockingVolume.ApplyCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct ADynamicBlockingVolume_FCheckpointRecord    Record                                                     (Const, Parm, OutParm)
//void ADynamicBlockingVolume::ApplyCheckpointRecord(struct ADynamicBlockingVolume_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DynamicBlockingVolume.ApplyCheckpointRecord");
//
//	ADynamicBlockingVolume_ApplyCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}
//
//
//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.DynamicBlockingVolume.CreateCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct ADynamicBlockingVolume_FCheckpointRecord    Record                                                     (Parm, OutParm)
//void ADynamicBlockingVolume::CreateCheckpointRecord(struct ADynamicBlockingVolume_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DynamicBlockingVolume.CreateCheckpointRecord");
//
//	ADynamicBlockingVolume_CreateCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DynamicBlockingVolume.PostBeginPlay
//		Flags  -> ()
void ADynamicBlockingVolume::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DynamicBlockingVolume.PostBeginPlay");

	ADynamicBlockingVolume_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.LevelStreamingVolume.ApplyCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct ALevelStreamingVolume_FCheckpointRecord     Record                                                     (Const, Parm, OutParm)
//void ALevelStreamingVolume::ApplyCheckpointRecord(struct ALevelStreamingVolume_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LevelStreamingVolume.ApplyCheckpointRecord");
//
//	ALevelStreamingVolume_ApplyCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}
//
//
//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.LevelStreamingVolume.CreateCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct ALevelStreamingVolume_FCheckpointRecord     Record                                                     (Parm, OutParm)
//void ALevelStreamingVolume::CreateCheckpointRecord(struct ALevelStreamingVolume_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LevelStreamingVolume.CreateCheckpointRecord");
//
//	ALevelStreamingVolume_CreateCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LevelStreamingVolume.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void ALevelStreamingVolume::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LevelStreamingVolume.OnToggle");

	ALevelStreamingVolume_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.PhysicsVolume.ApplyCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct APhysicsVolume_FCheckpointRecord            Record                                                     (Const, Parm, OutParm)
//void APhysicsVolume::ApplyCheckpointRecord(struct APhysicsVolume_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.ApplyCheckpointRecord");
//
//	APhysicsVolume_ApplyCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}
//
//
//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.PhysicsVolume.CreateCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct APhysicsVolume_FCheckpointRecord            Record                                                     (Parm, OutParm)
//void APhysicsVolume::CreateCheckpointRecord(struct APhysicsVolume_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.CreateCheckpointRecord");
//
//	APhysicsVolume_CreateCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsVolume.ShouldSaveForCheckpoint
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APhysicsVolume::ShouldSaveForCheckpoint()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.ShouldSaveForCheckpoint");

	APhysicsVolume_ShouldSaveForCheckpoint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsVolume.OnSetDamageInstigator
//		Flags  -> ()
// Parameters:
//		class USeqAct_SetDamageInstigator*                 Action                                                     (Parm)
void APhysicsVolume::OnSetDamageInstigator(class USeqAct_SetDamageInstigator* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.OnSetDamageInstigator");

	APhysicsVolume_OnSetDamageInstigator_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsVolume.NotifyPawnBecameViewTarget
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
//		class APlayerController*                           PC                                                         (Parm)
void APhysicsVolume::NotifyPawnBecameViewTarget(class APawn* P, class APlayerController* PC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.NotifyPawnBecameViewTarget");

	APhysicsVolume_NotifyPawnBecameViewTarget_Params params {};
	params.P = P;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsVolume.ModifyPlayer
//		Flags  -> ()
// Parameters:
//		class APawn*                                       PlayerPawn                                                 (Parm)
void APhysicsVolume::ModifyPlayer(class APawn* PlayerPawn)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.ModifyPlayer");

	APhysicsVolume_ModifyPlayer_Params params {};
	params.PlayerPawn = PlayerPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsVolume.CausePainTo
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void APhysicsVolume::CausePainTo(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.CausePainTo");

	APhysicsVolume_CausePainTo_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsVolume.Touch
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		class UPrimitiveComponent*                         OtherComp                                                  (Parm, EditInline)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     HitNormal                                                  (Parm)
void APhysicsVolume::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.Touch");

	APhysicsVolume_Touch_Params params {};
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsVolume.TimerPop
//		Flags  -> ()
// Parameters:
//		class AVolumeTimer*                                T                                                          (Parm)
void APhysicsVolume::TimerPop(class AVolumeTimer* T)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.TimerPop");

	APhysicsVolume_TimerPop_Params params {};
	params.T = T;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsVolume.CollisionChanged
//		Flags  -> ()
void APhysicsVolume::CollisionChanged()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.CollisionChanged");

	APhysicsVolume_CollisionChanged_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsVolume.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              inAction                                                   (Parm)
void APhysicsVolume::OnToggle(class USeqAct_Toggle* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.OnToggle");

	APhysicsVolume_OnToggle_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsVolume.PawnLeavingVolume
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
void APhysicsVolume::PawnLeavingVolume(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PawnLeavingVolume");

	APhysicsVolume_PawnLeavingVolume_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsVolume.PawnEnteredVolume
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
void APhysicsVolume::PawnEnteredVolume(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PawnEnteredVolume");

	APhysicsVolume_PawnEnteredVolume_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsVolume.ActorLeavingVolume
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void APhysicsVolume::ActorLeavingVolume(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.ActorLeavingVolume");

	APhysicsVolume_ActorLeavingVolume_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsVolume.ActorEnteredVolume
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void APhysicsVolume::ActorEnteredVolume(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.ActorEnteredVolume");

	APhysicsVolume_ActorEnteredVolume_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsVolume.PhysicsChangedFor
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void APhysicsVolume::PhysicsChangedFor(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PhysicsChangedFor");

	APhysicsVolume_PhysicsChangedFor_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsVolume.Reset
//		Flags  -> ()
void APhysicsVolume::Reset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.Reset");

	APhysicsVolume_Reset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsVolume.PostBeginPlay
//		Flags  -> ()
void APhysicsVolume::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PostBeginPlay");

	APhysicsVolume_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsVolume.GetZoneVelocityForActor
//		Flags  -> ()
// Parameters:
//		class AActor*                                      TheActor                                                   (Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector APhysicsVolume::GetZoneVelocityForActor(class AActor* TheActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.GetZoneVelocityForActor");

	APhysicsVolume_GetZoneVelocityForActor_Params params {};
	params.TheActor = TheActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsVolume.GetGravityZ
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float APhysicsVolume::GetGravityZ()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.GetGravityZ");

	APhysicsVolume_GetGravityZ_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DefaultPhysicsVolume.Destroyed
//		Flags  -> ()
void ADefaultPhysicsVolume::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DefaultPhysicsVolume.Destroyed");

	ADefaultPhysicsVolume_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LadderVolume.PhysicsChangedFor
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void ALadderVolume::PhysicsChangedFor(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.PhysicsChangedFor");

	ALadderVolume_PhysicsChangedFor_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LadderVolume.PawnLeavingVolume
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
void ALadderVolume::PawnLeavingVolume(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.PawnLeavingVolume");

	ALadderVolume_PawnLeavingVolume_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LadderVolume.PawnEnteredVolume
//		Flags  -> (Net, NetReliable, Simulated, Exec, Operator, Private, Protected, DLLImport, K2Override, K2Pure)
// Parameters:
//		class APawn*                                       P                                                          (Parm)
void ALadderVolume::PawnEnteredVolume(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.PawnEnteredVolume");

	ALadderVolume_PawnEnteredVolume_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LadderVolume.InUse
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Ignored                                                    (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ALadderVolume::InUse(class APawn* Ignored)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.InUse");

	ALadderVolume_InUse_Params params {};
	params.Ignored = Ignored;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LadderVolume.PostBeginPlay
//		Flags  -> (Net, NetReliable, Simulated, Event, Operator, Static, HasOptionalParms, Const, Public, Protected, DLLImport, K2Override, K2Pure)
// Parameters:
void ALadderVolume::STATIC_PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.PostBeginPlay");

	ALadderVolume_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TriggerVolume.StopsProjectile
//		Flags  -> ()
// Parameters:
//		class AProjectile*                                 P                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ATriggerVolume::StopsProjectile(class AProjectile* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TriggerVolume.StopsProjectile");

	ATriggerVolume_StopsProjectile_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TriggerVolume.PostBeginPlay
//		Flags  -> ()
void ATriggerVolume::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TriggerVolume.PostBeginPlay");

	ATriggerVolume_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DroppedPickup.RecheckValidTouch
//		Flags  -> ()
void ADroppedPickup::RecheckValidTouch()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.RecheckValidTouch");

	ADroppedPickup_RecheckValidTouch_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DroppedPickup.PickedUpBy
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
void ADroppedPickup::PickedUpBy(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.PickedUpBy");

	ADroppedPickup_PickedUpBy_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DroppedPickup.GiveTo
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
void ADroppedPickup::GiveTo(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.GiveTo");

	ADroppedPickup_GiveTo_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DroppedPickup.Landed
//		Flags  -> ()
// Parameters:
//		struct FVector                                     HitNormal                                                  (Parm)
//		class AActor*                                      FloorActor                                                 (Parm)
void ADroppedPickup::Landed(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.Landed");

	ADroppedPickup_Landed_Params params {};
	params.HitNormal = HitNormal;
	params.FloorActor = FloorActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DroppedPickup.DetourWeight
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		float                                              PathWeight                                                 (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float ADroppedPickup::DetourWeight(class APawn* Other, float PathWeight)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.DetourWeight");

	ADroppedPickup_DetourWeight_Params params {};
	params.Other = Other;
	params.PathWeight = PathWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DroppedPickup.EncroachedBy
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void ADroppedPickup::EncroachedBy(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.EncroachedBy");

	ADroppedPickup_EncroachedBy_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DroppedPickup.SetPickupParticles
//		Flags  -> ()
// Parameters:
//		class UParticleSystemComponent*                    PickupParticles                                            (Parm, EditInline)
void ADroppedPickup::SetPickupParticles(class UParticleSystemComponent* PickupParticles)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.SetPickupParticles");

	ADroppedPickup_SetPickupParticles_Params params {};
	params.PickupParticles = PickupParticles;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DroppedPickup.SetPickupMesh
//		Flags  -> ()
// Parameters:
//		class UPrimitiveComponent*                         PickupMesh                                                 (Parm, EditInline)
void ADroppedPickup::SetPickupMesh(class UPrimitiveComponent* PickupMesh)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.SetPickupMesh");

	ADroppedPickup_SetPickupMesh_Params params {};
	params.PickupMesh = PickupMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DroppedPickup.Reset
//		Flags  -> ()
void ADroppedPickup::Reset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.Reset");

	ADroppedPickup_Reset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DroppedPickup.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void ADroppedPickup::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.ReplicatedEvent");

	ADroppedPickup_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DroppedPickup.Destroyed
//		Flags  -> ()
void ADroppedPickup::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.Destroyed");

	ADroppedPickup_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DroppedPickup.RemoveFromNavigation
//		Flags  -> ()
void ADroppedPickup::RemoveFromNavigation()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.RemoveFromNavigation");

	ADroppedPickup_RemoveFromNavigation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DroppedPickup.AddToNavigation
//		Flags  -> ()
void ADroppedPickup::AddToNavigation()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.AddToNavigation");

	ADroppedPickup_AddToNavigation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DynamicSMActor.SetLightEnvironmentToNotBeDynamic
//		Flags  -> ()
void ADynamicSMActor::SetLightEnvironmentToNotBeDynamic()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.SetLightEnvironmentToNotBeDynamic");

	ADynamicSMActor_SetLightEnvironmentToNotBeDynamic_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DynamicSMActor.Detach
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void ADynamicSMActor::Detach(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.Detach");

	ADynamicSMActor_Detach_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DynamicSMActor.Attach
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void ADynamicSMActor::Attach(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.Attach");

	ADynamicSMActor_Attach_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DynamicSMActor.CanBasePawn
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ADynamicSMActor::CanBasePawn(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.CanBasePawn");

	ADynamicSMActor_CanBasePawn_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DynamicSMActor.SetStaticMesh
//		Flags  -> ()
// Parameters:
//		class UStaticMesh*                                 NewMesh                                                    (Parm)
//		struct FVector                                     NewTranslation                                             (OptionalParm, Parm)
//		struct FRotator                                    NewRotation                                                (OptionalParm, Parm)
//		struct FVector                                     NewScale3D                                                 (OptionalParm, Parm)
void ADynamicSMActor::SetStaticMesh(class UStaticMesh* NewMesh, const struct FVector& NewTranslation, const struct FRotator& NewRotation, const struct FVector& NewScale3D)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.SetStaticMesh");

	ADynamicSMActor_SetStaticMesh_Params params {};
	params.NewMesh = NewMesh;
	params.NewTranslation = NewTranslation;
	params.NewRotation = NewRotation;
	params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DynamicSMActor.OnSetMaterial
//		Flags  -> ()
// Parameters:
//		class USeqAct_SetMaterial*                         Action                                                     (Parm)
void ADynamicSMActor::OnSetMaterial(class USeqAct_SetMaterial* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.OnSetMaterial");

	ADynamicSMActor_OnSetMaterial_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DynamicSMActor.OnSetMesh
//		Flags  -> ()
// Parameters:
//		class USeqAct_SetMesh*                             Action                                                     (Parm)
void ADynamicSMActor::OnSetMesh(class USeqAct_SetMesh* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.OnSetMesh");

	ADynamicSMActor_OnSetMesh_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DynamicSMActor.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void ADynamicSMActor::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.ReplicatedEvent");

	ADynamicSMActor_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DynamicSMActor.PostBeginPlay
//		Flags  -> ()
void ADynamicSMActor::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.PostBeginPlay");

	ADynamicSMActor_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.InterpActor.ApplyCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct AInterpActor_FCheckpointRecord              Record                                                     (Const, Parm, OutParm)
//void AInterpActor::ApplyCheckpointRecord(struct AInterpActor_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.ApplyCheckpointRecord");
//
//	AInterpActor_ApplyCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}


//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.InterpActor.CreateCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct AInterpActor_FCheckpointRecord              Record                                                     (Parm, OutParm)
//void AInterpActor::CreateCheckpointRecord(struct AInterpActor_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.CreateCheckpointRecord");
//
//	AInterpActor_CreateCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InterpActor.ShouldSaveForCheckpoint
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AInterpActor::ShouldSaveForCheckpoint()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.ShouldSaveForCheckpoint");

	AInterpActor_ShouldSaveForCheckpoint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InterpActor.ShutDown
//		Flags  -> ()
void AInterpActor::ShutDown()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.ShutDown");

	AInterpActor_ShutDown_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InterpActor.InterpolationChanged
//		Flags  -> ()
// Parameters:
//		class USeqAct_Interp*                              InterpAction                                               (Parm)
void AInterpActor::InterpolationChanged(class USeqAct_Interp* InterpAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.InterpolationChanged");

	AInterpActor_InterpolationChanged_Params params {};
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InterpActor.InterpolationFinished
//		Flags  -> ()
// Parameters:
//		class USeqAct_Interp*                              InterpAction                                               (Parm)
void AInterpActor::InterpolationFinished(class USeqAct_Interp* InterpAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.InterpolationFinished");

	AInterpActor_InterpolationFinished_Params params {};
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InterpActor.InterpolationStarted
//		Flags  -> ()
// Parameters:
//		class USeqAct_Interp*                              InterpAction                                               (Parm)
//		class UInterpGroupInst*                            GroupInst                                                  (Parm)
void AInterpActor::InterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.InterpolationStarted");

	AInterpActor_InterpolationStarted_Params params {};
	params.InterpAction = InterpAction;
	params.GroupInst = GroupInst;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InterpActor.PlayMovingSound
//		Flags  -> ()
// Parameters:
//		bool                                               bClosing                                                   (Parm)
void AInterpActor::PlayMovingSound(bool bClosing)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.PlayMovingSound");

	AInterpActor_PlayMovingSound_Params params {};
	params.bClosing = bClosing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InterpActor.FinishedOpen
//		Flags  -> ()
// Parameters:
void AInterpActor::FinishedOpen()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.FinishedOpen");

	AInterpActor_FinishedOpen_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InterpActor.Restart
//		Flags  -> ()
void AInterpActor::Restart()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.Restart");

	AInterpActor_Restart_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InterpActor.Detach
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void AInterpActor::Detach(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.Detach");

	AInterpActor_Detach_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InterpActor.Attach
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void AInterpActor::Attach(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.Attach");

	AInterpActor_Attach_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InterpActor.RanInto
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void AInterpActor::RanInto(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.RanInto");

	AInterpActor_RanInto_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InterpActor.EncroachingOn
//		Flags  -> (Singular, NetReliable, Native, Event, HasOptionalParms, Private, DLLImport, K2Override, K2Pure)
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AInterpActor::EncroachingOn(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.EncroachingOn");

	AInterpActor_EncroachingOn_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InterpActor.PostBeginPlay
//		Flags  -> ()
void AInterpActor::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.PostBeginPlay");

	AInterpActor_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Emitter.HideSelf
//		Flags  -> ()
void AEmitter::HideSelf()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Emitter.HideSelf");

	AEmitter_HideSelf_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.Emitter.ApplyCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct AEmitter_FCheckpointRecord                  Record                                                     (Const, Parm, OutParm)
//void AEmitter::ApplyCheckpointRecord(struct AEmitter_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Emitter.ApplyCheckpointRecord");
//
//	AEmitter_ApplyCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}


//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.Emitter.CreateCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct AEmitter_FCheckpointRecord                  Record                                                     (Parm, OutParm)
//void AEmitter::CreateCheckpointRecord(struct AEmitter_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Emitter.CreateCheckpointRecord");
//
//	AEmitter_CreateCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Emitter.ShouldSaveForCheckpoint
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AEmitter::ShouldSaveForCheckpoint()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Emitter.ShouldSaveForCheckpoint");

	AEmitter_ShouldSaveForCheckpoint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Emitter.OnSetParticleSysParam
//		Flags  -> ()
// Parameters:
//		class USeqAct_SetParticleSysParam*                 Action                                                     (Parm)
void AEmitter::OnSetParticleSysParam(class USeqAct_SetParticleSysParam* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnSetParticleSysParam");

	AEmitter_OnSetParticleSysParam_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Emitter.SetActorParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		class AActor*                                      Param                                                      (Parm)
void AEmitter::SetActorParameter(const struct FName& ParameterName, class AActor* Param)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetActorParameter");

	AEmitter_SetActorParameter_Params params {};
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Emitter.SetExtColorParameter
//		Flags  -> (Singular, NetReliable, Simulated, Exec, Native, HasOptionalParms, NetServer, HasOutParms, K2Call, K2Pure)
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		unsigned char                                      Red                                                        (Parm)
//		unsigned char                                      Green                                                      (Parm)
//		unsigned char                                      Blue                                                       (Parm)
//		unsigned char                                      Alpha                                                      (Parm)
void AEmitter::SetExtColorParameter(const struct FName& ParameterName, unsigned char Red, unsigned char Green, unsigned char Blue, unsigned char Alpha)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetExtColorParameter");

	AEmitter_SetExtColorParameter_Params params {};
	params.ParameterName = ParameterName;
	params.Red = Red;
	params.Green = Green;
	params.Blue = Blue;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Emitter.SetColorParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FColor                                      Param                                                      (Parm)
void AEmitter::SetColorParameter(const struct FName& ParameterName, const struct FColor& Param)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetColorParameter");

	AEmitter_SetColorParameter_Params params {};
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Emitter.SetVectorParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FVector                                     Param                                                      (Parm)
void AEmitter::SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetVectorParameter");

	AEmitter_SetVectorParameter_Params params {};
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Emitter.SetFloatParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		float                                              Param                                                      (Parm)
void AEmitter::SetFloatParameter(const struct FName& ParameterName, float Param)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetFloatParameter");

	AEmitter_SetFloatParameter_Params params {};
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Emitter.ShutDown
//		Flags  -> ()
void AEmitter::ShutDown()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Emitter.ShutDown");

	AEmitter_ShutDown_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Emitter.OnParticleEventGenerator
//		Flags  -> ()
// Parameters:
//		class USeqAct_ParticleEventGenerator*              Action                                                     (Parm)
void AEmitter::OnParticleEventGenerator(class USeqAct_ParticleEventGenerator* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnParticleEventGenerator");

	AEmitter_OnParticleEventGenerator_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Emitter.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void AEmitter::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnToggle");

	AEmitter_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Emitter.OnParticleSystemFinished
//		Flags  -> ()
// Parameters:
//		class UParticleSystemComponent*                    FinishedComponent                                          (Parm, EditInline)
void AEmitter::OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnParticleSystemFinished");

	AEmitter_OnParticleSystemFinished_Params params {};
	params.FinishedComponent = FinishedComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Emitter.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void AEmitter::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Emitter.ReplicatedEvent");

	AEmitter_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Emitter.PostBeginPlay
//		Flags  -> ()
void AEmitter::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Emitter.PostBeginPlay");

	AEmitter_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Emitter.SetTemplate
//		Flags  -> ()
// Parameters:
//		class UParticleSystem*                             NewTemplate                                                (Parm)
//		bool                                               bDestroyOnFinish                                           (OptionalParm, Parm)
void AEmitter::SetTemplate(class UParticleSystem* NewTemplate, bool bDestroyOnFinish)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetTemplate");

	AEmitter_SetTemplate_Params params {};
	params.NewTemplate = NewTemplate;
	params.bDestroyOnFinish = bDestroyOnFinish;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.EmitterPool.SpawnEmitterCustomLifetime
//		Flags  -> ()
// Parameters:
//		class UParticleSystem*                             EmitterTemplate                                            (Parm)
//		bool                                               bSkipAutoActivate                                          (OptionalParm, Parm)
//		class UParticleSystemComponent*                    ReturnValue                                                (Parm, OutParm, ReturnParm, EditInline)
class UParticleSystemComponent* AEmitterPool::SpawnEmitterCustomLifetime(class UParticleSystem* EmitterTemplate, bool bSkipAutoActivate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.SpawnEmitterCustomLifetime");

	AEmitterPool_SpawnEmitterCustomLifetime_Params params {};
	params.EmitterTemplate = EmitterTemplate;
	params.bSkipAutoActivate = bSkipAutoActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.EmitterPool.SpawnEmitterMeshAttachment
//		Flags  -> ()
// Parameters:
//		class UParticleSystem*                             EmitterTemplate                                            (Parm)
//		class USkeletalMeshComponent*                      Mesh                                                       (Parm, EditInline)
//		struct FName                                       AttachPointName                                            (Parm)
//		bool                                               bAttachToSocket                                            (OptionalParm, Parm)
//		struct FVector                                     RelativeLoc                                                (OptionalParm, Parm)
//		struct FRotator                                    RelativeRot                                                (OptionalParm, Parm)
//		class UParticleSystemComponent*                    ReturnValue                                                (Parm, OutParm, ReturnParm, EditInline)
class UParticleSystemComponent* AEmitterPool::SpawnEmitterMeshAttachment(class UParticleSystem* EmitterTemplate, class USkeletalMeshComponent* Mesh, const struct FName& AttachPointName, bool bAttachToSocket, const struct FVector& RelativeLoc, const struct FRotator& RelativeRot)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.SpawnEmitterMeshAttachment");

	AEmitterPool_SpawnEmitterMeshAttachment_Params params {};
	params.EmitterTemplate = EmitterTemplate;
	params.Mesh = Mesh;
	params.AttachPointName = AttachPointName;
	params.bAttachToSocket = bAttachToSocket;
	params.RelativeLoc = RelativeLoc;
	params.RelativeRot = RelativeRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.EmitterPool.SpawnEmitter
//		Flags  -> ()
// Parameters:
//		class UParticleSystem*                             EmitterTemplate                                            (Parm)
//		struct FVector                                     SpawnLocation                                              (Parm)
//		struct FRotator                                    SpawnRotation                                              (OptionalParm, Parm)
//		class AActor*                                      AttachToActor                                              (OptionalParm, Parm)
//		class AActor*                                      InInstigator                                               (OptionalParm, Parm)
//		int                                                MaxDLEPooledReuses                                         (OptionalParm, Parm)
//		bool                                               bInheritScaleFromBase                                      (OptionalParm, Parm)
//		class UParticleSystemComponent*                    ReturnValue                                                (Parm, OutParm, ReturnParm, EditInline)
class UParticleSystemComponent* AEmitterPool::SpawnEmitter(class UParticleSystem* EmitterTemplate, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class AActor* AttachToActor, class AActor* InInstigator, int MaxDLEPooledReuses, bool bInheritScaleFromBase)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.SpawnEmitter");

	AEmitterPool_SpawnEmitter_Params params {};
	params.EmitterTemplate = EmitterTemplate;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;
	params.AttachToActor = AttachToActor;
	params.InInstigator = InInstigator;
	params.MaxDLEPooledReuses = MaxDLEPooledReuses;
	params.bInheritScaleFromBase = bInheritScaleFromBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.EmitterPool.GetPooledComponent
//		Flags  -> ()
// Parameters:
//		class UParticleSystem*                             EmitterTemplate                                            (Parm)
//		bool                                               bAutoActivate                                              (Parm)
//		class UParticleSystemComponent*                    ReturnValue                                                (Parm, OutParm, ReturnParm, EditInline)
class UParticleSystemComponent* AEmitterPool::GetPooledComponent(class UParticleSystem* EmitterTemplate, bool bAutoActivate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.GetPooledComponent");

	AEmitterPool_GetPooledComponent_Params params {};
	params.EmitterTemplate = EmitterTemplate;
	params.bAutoActivate = bAutoActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.EmitterPool.GetFreeMatInstConsts
//		Flags  -> ()
// Parameters:
//		bool                                               bCreateNewObject                                           (OptionalParm, Parm)
//		class UMaterialInstanceConstant*                   ReturnValue                                                (Parm, OutParm, ReturnParm)
class UMaterialInstanceConstant* AEmitterPool::GetFreeMatInstConsts(bool bCreateNewObject)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.GetFreeMatInstConsts");

	AEmitterPool_GetFreeMatInstConsts_Params params {};
	params.bCreateNewObject = bCreateNewObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.EmitterPool.FreeMaterialInstanceConstants
//		Flags  -> ()
// Parameters:
//		class UStaticMeshComponent*                        SMC                                                        (Parm, EditInline)
void AEmitterPool::FreeMaterialInstanceConstants(class UStaticMeshComponent* SMC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.FreeMaterialInstanceConstants");

	AEmitterPool_FreeMaterialInstanceConstants_Params params {};
	params.SMC = SMC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.EmitterPool.GetFreeStaticMeshComponent
//		Flags  -> ()
// Parameters:
//		bool                                               bCreateNewObject                                           (OptionalParm, Parm)
//		class UStaticMeshComponent*                        ReturnValue                                                (Parm, OutParm, ReturnParm, EditInline)
class UStaticMeshComponent* AEmitterPool::GetFreeStaticMeshComponent(bool bCreateNewObject)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.GetFreeStaticMeshComponent");

	AEmitterPool_GetFreeStaticMeshComponent_Params params {};
	params.bCreateNewObject = bCreateNewObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.EmitterPool.FreeStaticMeshComponents
//		Flags  -> ()
// Parameters:
//		class UParticleSystemComponent*                    PSC                                                        (Parm, EditInline)
void AEmitterPool::FreeStaticMeshComponents(class UParticleSystemComponent* PSC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.FreeStaticMeshComponents");

	AEmitterPool_FreeStaticMeshComponents_Params params {};
	params.PSC = PSC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.EmitterPool.ReturnToPool
//		Flags  -> ()
// Parameters:
//		class UParticleSystemComponent*                    PSC                                                        (Parm, EditInline)
void AEmitterPool::ReturnToPool(class UParticleSystemComponent* PSC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.ReturnToPool");

	AEmitterPool_ReturnToPool_Params params {};
	params.PSC = PSC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.EmitterPool.ClearPoolComponents
//		Flags  -> ()
// Parameters:
//		bool                                               bClearActive                                               (OptionalParm, Parm)
void AEmitterPool::ClearPoolComponents(bool bClearActive)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.ClearPoolComponents");

	AEmitterPool_ClearPoolComponents_Params params {};
	params.bClearActive = bClearActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.EmitterPool.OnParticleSystemFinished
//		Flags  -> ()
// Parameters:
//		class UParticleSystemComponent*                    PSC                                                        (Parm, EditInline)
void AEmitterPool::OnParticleSystemFinished(class UParticleSystemComponent* PSC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.OnParticleSystemFinished");

	AEmitterPool_OnParticleSystemFinished_Params params {};
	params.PSC = PSC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.DrawDebugGraph
//		Flags  -> ()
// Parameters:
//		struct FString                                     Title                                                      (Parm, CoerceParm, NeedCtorLink)
//		float                                              ValueX                                                     (Parm)
//		float                                              ValueY                                                     (Parm)
//		float                                              UL_X                                                       (Parm)
//		float                                              UL_Y                                                       (Parm)
//		float                                              W                                                          (Parm)
//		float                                              H                                                          (Parm)
//		struct FVector2D                                   RangeX                                                     (Parm)
//		struct FVector2D                                   RangeY                                                     (Parm)
void UCanvas::DrawDebugGraph(const struct FString& Title, float ValueX, float ValueY, float UL_X, float UL_Y, float W, float H, const struct FVector2D& RangeX, const struct FVector2D& RangeY)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawDebugGraph");

	UCanvas_DrawDebugGraph_Params params {};
	params.Title = Title;
	params.ValueX = ValueX;
	params.ValueY = ValueY;
	params.UL_X = UL_X;
	params.UL_Y = UL_Y;
	params.W = W;
	params.H = H;
	params.RangeX = RangeX;
	params.RangeY = RangeY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.DrawTextureDoubleLine
//		Flags  -> ()
// Parameters:
//		struct FVector                                     StartPoint                                                 (Parm)
//		struct FVector                                     EndPoint                                                   (Parm)
//		float                                              Perc                                                       (Parm)
//		float                                              Spacing                                                    (Parm)
//		float                                              Width                                                      (Parm)
//		struct FColor                                      LineColor                                                  (Parm)
//		struct FColor                                      AltLineColor                                               (Parm)
//		class UTexture*                                    Tex                                                        (Parm)
//		float                                              U                                                          (Parm)
//		float                                              V                                                          (Parm)
//		float                                              UL                                                         (Parm)
//		float                                              VL                                                         (Parm)
void UCanvas::DrawTextureDoubleLine(const struct FVector& StartPoint, const struct FVector& EndPoint, float Perc, float Spacing, float Width, const struct FColor& LineColor, const struct FColor& AltLineColor, class UTexture* Tex, float U, float V, float UL, float VL)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTextureDoubleLine");

	UCanvas_DrawTextureDoubleLine_Params params {};
	params.StartPoint = StartPoint;
	params.EndPoint = EndPoint;
	params.Perc = Perc;
	params.Spacing = Spacing;
	params.Width = Width;
	params.LineColor = LineColor;
	params.AltLineColor = AltLineColor;
	params.Tex = Tex;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.DrawTextureLine
//		Flags  -> ()
// Parameters:
//		struct FVector                                     StartPoint                                                 (Parm)
//		struct FVector                                     EndPoint                                                   (Parm)
//		float                                              Perc                                                       (Parm)
//		float                                              Width                                                      (Parm)
//		struct FColor                                      LineColor                                                  (Parm)
//		class UTexture*                                    LineTexture                                                (Parm)
//		float                                              U                                                          (Parm)
//		float                                              V                                                          (Parm)
//		float                                              UL                                                         (Parm)
//		float                                              VL                                                         (Parm)
void UCanvas::DrawTextureLine(const struct FVector& StartPoint, const struct FVector& EndPoint, float Perc, float Width, const struct FColor& LineColor, class UTexture* LineTexture, float U, float V, float UL, float VL)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTextureLine");

	UCanvas_DrawTextureLine_Params params {};
	params.StartPoint = StartPoint;
	params.EndPoint = EndPoint;
	params.Perc = Perc;
	params.Width = Width;
	params.LineColor = LineColor;
	params.LineTexture = LineTexture;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.Draw2DLine
//		Flags  -> ()
// Parameters:
//		float                                              X1                                                         (Parm)
//		float                                              Y1                                                         (Parm)
//		float                                              X2                                                         (Parm)
//		float                                              Y2                                                         (Parm)
//		struct FColor                                      LineColor                                                  (Parm)
void UCanvas::Draw2DLine(float X1, float Y1, float X2, float Y2, const struct FColor& LineColor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.Draw2DLine");

	UCanvas_Draw2DLine_Params params {};
	params.X1 = X1;
	params.Y1 = Y1;
	params.X2 = X2;
	params.Y2 = Y2;
	params.LineColor = LineColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.SetDrawColorStruct
//		Flags  -> ()
// Parameters:
//		struct FColor                                      C                                                          (Parm)
void UCanvas::SetDrawColorStruct(const struct FColor& C)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetDrawColorStruct");

	UCanvas_SetDrawColorStruct_Params params {};
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.SetDrawColor
//		Flags  -> ()
// Parameters:
//		unsigned char                                      R                                                          (Parm)
//		unsigned char                                      G                                                          (Parm)
//		unsigned char                                      B                                                          (Parm)
//		unsigned char                                      A                                                          (OptionalParm, Parm)
void UCanvas::SetDrawColor(unsigned char R, unsigned char G, unsigned char B, unsigned char A)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetDrawColor");

	UCanvas_SetDrawColor_Params params {};
	params.R = R;
	params.G = G;
	params.B = B;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.DrawBox
//		Flags  -> ()
// Parameters:
//		float                                              Width                                                      (Parm)
//		float                                              Height                                                     (Parm)
void UCanvas::DrawBox(float Width, float Height)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawBox");

	UCanvas_DrawBox_Params params {};
	params.Width = Width;
	params.Height = Height;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.DrawRect
//		Flags  -> ()
// Parameters:
//		float                                              RectX                                                      (Parm)
//		float                                              RectY                                                      (Parm)
//		class UTexture*                                    Tex                                                        (OptionalParm, Parm)
void UCanvas::DrawRect(float RectX, float RectY, class UTexture* Tex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawRect");

	UCanvas_DrawRect_Params params {};
	params.RectX = RectX;
	params.RectY = RectY;
	params.Tex = Tex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.DrawIcon
//		Flags  -> ()
// Parameters:
//		struct FCanvasIcon                                 Icon                                                       (Parm)
//		float                                              X                                                          (Parm)
//		float                                              Y                                                          (Parm)
//		float                                              Scale                                                      (OptionalParm, Parm)
void UCanvas::DrawIcon(const struct FCanvasIcon& Icon, float X, float Y, float Scale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawIcon");

	UCanvas_DrawIcon_Params params {};
	params.Icon = Icon;
	params.X = X;
	params.Y = Y;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.DrawScaledIcon
//		Flags  -> ()
// Parameters:
//		struct FCanvasIcon                                 Icon                                                       (Parm)
//		float                                              X                                                          (Parm)
//		float                                              Y                                                          (Parm)
//		struct FVector                                     Scale                                                      (Parm)
void UCanvas::DrawScaledIcon(const struct FCanvasIcon& Icon, float X, float Y, const struct FVector& Scale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawScaledIcon");

	UCanvas_DrawScaledIcon_Params params {};
	params.Icon = Icon;
	params.X = X;
	params.Y = Y;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.MakeIcon
//		Flags  -> (NetReliable, Const, Public, Private, HasOutParms, K2Call, K2Pure)
// Parameters:
//		class UTexture*                                    Texture                                                    (Parm)
//		float                                              U                                                          (OptionalParm, Parm)
//		float                                              V                                                          (OptionalParm, Parm)
//		float                                              UL                                                         (OptionalParm, Parm)
//		float                                              VL                                                         (OptionalParm, Parm)
//		struct FCanvasIcon                                 ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FCanvasIcon UCanvas::MakeIcon(class UTexture* Texture, float U, float V, float UL, float VL)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.MakeIcon");

	UCanvas_MakeIcon_Params params {};
	params.Texture = Texture;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.DrawBlendedTile
//		Flags  -> ()
// Parameters:
//		class UTexture*                                    Tex                                                        (Parm)
//		float                                              XL                                                         (Parm)
//		float                                              YL                                                         (Parm)
//		float                                              U                                                          (Parm)
//		float                                              V                                                          (Parm)
//		float                                              UL                                                         (Parm)
//		float                                              VL                                                         (Parm)
//		TEnumAsByte<Engine_ECanvasBlendMode>               Blend                                                      (Parm)
void UCanvas::DrawBlendedTile(class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, TEnumAsByte<Engine_ECanvasBlendMode> Blend)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawBlendedTile");

	UCanvas_DrawBlendedTile_Params params {};
	params.Tex = Tex;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.Blend = Blend;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.DrawTexture
//		Flags  -> ()
// Parameters:
//		class UTexture*                                    Tex                                                        (Parm)
//		float                                              Scale                                                      (Parm)
void UCanvas::DrawTexture(class UTexture* Tex, float Scale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTexture");

	UCanvas_DrawTexture_Params params {};
	params.Tex = Tex;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.PopMaskRegion
//		Flags  -> ()
void UCanvas::PopMaskRegion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.PopMaskRegion");

	UCanvas_PopMaskRegion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.PushMaskRegion
//		Flags  -> ()
// Parameters:
//		float                                              X                                                          (Parm)
//		float                                              Y                                                          (Parm)
//		float                                              XL                                                         (Parm)
//		float                                              YL                                                         (Parm)
void UCanvas::PushMaskRegion(float X, float Y, float XL, float YL)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.PushMaskRegion");

	UCanvas_PushMaskRegion_Params params {};
	params.X = X;
	params.Y = Y;
	params.XL = XL;
	params.YL = YL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.SetClip
//		Flags  -> ()
// Parameters:
//		float                                              X                                                          (Parm)
//		float                                              Y                                                          (Parm)
void UCanvas::SetClip(float X, float Y)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetClip");

	UCanvas_SetClip_Params params {};
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.SetOrigin
//		Flags  -> ()
// Parameters:
//		float                                              X                                                          (Parm)
//		float                                              Y                                                          (Parm)
void UCanvas::SetOrigin(float X, float Y)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetOrigin");

	UCanvas_SetOrigin_Params params {};
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.SetPos
//		Flags  -> ()
// Parameters:
//		float                                              PosX                                                       (Parm)
//		float                                              PosY                                                       (Parm)
//		float                                              PosZ                                                       (OptionalParm, Parm)
void UCanvas::SetPos(float PosX, float PosY, float PosZ)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetPos");

	UCanvas_SetPos_Params params {};
	params.PosX = PosX;
	params.PosY = PosY;
	params.PosZ = PosZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.GetDefaultCanvasFont
//		Flags  -> ()
// Parameters:
//		class UFont*                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class UFont* UCanvas::GetDefaultCanvasFont()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.GetDefaultCanvasFont");

	UCanvas_GetDefaultCanvasFont_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.Reset
//		Flags  -> ()
// Parameters:
//		bool                                               bKeepOrigin                                                (OptionalParm, Parm)
void UCanvas::Reset(bool bKeepOrigin)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.Reset");

	UCanvas_Reset_Params params {};
	params.bKeepOrigin = bKeepOrigin;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.Flush
//		Flags  -> ()
void UCanvas::Flush()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.Flush");

	UCanvas_Flush_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.PopTransform
//		Flags  -> ()
void UCanvas::PopTransform()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.PopTransform");

	UCanvas_PopTransform_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.PushTranslationMatrix
//		Flags  -> ()
// Parameters:
//		struct FVector                                     TranslationVector                                          (Parm)
void UCanvas::PushTranslationMatrix(const struct FVector& TranslationVector)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.PushTranslationMatrix");

	UCanvas_PushTranslationMatrix_Params params {};
	params.TranslationVector = TranslationVector;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.DeProject
//		Flags  -> ()
// Parameters:
//		struct FVector2D                                   ScreenPos                                                  (Parm)
//		struct FVector                                     WorldOrigin                                                (Parm, OutParm)
//		struct FVector                                     WorldDirection                                             (Parm, OutParm)
void UCanvas::DeProject(const struct FVector2D& ScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DeProject");

	UCanvas_DeProject_Params params {};
	params.ScreenPos = ScreenPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (WorldOrigin != nullptr)
		*WorldOrigin = params.WorldOrigin;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.Project
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Location                                                   (Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector UCanvas::Project(const struct FVector& Location)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.Project");

	UCanvas_Project_Params params {};
	params.Location = Location;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.DrawTextViewportClipText
//		Flags  -> ()
// Parameters:
//		struct FString                                     Text                                                       (Parm, CoerceParm, NeedCtorLink)
//		bool                                               CR                                                         (OptionalParm, Parm)
//		float                                              XScale                                                     (OptionalParm, Parm)
//		float                                              YScale                                                     (OptionalParm, Parm)
//		struct FFontRenderInfo                             RenderInfo                                                 (Const, OptionalParm, Parm, OutParm)
void UCanvas::DrawTextViewportClipText(const struct FString& Text, bool CR, float XScale, float YScale, struct FFontRenderInfo* RenderInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTextViewportClipText");

	UCanvas_DrawTextViewportClipText_Params params {};
	params.Text = Text;
	params.CR = CR;
	params.XScale = XScale;
	params.YScale = YScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (RenderInfo != nullptr)
		*RenderInfo = params.RenderInfo;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.DrawText
//		Flags  -> ()
// Parameters:
//		struct FString                                     Text                                                       (Parm, CoerceParm, NeedCtorLink)
//		bool                                               CR                                                         (OptionalParm, Parm)
//		float                                              XScale                                                     (OptionalParm, Parm)
//		float                                              YScale                                                     (OptionalParm, Parm)
//		struct FFontRenderInfo                             RenderInfo                                                 (Const, OptionalParm, Parm, OutParm)
void UCanvas::DrawTextE(const struct FString& Text, bool CR, float XScale, float YScale, struct FFontRenderInfo* RenderInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawText");

	UCanvas_DrawText_Params params {};
	params.Text = Text;
	params.CR = CR;
	params.XScale = XScale;
	params.YScale = YScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (RenderInfo != nullptr)
		*RenderInfo = params.RenderInfo;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.TextSize
//		Flags  -> ()
// Parameters:
//		struct FString                                     String                                                     (Parm, CoerceParm, NeedCtorLink)
//		float                                              XL                                                         (Parm, OutParm)
//		float                                              YL                                                         (Parm, OutParm)
//		float                                              XScale                                                     (OptionalParm, Parm)
//		float                                              YScale                                                     (OptionalParm, Parm)
void UCanvas::TextSize(const struct FString& String, float* XL, float* YL, float XScale, float YScale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.TextSize");

	UCanvas_TextSize_Params params {};
	params.String = String;
	params.XScale = XScale;
	params.YScale = YScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (XL != nullptr)
		*XL = params.XL;
	if (YL != nullptr)
		*YL = params.YL;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.StrLen
//		Flags  -> ()
// Parameters:
//		struct FString                                     String                                                     (Parm, CoerceParm, NeedCtorLink)
//		float                                              XL                                                         (Parm, OutParm)
//		float                                              YL                                                         (Parm, OutParm)
void UCanvas::StrLen(const struct FString& String, float* XL, float* YL)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.StrLen");

	UCanvas_StrLen_Params params {};
	params.String = String;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (XL != nullptr)
		*XL = params.XL;
	if (YL != nullptr)
		*YL = params.YL;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.CreateFontRenderInfo
//		Flags  -> (Singular, Net, Event, Operator, Static, HasOptionalParms, Public, Private, HasOutParms, K2Call, K2Pure)
// Parameters:
//		bool                                               bClipText                                                  (OptionalParm, Parm)
//		bool                                               bEnableShadow                                              (OptionalParm, Parm)
//		struct FLinearColor                                GlowColor                                                  (OptionalParm, Parm)
//		struct FVector2D                                   GlowOuterRadius                                            (OptionalParm, Parm)
//		struct FVector2D                                   GlowInnerRadius                                            (OptionalParm, Parm)
//		struct FFontRenderInfo                             ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FFontRenderInfo UCanvas::STATIC_CreateFontRenderInfo(bool bClipText, bool bEnableShadow, const struct FLinearColor& GlowColor, const struct FVector2D& GlowOuterRadius, const struct FVector2D& GlowInnerRadius)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.CreateFontRenderInfo");

	UCanvas_CreateFontRenderInfo_Params params {};
	params.bClipText = bClipText;
	params.bEnableShadow = bEnableShadow;
	params.GlowColor = GlowColor;
	params.GlowOuterRadius = GlowOuterRadius;
	params.GlowInnerRadius = GlowInnerRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.DrawTris
//		Flags  -> ()
// Parameters:
//		class UTexture*                                    Tex                                                        (Parm)
//		TArray<struct FCanvasUVTri>                        Triangles                                                  (Parm, NeedCtorLink)
//		struct FColor                                      InColor                                                    (Parm)
void UCanvas::DrawTris(class UTexture* Tex, TArray<struct FCanvasUVTri> Triangles, const struct FColor& InColor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTris");

	UCanvas_DrawTris_Params params {};
	params.Tex = Tex;
	params.Triangles = Triangles;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.DrawTileStretched
//		Flags  -> ()
// Parameters:
//		class UTexture*                                    Tex                                                        (Parm)
//		float                                              XL                                                         (Parm)
//		float                                              YL                                                         (Parm)
//		float                                              U                                                          (Parm)
//		float                                              V                                                          (Parm)
//		float                                              UL                                                         (Parm)
//		float                                              VL                                                         (Parm)
//		struct FLinearColor                                LColor                                                     (OptionalParm, Parm)
//		bool                                               bStretchHorizontally                                       (OptionalParm, Parm)
//		bool                                               bStretchVertically                                         (OptionalParm, Parm)
//		float                                              ScalingFactor                                              (OptionalParm, Parm)
void UCanvas::DrawTileStretched(class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, const struct FLinearColor& LColor, bool bStretchHorizontally, bool bStretchVertically, float ScalingFactor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTileStretched");

	UCanvas_DrawTileStretched_Params params {};
	params.Tex = Tex;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.LColor = LColor;
	params.bStretchHorizontally = bStretchHorizontally;
	params.bStretchVertically = bStretchVertically;
	params.ScalingFactor = ScalingFactor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.DrawTimer
//		Flags  -> ()
// Parameters:
//		class UTexture*                                    Tex                                                        (Parm)
//		float                                              StartTime                                                  (Parm)
//		float                                              TotalTime                                                  (Parm)
//		float                                              XL                                                         (Parm)
//		float                                              YL                                                         (Parm)
//		float                                              U                                                          (Parm)
//		float                                              V                                                          (Parm)
//		float                                              UL                                                         (Parm)
//		float                                              VL                                                         (Parm)
//		struct FLinearColor                                LColor                                                     (OptionalParm, Parm)
//		TEnumAsByte<Engine_EBlendMode>                     Blend                                                      (OptionalParm, Parm)
void UCanvas::DrawTimer(class UTexture* Tex, float StartTime, float TotalTime, float XL, float YL, float U, float V, float UL, float VL, const struct FLinearColor& LColor, TEnumAsByte<Engine_EBlendMode> Blend)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTimer");

	UCanvas_DrawTimer_Params params {};
	params.Tex = Tex;
	params.StartTime = StartTime;
	params.TotalTime = TotalTime;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.LColor = LColor;
	params.Blend = Blend;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.DrawRotatedMaterialTile
//		Flags  -> ()
// Parameters:
//		class UMaterialInterface*                          Mat                                                        (Parm)
//		struct FRotator                                    Rotation                                                   (Parm)
//		float                                              XL                                                         (Parm)
//		float                                              YL                                                         (Parm)
//		float                                              U                                                          (OptionalParm, Parm)
//		float                                              V                                                          (OptionalParm, Parm)
//		float                                              UL                                                         (OptionalParm, Parm)
//		float                                              VL                                                         (OptionalParm, Parm)
//		float                                              AnchorX                                                    (OptionalParm, Parm)
//		float                                              AnchorY                                                    (OptionalParm, Parm)
void UCanvas::DrawRotatedMaterialTile(class UMaterialInterface* Mat, const struct FRotator& Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawRotatedMaterialTile");

	UCanvas_DrawRotatedMaterialTile_Params params {};
	params.Mat = Mat;
	params.Rotation = Rotation;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.AnchorX = AnchorX;
	params.AnchorY = AnchorY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.DrawRotatedTile
//		Flags  -> ()
// Parameters:
//		class UTexture*                                    Tex                                                        (Parm)
//		struct FRotator                                    Rotation                                                   (Parm)
//		float                                              XL                                                         (Parm)
//		float                                              YL                                                         (Parm)
//		float                                              U                                                          (Parm)
//		float                                              V                                                          (Parm)
//		float                                              UL                                                         (Parm)
//		float                                              VL                                                         (Parm)
//		float                                              AnchorX                                                    (OptionalParm, Parm)
//		float                                              AnchorY                                                    (OptionalParm, Parm)
void UCanvas::DrawRotatedTile(class UTexture* Tex, const struct FRotator& Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawRotatedTile");

	UCanvas_DrawRotatedTile_Params params {};
	params.Tex = Tex;
	params.Rotation = Rotation;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.AnchorX = AnchorX;
	params.AnchorY = AnchorY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.DrawMaterialTile
//		Flags  -> ()
// Parameters:
//		class UMaterialInterface*                          Mat                                                        (Parm)
//		float                                              XL                                                         (Parm)
//		float                                              YL                                                         (Parm)
//		float                                              U                                                          (OptionalParm, Parm)
//		float                                              V                                                          (OptionalParm, Parm)
//		float                                              UL                                                         (OptionalParm, Parm)
//		float                                              VL                                                         (OptionalParm, Parm)
//		bool                                               bClipTile                                                  (OptionalParm, Parm)
void UCanvas::DrawMaterialTile(class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL, bool bClipTile)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawMaterialTile");

	UCanvas_DrawMaterialTile_Params params {};
	params.Mat = Mat;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.bClipTile = bClipTile;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.PreOptimizeDrawTiles
//		Flags  -> ()
// Parameters:
//		int                                                Num                                                        (Parm)
//		class UTexture*                                    Tex                                                        (Parm)
//		TEnumAsByte<Engine_EBlendMode>                     Blend                                                      (OptionalParm, Parm)
void UCanvas::PreOptimizeDrawTiles(int Num, class UTexture* Tex, TEnumAsByte<Engine_EBlendMode> Blend)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.PreOptimizeDrawTiles");

	UCanvas_PreOptimizeDrawTiles_Params params {};
	params.Num = Num;
	params.Tex = Tex;
	params.Blend = Blend;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.DrawTile
//		Flags  -> ()
// Parameters:
//		class UTexture*                                    Tex                                                        (Parm)
//		float                                              XL                                                         (Parm)
//		float                                              YL                                                         (Parm)
//		float                                              U                                                          (Parm)
//		float                                              V                                                          (Parm)
//		float                                              UL                                                         (Parm)
//		float                                              VL                                                         (Parm)
//		struct FLinearColor                                LColor                                                     (OptionalParm, Parm)
//		bool                                               ClipTile                                                   (OptionalParm, Parm)
//		TEnumAsByte<Engine_EBlendMode>                     Blend                                                      (OptionalParm, Parm)
void UCanvas::DrawTile(class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, const struct FLinearColor& LColor, bool ClipTile, TEnumAsByte<Engine_EBlendMode> Blend)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTile");

	UCanvas_DrawTile_Params params {};
	params.Tex = Tex;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.LColor = LColor;
	params.ClipTile = ClipTile;
	params.Blend = Blend;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.TopDepthSortKey
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UCanvas::TopDepthSortKey()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.TopDepthSortKey");

	UCanvas_TopDepthSortKey_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.PopDepthSortKey
//		Flags  -> ()
void UCanvas::PopDepthSortKey()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.PopDepthSortKey");

	UCanvas_PopDepthSortKey_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.PushDepthSortKey
//		Flags  -> ()
// Parameters:
//		int                                                Key                                                        (Parm)
void UCanvas::PushDepthSortKey(int Key)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.PushDepthSortKey");

	UCanvas_PushDepthSortKey_Params params {};
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.DisableFullBatchOptimization
//		Flags  -> ()
void UCanvas::DisableFullBatchOptimization()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DisableFullBatchOptimization");

	UCanvas_DisableFullBatchOptimization_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Canvas.EnableFullBatchOptimization
//		Flags  -> ()
void UCanvas::EnableFullBatchOptimization()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Canvas.EnableFullBatchOptimization");

	UCanvas_EnableFullBatchOptimization_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.OnLostFocusPause
//		Flags  -> ()
// Parameters:
//		bool                                               bEnable                                                    (Parm)
void AHUD::OnLostFocusPause(bool bEnable)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.OnLostFocusPause");

	AHUD_OnLostFocusPause_Params params {};
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.NotifyBindPostProcessEffects
//		Flags  -> ()
void AHUD::NotifyBindPostProcessEffects()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.NotifyBindPostProcessEffects");

	AHUD_NotifyBindPostProcessEffects_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.PlayerOwnerDied
//		Flags  -> ()
void AHUD::PlayerOwnerDied()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.PlayerOwnerDied");

	AHUD_PlayerOwnerDied_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.GetFontSizeIndex
//		Flags  -> ()
// Parameters:
//		int                                                FontSize                                                   (Parm)
//		class UFont*                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class UFont* AHUD::GetFontSizeIndex(int FontSize)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetFontSizeIndex");

	AHUD_GetFontSizeIndex_Params params {};
	params.FontSize = FontSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.DrawText
//		Flags  -> ()
// Parameters:
//		struct FString                                     Text                                                       (Parm, NeedCtorLink)
//		struct FVector2D                                   Position                                                   (Parm)
//		class UFont*                                       TextFont                                                   (Parm)
//		struct FVector2D                                   FontScale                                                  (Parm)
//		struct FColor                                      TextColor                                                  (Parm)
//		struct FFontRenderInfo                             RenderInfo                                                 (Const, OptionalParm, Parm, OutParm)
void AHUD::DrawText(const struct FString& Text, const struct FVector2D& Position, class UFont* TextFont, const struct FVector2D& FontScale, const struct FColor& TextColor, struct FFontRenderInfo* RenderInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawText");

	AHUD_DrawText_Params params {};
	params.Text = Text;
	params.Position = Position;
	params.TextFont = TextFont;
	params.FontScale = FontScale;
	params.TextColor = TextColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (RenderInfo != nullptr)
		*RenderInfo = params.RenderInfo;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.DisplayKismetMessages
//		Flags  -> ()
void AHUD::DisplayKismetMessages()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.DisplayKismetMessages");

	AHUD_DisplayKismetMessages_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.DisplayLocalMessages
//		Flags  -> ()
// Parameters:
void AHUD::DisplayLocalMessages()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.DisplayLocalMessages");

	AHUD_DisplayLocalMessages_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.DrawMessageText
//		Flags  -> (Simulated, Native, Event, Const, Private, Delegate, NetServer, HasDefaults, NetClient, K2Override, K2Pure)
// Parameters:
//		struct FHudLocalizedMessage                        LocalMessage                                               (Parm, NeedCtorLink)
//		float                                              ScreenX                                                    (Parm)
//		float                                              ScreenY                                                    (Parm)
void AHUD::DrawMessageText(const struct FHudLocalizedMessage& LocalMessage, float ScreenX, float ScreenY)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawMessageText");

	AHUD_DrawMessageText_Params params {};
	params.LocalMessage = LocalMessage;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.DrawMessage
//		Flags  -> ()
// Parameters:
//		int                                                I                                                          (Parm)
//		float                                              PosY                                                       (Parm)
//		float                                              DX                                                         (Parm, OutParm)
//		float                                              DY                                                         (Parm, OutParm)
void AHUD::DrawMessage(int I, float PosY, float* DX, float* DY)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawMessage");

	AHUD_DrawMessage_Params params {};
	params.I = I;
	params.PosY = PosY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DX != nullptr)
		*DX = params.DX;
	if (DY != nullptr)
		*DY = params.DY;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.GetScreenCoords
//		Flags  -> ()
// Parameters:
//		float                                              PosY                                                       (Parm)
//		float                                              ScreenX                                                    (Parm, OutParm)
//		float                                              ScreenY                                                    (Parm, OutParm)
//		struct FHudLocalizedMessage                        InMessage                                                  (Parm, OutParm, NeedCtorLink)
void AHUD::GetScreenCoords(float PosY, float* ScreenX, float* ScreenY, struct FHudLocalizedMessage* InMessage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetScreenCoords");

	AHUD_GetScreenCoords_Params params {};
	params.PosY = PosY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ScreenX != nullptr)
		*ScreenX = params.ScreenX;
	if (ScreenY != nullptr)
		*ScreenY = params.ScreenY;
	if (InMessage != nullptr)
		*InMessage = params.InMessage;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.AddLocalizedMessage
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
//		class UClass*                                      InMessageClass                                             (Parm)
//		struct FString                                     CriticalString                                             (Parm, NeedCtorLink)
//		int                                                Switch                                                     (Parm)
//		float                                              Position                                                   (Parm)
//		float                                              Lifetime                                                   (Parm)
//		int                                                FontSize                                                   (Parm)
//		struct FColor                                      DrawColor                                                  (Parm)
//		int                                                MessageCount                                               (OptionalParm, Parm)
//		class UObject*                                     OptionalObject                                             (OptionalParm, Parm)
void AHUD::AddLocalizedMessage(int Index, class UClass* InMessageClass, const struct FString& CriticalString, int Switch, float Position, float Lifetime, int FontSize, const struct FColor& DrawColor, int MessageCount, class UObject* OptionalObject)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.AddLocalizedMessage");

	AHUD_AddLocalizedMessage_Params params {};
	params.Index = Index;
	params.InMessageClass = InMessageClass;
	params.CriticalString = CriticalString;
	params.Switch = Switch;
	params.Position = Position;
	params.Lifetime = Lifetime;
	params.FontSize = FontSize;
	params.DrawColor = DrawColor;
	params.MessageCount = MessageCount;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.LocalizedMessage
//		Flags  -> ()
// Parameters:
//		class UClass*                                      InMessageClass                                             (Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_2                                               (Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_3                                               (Parm)
//		struct FString                                     CriticalString                                             (Parm, NeedCtorLink)
//		int                                                Switch                                                     (Parm)
//		float                                              Position                                                   (Parm)
//		float                                              Lifetime                                                   (Parm)
//		int                                                FontSize                                                   (Parm)
//		struct FColor                                      DrawColor                                                  (Parm)
//		class UObject*                                     OptionalObject                                             (OptionalParm, Parm)
void AHUD::LocalizedMessage(class UClass* InMessageClass, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, const struct FString& CriticalString, int Switch, float Position, float Lifetime, int FontSize, const struct FColor& DrawColor, class UObject* OptionalObject)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.LocalizedMessage");

	AHUD_LocalizedMessage_Params params {};
	params.InMessageClass = InMessageClass;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.CriticalString = CriticalString;
	params.Switch = Switch;
	params.Position = Position;
	params.Lifetime = Lifetime;
	params.FontSize = FontSize;
	params.DrawColor = DrawColor;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.AddConsoleMessage
//		Flags  -> ()
// Parameters:
//		struct FString                                     M                                                          (Parm, NeedCtorLink)
//		class UClass*                                      InMessageClass                                             (Parm)
//		class APlayerReplicationInfo*                      PRI                                                        (Parm)
//		float                                              Lifetime                                                   (OptionalParm, Parm)
void AHUD::AddConsoleMessage(const struct FString& M, class UClass* InMessageClass, class APlayerReplicationInfo* PRI, float Lifetime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.AddConsoleMessage");

	AHUD_AddConsoleMessage_Params params {};
	params.M = M;
	params.InMessageClass = InMessageClass;
	params.PRI = PRI;
	params.Lifetime = Lifetime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.ShouldShowConsoleMessage
//		Flags  -> ()
// Parameters:
//		struct FConsoleMessage                             InConsoleMessage                                           (Const, Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AHUD::ShouldShowConsoleMessage(const struct FConsoleMessage& InConsoleMessage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShouldShowConsoleMessage");

	AHUD_ShouldShowConsoleMessage_Params params {};
	params.InConsoleMessage = InConsoleMessage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.DisplayConsoleMessages
//		Flags  -> ()
// Parameters:
void AHUD::DisplayConsoleMessages()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.DisplayConsoleMessages");

	AHUD_DisplayConsoleMessages_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.Message
//		Flags  -> ()
// Parameters:
//		class APlayerReplicationInfo*                      PRI                                                        (Parm)
//		struct FString                                     msg                                                        (Parm, CoerceParm, NeedCtorLink)
//		struct FName                                       MsgType                                                    (Parm)
//		float                                              Lifetime                                                   (OptionalParm, Parm)
void AHUD::Message(class APlayerReplicationInfo* PRI, const struct FString& msg, const struct FName& MsgType, float Lifetime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.Message");

	AHUD_Message_Params params {};
	params.PRI = PRI;
	params.msg = msg;
	params.MsgType = MsgType;
	params.Lifetime = Lifetime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.ClearMessage
//		Flags  -> ()
// Parameters:
//		struct FHudLocalizedMessage                        M                                                          (Parm, OutParm, NeedCtorLink)
void AHUD::ClearMessage(struct FHudLocalizedMessage* M)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.ClearMessage");

	AHUD_ClearMessage_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (M != nullptr)
		*M = params.M;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.DisplayBadConnectionAlert
//		Flags  -> ()
void AHUD::DisplayBadConnectionAlert()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.DisplayBadConnectionAlert");

	AHUD_DisplayBadConnectionAlert_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.DrawHUD
//		Flags  -> (Net, Native, Event, Operator, HasOptionalParms, Private, Delegate, NetServer, HasDefaults, NetClient, K2Override, K2Pure)
// Parameters:
void AHUD::DrawHUD()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawHUD");

	AHUD_DrawHUD_Params params {};

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.PostRender
//		Flags  -> ()
// Parameters:
void AHUD::PostRender()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.PostRender");

	AHUD_PostRender_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.PreCalcValues
//		Flags  -> ()
void AHUD::PreCalcValues()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.PreCalcValues");

	AHUD_PreCalcValues_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.DrawRoute
//		Flags  -> (Singular, Net, NetReliable, Simulated, Static, HasOptionalParms, Private, Delegate, NetServer, HasDefaults, NetClient, K2Override, K2Pure)
// Parameters:
//		class APawn*                                       Target                                                     (Parm)
void AHUD::STATIC_DrawRoute(class APawn* Target)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawRoute");

	AHUD_DrawRoute_Params params {};
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.ShowDebugInfo
//		Flags  -> ()
// Parameters:
//		float                                              out_YL                                                     (Parm, OutParm)
//		float                                              out_YPos                                                   (Parm, OutParm)
void AHUD::ShowDebugInfo(float* out_YL, float* out_YPos)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebugInfo");

	AHUD_ShowDebugInfo_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.ToggleDirectorInfoDebug
//		Flags  -> ()
void AHUD::ToggleDirectorInfoDebug()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.ToggleDirectorInfoDebug");

	AHUD_ToggleDirectorInfoDebug_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.ToggleDirectorInfoHUD
//		Flags  -> ()
void AHUD::ToggleDirectorInfoHUD()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.ToggleDirectorInfoHUD");

	AHUD_ToggleDirectorInfoHUD_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.ShouldDisplayDebug
//		Flags  -> ()
// Parameters:
//		struct FName                                       DebugType                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AHUD::ShouldDisplayDebug(const struct FName& DebugType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShouldDisplayDebug");

	AHUD_ShouldDisplayDebug_Params params {};
	params.DebugType = DebugType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.ShowDebug
//		Flags  -> ()
// Parameters:
//		struct FName                                       DebugType                                                  (OptionalParm, Parm)
void AHUD::ShowDebug(const struct FName& DebugType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebug");

	AHUD_ShowDebug_Params params {};
	params.DebugType = DebugType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.SetShowScores
//		Flags  -> ()
// Parameters:
//		bool                                               bNewValue                                                  (Parm)
void AHUD::SetShowScores(bool bNewValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.SetShowScores");

	AHUD_SetShowScores_Params params {};
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.ShowScores
//		Flags  -> ()
void AHUD::ShowScores()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowScores");

	AHUD_ShowScores_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.ShowHUD
//		Flags  -> ()
void AHUD::ShowHUD()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowHUD");

	AHUD_ShowHUD_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.ToggleHUD
//		Flags  -> ()
void AHUD::ToggleHUD()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.ToggleHUD");

	AHUD_ToggleHUD_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.AddPostRenderedActor
//		Flags  -> ()
// Parameters:
//		class AActor*                                      A                                                          (Parm)
void AHUD::AddPostRenderedActor(class AActor* A)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.AddPostRenderedActor");

	AHUD_AddPostRenderedActor_Params params {};
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.RemovePostRenderedActor
//		Flags  -> ()
// Parameters:
//		class AActor*                                      A                                                          (Parm)
void AHUD::RemovePostRenderedActor(class AActor* A)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.RemovePostRenderedActor");

	AHUD_RemovePostRenderedActor_Params params {};
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.DrawActorOverlays
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ViewPoint                                                  (Parm)
//		struct FRotator                                    ViewRotation                                               (Parm)
void AHUD::DrawActorOverlays(const struct FVector& ViewPoint, const struct FRotator& ViewRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawActorOverlays");

	AHUD_DrawActorOverlays_Params params {};
	params.ViewPoint = ViewPoint;
	params.ViewRotation = ViewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.PostBeginPlay
//		Flags  -> ()
void AHUD::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.PostBeginPlay");

	AHUD_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.Draw2DLine
//		Flags  -> ()
// Parameters:
//		int                                                X1                                                         (Parm)
//		int                                                Y1                                                         (Parm)
//		int                                                X2                                                         (Parm)
//		int                                                Y2                                                         (Parm)
//		struct FColor                                      LineColor                                                  (Parm)
void AHUD::Draw2DLine(int X1, int Y1, int X2, int Y2, const struct FColor& LineColor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.Draw2DLine");

	AHUD_Draw2DLine_Params params {};
	params.X1 = X1;
	params.Y1 = Y1;
	params.X2 = X2;
	params.Y2 = Y2;
	params.LineColor = LineColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HUD.Draw3DLine
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Start                                                      (Parm)
//		struct FVector                                     End                                                        (Parm)
//		struct FColor                                      LineColor                                                  (Parm)
void AHUD::Draw3DLine(const struct FVector& Start, const struct FVector& End, const struct FColor& LineColor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HUD.Draw3DLine");

	AHUD_Draw3DLine_Params params {};
	params.Start = Start;
	params.End = End;
	params.LineColor = LineColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.CheckForSentinelRun
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AAutoTestManager::CheckForSentinelRun()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.CheckForSentinelRun");

	AAutoTestManager_CheckForSentinelRun_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.StartMatch
//		Flags  -> ()
void AAutoTestManager::StartMatch()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.StartMatch");

	AAutoTestManager_StartMatch_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.GetNextAutomatedTestingMap
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString AAutoTestManager::GetNextAutomatedTestingMap()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.GetNextAutomatedTestingMap");

	AAutoTestManager_GetNextAutomatedTestingMap_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.IncrementNumberOfMatchesPlayed
//		Flags  -> ()
void AAutoTestManager::IncrementNumberOfMatchesPlayed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.IncrementNumberOfMatchesPlayed");

	AAutoTestManager_IncrementNumberOfMatchesPlayed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.IncrementAutomatedTestingMapIndex
//		Flags  -> ()
void AAutoTestManager::IncrementAutomatedTestingMapIndex()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.IncrementAutomatedTestingMapIndex");

	AAutoTestManager_IncrementAutomatedTestingMapIndex_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.CloseAutomatedMapTestTimer
//		Flags  -> ()
void AAutoTestManager::CloseAutomatedMapTestTimer()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.CloseAutomatedMapTestTimer");

	AAutoTestManager_CloseAutomatedMapTestTimer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.StartAutomatedMapTestTimerWorker
//		Flags  -> ()
void AAutoTestManager::StartAutomatedMapTestTimerWorker()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.StartAutomatedMapTestTimerWorker");

	AAutoTestManager_StartAutomatedMapTestTimerWorker_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.StartAutomatedMapTestTimer
//		Flags  -> ()
void AAutoTestManager::StartAutomatedMapTestTimer()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.StartAutomatedMapTestTimer");

	AAutoTestManager_StartAutomatedMapTestTimer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.DoMemoryTracking
//		Flags  -> ()
void AAutoTestManager::DoMemoryTracking()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.DoMemoryTracking");

	AAutoTestManager_DoMemoryTracking_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.DoTimeBasedSentinelStatGathering
//		Flags  -> (Singular, NetReliable, Simulated, Native, Operator, Private, HasDefaults, K2Call, K2Pure)
// Parameters:
void AAutoTestManager::DoTimeBasedSentinelStatGathering()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.DoTimeBasedSentinelStatGathering");

	AAutoTestManager_DoTimeBasedSentinelStatGathering_Params params {};

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.DoSentinel_ViewDependentMemoryAtSpecificLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     InLocation                                                 (Const, Parm, OutParm)
//		struct FRotator                                    InRotation                                                 (Const, Parm, OutParm)
void AAutoTestManager::DoSentinel_ViewDependentMemoryAtSpecificLocation(struct FVector* InLocation, struct FRotator* InRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.DoSentinel_ViewDependentMemoryAtSpecificLocation");

	AAutoTestManager_DoSentinel_ViewDependentMemoryAtSpecificLocation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InLocation != nullptr)
		*InLocation = params.InLocation;
	if (InRotation != nullptr)
		*InRotation = params.InRotation;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.DoSentinel_PerfAtSpecificLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     InLocation                                                 (Const, Parm, OutParm)
//		struct FRotator                                    InRotation                                                 (Const, Parm, OutParm)
void AAutoTestManager::DoSentinel_PerfAtSpecificLocation(struct FVector* InLocation, struct FRotator* InRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.DoSentinel_PerfAtSpecificLocation");

	AAutoTestManager_DoSentinel_PerfAtSpecificLocation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InLocation != nullptr)
		*InLocation = params.InLocation;
	if (InRotation != nullptr)
		*InRotation = params.InRotation;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.DoSentinel_MemoryAtSpecificLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     InLocation                                                 (Const, Parm)
//		struct FRotator                                    InRotation                                                 (Const, Parm)
void AAutoTestManager::DoSentinel_MemoryAtSpecificLocation(const struct FVector& InLocation, const struct FRotator& InRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.DoSentinel_MemoryAtSpecificLocation");

	AAutoTestManager_DoSentinel_MemoryAtSpecificLocation_Params params {};
	params.InLocation = InLocation;
	params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.GetTravelLocations
//		Flags  -> ()
// Parameters:
//		struct FName                                       LevelName                                                  (Parm)
//		class APlayerController*                           PC                                                         (Parm)
//		TArray<struct FVector>                             TravelPoints                                               (Parm, OutParm, NeedCtorLink)
void AAutoTestManager::GetTravelLocations(const struct FName& LevelName, class APlayerController* PC, TArray<struct FVector>* TravelPoints)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.GetTravelLocations");

	AAutoTestManager_GetTravelLocations_Params params {};
	params.LevelName = LevelName;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (TravelPoints != nullptr)
		*TravelPoints = params.TravelPoints;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.HandlePerLoadedMapAudioStats
//		Flags  -> ()
void AAutoTestManager::HandlePerLoadedMapAudioStats()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.HandlePerLoadedMapAudioStats");

	AAutoTestManager_HandlePerLoadedMapAudioStats_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.DoSentinelActionPerLoadedMap
//		Flags  -> ()
void AAutoTestManager::DoSentinelActionPerLoadedMap()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.DoSentinelActionPerLoadedMap");

	AAutoTestManager_DoSentinelActionPerLoadedMap_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.DoTravelTheWorld
//		Flags  -> ()
void AAutoTestManager::DoTravelTheWorld()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.DoTravelTheWorld");

	AAutoTestManager_DoTravelTheWorld_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.EndSentinelRun
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Core_EAutomatedRunResult>              RunResult                                                  (Parm)
void AAutoTestManager::EndSentinelRun(TEnumAsByte<Core_EAutomatedRunResult> RunResult)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.EndSentinelRun");

	AAutoTestManager_EndSentinelRun_Params params {};
	params.RunResult = RunResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.AddSentinelPerTimePeriodStats
//		Flags  -> ()
// Parameters:
//		struct FVector                                     InLocation                                                 (Const, Parm)
//		struct FRotator                                    InRotation                                                 (Const, Parm)
void AAutoTestManager::AddSentinelPerTimePeriodStats(const struct FVector& InLocation, const struct FRotator& InRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.AddSentinelPerTimePeriodStats");

	AAutoTestManager_AddSentinelPerTimePeriodStats_Params params {};
	params.InLocation = InLocation;
	params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.BeginSentinelRun
//		Flags  -> ()
// Parameters:
//		struct FString                                     TaskDescription                                            (Const, Parm, NeedCtorLink)
//		struct FString                                     TaskParameter                                              (Const, Parm, NeedCtorLink)
//		struct FString                                     TagDesc                                                    (Const, Parm, NeedCtorLink)
void AAutoTestManager::BeginSentinelRun(const struct FString& TaskDescription, const struct FString& TaskParameter, const struct FString& TagDesc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.BeginSentinelRun");

	AAutoTestManager_BeginSentinelRun_Params params {};
	params.TaskDescription = TaskDescription;
	params.TaskParameter = TaskParameter;
	params.TagDesc = TagDesc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.InitializeOptions
//		Flags  -> ()
// Parameters:
//		struct FString                                     Options                                                    (Parm, NeedCtorLink)
void AAutoTestManager::InitializeOptions(const struct FString& Options)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.InitializeOptions");

	AAutoTestManager_InitializeOptions_Params params {};
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.Timer
//		Flags  -> ()
void AAutoTestManager::Timer()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.Timer");

	AAutoTestManager_Timer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AutoTestManager.PostBeginPlay
//		Flags  -> ()
void AAutoTestManager::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.PostBeginPlay");

	AAutoTestManager_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CrowdAgentBase.NotifyPathChanged
//		Flags  -> ()
void ACrowdAgentBase::NotifyPathChanged()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CrowdAgentBase.NotifyPathChanged");

	ACrowdAgentBase_NotifyPathChanged_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PathTargetPoint.ShouldBeHiddenBySHOW_NavigationNodes
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APathTargetPoint::ShouldBeHiddenBySHOW_NavigationNodes()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PathTargetPoint.ShouldBeHiddenBySHOW_NavigationNodes");

	APathTargetPoint_ShouldBeHiddenBySHOW_NavigationNodes_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.NavMeshObstacle.ApplyCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct ANavMeshObstacle_FCheckpointRecord          Record                                                     (Const, Parm, OutParm)
//void ANavMeshObstacle::ApplyCheckpointRecord(struct ANavMeshObstacle_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshObstacle.ApplyCheckpointRecord");
//
//	ANavMeshObstacle_ApplyCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}
//
//
//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.NavMeshObstacle.CreateCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct ANavMeshObstacle_FCheckpointRecord          Record                                                     (Parm, OutParm)
//void ANavMeshObstacle::CreateCheckpointRecord(struct ANavMeshObstacle_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshObstacle.CreateCheckpointRecord");
//
//	ANavMeshObstacle_CreateCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshObstacle.SetEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               bInEnabled                                                 (Parm)
void ANavMeshObstacle::SetEnabled(bool bInEnabled)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshObstacle.SetEnabled");

	ANavMeshObstacle_SetEnabled_Params params {};
	params.bInEnabled = bInEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshObstacle.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void ANavMeshObstacle::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshObstacle.OnToggle");

	ANavMeshObstacle_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshObstacle.PostBeginPlay
//		Flags  -> ()
void ANavMeshObstacle::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshObstacle.PostBeginPlay");

	ANavMeshObstacle_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshObstacle.UnRegisterObstacle
//		Flags  -> ()
void ANavMeshObstacle::UnRegisterObstacle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshObstacle.UnRegisterObstacle");

	ANavMeshObstacle_UnRegisterObstacle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshObstacle.RegisterObstacle
//		Flags  -> ()
void ANavMeshObstacle::RegisterObstacle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshObstacle.RegisterObstacle");

	ANavMeshObstacle_RegisterObstacle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshObstacle.GetObstacleBoudingShape
//		Flags  -> (Net, NetReliable, Simulated, Exec, Native, Event, Operator, Const, Private, Delegate, NetServer, HasDefaults, DLLImport, K2Override, K2Pure)
// Parameters:
//		TArray<struct FVector>                             Shape                                                      (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ANavMeshObstacle::GetObstacleBoudingShape(TArray<struct FVector>* Shape)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshObstacle.GetObstacleBoudingShape");

	ANavMeshObstacle_GetObstacleBoudingShape_Params params {};

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Shape != nullptr)
		*Shape = params.Shape;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PostProcessVolume.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void APostProcessVolume::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PostProcessVolume.OnToggle");

	APostProcessVolume_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverGroup.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void ACoverGroup::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverGroup.OnToggle");

	ACoverGroup_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverGroup.ToggleGroup
//		Flags  -> ()
void ACoverGroup::ToggleGroup()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverGroup.ToggleGroup");

	ACoverGroup_ToggleGroup_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverGroup.DisableGroup
//		Flags  -> ()
void ACoverGroup::DisableGroup()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverGroup.DisableGroup");

	ACoverGroup_DisableGroup_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverGroup.EnableGroup
//		Flags  -> ()
void ACoverGroup::EnableGroup()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverGroup.EnableGroup");

	ACoverGroup_EnableGroup_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ExponentialHeightFog.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void AExponentialHeightFog::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFog.OnToggle");

	AExponentialHeightFog_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ExponentialHeightFog.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void AExponentialHeightFog::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFog.ReplicatedEvent");

	AExponentialHeightFog_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ExponentialHeightFog.PostBeginPlay
//		Flags  -> ()
void AExponentialHeightFog::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFog.PostBeginPlay");

	AExponentialHeightFog_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FileWriter.Destroyed
//		Flags  -> ()
void AFileWriter::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FileWriter.Destroyed");

	AFileWriter_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FileWriter.Logf
//		Flags  -> ()
// Parameters:
//		struct FString                                     logString                                                  (Parm, CoerceParm, NeedCtorLink)
void AFileWriter::Logf(const struct FString& logString)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FileWriter.Logf");

	AFileWriter_Logf_Params params {};
	params.logString = logString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FileWriter.CloseFile
//		Flags  -> ()
void AFileWriter::CloseFile()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FileWriter.CloseFile");

	AFileWriter_CloseFile_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FileWriter.OpenFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     InFilename                                                 (Parm, CoerceParm, NeedCtorLink)
//		TEnumAsByte<Engine_EFWFileType>                    InFileType                                                 (OptionalParm, Parm)
//		struct FString                                     InExtension                                                (OptionalParm, Parm, NeedCtorLink)
//		bool                                               bUnique                                                    (OptionalParm, Parm)
//		bool                                               bIncludeTimeStamp                                          (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AFileWriter::OpenFile(const struct FString& InFilename, TEnumAsByte<Engine_EFWFileType> InFileType, const struct FString& InExtension, bool bUnique, bool bIncludeTimeStamp)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FileWriter.OpenFile");

	AFileWriter_OpenFile_Params params {};
	params.InFilename = InFilename;
	params.InFileType = InFileType;
	params.InExtension = InExtension;
	params.bUnique = bUnique;
	params.bIncludeTimeStamp = bIncludeTimeStamp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FileLog.CloseLog
//		Flags  -> ()
void AFileLog::CloseLog()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FileLog.CloseLog");

	AFileLog_CloseLog_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FileLog.OpenLog
//		Flags  -> ()
// Parameters:
//		struct FString                                     LogFilename                                                (Parm, CoerceParm, NeedCtorLink)
//		struct FString                                     extension                                                  (OptionalParm, Parm, NeedCtorLink)
//		bool                                               bUnique                                                    (OptionalParm, Parm)
void AFileLog::OpenLog(const struct FString& LogFilename, const struct FString& extension, bool bUnique)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FileLog.OpenLog");

	AFileLog_OpenLog_Params params {};
	params.LogFilename = LogFilename;
	params.extension = extension;
	params.bUnique = bUnique;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ClearOnlineDelegates
//		Flags  -> ()
void AGameInfo::ClearOnlineDelegates()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ClearOnlineDelegates");

	AGameInfo_ClearOnlineDelegates_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.InitCrowdPopulationManager
//		Flags  -> ()
void AGameInfo::InitCrowdPopulationManager()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.InitCrowdPopulationManager");

	AGameInfo_InitCrowdPopulationManager_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.OnEngineHasLoaded
//		Flags  -> ()
void AGameInfo::OnEngineHasLoaded()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnEngineHasLoaded");

	AGameInfo_OnEngineHasLoaded_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.OnDestroyOnlineGameComplete
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void AGameInfo::OnDestroyOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnDestroyOnlineGameComplete");

	AGameInfo_OnDestroyOnlineGameComplete_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.StandbyCheatDetected
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_EStandbyType>                   StandbyType                                                (Parm)
void AGameInfo::StandbyCheatDetected(TEnumAsByte<Engine_EStandbyType> StandbyType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StandbyCheatDetected");

	AGameInfo_StandbyCheatDetected_Params params {};
	params.StandbyType = StandbyType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.EnableStandbyCheatDetection
//		Flags  -> ()
// Parameters:
//		bool                                               bIsEnabled                                                 (Parm)
void AGameInfo::EnableStandbyCheatDetection(bool bIsEnabled)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.EnableStandbyCheatDetection");

	AGameInfo_EnableStandbyCheatDetection_Params params {};
	params.bIsEnabled = bIsEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.BeginBVT
//		Flags  -> ()
// Parameters:
//		struct FString                                     TagDesc                                                    (OptionalParm, Parm, CoerceParm, NeedCtorLink)
void AGameInfo::BeginBVT(const struct FString& TagDesc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BeginBVT");

	AGameInfo_BeginBVT_Params params {};
	params.TagDesc = TagDesc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.CheckForSentinelRun
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::CheckForSentinelRun()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckForSentinelRun");

	AGameInfo_CheckForSentinelRun_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ShouldAutoContinueToNextRound
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::ShouldAutoContinueToNextRound()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ShouldAutoContinueToNextRound");

	AGameInfo_ShouldAutoContinueToNextRound_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.IsDoingASentinelRun
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::IsDoingASentinelRun()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsDoingASentinelRun");

	AGameInfo_IsDoingASentinelRun_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.IsCheckingForMemLeaks
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::IsCheckingForMemLeaks()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsCheckingForMemLeaks");

	AGameInfo_IsCheckingForMemLeaks_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.IsCheckingForFragmentation
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::IsCheckingForFragmentation()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsCheckingForFragmentation");

	AGameInfo_IsCheckingForFragmentation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.IsAutomatedPerfTesting
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::IsAutomatedPerfTesting()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsAutomatedPerfTesting");

	AGameInfo_IsAutomatedPerfTesting_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.SetBandwidthLimit
//		Flags  -> ()
// Parameters:
//		float                                              AsyncIOBandwidthLimit                                      (Parm)
void AGameInfo::SetBandwidthLimit(float AsyncIOBandwidthLimit)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetBandwidthLimit");

	AGameInfo_SetBandwidthLimit_Params params {};
	params.AsyncIOBandwidthLimit = AsyncIOBandwidthLimit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.DoTravelTheWorld
//		Flags  -> ()
void AGameInfo::DoTravelTheWorld()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DoTravelTheWorld");

	AGameInfo_DoTravelTheWorld_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.TellClientsToTravelToSession
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		class UClass*                                      SearchClass                                                (Parm)
//		unsigned char*                                     PlatformSpecificInfo                                       (Parm)
void AGameInfo::TellClientsToTravelToSession(const struct FName& SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.TellClientsToTravelToSession");

	AGameInfo_TellClientsToTravelToSession_Params params {};
	params.SessionName = SessionName;
	params.SearchClass = SearchClass;
	params.PlatformSpecificInfo = PlatformSpecificInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.TellClientsPartyHostIsLeaving
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PartyHostPlayerId                                          (Parm)
void AGameInfo::TellClientsPartyHostIsLeaving(const struct FUniqueNetId& PartyHostPlayerId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.TellClientsPartyHostIsLeaving");

	AGameInfo_TellClientsPartyHostIsLeaving_Params params {};
	params.PartyHostPlayerId = PartyHostPlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.TellClientsToReturnToPartyHost
//		Flags  -> (Net, Exec, Event, Static, Delegate, NetServer, K2Call, K2Pure)
// Parameters:
void AGameInfo::STATIC_TellClientsToReturnToPartyHost()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.TellClientsToReturnToPartyHost");

	AGameInfo_TellClientsToReturnToPartyHost_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.OnServerCreateComplete
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void AGameInfo::OnServerCreateComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnServerCreateComplete");

	AGameInfo_OnServerCreateComplete_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.RegisterServer
//		Flags  -> ()
void AGameInfo::RegisterServer()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RegisterServer");

	AGameInfo_RegisterServer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.OnLoginChange
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
void AGameInfo::OnLoginChange(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnLoginChange");

	AGameInfo_OnLoginChange_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.OnLoginFailed
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TEnumAsByte<Engine_EOnlineServerConnectionStatus>  ErrorCode                                                  (Parm)
void AGameInfo::OnLoginFailed(unsigned char LocalUserNum, TEnumAsByte<Engine_EOnlineServerConnectionStatus> ErrorCode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnLoginFailed");

	AGameInfo_OnLoginFailed_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ErrorCode = ErrorCode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ClearAutoLoginDelegates
//		Flags  -> ()
void AGameInfo::ClearAutoLoginDelegates()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ClearAutoLoginDelegates");

	AGameInfo_ClearAutoLoginDelegates_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ProcessServerLogin
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::ProcessServerLogin()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ProcessServerLogin");

	AGameInfo_ProcessServerLogin_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.MatineeCancelled
//		Flags  -> ()
void AGameInfo::MatineeCancelled()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.MatineeCancelled");

	AGameInfo_MatineeCancelled_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.RecalculateSkillRating
//		Flags  -> (Simulated, Exec, Operator, Static, Delegate, NetServer, K2Call, K2Pure)
// Parameters:
void AGameInfo::STATIC_RecalculateSkillRating()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RecalculateSkillRating");

	AGameInfo_RecalculateSkillRating_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.UpdateGameplayMuteList
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           PC                                                         (Parm)
void AGameInfo::UpdateGameplayMuteList(class APlayerController* PC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UpdateGameplayMuteList");

	AGameInfo_UpdateGameplayMuteList_Params params {};
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.NotifyArbitratedMatchEnd
//		Flags  -> ()
void AGameInfo::NotifyArbitratedMatchEnd()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.NotifyArbitratedMatchEnd");

	AGameInfo_NotifyArbitratedMatchEnd_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.MatchIsInProgress
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::MatchIsInProgress()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.MatchIsInProgress");

	AGameInfo_MatchIsInProgress_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ArbitrationRegistrationComplete
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void AGameInfo::ArbitrationRegistrationComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ArbitrationRegistrationComplete");

	AGameInfo_ArbitrationRegistrationComplete_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.RegisterServerForArbitration
//		Flags  -> ()
void AGameInfo::RegisterServerForArbitration()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RegisterServerForArbitration");

	AGameInfo_RegisterServerForArbitration_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.StartArbitratedMatch
//		Flags  -> ()
void AGameInfo::StartArbitratedMatch()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartArbitratedMatch");

	AGameInfo_StartArbitratedMatch_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.StartArbitrationRegistration
//		Flags  -> ()
void AGameInfo::StartArbitrationRegistration()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartArbitrationRegistration");

	AGameInfo_StartArbitrationRegistration_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ProcessClientRegistrationCompletion
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           PC                                                         (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void AGameInfo::ProcessClientRegistrationCompletion(class APlayerController* PC, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ProcessClientRegistrationCompletion");

	AGameInfo_ProcessClientRegistrationCompletion_Params params {};
	params.PC = PC;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.UpdateGameSettingsCounts
//		Flags  -> ()
void AGameInfo::UpdateGameSettingsCounts()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UpdateGameSettingsCounts");

	AGameInfo_UpdateGameSettingsCounts_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.SetSeamlessTravelViewTarget
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           PC                                                         (Parm)
void AGameInfo::SetSeamlessTravelViewTarget(class APlayerController* PC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetSeamlessTravelViewTarget");

	AGameInfo_SetSeamlessTravelViewTarget_Params params {};
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.HandleSeamlessTravelPlayer
//		Flags  -> (Singular, Net, NetReliable, Simulated, Exec, Event, Operator, Delegate, NetServer, K2Call, K2Pure)
// Parameters:
//		class AController*                                 C                                                          (Parm, OutParm)
void AGameInfo::HandleSeamlessTravelPlayer(class AController** C)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.HandleSeamlessTravelPlayer");

	AGameInfo_HandleSeamlessTravelPlayer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (C != nullptr)
		*C = params.C;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.UpdateGameSettings
//		Flags  -> ()
void AGameInfo::UpdateGameSettings()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UpdateGameSettings");

	AGameInfo_UpdateGameSettings_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.PostSeamlessTravel
//		Flags  -> ()
void AGameInfo::PostSeamlessTravel()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PostSeamlessTravel");

	AGameInfo_PostSeamlessTravel_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.SwapPlayerControllers
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           OldPC                                                      (Parm)
//		class APlayerController*                           NewPC                                                      (Parm)
void AGameInfo::SwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SwapPlayerControllers");

	AGameInfo_SwapPlayerControllers_Params params {};
	params.OldPC = OldPC;
	params.NewPC = NewPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.GetSeamlessTravelActorList
//		Flags  -> ()
// Parameters:
//		bool                                               bToEntry                                                   (Parm)
//		TArray<class AActor*>                              ActorList                                                  (Parm, OutParm, NeedCtorLink)
void AGameInfo::GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetSeamlessTravelActorList");

	AGameInfo_GetSeamlessTravelActorList_Params params {};
	params.bToEntry = bToEntry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ActorList != nullptr)
		*ActorList = params.ActorList;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.OverridePRI
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           PC                                                         (Parm)
//		class APlayerReplicationInfo*                      OldPRI                                                     (Parm)
void AGameInfo::OverridePRI(class APlayerController* PC, class APlayerReplicationInfo* OldPRI)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OverridePRI");

	AGameInfo_OverridePRI_Params params {};
	params.PC = PC;
	params.OldPRI = OldPRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.FindInactivePRI
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           PC                                                         (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::FindInactivePRI(class APlayerController* PC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.FindInactivePRI");

	AGameInfo_FindInactivePRI_Params params {};
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.AddInactivePRI
//		Flags  -> ()
// Parameters:
//		class APlayerReplicationInfo*                      PRI                                                        (Parm)
//		class APlayerController*                           PC                                                         (Parm)
void AGameInfo::AddInactivePRI(class APlayerReplicationInfo* PRI, class APlayerController* PC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AddInactivePRI");

	AGameInfo_AddInactivePRI_Params params {};
	params.PRI = PRI;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.PostCommitMapChange
//		Flags  -> ()
void AGameInfo::PostCommitMapChange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PostCommitMapChange");

	AGameInfo_PostCommitMapChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.PreCommitMapChange
//		Flags  -> ()
// Parameters:
//		struct FString                                     PreviousMapName                                            (Parm, NeedCtorLink)
//		struct FString                                     NextMapName                                                (Parm, NeedCtorLink)
void AGameInfo::PreCommitMapChange(const struct FString& PreviousMapName, const struct FString& NextMapName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreCommitMapChange");

	AGameInfo_PreCommitMapChange_Params params {};
	params.PreviousMapName = PreviousMapName;
	params.NextMapName = NextMapName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.AllowPausing
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           PC                                                         (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::AllowPausing(class APlayerController* PC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AllowPausing");

	AGameInfo_AllowPausing_Params params {};
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.AllowCheats
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           P                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::AllowCheats(class APlayerController* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AllowCheats");

	AGameInfo_AllowCheats_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.AllowMutator
//		Flags  -> ()
// Parameters:
//		struct FString                                     MutatorClassName                                           (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::AllowMutator(const struct FString& MutatorClassName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AllowMutator");

	AGameInfo_AllowMutator_Params params {};
	params.MutatorClassName = MutatorClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.PlayerCanRestart
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           aPlayer                                                    (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::PlayerCanRestart(class APlayerController* aPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PlayerCanRestart");

	AGameInfo_PlayerCanRestart_Params params {};
	params.aPlayer = aPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.PlayerCanRestartGame
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           aPlayer                                                    (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::PlayerCanRestartGame(class APlayerController* aPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PlayerCanRestartGame");

	AGameInfo_PlayerCanRestartGame_Params params {};
	params.aPlayer = aPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.DriverLeftVehicle
//		Flags  -> ()
// Parameters:
//		class AVehicle*                                    V                                                          (Parm)
//		class APawn*                                       P                                                          (Parm)
void AGameInfo::DriverLeftVehicle(class AVehicle* V, class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DriverLeftVehicle");

	AGameInfo_DriverLeftVehicle_Params params {};
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.CanLeaveVehicle
//		Flags  -> ()
// Parameters:
//		class AVehicle*                                    V                                                          (Parm)
//		class APawn*                                       P                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::CanLeaveVehicle(class AVehicle* V, class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CanLeaveVehicle");

	AGameInfo_CanLeaveVehicle_Params params {};
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.DriverEnteredVehicle
//		Flags  -> ()
// Parameters:
//		class AVehicle*                                    V                                                          (Parm)
//		class APawn*                                       P                                                          (Parm)
void AGameInfo::DriverEnteredVehicle(class AVehicle* V, class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DriverEnteredVehicle");

	AGameInfo_DriverEnteredVehicle_Params params {};
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ModifyScoreKill
//		Flags  -> ()
// Parameters:
//		class AController*                                 Killer                                                     (Parm)
//		class AController*                                 Other                                                      (Parm)
void AGameInfo::ModifyScoreKill(class AController* Killer, class AController* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ModifyScoreKill");

	AGameInfo_ModifyScoreKill_Params params {};
	params.Killer = Killer;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ScoreKill
//		Flags  -> ()
// Parameters:
//		class AController*                                 Killer                                                     (Parm)
//		class AController*                                 Other                                                      (Parm)
void AGameInfo::ScoreKill(class AController* Killer, class AController* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ScoreKill");

	AGameInfo_ScoreKill_Params params {};
	params.Killer = Killer;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.CheckScore
//		Flags  -> ()
// Parameters:
//		class APlayerReplicationInfo*                      Scorer                                                     (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::CheckScore(class APlayerReplicationInfo* Scorer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckScore");

	AGameInfo_CheckScore_Params params {};
	params.Scorer = Scorer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ScoreObjective
//		Flags  -> ()
// Parameters:
//		class APlayerReplicationInfo*                      Scorer                                                     (Parm)
//		int                                                Score                                                      (Parm)
void AGameInfo::ScoreObjective(class APlayerReplicationInfo* Scorer, int Score)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ScoreObjective");

	AGameInfo_ScoreObjective_Params params {};
	params.Scorer = Scorer;
	params.Score = Score;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.AddObjectiveScore
//		Flags  -> ()
// Parameters:
//		class APlayerReplicationInfo*                      Scorer                                                     (Parm)
//		int                                                Score                                                      (Parm)
void AGameInfo::AddObjectiveScore(class APlayerReplicationInfo* Scorer, int Score)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AddObjectiveScore");

	AGameInfo_AddObjectiveScore_Params params {};
	params.Scorer = Scorer;
	params.Score = Score;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.RatePlayerStart
//		Flags  -> ()
// Parameters:
//		class APlayerStart*                                P                                                          (Parm)
//		unsigned char                                      Team                                                       (Parm)
//		class AController*                                 Player                                                     (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AGameInfo::RatePlayerStart(class APlayerStart* P, unsigned char Team, class AController* Player)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RatePlayerStart");

	AGameInfo_RatePlayerStart_Params params {};
	params.P = P;
	params.Team = Team;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ChoosePlayerStart
//		Flags  -> ()
// Parameters:
//		class AController*                                 Player                                                     (Parm)
//		unsigned char                                      InTeam                                                     (OptionalParm, Parm)
//		class APlayerStart*                                ReturnValue                                                (Parm, OutParm, ReturnParm)
class APlayerStart* AGameInfo::ChoosePlayerStart(class AController* Player, unsigned char InTeam)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ChoosePlayerStart");

	AGameInfo_ChoosePlayerStart_Params params {};
	params.Player = Player;
	params.InTeam = InTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.FindPlayerStart
//		Flags  -> ()
// Parameters:
//		class AController*                                 Player                                                     (Parm)
//		unsigned char                                      InTeam                                                     (OptionalParm, Parm)
//		struct FString                                     IncomingName                                               (OptionalParm, Parm, NeedCtorLink)
//		class ANavigationPoint*                            ReturnValue                                                (Parm, OutParm, ReturnParm)
class ANavigationPoint* AGameInfo::FindPlayerStart(class AController* Player, unsigned char InTeam, const struct FString& IncomingName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.FindPlayerStart");

	AGameInfo_FindPlayerStart_Params params {};
	params.Player = Player;
	params.InTeam = InTeam;
	params.IncomingName = IncomingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ShouldSpawnAtStartSpot
//		Flags  -> ()
// Parameters:
//		class AController*                                 Player                                                     (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::ShouldSpawnAtStartSpot(class AController* Player)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ShouldSpawnAtStartSpot");

	AGameInfo_ShouldSpawnAtStartSpot_Params params {};
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.EndLogging
//		Flags  -> ()
// Parameters:
//		struct FString                                     Reason                                                     (Parm, NeedCtorLink)
void AGameInfo::EndLogging(const struct FString& Reason)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.EndLogging");

	AGameInfo_EndLogging_Params params {};
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.GameEventsPoll
//		Flags  -> ()
void AGameInfo::GameEventsPoll()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GameEventsPoll");

	AGameInfo_GameEventsPoll_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.EndOnlineGame
//		Flags  -> ()
void AGameInfo::EndOnlineGame()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.EndOnlineGame");

	AGameInfo_EndOnlineGame_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.PerformEndGameHandling
//		Flags  -> ()
void AGameInfo::PerformEndGameHandling()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PerformEndGameHandling");

	AGameInfo_PerformEndGameHandling_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.EndGame
//		Flags  -> ()
// Parameters:
//		class APlayerReplicationInfo*                      Winner                                                     (Parm)
//		struct FString                                     Reason                                                     (Parm, NeedCtorLink)
void AGameInfo::EndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.EndGame");

	AGameInfo_EndGame_Params params {};
	params.Winner = Winner;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.WriteOnlinePlayerScores
//		Flags  -> ()
void AGameInfo::WriteOnlinePlayerScores()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.WriteOnlinePlayerScores");

	AGameInfo_WriteOnlinePlayerScores_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.WriteOnlineStats
//		Flags  -> ()
// Parameters:
void AGameInfo::WriteOnlineStats()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.WriteOnlineStats");

	AGameInfo_WriteOnlineStats_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.CheckEndGame
//		Flags  -> ()
// Parameters:
//		class APlayerReplicationInfo*                      Winner                                                     (Parm)
//		struct FString                                     Reason                                                     (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckEndGame");

	AGameInfo_CheckEndGame_Params params {};
	params.Winner = Winner;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.CheckModifiedEndGame
//		Flags  -> ()
// Parameters:
//		class APlayerReplicationInfo*                      Winner                                                     (Parm)
//		struct FString                                     Reason                                                     (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::CheckModifiedEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckModifiedEndGame");

	AGameInfo_CheckModifiedEndGame_Params params {};
	params.Winner = Winner;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.BroadcastLocalizedTeam
//		Flags  -> ()
// Parameters:
//		int                                                TeamIndex                                                  (Parm)
//		class AActor*                                      Sender                                                     (Parm)
//		class UClass*                                      Message                                                    (Parm)
//		int                                                Switch                                                     (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_2                                               (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_3                                               (OptionalParm, Parm)
//		class UObject*                                     OptionalObject                                             (OptionalParm, Parm)
void AGameInfo::BroadcastLocalizedTeam(int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BroadcastLocalizedTeam");

	AGameInfo_BroadcastLocalizedTeam_Params params {};
	params.TeamIndex = TeamIndex;
	params.Sender = Sender;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.BroadcastLocalized
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Sender                                                     (Parm)
//		class UClass*                                      Message                                                    (Parm)
//		int                                                Switch                                                     (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_2                                               (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_3                                               (OptionalParm, Parm)
//		class UObject*                                     OptionalObject                                             (OptionalParm, Parm)
void AGameInfo::BroadcastLocalized(class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BroadcastLocalized");

	AGameInfo_BroadcastLocalized_Params params {};
	params.Sender = Sender;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.BroadcastTeam
//		Flags  -> ()
// Parameters:
//		class AController*                                 Sender                                                     (Parm)
//		struct FString                                     msg                                                        (Parm, CoerceParm, NeedCtorLink)
//		struct FName                                       Type                                                       (OptionalParm, Parm)
void AGameInfo::BroadcastTeam(class AController* Sender, const struct FString& msg, const struct FName& Type)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BroadcastTeam");

	AGameInfo_BroadcastTeam_Params params {};
	params.Sender = Sender;
	params.msg = msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.Broadcast
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Sender                                                     (Parm)
//		struct FString                                     msg                                                        (Parm, CoerceParm, NeedCtorLink)
//		struct FName                                       Type                                                       (OptionalParm, Parm)
void AGameInfo::Broadcast(class AActor* Sender, const struct FString& msg, const struct FName& Type)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Broadcast");

	AGameInfo_Broadcast_Params params {};
	params.Sender = Sender;
	params.msg = msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.RestartGame
//		Flags  -> ()
// Parameters:
void AGameInfo::RestartGame()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RestartGame");

	AGameInfo_RestartGame_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.GetTravelType
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::GetTravelType()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetTravelType");

	AGameInfo_GetTravelType_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.GetNextMap
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString AGameInfo::GetNextMap()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetNextMap");

	AGameInfo_GetNextMap_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.SendPlayer
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           aPlayer                                                    (Parm)
//		struct FString                                     URL                                                        (Parm, NeedCtorLink)
void AGameInfo::SendPlayer(class APlayerController* aPlayer, const struct FString& URL)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SendPlayer");

	AGameInfo_SendPlayer_Params params {};
	params.aPlayer = aPlayer;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.PickTeam
//		Flags  -> ()
// Parameters:
//		unsigned char                                      Current                                                    (Parm)
//		class AController*                                 C                                                          (Parm)
//		unsigned char                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
unsigned char AGameInfo::PickTeam(unsigned char Current, class AController* C)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PickTeam");

	AGameInfo_PickTeam_Params params {};
	params.Current = Current;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ChangeTeam
//		Flags  -> ()
// Parameters:
//		class AController*                                 Other                                                      (Parm)
//		int                                                N                                                          (Parm)
//		bool                                               bNewTeam                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::ChangeTeam(class AController* Other, int N, bool bNewTeam)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ChangeTeam");

	AGameInfo_ChangeTeam_Params params {};
	params.Other = Other;
	params.N = N;
	params.bNewTeam = bNewTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ChangeName
//		Flags  -> ()
// Parameters:
//		class AController*                                 Other                                                      (Parm)
//		struct FString                                     S                                                          (Parm, CoerceParm, NeedCtorLink)
//		bool                                               bNameChange                                                (Parm)
void AGameInfo::ChangeName(class AController* Other, const struct FString& S, bool bNameChange)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ChangeName");

	AGameInfo_ChangeName_Params params {};
	params.Other = Other;
	params.S = S;
	params.bNameChange = bNameChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.DiscardInventory
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		class AController*                                 Killer                                                     (OptionalParm, Parm)
void AGameInfo::DiscardInventory(class APawn* Other, class AController* Killer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DiscardInventory");

	AGameInfo_DiscardInventory_Params params {};
	params.Other = Other;
	params.Killer = Killer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.PickupQuery
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		class UClass*                                      ItemClass                                                  (Parm)
//		class AActor*                                      Pickup                                                     (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::PickupQuery(class APawn* Other, class UClass* ItemClass, class AActor* Pickup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PickupQuery");

	AGameInfo_PickupQuery_Params params {};
	params.Other = Other;
	params.ItemClass = ItemClass;
	params.Pickup = Pickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ShouldRespawn
//		Flags  -> ()
// Parameters:
//		class APickupFactory*                              Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::ShouldRespawn(class APickupFactory* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ShouldRespawn");

	AGameInfo_ShouldRespawn_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.CheckRelevance
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::CheckRelevance(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckRelevance");

	AGameInfo_CheckRelevance_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ReduceDamage
//		Flags  -> ()
// Parameters:
//		int                                                Damage                                                     (Parm, OutParm)
//		class APawn*                                       injured                                                    (Parm)
//		class AController*                                 InstigatedBy                                               (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     Momentum                                                   (Parm, OutParm)
//		class UClass*                                      DamageType                                                 (Parm)
//		class AActor*                                      DamageCauser                                               (Parm)
void AGameInfo::ReduceDamage(int* Damage, class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, struct FVector* Momentum, class UClass* DamageType, class AActor* DamageCauser)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ReduceDamage");

	AGameInfo_ReduceDamage_Params params {};
	params.injured = injured;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Damage != nullptr)
		*Damage = params.Damage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.CanSpectate
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           Viewer                                                     (Parm)
//		class APlayerReplicationInfo*                      ViewTarget                                                 (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::CanSpectate(class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CanSpectate");

	AGameInfo_CanSpectate_Params params {};
	params.Viewer = Viewer;
	params.ViewTarget = ViewTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.KickBan
//		Flags  -> ()
// Parameters:
//		struct FString                                     S                                                          (Parm, NeedCtorLink)
void AGameInfo::KickBan(const struct FString& S)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.KickBan");

	AGameInfo_KickBan_Params params {};
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.Kick
//		Flags  -> ()
// Parameters:
//		struct FString                                     S                                                          (Parm, NeedCtorLink)
void AGameInfo::Kick(const struct FString& S)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Kick");

	AGameInfo_Kick_Params params {};
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.BroadcastDeathMessage
//		Flags  -> ()
// Parameters:
//		class AController*                                 Killer                                                     (Parm)
//		class AController*                                 Other                                                      (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
void AGameInfo::BroadcastDeathMessage(class AController* Killer, class AController* Other, class UClass* DamageType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BroadcastDeathMessage");

	AGameInfo_BroadcastDeathMessage_Params params {};
	params.Killer = Killer;
	params.Other = Other;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.PreventDeath
//		Flags  -> ()
// Parameters:
//		class APawn*                                       KilledPawn                                                 (Parm)
//		class AController*                                 Killer                                                     (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::PreventDeath(class APawn* KilledPawn, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreventDeath");

	AGameInfo_PreventDeath_Params params {};
	params.KilledPawn = KilledPawn;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.Killed
//		Flags  -> ()
// Parameters:
//		class AController*                                 Killer                                                     (Parm)
//		class AController*                                 KilledPlayer                                               (Parm)
//		class APawn*                                       KilledPawn                                                 (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
void AGameInfo::Killed(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Killed");

	AGameInfo_Killed_Params params {};
	params.Killer = Killer;
	params.KilledPlayer = KilledPlayer;
	params.KilledPawn = KilledPawn;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.NotifyKilled
//		Flags  -> ()
// Parameters:
//		class AController*                                 Killer                                                     (Parm)
//		class AController*                                 Killed                                                     (Parm)
//		class APawn*                                       KilledPawn                                                 (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
void AGameInfo::NotifyKilled(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.NotifyKilled");

	AGameInfo_NotifyKilled_Params params {};
	params.Killer = Killer;
	params.Killed = Killed;
	params.KilledPawn = KilledPawn;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.SetPlayerDefaults
//		Flags  -> ()
// Parameters:
//		class APawn*                                       PlayerPawn                                                 (Parm)
void AGameInfo::SetPlayerDefaults(class APawn* PlayerPawn)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetPlayerDefaults");

	AGameInfo_SetPlayerDefaults_Params params {};
	params.PlayerPawn = PlayerPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.Mutate
//		Flags  -> ()
// Parameters:
//		struct FString                                     MutateString                                               (Parm, NeedCtorLink)
//		class APlayerController*                           Sender                                                     (Parm)
void AGameInfo::Mutate(const struct FString& MutateString, class APlayerController* Sender)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Mutate");

	AGameInfo_Mutate_Params params {};
	params.MutateString = MutateString;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.AddDefaultInventory
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
void AGameInfo::AddDefaultInventory(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AddDefaultInventory");

	AGameInfo_AddDefaultInventory_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.AcceptInventory
//		Flags  -> ()
// Parameters:
//		class APawn*                                       PlayerPawn                                                 (Parm)
void AGameInfo::AcceptInventory(class APawn* PlayerPawn)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AcceptInventory");

	AGameInfo_AcceptInventory_Params params {};
	params.PlayerPawn = PlayerPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.UnregisterPlayer
//		Flags  -> (Singular, NetReliable, Exec, Operator, Const, Public, HasOutParms, NetClient, K2Call, K2Pure)
// Parameters:
//		class APlayerController*                           PC                                                         (Parm)
void AGameInfo::UnregisterPlayer(class APlayerController* PC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UnregisterPlayer");

	AGameInfo_UnregisterPlayer_Params params {};
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.Logout
//		Flags  -> ()
// Parameters:
//		class AController*                                 Exiting                                                    (Parm)
void AGameInfo::Logout(class AController* Exiting)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Logout");

	AGameInfo_Logout_Params params {};
	params.Exiting = Exiting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.PreExit
//		Flags  -> ()
void AGameInfo::PreExit()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreExit");

	AGameInfo_PreExit_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.CalculatedNetSpeed
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int AGameInfo::CalculatedNetSpeed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CalculatedNetSpeed");

	AGameInfo_CalculatedNetSpeed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.UpdateNetSpeeds
//		Flags  -> ()
// Parameters:
void AGameInfo::UpdateNetSpeeds()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UpdateNetSpeeds");

	AGameInfo_UpdateNetSpeeds_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.PostLogin
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           NewPlayer                                                  (Parm)
void AGameInfo::PostLogin(class APlayerController* NewPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PostLogin");

	AGameInfo_PostLogin_Params params {};
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.UpdateBestNextHosts
//		Flags  -> (Net, NetReliable, Native, Static, Const, Public, HasOutParms, NetClient, K2Call, K2Pure)
// Parameters:
void AGameInfo::STATIC_UpdateBestNextHosts()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UpdateBestNextHosts");

	AGameInfo_UpdateBestNextHosts_Params params {};

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.BestNextHostSort
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           A                                                          (Parm)
//		class APlayerController*                           B                                                          (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int AGameInfo::BestNextHostSort(class APlayerController* A, class APlayerController* B)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BestNextHostSort");

	AGameInfo_BestNextHostSort_Params params {};
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.GenericPlayerInitialization
//		Flags  -> ()
// Parameters:
//		class AController*                                 C                                                          (Parm)
void AGameInfo::GenericPlayerInitialization(class AController* C)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GenericPlayerInitialization");

	AGameInfo_GenericPlayerInitialization_Params params {};
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ReplicateStreamingStatus
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           PC                                                         (Parm)
void AGameInfo::ReplicateStreamingStatus(class APlayerController* PC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ReplicateStreamingStatus");

	AGameInfo_ReplicateStreamingStatus_Params params {};
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.GetDefaultPlayerClass
//		Flags  -> ()
// Parameters:
//		class AController*                                 C                                                          (Parm)
//		class UClass*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class UClass* AGameInfo::GetDefaultPlayerClass(class AController* C)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetDefaultPlayerClass");

	AGameInfo_GetDefaultPlayerClass_Params params {};
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.SpawnDefaultPawnFor
//		Flags  -> (Simulated, Native, Event, Const, Public, HasOutParms, NetClient, K2Call, K2Pure)
// Parameters:
//		class AController*                                 NewPlayer                                                  (Parm)
//		class ANavigationPoint*                            StartSpot                                                  (Parm)
//		class APawn*                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class APawn* AGameInfo::SpawnDefaultPawnFor(class AController* NewPlayer, class ANavigationPoint* StartSpot)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SpawnDefaultPawnFor");

	AGameInfo_SpawnDefaultPawnFor_Params params {};
	params.NewPlayer = NewPlayer;
	params.StartSpot = StartSpot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.RestartPlayer
//		Flags  -> ()
// Parameters:
//		class AController*                                 NewPlayer                                                  (Parm)
void AGameInfo::RestartPlayer(class AController* NewPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RestartPlayer");

	AGameInfo_RestartPlayer_Params params {};
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.StartBots
//		Flags  -> ()
void AGameInfo::StartBots()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartBots");

	AGameInfo_StartBots_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.StartHumans
//		Flags  -> ()
void AGameInfo::StartHumans()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartHumans");

	AGameInfo_StartHumans_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.OnStartOnlineGameComplete
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void AGameInfo::OnStartOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnStartOnlineGameComplete");

	AGameInfo_OnStartOnlineGameComplete_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.StartOnlineGame
//		Flags  -> ()
void AGameInfo::StartOnlineGame()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartOnlineGame");

	AGameInfo_StartOnlineGame_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.StartMatch
//		Flags  -> ()
void AGameInfo::StartMatch()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartMatch");

	AGameInfo_StartMatch_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.Login
//		Flags  -> (Singular, Net, NetReliable, Exec, Operator, HasOptionalParms, Public, HasOutParms, NetClient, K2Call, K2Pure)
// Parameters:
//		struct FString                                     Portal                                                     (Parm, NeedCtorLink)
//		struct FString                                     Options                                                    (Parm, NeedCtorLink)
//		struct FUniqueNetId                                UniqueId                                                   (Const, Parm)
//		struct FString                                     ErrorMessage                                               (Parm, OutParm, NeedCtorLink)
//		class APlayerController*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class APlayerController* AGameInfo::Login(const struct FString& Portal, const struct FString& Options, const struct FUniqueNetId& UniqueId, struct FString* ErrorMessage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Login");

	AGameInfo_Login_Params params {};
	params.Portal = Portal;
	params.Options = Options;
	params.UniqueId = UniqueId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ErrorMessage != nullptr)
		*ErrorMessage = params.ErrorMessage;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.SpawnPlayerController
//		Flags  -> ()
// Parameters:
//		struct FVector                                     SpawnLocation                                              (Parm)
//		struct FRotator                                    SpawnRotation                                              (Parm)
//		class APlayerController*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class APlayerController* AGameInfo::SpawnPlayerController(const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SpawnPlayerController");

	AGameInfo_SpawnPlayerController_Params params {};
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.GetNextPlayerID
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int AGameInfo::GetNextPlayerID()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetNextPlayerID");

	AGameInfo_GetNextPlayerID_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.AtCapacity
//		Flags  -> ()
// Parameters:
//		bool                                               bSpectator                                                 (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::AtCapacity(bool bSpectator)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AtCapacity");

	AGameInfo_AtCapacity_Params params {};
	params.bSpectator = bSpectator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.RejectLogin
//		Flags  -> ()
// Parameters:
//		class UPlayer*                                     InPlayer                                                   (Parm)
//		struct FString                                     Error                                                      (Parm, NeedCtorLink)
void AGameInfo::RejectLogin(class UPlayer* InPlayer, const struct FString& Error)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RejectLogin");

	AGameInfo_RejectLogin_Params params {};
	params.InPlayer = InPlayer;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ResumeLogin
//		Flags  -> ()
// Parameters:
//		class UPlayer*                                     InPlayer                                                   (Parm)
void AGameInfo::ResumeLogin(class UPlayer* InPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ResumeLogin");

	AGameInfo_ResumeLogin_Params params {};
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.PauseLogin
//		Flags  -> ()
// Parameters:
//		class UPlayer*                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
class UPlayer* AGameInfo::PauseLogin()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PauseLogin");

	AGameInfo_PauseLogin_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.PreLogin
//		Flags  -> ()
// Parameters:
//		struct FString                                     Options                                                    (Parm, NeedCtorLink)
//		struct FString                                     Address                                                    (Parm, NeedCtorLink)
//		struct FUniqueNetId                                UniqueId                                                   (Const, Parm)
//		bool                                               bSupportsAuth                                              (Parm)
//		struct FString                                     ErrorMessage                                               (Parm, OutParm, NeedCtorLink)
void AGameInfo::PreLogin(const struct FString& Options, const struct FString& Address, const struct FUniqueNetId& UniqueId, bool bSupportsAuth, struct FString* ErrorMessage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreLogin");

	AGameInfo_PreLogin_Params params {};
	params.Options = Options;
	params.Address = Address;
	params.UniqueId = UniqueId;
	params.bSupportsAuth = bSupportsAuth;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ErrorMessage != nullptr)
		*ErrorMessage = params.ErrorMessage;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.RequiresPassword
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::RequiresPassword()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RequiresPassword");

	AGameInfo_RequiresPassword_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ProcessClientTravel
//		Flags  -> ()
// Parameters:
//		struct FString                                     URL                                                        (Parm, OutParm, NeedCtorLink)
//		struct FGuid                                       NextMapGuid                                                (Parm)
//		bool                                               bSeamless                                                  (Parm)
//		bool                                               bAbsolute                                                  (Parm)
//		class APlayerController*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class APlayerController* AGameInfo::ProcessClientTravel(struct FString* URL, const struct FGuid& NextMapGuid, bool bSeamless, bool bAbsolute)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ProcessClientTravel");

	AGameInfo_ProcessClientTravel_Params params {};
	params.NextMapGuid = NextMapGuid;
	params.bSeamless = bSeamless;
	params.bAbsolute = bAbsolute;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ProcessServerTravel
//		Flags  -> (NetReliable, Simulated, Exec, Native, Event, Operator, Static, Public, HasOutParms, NetClient, K2Call, K2Pure)
// Parameters:
//		struct FString                                     URL                                                        (Parm, NeedCtorLink)
//		bool                                               bAbsolute                                                  (OptionalParm, Parm)
void AGameInfo::STATIC_ProcessServerTravel(const struct FString& URL, bool bAbsolute)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ProcessServerTravel");

	AGameInfo_ProcessServerTravel_Params params {};
	params.URL = URL;
	params.bAbsolute = bAbsolute;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.RemoveMutator
//		Flags  -> ()
// Parameters:
//		class AMutator*                                    MutatorToRemove                                            (Parm)
void AGameInfo::RemoveMutator(class AMutator* MutatorToRemove)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RemoveMutator");

	AGameInfo_RemoveMutator_Params params {};
	params.MutatorToRemove = MutatorToRemove;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.AddMutator
//		Flags  -> ()
// Parameters:
//		struct FString                                     mutname                                                    (Parm, NeedCtorLink)
//		bool                                               bUserAdded                                                 (OptionalParm, Parm)
void AGameInfo::AddMutator(const struct FString& mutname, bool bUserAdded)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AddMutator");

	AGameInfo_AddMutator_Params params {};
	params.mutname = mutname;
	params.bUserAdded = bUserAdded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.NotifyPendingConnectionLost
//		Flags  -> ()
void AGameInfo::NotifyPendingConnectionLost()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.NotifyPendingConnectionLost");

	AGameInfo_NotifyPendingConnectionLost_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.InitGame
//		Flags  -> ()
// Parameters:
//		struct FString                                     Options                                                    (Parm, NeedCtorLink)
//		struct FString                                     ErrorMessage                                               (Parm, OutParm, NeedCtorLink)
void AGameInfo::InitGame(const struct FString& Options, struct FString* ErrorMessage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.InitGame");

	AGameInfo_InitGame_Params params {};
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ErrorMessage != nullptr)
		*ErrorMessage = params.ErrorMessage;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.SetGameType
//		Flags  -> ()
// Parameters:
//		struct FString                                     MapName                                                    (Parm, NeedCtorLink)
//		struct FString                                     Options                                                    (Parm, NeedCtorLink)
//		struct FString                                     Portal                                                     (Parm, NeedCtorLink)
//		class UClass*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class UClass* AGameInfo::SetGameType(const struct FString& MapName, const struct FString& Options, const struct FString& Portal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetGameType");

	AGameInfo_SetGameType_Params params {};
	params.MapName = MapName;
	params.Options = Options;
	params.Portal = Portal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.GetDefaultGameClassPath
//		Flags  -> ()
// Parameters:
//		struct FString                                     MapName                                                    (Parm, NeedCtorLink)
//		struct FString                                     Options                                                    (Parm, NeedCtorLink)
//		struct FString                                     Portal                                                     (Parm, NeedCtorLink)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString AGameInfo::GetDefaultGameClassPath(const struct FString& MapName, const struct FString& Options, const struct FString& Portal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetDefaultGameClassPath");

	AGameInfo_GetDefaultGameClassPath_Params params {};
	params.MapName = MapName;
	params.Options = Options;
	params.Portal = Portal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.GetIntOption
//		Flags  -> ()
// Parameters:
//		struct FString                                     Options                                                    (Parm, NeedCtorLink)
//		struct FString                                     ParseString                                                (Parm, NeedCtorLink)
//		int                                                CurrentValue                                               (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int AGameInfo::GetIntOption(const struct FString& Options, const struct FString& ParseString, int CurrentValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetIntOption");

	AGameInfo_GetIntOption_Params params {};
	params.Options = Options;
	params.ParseString = ParseString;
	params.CurrentValue = CurrentValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.HasOption
//		Flags  -> ()
// Parameters:
//		struct FString                                     Options                                                    (Parm, NeedCtorLink)
//		struct FString                                     InKey                                                      (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::HasOption(const struct FString& Options, const struct FString& InKey)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.HasOption");

	AGameInfo_HasOption_Params params {};
	params.Options = Options;
	params.InKey = InKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ParseOption
//		Flags  -> ()
// Parameters:
//		struct FString                                     Options                                                    (Parm, NeedCtorLink)
//		struct FString                                     InKey                                                      (Parm, NeedCtorLink)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString AGameInfo::ParseOption(const struct FString& Options, const struct FString& InKey)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ParseOption");

	AGameInfo_ParseOption_Params params {};
	params.Options = Options;
	params.InKey = InKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.GetKeyValue
//		Flags  -> ()
// Parameters:
//		struct FString                                     Pair                                                       (Parm, NeedCtorLink)
//		struct FString                                     Key                                                        (Parm, OutParm, NeedCtorLink)
//		struct FString                                     Value                                                      (Parm, OutParm, NeedCtorLink)
void AGameInfo::GetKeyValue(const struct FString& Pair, struct FString* Key, struct FString* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetKeyValue");

	AGameInfo_GetKeyValue_Params params {};
	params.Pair = Pair;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Key != nullptr)
		*Key = params.Key;
	if (Value != nullptr)
		*Value = params.Value;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.GrabOption
//		Flags  -> ()
// Parameters:
//		struct FString                                     Options                                                    (Parm, OutParm, NeedCtorLink)
//		struct FString                                     Result                                                     (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::GrabOption(struct FString* Options, struct FString* Result)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GrabOption");

	AGameInfo_GrabOption_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Options != nullptr)
		*Options = params.Options;
	if (Result != nullptr)
		*Result = params.Result;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.SetGameSpeed
//		Flags  -> ()
// Parameters:
//		float                                              T                                                          (Parm)
void AGameInfo::SetGameSpeed(float T)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetGameSpeed");

	AGameInfo_SetGameSpeed_Params params {};
	params.T = T;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.DebugPause
//		Flags  -> ()
// Parameters:
void AGameInfo::DebugPause()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DebugPause");

	AGameInfo_DebugPause_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ForceClearUnpauseDelegates
//		Flags  -> ()
// Parameters:
//		class AActor*                                      PauseActor                                                 (Parm)
void AGameInfo::ForceClearUnpauseDelegates(class AActor* PauseActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ForceClearUnpauseDelegates");

	AGameInfo_ForceClearUnpauseDelegates_Params params {};
	params.PauseActor = PauseActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ClearPause
//		Flags  -> ()
// Parameters:
void AGameInfo::ClearPause()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ClearPause");

	AGameInfo_ClearPause_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.SetPause
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           PC                                                         (Parm)
//		struct FScriptDelegate                             CanUnpauseDelegate                                         (OptionalParm, Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::SetPause(class APlayerController* PC, const struct FScriptDelegate& CanUnpauseDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetPause");

	AGameInfo_SetPause_Params params {};
	params.PC = PC;
	params.CanUnpauseDelegate = CanUnpauseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.CanUnpause
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::CanUnpause()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CanUnpause");

	AGameInfo_CanUnpause_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.GetNumPlayers
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int AGameInfo::GetNumPlayers()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetNumPlayers");

	AGameInfo_GetNumPlayers_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.GetNetworkNumber
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString AGameInfo::GetNetworkNumber()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetNetworkNumber");

	AGameInfo_GetNetworkNumber_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.InitGameReplicationInfo
//		Flags  -> ()
void AGameInfo::InitGameReplicationInfo()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.InitGameReplicationInfo");

	AGameInfo_InitGameReplicationInfo_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ForceKickPlayer
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           PC                                                         (Parm)
//		struct FString                                     KickReason                                                 (Parm, NeedCtorLink)
void AGameInfo::ForceKickPlayer(class APlayerController* PC, const struct FString& KickReason)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ForceKickPlayer");

	AGameInfo_ForceKickPlayer_Params params {};
	params.PC = PC;
	params.KickReason = KickReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.KickIdler
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           PC                                                         (Parm)
void AGameInfo::KickIdler(class APlayerController* PC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.KickIdler");

	AGameInfo_KickIdler_Params params {};
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.GameEnding
//		Flags  -> ()
void AGameInfo::GameEnding()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GameEnding");

	AGameInfo_GameEnding_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.NotifyNavigationChanged
//		Flags  -> ()
// Parameters:
//		class ANavigationPoint*                            N                                                          (Parm)
void AGameInfo::NotifyNavigationChanged(class ANavigationPoint* N)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.NotifyNavigationChanged");

	AGameInfo_NotifyNavigationChanged_Params params {};
	params.N = N;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.DoNavFearCostFallOff
//		Flags  -> ()
void AGameInfo::DoNavFearCostFallOff()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DoNavFearCostFallOff");

	AGameInfo_DoNavFearCostFallOff_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ShouldStartInCinematicMode
//		Flags  -> ()
// Parameters:
//		int                                                OutHidePlayer                                              (Parm, OutParm)
//		int                                                OutHideHud                                                 (Parm, OutParm)
//		int                                                OutDisableMovement                                         (Parm, OutParm)
//		int                                                OutDisableTurning                                          (Parm, OutParm)
//		int                                                OutDisableInput                                            (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::ShouldStartInCinematicMode(int* OutHidePlayer, int* OutHideHud, int* OutDisableMovement, int* OutDisableTurning, int* OutDisableInput)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ShouldStartInCinematicMode");

	AGameInfo_ShouldStartInCinematicMode_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutHidePlayer != nullptr)
		*OutHidePlayer = params.OutHidePlayer;
	if (OutHideHud != nullptr)
		*OutHideHud = params.OutHideHud;
	if (OutDisableMovement != nullptr)
		*OutDisableMovement = params.OutDisableMovement;
	if (OutDisableTurning != nullptr)
		*OutDisableTurning = params.OutDisableTurning;
	if (OutDisableInput != nullptr)
		*OutDisableInput = params.OutDisableInput;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.Timer
//		Flags  -> ()
void AGameInfo::Timer()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Timer");

	AGameInfo_Timer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ResetLevel
//		Flags  -> ()
// Parameters:
void AGameInfo::ResetLevel()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ResetLevel");

	AGameInfo_ResetLevel_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.ShouldReset
//		Flags  -> ()
// Parameters:
//		class AActor*                                      ActorToReset                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::ShouldReset(class AActor* ActorToReset)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ShouldReset");

	AGameInfo_ShouldReset_Params params {};
	params.ActorToReset = ActorToReset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.Reset
//		Flags  -> ()
void AGameInfo::Reset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Reset");

	AGameInfo_Reset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.DisplayDebug
//		Flags  -> ()
// Parameters:
//		class AHUD*                                        HUD                                                        (Parm)
//		float                                              out_YL                                                     (Parm, OutParm)
//		float                                              out_YPos                                                   (Parm, OutParm)
void AGameInfo::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DisplayDebug");

	AGameInfo_DisplayDebug_Params params {};
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.PostBeginPlay
//		Flags  -> ()
void AGameInfo::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PostBeginPlay");

	AGameInfo_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.GetCoverReplicator
//		Flags  -> ()
// Parameters:
//		class ACoverReplicator*                            ReturnValue                                                (Parm, OutParm, ReturnParm)
class ACoverReplicator* AGameInfo::GetCoverReplicator()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetCoverReplicator");

	AGameInfo_GetCoverReplicator_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.PreBeginPlay
//		Flags  -> ()
void AGameInfo::PreBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreBeginPlay");

	AGameInfo_PreBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.GetMapCommonPackageName
//		Flags  -> ()
// Parameters:
//		struct FString                                     InFilename                                                 (Const, Parm, OutParm, NeedCtorLink)
//		struct FString                                     OutCommonPackageName                                       (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::GetMapCommonPackageName(struct FString* InFilename, struct FString* OutCommonPackageName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetMapCommonPackageName");

	AGameInfo_GetMapCommonPackageName_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InFilename != nullptr)
		*InFilename = params.InFilename;
	if (OutCommonPackageName != nullptr)
		*OutCommonPackageName = params.OutCommonPackageName;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameInfo.GetSupportedGameTypes
//		Flags  -> ()
// Parameters:
//		struct FString                                     InFilename                                                 (Const, Parm, OutParm, NeedCtorLink)
//		struct FGameTypePrefix                             OutGameType                                                (Parm, OutParm, NeedCtorLink)
//		bool                                               bCheckExt                                                  (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameInfo::GetSupportedGameTypes(struct FString* InFilename, struct FGameTypePrefix* OutGameType, bool bCheckExt)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetSupportedGameTypes");

	AGameInfo_GetSupportedGameTypes_Params params {};
	params.bCheckExt = bCheckExt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InFilename != nullptr)
		*InFilename = params.InFilename;
	if (OutGameType != nullptr)
		*OutGameType = params.OutGameType;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.NetDamage
//		Flags  -> ()
// Parameters:
//		int                                                OriginalDamage                                             (Parm)
//		int                                                Damage                                                     (Parm, OutParm)
//		class APawn*                                       injured                                                    (Parm)
//		class AController*                                 InstigatedBy                                               (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     Momentum                                                   (Parm, OutParm)
//		class UClass*                                      DamageType                                                 (Parm)
//		class AActor*                                      DamageCauser                                               (Parm)
void AMutator::NetDamage(int OriginalDamage, int* Damage, class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, struct FVector* Momentum, class UClass* DamageType, class AActor* DamageCauser)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.NetDamage");

	AMutator_NetDamage_Params params {};
	params.OriginalDamage = OriginalDamage;
	params.injured = injured;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Damage != nullptr)
		*Damage = params.Damage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.ScoreKill
//		Flags  -> ()
// Parameters:
//		class AController*                                 Killer                                                     (Parm)
//		class AController*                                 Killed                                                     (Parm)
void AMutator::ScoreKill(class AController* Killer, class AController* Killed)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.ScoreKill");

	AMutator_ScoreKill_Params params {};
	params.Killer = Killer;
	params.Killed = Killed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.ScoreObjective
//		Flags  -> ()
// Parameters:
//		class APlayerReplicationInfo*                      Scorer                                                     (Parm)
//		int                                                Score                                                      (Parm)
void AMutator::ScoreObjective(class APlayerReplicationInfo* Scorer, int Score)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.ScoreObjective");

	AMutator_ScoreObjective_Params params {};
	params.Scorer = Scorer;
	params.Score = Score;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.PreventDeath
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Killed                                                     (Parm)
//		class AController*                                 Killer                                                     (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AMutator::PreventDeath(class APawn* Killed, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.PreventDeath");

	AMutator_PreventDeath_Params params {};
	params.Killed = Killed;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.OverridePickupQuery
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		class UClass*                                      ItemClass                                                  (Parm)
//		class AActor*                                      Pickup                                                     (Parm)
//		unsigned char                                      bAllowPickup                                               (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AMutator::OverridePickupQuery(class APawn* Other, class UClass* ItemClass, class AActor* Pickup, unsigned char* bAllowPickup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.OverridePickupQuery");

	AMutator_OverridePickupQuery_Params params {};
	params.Other = Other;
	params.ItemClass = ItemClass;
	params.Pickup = Pickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (bAllowPickup != nullptr)
		*bAllowPickup = params.bAllowPickup;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.CheckEndGame
//		Flags  -> ()
// Parameters:
//		class APlayerReplicationInfo*                      Winner                                                     (Parm)
//		struct FString                                     Reason                                                     (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AMutator::CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.CheckEndGame");

	AMutator_CheckEndGame_Params params {};
	params.Winner = Winner;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.HandleRestartGame
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AMutator::HandleRestartGame()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.HandleRestartGame");

	AMutator_HandleRestartGame_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.FindPlayerStart
//		Flags  -> ()
// Parameters:
//		class AController*                                 Player                                                     (Parm)
//		unsigned char                                      InTeam                                                     (OptionalParm, Parm)
//		struct FString                                     IncomingName                                               (OptionalParm, Parm, NeedCtorLink)
//		class ANavigationPoint*                            ReturnValue                                                (Parm, OutParm, ReturnParm)
class ANavigationPoint* AMutator::FindPlayerStart(class AController* Player, unsigned char InTeam, const struct FString& IncomingName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.FindPlayerStart");

	AMutator_FindPlayerStart_Params params {};
	params.Player = Player;
	params.InTeam = InTeam;
	params.IncomingName = IncomingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.GetSeamlessTravelActorList
//		Flags  -> ()
// Parameters:
//		bool                                               bToEntry                                                   (Parm)
//		TArray<class AActor*>                              ActorList                                                  (Parm, OutParm, NeedCtorLink)
void AMutator::GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.GetSeamlessTravelActorList");

	AMutator_GetSeamlessTravelActorList_Params params {};
	params.bToEntry = bToEntry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ActorList != nullptr)
		*ActorList = params.ActorList;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.InitMutator
//		Flags  -> ()
// Parameters:
//		struct FString                                     Options                                                    (Parm, NeedCtorLink)
//		struct FString                                     ErrorMessage                                               (Parm, OutParm, NeedCtorLink)
void AMutator::InitMutator(const struct FString& Options, struct FString* ErrorMessage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.InitMutator");

	AMutator_InitMutator_Params params {};
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ErrorMessage != nullptr)
		*ErrorMessage = params.ErrorMessage;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.DriverLeftVehicle
//		Flags  -> ()
// Parameters:
//		class AVehicle*                                    V                                                          (Parm)
//		class APawn*                                       P                                                          (Parm)
void AMutator::DriverLeftVehicle(class AVehicle* V, class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.DriverLeftVehicle");

	AMutator_DriverLeftVehicle_Params params {};
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.CanLeaveVehicle
//		Flags  -> ()
// Parameters:
//		class AVehicle*                                    V                                                          (Parm)
//		class APawn*                                       P                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AMutator::CanLeaveVehicle(class AVehicle* V, class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.CanLeaveVehicle");

	AMutator_CanLeaveVehicle_Params params {};
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.DriverEnteredVehicle
//		Flags  -> ()
// Parameters:
//		class AVehicle*                                    V                                                          (Parm)
//		class APawn*                                       P                                                          (Parm)
void AMutator::DriverEnteredVehicle(class AVehicle* V, class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.DriverEnteredVehicle");

	AMutator_DriverEnteredVehicle_Params params {};
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.NotifyLogin
//		Flags  -> ()
// Parameters:
//		class AController*                                 NewPlayer                                                  (Parm)
void AMutator::NotifyLogin(class AController* NewPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.NotifyLogin");

	AMutator_NotifyLogin_Params params {};
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.NotifyLogout
//		Flags  -> ()
// Parameters:
//		class AController*                                 Exiting                                                    (Parm)
void AMutator::NotifyLogout(class AController* Exiting)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.NotifyLogout");

	AMutator_NotifyLogout_Params params {};
	params.Exiting = Exiting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.CheckReplacement
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AMutator::CheckReplacement(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.CheckReplacement");

	AMutator_CheckReplacement_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.CheckRelevance
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AMutator::CheckRelevance(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.CheckRelevance");

	AMutator_CheckRelevance_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.IsRelevant
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AMutator::IsRelevant(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.IsRelevant");

	AMutator_IsRelevant_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.AlwaysKeep
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AMutator::AlwaysKeep(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.AlwaysKeep");

	AMutator_AlwaysKeep_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.AddMutator
//		Flags  -> ()
// Parameters:
//		class AMutator*                                    M                                                          (Parm)
void AMutator::AddMutator(class AMutator* M)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.AddMutator");

	AMutator_AddMutator_Params params {};
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.ModifyPlayer
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
void AMutator::ModifyPlayer(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.ModifyPlayer");

	AMutator_ModifyPlayer_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.ModifyLogin
//		Flags  -> ()
// Parameters:
//		struct FString                                     Portal                                                     (Parm, OutParm, NeedCtorLink)
//		struct FString                                     Options                                                    (Parm, OutParm, NeedCtorLink)
void AMutator::ModifyLogin(struct FString* Portal, struct FString* Options)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.ModifyLogin");

	AMutator_ModifyLogin_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Portal != nullptr)
		*Portal = params.Portal;
	if (Options != nullptr)
		*Options = params.Options;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.Mutate
//		Flags  -> ()
// Parameters:
//		struct FString                                     MutateString                                               (Parm, NeedCtorLink)
//		class APlayerController*                           Sender                                                     (Parm)
void AMutator::Mutate(const struct FString& MutateString, class APlayerController* Sender)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.Mutate");

	AMutator_Mutate_Params params {};
	params.MutateString = MutateString;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.Destroyed
//		Flags  -> ()
void AMutator::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.Destroyed");

	AMutator_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.MutatorIsAllowed
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AMutator::MutatorIsAllowed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.MutatorIsAllowed");

	AMutator_MutatorIsAllowed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Mutator.PreBeginPlay
//		Flags  -> ()
void AMutator::PreBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Mutator.PreBeginPlay");

	AMutator_PreBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PotentialClimbWatcher.Tick
//		Flags  -> (Net, Simulated, Native, Operator, Static, HasOptionalParms, Delegate, NetServer, HasOutParms, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
void APotentialClimbWatcher::STATIC_Tick(float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PotentialClimbWatcher.Tick");

	APotentialClimbWatcher_Tick_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Route.MoveOntoRoutePath
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
//		TEnumAsByte<Engine_ERouteDirection>                RouteDirection                                             (OptionalParm, Parm)
//		float                                              DistFudgeFactor                                            (OptionalParm, Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int ARoute::MoveOntoRoutePath(class APawn* P, TEnumAsByte<Engine_ERouteDirection> RouteDirection, float DistFudgeFactor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Route.MoveOntoRoutePath");

	ARoute_MoveOntoRoutePath_Params params {};
	params.P = P;
	params.RouteDirection = RouteDirection;
	params.DistFudgeFactor = DistFudgeFactor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Route.ResolveRouteIndex
//		Flags  -> ()
// Parameters:
//		int                                                Idx                                                        (Parm)
//		TEnumAsByte<Engine_ERouteDirection>                RouteDirection                                             (Parm)
//		unsigned char                                      out_bComplete                                              (Parm, OutParm)
//		unsigned char                                      out_bReverse                                               (Parm, OutParm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int ARoute::ResolveRouteIndex(int Idx, TEnumAsByte<Engine_ERouteDirection> RouteDirection, unsigned char* out_bComplete, unsigned char* out_bReverse)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Route.ResolveRouteIndex");

	ARoute_ResolveRouteIndex_Params params {};
	params.Idx = Idx;
	params.RouteDirection = RouteDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_bComplete != nullptr)
		*out_bComplete = params.out_bComplete;
	if (out_bReverse != nullptr)
		*out_bReverse = params.out_bReverse;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Inventory.GetLocalString
//		Flags  -> ()
// Parameters:
//		int                                                Switch                                                     (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_2                                               (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_3                                               (OptionalParm, Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString AInventory::GetLocalString(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Inventory.GetLocalString");

	AInventory_GetLocalString_Params params {};
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Inventory.DropFrom
//		Flags  -> ()
// Parameters:
//		struct FVector                                     StartLocation                                              (Parm)
//		struct FVector                                     StartVelocity                                              (Parm)
void AInventory::DropFrom(const struct FVector& StartLocation, const struct FVector& StartVelocity)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Inventory.DropFrom");

	AInventory_DropFrom_Params params {};
	params.StartLocation = StartLocation;
	params.StartVelocity = StartVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Inventory.DenyPickupQuery
//		Flags  -> ()
// Parameters:
//		class UClass*                                      ItemClass                                                  (Parm)
//		class AActor*                                      Pickup                                                     (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AInventory::DenyPickupQuery(class UClass* ItemClass, class AActor* Pickup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Inventory.DenyPickupQuery");

	AInventory_DenyPickupQuery_Params params {};
	params.ItemClass = ItemClass;
	params.Pickup = Pickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Inventory.ItemRemovedFromInvManager
//		Flags  -> ()
void AInventory::ItemRemovedFromInvManager()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Inventory.ItemRemovedFromInvManager");

	AInventory_ItemRemovedFromInvManager_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Inventory.ClientGivenTo
//		Flags  -> ()
// Parameters:
//		class APawn*                                       NewOwner                                                   (Parm)
//		bool                                               bDoNotActivate                                             (Parm)
void AInventory::ClientGivenTo(class APawn* NewOwner, bool bDoNotActivate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Inventory.ClientGivenTo");

	AInventory_ClientGivenTo_Params params {};
	params.NewOwner = NewOwner;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Inventory.GivenTo
//		Flags  -> ()
// Parameters:
//		class APawn*                                       thisPawn                                                   (Parm)
//		bool                                               bDoNotActivate                                             (OptionalParm, Parm)
void AInventory::GivenTo(class APawn* thisPawn, bool bDoNotActivate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Inventory.GivenTo");

	AInventory_GivenTo_Params params {};
	params.thisPawn = thisPawn;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Inventory.AnnouncePickup
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
void AInventory::AnnouncePickup(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Inventory.AnnouncePickup");

	AInventory_AnnouncePickup_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Inventory.GiveTo
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
void AInventory::GiveTo(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Inventory.GiveTo");

	AInventory_GiveTo_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Inventory.DetourWeight
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		float                                              PathWeight                                                 (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AInventory::DetourWeight(class APawn* Other, float PathWeight)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Inventory.DetourWeight");

	AInventory_DetourWeight_Params params {};
	params.Other = Other;
	params.PathWeight = PathWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Inventory.BotDesireability
//		Flags  -> ()
// Parameters:
//		class AActor*                                      PickupHolder                                               (Parm)
//		class APawn*                                       P                                                          (Parm)
//		class AController*                                 C                                                          (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AInventory::BotDesireability(class AActor* PickupHolder, class APawn* P, class AController* C)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Inventory.BotDesireability");

	AInventory_BotDesireability_Params params {};
	params.PickupHolder = PickupHolder;
	params.P = P;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Inventory.Destroyed
//		Flags  -> ()
void AInventory::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Inventory.Destroyed");

	AInventory_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Inventory.GetHumanReadableName
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString AInventory::GetHumanReadableName()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Inventory.GetHumanReadableName");

	AInventory_GetHumanReadableName_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.GetTargetDistance
//		Flags  -> (Singular, Net, NetReliable, Simulated, Event, Operator, Static, Public, Protected, HasDefaults, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AWeapon::STATIC_GetTargetDistance()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetTargetDistance");

	AWeapon_GetTargetDistance_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.CacheAIController
//		Flags  -> ()
void AWeapon::CacheAIController()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.CacheAIController");

	AWeapon_CacheAIController_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.WeaponIsDown
//		Flags  -> ()
void AWeapon::WeaponIsDown()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.WeaponIsDown");

	AWeapon_WeaponIsDown_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.StillFiring
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FireMode                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWeapon::StillFiring(unsigned char FireMode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.StillFiring");

	AWeapon_StillFiring_Params params {};
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.ShouldRefire
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWeapon::ShouldRefire()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ShouldRefire");

	AWeapon_ShouldRefire_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.NotifyWeaponFinishedFiring
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FireMode                                                   (Parm)
void AWeapon::NotifyWeaponFinishedFiring(unsigned char FireMode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.NotifyWeaponFinishedFiring");

	AWeapon_NotifyWeaponFinishedFiring_Params params {};
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.NotifyWeaponFired
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FireMode                                                   (Parm)
void AWeapon::NotifyWeaponFired(unsigned char FireMode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.NotifyWeaponFired");

	AWeapon_NotifyWeaponFired_Params params {};
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.HandleFinishedFiring
//		Flags  -> ()
void AWeapon::HandleFinishedFiring()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.HandleFinishedFiring");

	AWeapon_HandleFinishedFiring_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.TryPutDown
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWeapon::TryPutDown()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.TryPutDown");

	AWeapon_TryPutDown_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.GetPhysicalFireStartLoc
//		Flags  -> ()
// Parameters:
//		struct FVector                                     AimDir                                                     (OptionalParm, Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector AWeapon::GetPhysicalFireStartLoc(const struct FVector& AimDir)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetPhysicalFireStartLoc");

	AWeapon_GetPhysicalFireStartLoc_Params params {};
	params.AimDir = AimDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.GetMuzzleLoc
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector AWeapon::GetMuzzleLoc()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetMuzzleLoc");

	AWeapon_GetMuzzleLoc_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.CustomFire
//		Flags  -> ()
void AWeapon::CustomFire()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.CustomFire");

	AWeapon_CustomFire_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.ProjectileFire
//		Flags  -> (Simulated, Event, Static, Public, Protected, HasDefaults, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		class AProjectile*                                 ReturnValue                                                (Parm, OutParm, ReturnParm)
class AProjectile* AWeapon::STATIC_ProjectileFire()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ProjectileFire");

	AWeapon_ProjectileFire_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.ProcessInstantHit
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FiringMode                                                 (Parm)
//		struct FImpactInfo                                 Impact                                                     (Parm)
//		int                                                NumHits                                                    (OptionalParm, Parm)
void AWeapon::ProcessInstantHit(unsigned char FiringMode, const struct FImpactInfo& Impact, int NumHits)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ProcessInstantHit");

	AWeapon_ProcessInstantHit_Params params {};
	params.FiringMode = FiringMode;
	params.Impact = Impact;
	params.NumHits = NumHits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.InstantFire
//		Flags  -> (Net, Simulated, Exec, Native, Public, Protected, HasDefaults, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
void AWeapon::InstantFire()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.InstantFire");

	AWeapon_InstantFire_Params params {};

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.PassThroughDamage
//		Flags  -> ()
// Parameters:
//		class AActor*                                      HitActor                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWeapon::PassThroughDamage(class AActor* HitActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.PassThroughDamage");

	AWeapon_PassThroughDamage_Params params {};
	params.HitActor = HitActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.CalcWeaponFire
//		Flags  -> (Singular, Net, Simulated, Exec, Native, Event, Public, Protected, HasDefaults, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		struct FVector                                     StartTrace                                                 (Parm)
//		struct FVector                                     EndTrace                                                   (Parm)
//		TArray<struct FImpactInfo>                         ImpactList                                                 (OptionalParm, Parm, OutParm, NeedCtorLink)
//		struct FVector                                     Extent                                                     (OptionalParm, Parm)
//		struct FImpactInfo                                 ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FImpactInfo AWeapon::CalcWeaponFire(const struct FVector& StartTrace, const struct FVector& EndTrace, TArray<struct FImpactInfo>* ImpactList, const struct FVector& Extent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.CalcWeaponFire");

	AWeapon_CalcWeaponFire_Params params {};
	params.StartTrace = StartTrace;
	params.EndTrace = EndTrace;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ImpactList != nullptr)
		*ImpactList = params.ImpactList;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.GetTraceOwner
//		Flags  -> ()
// Parameters:
//		class AActor*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class AActor* AWeapon::GetTraceOwner()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetTraceOwner");

	AWeapon_GetTraceOwner_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.GetTraceRange
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AWeapon::GetTraceRange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetTraceRange");

	AWeapon_GetTraceRange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.GetAdjustedAim
//		Flags  -> (Singular, NetReliable, Simulated, Exec, Event, Operator, Static, HasOptionalParms, Const, Public, Protected, HasDefaults, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		struct FVector                                     StartFireLoc                                               (Parm)
//		struct FRotator                                    ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FRotator AWeapon::STATIC_GetAdjustedAim(const struct FVector& StartFireLoc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetAdjustedAim");

	AWeapon_GetAdjustedAim_Params params {};
	params.StartFireLoc = StartFireLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.FireAmmunition
//		Flags  -> ()
void AWeapon::FireAmmunition()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.FireAmmunition");

	AWeapon_FireAmmunition_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.FireModeUpdated
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FiringMode                                                 (Parm)
//		bool                                               bViaReplication                                            (Parm)
void AWeapon::FireModeUpdated(unsigned char FiringMode, bool bViaReplication)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.FireModeUpdated");

	AWeapon_FireModeUpdated_Params params {};
	params.FiringMode = FiringMode;
	params.bViaReplication = bViaReplication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.SetCurrentFireMode
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FiringModeNum                                              (Parm)
void AWeapon::SetCurrentFireMode(unsigned char FiringModeNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.SetCurrentFireMode");

	AWeapon_SetCurrentFireMode_Params params {};
	params.FiringModeNum = FiringModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.SendToFiringState
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FireModeNum                                                (Parm)
void AWeapon::SendToFiringState(unsigned char FireModeNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.SendToFiringState");

	AWeapon_SendToFiringState_Params params {};
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.ForceEndFire
//		Flags  -> ()
// Parameters:
void AWeapon::ForceEndFire()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ForceEndFire");

	AWeapon_ForceEndFire_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.EndFire
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FireModeNum                                                (Parm)
void AWeapon::EndFire(unsigned char FireModeNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.EndFire");

	AWeapon_EndFire_Params params {};
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.ServerStopFire
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FireModeNum                                                (Parm)
void AWeapon::ServerStopFire(unsigned char FireModeNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ServerStopFire");

	AWeapon_ServerStopFire_Params params {};
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.StopFire
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FireModeNum                                                (Parm)
void AWeapon::StopFire(unsigned char FireModeNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.StopFire");

	AWeapon_StopFire_Params params {};
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.BeginFire
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FireModeNum                                                (Parm)
void AWeapon::BeginFire(unsigned char FireModeNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.BeginFire");

	AWeapon_BeginFire_Params params {};
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.ServerStartFire
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FireModeNum                                                (Parm)
void AWeapon::ServerStartFire(unsigned char FireModeNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ServerStartFire");

	AWeapon_ServerStartFire_Params params {};
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.StartFire
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FireModeNum                                                (Parm)
void AWeapon::StartFire(unsigned char FireModeNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.StartFire");

	AWeapon_StartFire_Params params {};
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.ClientWeaponSet
//		Flags  -> ()
// Parameters:
//		bool                                               bOptionalSet                                               (Parm)
//		bool                                               bDoNotActivate                                             (OptionalParm, Parm)
void AWeapon::ClientWeaponSet(bool bOptionalSet, bool bDoNotActivate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClientWeaponSet");

	AWeapon_ClientWeaponSet_Params params {};
	params.bOptionalSet = bOptionalSet;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.ClientGivenTo
//		Flags  -> ()
// Parameters:
//		class APawn*                                       NewOwner                                                   (Parm)
//		bool                                               bDoNotActivate                                             (Parm)
void AWeapon::ClientGivenTo(class APawn* NewOwner, bool bDoNotActivate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClientGivenTo");

	AWeapon_ClientGivenTo_Params params {};
	params.NewOwner = NewOwner;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.DetachWeapon
//		Flags  -> ()
void AWeapon::DetachWeapon()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DetachWeapon");

	AWeapon_DetachWeapon_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.AttachWeaponTo
//		Flags  -> ()
// Parameters:
//		class USkeletalMeshComponent*                      MeshCpnt                                                   (Parm, EditInline)
//		struct FName                                       SocketName                                                 (OptionalParm, Parm)
void AWeapon::AttachWeaponTo(class USkeletalMeshComponent* MeshCpnt, const struct FName& SocketName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.AttachWeaponTo");

	AWeapon_AttachWeaponTo_Params params {};
	params.MeshCpnt = MeshCpnt;
	params.SocketName = SocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.ClearFlashLocation
//		Flags  -> ()
void AWeapon::ClearFlashLocation()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClearFlashLocation");

	AWeapon_ClearFlashLocation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.SetFlashLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     HitLocation                                                (Parm)
void AWeapon::SetFlashLocation(const struct FVector& HitLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.SetFlashLocation");

	AWeapon_SetFlashLocation_Params params {};
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.ClearFlashCount
//		Flags  -> ()
void AWeapon::ClearFlashCount()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClearFlashCount");

	AWeapon_ClearFlashCount_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.IncrementFlashCount
//		Flags  -> ()
void AWeapon::IncrementFlashCount()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.IncrementFlashCount");

	AWeapon_IncrementFlashCount_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.WeaponEmpty
//		Flags  -> ()
void AWeapon::WeaponEmpty()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.WeaponEmpty");

	AWeapon_WeaponEmpty_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.DenyPickupQuery
//		Flags  -> ()
// Parameters:
//		class UClass*                                      ItemClass                                                  (Parm)
//		class AActor*                                      Pickup                                                     (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWeapon::DenyPickupQuery(class UClass* ItemClass, class AActor* Pickup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DenyPickupQuery");

	AWeapon_DenyPickupQuery_Params params {};
	params.ItemClass = ItemClass;
	params.Pickup = Pickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.PutDownWeapon
//		Flags  -> ()
void AWeapon::PutDownWeapon()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.PutDownWeapon");

	AWeapon_PutDownWeapon_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.Activate
//		Flags  -> ()
void AWeapon::Activate()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.Activate");

	AWeapon_Activate_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.TimeWeaponEquipping
//		Flags  -> ()
void AWeapon::TimeWeaponEquipping()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.TimeWeaponEquipping");

	AWeapon_TimeWeaponEquipping_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.TimeWeaponPutDown
//		Flags  -> ()
void AWeapon::TimeWeaponPutDown()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.TimeWeaponPutDown");

	AWeapon_TimeWeaponPutDown_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.RefireCheckTimer
//		Flags  -> ()
void AWeapon::RefireCheckTimer()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.RefireCheckTimer");

	AWeapon_RefireCheckTimer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.TimeWeaponFiring
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FireModeNum                                                (Parm)
void AWeapon::TimeWeaponFiring(unsigned char FireModeNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.TimeWeaponFiring");

	AWeapon_TimeWeaponFiring_Params params {};
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.GetFireInterval
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FireModeNum                                                (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AWeapon::GetFireInterval(unsigned char FireModeNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetFireInterval");

	AWeapon_GetFireInterval_Params params {};
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.StopFireEffects
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FireModeNum                                                (Parm)
void AWeapon::StopFireEffects(unsigned char FireModeNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.StopFireEffects");

	AWeapon_StopFireEffects_Params params {};
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.PlayFireEffects
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FireModeNum                                                (Parm)
//		struct FVector                                     HitLocation                                                (OptionalParm, Parm)
void AWeapon::PlayFireEffects(unsigned char FireModeNum, const struct FVector& HitLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.PlayFireEffects");

	AWeapon_PlayFireEffects_Params params {};
	params.FireModeNum = FireModeNum;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.StopWeaponAnimation
//		Flags  -> ()
void AWeapon::StopWeaponAnimation()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.StopWeaponAnimation");

	AWeapon_StopWeaponAnimation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.PlayWeaponAnimation
//		Flags  -> ()
// Parameters:
//		struct FName                                       Sequence                                                   (Parm)
//		float                                              fDesiredDuration                                           (Parm)
//		bool                                               bLoop                                                      (OptionalParm, Parm)
//		class USkeletalMeshComponent*                      SkelMesh                                                   (OptionalParm, Parm, EditInline)
void AWeapon::PlayWeaponAnimation(const struct FName& Sequence, float fDesiredDuration, bool bLoop, class USkeletalMeshComponent* SkelMesh)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.PlayWeaponAnimation");

	AWeapon_PlayWeaponAnimation_Params params {};
	params.Sequence = Sequence;
	params.fDesiredDuration = fDesiredDuration;
	params.bLoop = bLoop;
	params.SkelMesh = SkelMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.GetWeaponAnimNodeSeq
//		Flags  -> ()
// Parameters:
//		class UAnimNodeSequence*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class UAnimNodeSequence* AWeapon::GetWeaponAnimNodeSeq()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetWeaponAnimNodeSeq");

	AWeapon_GetWeaponAnimNodeSeq_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.FireOnRelease
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWeapon::FireOnRelease()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.FireOnRelease");

	AWeapon_FireOnRelease_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.CanAttack
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWeapon::CanAttack(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.CanAttack");

	AWeapon_CanAttack_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.GetWeaponRating
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AWeapon::GetWeaponRating()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetWeaponRating");

	AWeapon_GetWeaponRating_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.GetAIRating
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AWeapon::GetAIRating()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetAIRating");

	AWeapon_GetAIRating_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.MaxRange
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AWeapon::MaxRange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.MaxRange");

	AWeapon_MaxRange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.AddSpread
//		Flags  -> (Net, Native, Operator, HasOptionalParms, Const, Public, Protected, HasDefaults, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		struct FRotator                                    BaseAim                                                    (Parm)
//		struct FRotator                                    ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FRotator AWeapon::AddSpread(const struct FRotator& BaseAim)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.AddSpread");

	AWeapon_AddSpread_Params params {};
	params.BaseAim = BaseAim;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.GetProjectileClass
//		Flags  -> ()
// Parameters:
//		class UClass*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class UClass* AWeapon::GetProjectileClass()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetProjectileClass");

	AWeapon_GetProjectileClass_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.ClearPendingFire
//		Flags  -> ()
// Parameters:
//		int                                                FireMode                                                   (Parm)
void AWeapon::ClearPendingFire(int FireMode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClearPendingFire");

	AWeapon_ClearPendingFire_Params params {};
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.SetPendingFire
//		Flags  -> ()
// Parameters:
//		int                                                FireMode                                                   (Parm)
void AWeapon::SetPendingFire(int FireMode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.SetPendingFire");

	AWeapon_SetPendingFire_Params params {};
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.PendingFire
//		Flags  -> ()
// Parameters:
//		int                                                FireMode                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWeapon::PendingFire(int FireMode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.PendingFire");

	AWeapon_PendingFire_Params params {};
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.GetPendingFireLength
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int AWeapon::GetPendingFireLength()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetPendingFireLength");

	AWeapon_GetPendingFireLength_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.HasAnyAmmo
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWeapon::HasAnyAmmo()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.HasAnyAmmo");

	AWeapon_HasAnyAmmo_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.HasAmmo
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FireModeNum                                                (Parm)
//		int                                                Amount                                                     (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWeapon::HasAmmo(unsigned char FireModeNum, int Amount)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.HasAmmo");

	AWeapon_HasAmmo_Params params {};
	params.FireModeNum = FireModeNum;
	params.Amount = Amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.AddAmmo
//		Flags  -> ()
// Parameters:
//		int                                                Amount                                                     (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int AWeapon::AddAmmo(int Amount)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.AddAmmo");

	AWeapon_AddAmmo_Params params {};
	params.Amount = Amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.ConsumeAmmo
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FireModeNum                                                (Parm)
void AWeapon::ConsumeAmmo(unsigned char FireModeNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ConsumeAmmo");

	AWeapon_ConsumeAmmo_Params params {};
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.GetWeaponDebug
//		Flags  -> ()
// Parameters:
//		TArray<struct FString>                             DebugInfo                                                  (Parm, OutParm, NeedCtorLink)
void AWeapon::GetWeaponDebug(TArray<struct FString>* DebugInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetWeaponDebug");

	AWeapon_GetWeaponDebug_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DebugInfo != nullptr)
		*DebugInfo = params.DebugInfo;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.DisplayDebug
//		Flags  -> ()
// Parameters:
//		class AHUD*                                        HUD                                                        (Parm)
//		float                                              out_YL                                                     (Parm, OutParm)
//		float                                              out_YPos                                                   (Parm, OutParm)
void AWeapon::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DisplayDebug");

	AWeapon_DisplayDebug_Params params {};
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.DenyClientWeaponSet
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWeapon::DenyClientWeaponSet()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DenyClientWeaponSet");

	AWeapon_DenyClientWeaponSet_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.IsFiring
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWeapon::IsFiring()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.IsFiring");

	AWeapon_IsFiring_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.ClientWeaponThrown
//		Flags  -> ()
void AWeapon::ClientWeaponThrown()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClientWeaponThrown");

	AWeapon_ClientWeaponThrown_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.CanThrow
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWeapon::CanThrow()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.CanThrow");

	AWeapon_CanThrow_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.DropFrom
//		Flags  -> ()
// Parameters:
//		struct FVector                                     StartLocation                                              (Parm)
//		struct FVector                                     StartVelocity                                              (Parm)
void AWeapon::DropFrom(const struct FVector& StartLocation, const struct FVector& StartVelocity)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DropFrom");

	AWeapon_DropFrom_Params params {};
	params.StartLocation = StartLocation;
	params.StartVelocity = StartVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.DoOverridePrevWeapon
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWeapon::DoOverridePrevWeapon()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DoOverridePrevWeapon");

	AWeapon_DoOverridePrevWeapon_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.DoOverrideNextWeapon
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AWeapon::DoOverrideNextWeapon()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DoOverrideNextWeapon");

	AWeapon_DoOverrideNextWeapon_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.HolderDied
//		Flags  -> ()
void AWeapon::HolderDied()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.HolderDied");

	AWeapon_HolderDied_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.ItemRemovedFromInvManager
//		Flags  -> ()
void AWeapon::ItemRemovedFromInvManager()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ItemRemovedFromInvManager");

	AWeapon_ItemRemovedFromInvManager_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Weapon.Destroyed
//		Flags  -> ()
void AWeapon::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Weapon.Destroyed");

	AWeapon_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.UpdateController
//		Flags  -> ()
// Parameters:
void AInventoryManager::UpdateController()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.UpdateController");

	AInventoryManager_UpdateController_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.ClientWeaponSet
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     NewWeapon                                                  (Parm)
//		bool                                               bOptionalSet                                               (Parm)
//		bool                                               bDoNotActivate                                             (OptionalParm, Parm)
void AInventoryManager::ClientWeaponSet(class AWeapon* NewWeapon, bool bOptionalSet, bool bDoNotActivate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ClientWeaponSet");

	AInventoryManager_ClientWeaponSet_Params params {};
	params.NewWeapon = NewWeapon;
	params.bOptionalSet = bOptionalSet;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.ChangedWeapon
//		Flags  -> ()
void AInventoryManager::ChangedWeapon()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ChangedWeapon");

	AInventoryManager_ChangedWeapon_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.ClearPendingWeapon
//		Flags  -> ()
void AInventoryManager::ClearPendingWeapon()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ClearPendingWeapon");

	AInventoryManager_ClearPendingWeapon_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.CancelWeaponChange
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AInventoryManager::CancelWeaponChange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.CancelWeaponChange");

	AInventoryManager_CancelWeaponChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.SetPendingWeapon
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     DesiredWeapon                                              (Parm)
void AInventoryManager::SetPendingWeapon(class AWeapon* DesiredWeapon)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.SetPendingWeapon");

	AInventoryManager_SetPendingWeapon_Params params {};
	params.DesiredWeapon = DesiredWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.InternalSetCurrentWeapon
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     DesiredWeapon                                              (Parm)
void AInventoryManager::InternalSetCurrentWeapon(class AWeapon* DesiredWeapon)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.InternalSetCurrentWeapon");

	AInventoryManager_InternalSetCurrentWeapon_Params params {};
	params.DesiredWeapon = DesiredWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.ServerSetCurrentWeapon
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     DesiredWeapon                                              (Parm)
void AInventoryManager::ServerSetCurrentWeapon(class AWeapon* DesiredWeapon)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ServerSetCurrentWeapon");

	AInventoryManager_ServerSetCurrentWeapon_Params params {};
	params.DesiredWeapon = DesiredWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.SetCurrentWeapon
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     DesiredWeapon                                              (Parm)
void AInventoryManager::SetCurrentWeapon(class AWeapon* DesiredWeapon)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.SetCurrentWeapon");

	AInventoryManager_SetCurrentWeapon_Params params {};
	params.DesiredWeapon = DesiredWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.NextWeapon
//		Flags  -> ()
// Parameters:
void AInventoryManager::NextWeapon()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.NextWeapon");

	AInventoryManager_NextWeapon_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.PrevWeapon
//		Flags  -> ()
// Parameters:
void AInventoryManager::PrevWeapon()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.PrevWeapon");

	AInventoryManager_PrevWeapon_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.SwitchToBestWeapon
//		Flags  -> ()
// Parameters:
//		bool                                               bForceADifferentWeapon                                     (OptionalParm, Parm)
void AInventoryManager::SwitchToBestWeapon(bool bForceADifferentWeapon)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.SwitchToBestWeapon");

	AInventoryManager_SwitchToBestWeapon_Params params {};
	params.bForceADifferentWeapon = bForceADifferentWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.GetBestWeapon
//		Flags  -> ()
// Parameters:
//		bool                                               bForceADifferentWeapon                                     (OptionalParm, Parm)
//		class AWeapon*                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
class AWeapon* AInventoryManager::GetBestWeapon(bool bForceADifferentWeapon)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.GetBestWeapon");

	AInventoryManager_GetBestWeapon_Params params {};
	params.bForceADifferentWeapon = bForceADifferentWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.GetWeaponRatingFor
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     W                                                          (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AInventoryManager::GetWeaponRatingFor(class AWeapon* W)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.GetWeaponRatingFor");

	AInventoryManager_GetWeaponRatingFor_Params params {};
	params.W = W;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.DrawHUD
//		Flags  -> ()
// Parameters:
//		class AHUD*                                        H                                                          (Parm)
void AInventoryManager::DrawHUD(class AHUD* H)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.DrawHUD");

	AInventoryManager_DrawHUD_Params params {};
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.OwnerDied
//		Flags  -> ()
void AInventoryManager::OwnerDied()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.OwnerDied");

	AInventoryManager_OwnerDied_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.DiscardInventory
//		Flags  -> (Singular, Net, NetReliable, Simulated, Exec, Event, Static, HasOptionalParms, Public, Protected, DLLImport, K2Override, K2Pure)
// Parameters:
void AInventoryManager::STATIC_DiscardInventory()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.DiscardInventory");

	AInventoryManager_DiscardInventory_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.RemoveFromInventory
//		Flags  -> ()
// Parameters:
//		class AInventory*                                  ItemToRemove                                               (Parm)
void AInventoryManager::RemoveFromInventory(class AInventory* ItemToRemove)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.RemoveFromInventory");

	AInventoryManager_RemoveFromInventory_Params params {};
	params.ItemToRemove = ItemToRemove;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.AddInventory
//		Flags  -> ()
// Parameters:
//		class AInventory*                                  NewItem                                                    (Parm)
//		bool                                               bDoNotActivate                                             (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AInventoryManager::AddInventory(class AInventory* NewItem, bool bDoNotActivate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.AddInventory");

	AInventoryManager_AddInventory_Params params {};
	params.NewItem = NewItem;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.CreateInventory
//		Flags  -> ()
// Parameters:
//		class UClass*                                      NewInventoryItemClass                                      (Parm)
//		bool                                               bDoNotActivate                                             (OptionalParm, Parm)
//		class AInventory*                                  ReturnValue                                                (Parm, OutParm, ReturnParm)
class AInventory* AInventoryManager::CreateInventory(class UClass* NewInventoryItemClass, bool bDoNotActivate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.CreateInventory");

	AInventoryManager_CreateInventory_Params params {};
	params.NewInventoryItemClass = NewInventoryItemClass;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.FindInventoryType
//		Flags  -> ()
// Parameters:
//		class UClass*                                      DesiredClass                                               (Parm)
//		bool                                               bAllowSubclass                                             (OptionalParm, Parm)
//		class AInventory*                                  ReturnValue                                                (Parm, OutParm, ReturnParm)
class AInventory* AInventoryManager::FindInventoryType(class UClass* DesiredClass, bool bAllowSubclass)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.FindInventoryType");

	AInventoryManager_FindInventoryType_Params params {};
	params.DesiredClass = DesiredClass;
	params.bAllowSubclass = bAllowSubclass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.HandlePickupQuery
//		Flags  -> ()
// Parameters:
//		class UClass*                                      ItemClass                                                  (Parm)
//		class AActor*                                      Pickup                                                     (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AInventoryManager::HandlePickupQuery(class UClass* ItemClass, class AActor* Pickup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.HandlePickupQuery");

	AInventoryManager_HandlePickupQuery_Params params {};
	params.ItemClass = ItemClass;
	params.Pickup = Pickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.Destroyed
//		Flags  -> ()
void AInventoryManager::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.Destroyed");

	AInventoryManager_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.SetupFor
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
void AInventoryManager::SetupFor(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.SetupFor");

	AInventoryManager_SetupFor_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.InventoryActors
//		Flags  -> ()
// Parameters:
//		class UClass*                                      BaseClass                                                  (Parm)
//		class AInventory*                                  Inv                                                        (Parm, OutParm)
void AInventoryManager::InventoryActors(class UClass* BaseClass, class AInventory** Inv)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.InventoryActors");

	AInventoryManager_InventoryActors_Params params {};
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Inv != nullptr)
		*Inv = params.Inv;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.ClearAllPendingFire
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     InWeapon                                                   (Parm)
void AInventoryManager::ClearAllPendingFire(class AWeapon* InWeapon)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ClearAllPendingFire");

	AInventoryManager_ClearAllPendingFire_Params params {};
	params.InWeapon = InWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.IsPendingFire
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     InWeapon                                                   (Parm)
//		int                                                InFiringMode                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AInventoryManager::IsPendingFire(class AWeapon* InWeapon, int InFiringMode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.IsPendingFire");

	AInventoryManager_IsPendingFire_Params params {};
	params.InWeapon = InWeapon;
	params.InFiringMode = InFiringMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.ClearPendingFire
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     InWeapon                                                   (Parm)
//		int                                                InFiringMode                                               (Parm)
void AInventoryManager::ClearPendingFire(class AWeapon* InWeapon, int InFiringMode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ClearPendingFire");

	AInventoryManager_ClearPendingFire_Params params {};
	params.InWeapon = InWeapon;
	params.InFiringMode = InFiringMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.SetPendingFire
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     InWeapon                                                   (Parm)
//		int                                                InFiringMode                                               (Parm)
void AInventoryManager::SetPendingFire(class AWeapon* InWeapon, int InFiringMode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.SetPendingFire");

	AInventoryManager_SetPendingFire_Params params {};
	params.InWeapon = InWeapon;
	params.InFiringMode = InFiringMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.GetPendingFireLength
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     InWeapon                                                   (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int AInventoryManager::GetPendingFireLength(class AWeapon* InWeapon)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.GetPendingFireLength");

	AInventoryManager_GetPendingFireLength_Params params {};
	params.InWeapon = InWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InventoryManager.PostBeginPlay
//		Flags  -> ()
void AInventoryManager::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.PostBeginPlay");

	AInventoryManager_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MatineeActor.CheckPriorityRefresh
//		Flags  -> ()
// Parameters:
void AMatineeActor::CheckPriorityRefresh()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.CheckPriorityRefresh");

	AMatineeActor_CheckPriorityRefresh_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MatineeActor.Update
//		Flags  -> ()
// Parameters:
void AMatineeActor::Update()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.Update");

	AMatineeActor_Update_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MatineeActor.AddAIGroupActor
//		Flags  -> ()
// Parameters:
//		class UInterpGroupInstAI*                          AIGroupInst                                                (Parm)
void AMatineeActor::AddAIGroupActor(class UInterpGroupInstAI* AIGroupInst)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.AddAIGroupActor");

	AMatineeActor_AddAIGroupActor_Params params {};
	params.AIGroupInst = AIGroupInst;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationPoint.GetDebugAbbrev
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString ANavigationPoint::GetDebugAbbrev()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetDebugAbbrev");

	ANavigationPoint_GetDebugAbbrev_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.NavigationPoint.ApplyCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct ANavigationPoint_FCheckpointRecord          Record                                                     (Const, Parm, OutParm)
//void ANavigationPoint::ApplyCheckpointRecord(struct ANavigationPoint_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.ApplyCheckpointRecord");
//
//	ANavigationPoint_ApplyCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}
//
//
//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.NavigationPoint.CreateCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct ANavigationPoint_FCheckpointRecord          Record                                                     (Parm, OutParm)
//void ANavigationPoint::CreateCheckpointRecord(struct ANavigationPoint_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.CreateCheckpointRecord");
//
//	ANavigationPoint_CreateCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationPoint.ShouldSaveForCheckpoint
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ANavigationPoint::ShouldSaveForCheckpoint()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.ShouldSaveForCheckpoint");

	ANavigationPoint_ShouldSaveForCheckpoint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationPoint.ShutDown
//		Flags  -> ()
void ANavigationPoint::ShutDown()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.ShutDown");

	ANavigationPoint_ShutDown_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationPoint.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              inAction                                                   (Parm)
void ANavigationPoint::OnToggle(class USeqAct_Toggle* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.OnToggle");

	ANavigationPoint_OnToggle_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationPoint.IsOnDifferentNetwork
//		Flags  -> ()
// Parameters:
//		class ANavigationPoint*                            Nav                                                        (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ANavigationPoint::IsOnDifferentNetwork(class ANavigationPoint* Nav)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.IsOnDifferentNetwork");

	ANavigationPoint_IsOnDifferentNetwork_Params params {};
	params.Nav = Nav;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationPoint.GetAllNavInRadius
//		Flags  -> ()
// Parameters:
//		class AActor*                                      ChkActor                                                   (Parm)
//		struct FVector                                     ChkPoint                                                   (Parm)
//		float                                              Radius                                                     (Parm)
//		TArray<class ANavigationPoint*>                    out_NavList                                                (Parm, OutParm, NeedCtorLink)
//		bool                                               bSkipBlocked                                               (OptionalParm, Parm)
//		int                                                inNetworkID                                                (OptionalParm, Parm)
//		struct FCylinder                                   MinSize                                                    (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ANavigationPoint::GetAllNavInRadius(class AActor* ChkActor, const struct FVector& ChkPoint, float Radius, TArray<class ANavigationPoint*>* out_NavList, bool bSkipBlocked, int inNetworkID, const struct FCylinder& MinSize)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetAllNavInRadius");

	ANavigationPoint_GetAllNavInRadius_Params params {};
	params.ChkActor = ChkActor;
	params.ChkPoint = ChkPoint;
	params.Radius = Radius;
	params.bSkipBlocked = bSkipBlocked;
	params.inNetworkID = inNetworkID;
	params.MinSize = MinSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_NavList != nullptr)
		*out_NavList = params.out_NavList;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationPoint.GetNearestNavToPoint
//		Flags  -> ()
// Parameters:
//		class AActor*                                      ChkActor                                                   (Parm)
//		struct FVector                                     ChkPoint                                                   (Parm)
//		class UClass*                                      RequiredClass                                              (OptionalParm, Parm)
//		TArray<class ANavigationPoint*>                    ExcludeList                                                (OptionalParm, Parm, NeedCtorLink)
//		class ANavigationPoint*                            ReturnValue                                                (Parm, OutParm, ReturnParm)
class ANavigationPoint* ANavigationPoint::GetNearestNavToPoint(class AActor* ChkActor, const struct FVector& ChkPoint, class UClass* RequiredClass, TArray<class ANavigationPoint*> ExcludeList)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetNearestNavToPoint");

	ANavigationPoint_GetNearestNavToPoint_Params params {};
	params.ChkActor = ChkActor;
	params.ChkPoint = ChkPoint;
	params.RequiredClass = RequiredClass;
	params.ExcludeList = ExcludeList;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationPoint.GetNearestNavToActor
//		Flags  -> ()
// Parameters:
//		class AActor*                                      ChkActor                                                   (Parm)
//		class UClass*                                      RequiredClass                                              (OptionalParm, Parm)
//		TArray<class ANavigationPoint*>                    ExcludeList                                                (OptionalParm, Parm, NeedCtorLink)
//		float                                              MinDist                                                    (OptionalParm, Parm)
//		class ANavigationPoint*                            ReturnValue                                                (Parm, OutParm, ReturnParm)
class ANavigationPoint* ANavigationPoint::GetNearestNavToActor(class AActor* ChkActor, class UClass* RequiredClass, TArray<class ANavigationPoint*> ExcludeList, float MinDist)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetNearestNavToActor");

	ANavigationPoint_GetNearestNavToActor_Params params {};
	params.ChkActor = ChkActor;
	params.RequiredClass = RequiredClass;
	params.ExcludeList = ExcludeList;
	params.MinDist = MinDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationPoint.ProceedWithMove
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ANavigationPoint::ProceedWithMove(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.ProceedWithMove");

	ANavigationPoint_ProceedWithMove_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationPoint.SuggestMovePreparation
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ANavigationPoint::SuggestMovePreparation(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.SuggestMovePreparation");

	ANavigationPoint_SuggestMovePreparation_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationPoint.DetourWeight
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		float                                              PathWeight                                                 (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float ANavigationPoint::DetourWeight(class APawn* Other, float PathWeight)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.DetourWeight");

	ANavigationPoint_DetourWeight_Params params {};
	params.Other = Other;
	params.PathWeight = PathWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationPoint.Accept
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Incoming                                                   (Parm)
//		class AActor*                                      Source                                                     (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ANavigationPoint::Accept(class AActor* Incoming, class AActor* Source)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.Accept");

	ANavigationPoint_Accept_Params params {};
	params.Incoming = Incoming;
	params.Source = Source;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationPoint.SpecialCost
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Seeker                                                     (Parm)
//		class UReachSpec*                                  Path                                                       (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int ANavigationPoint::SpecialCost(class APawn* Seeker, class UReachSpec* Path)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.SpecialCost");

	ANavigationPoint_SpecialCost_Params params {};
	params.Seeker = Seeker;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationPoint.CanTeleport
//		Flags  -> ()
// Parameters:
//		class AActor*                                      A                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ANavigationPoint::CanTeleport(class AActor* A)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.CanTeleport");

	ANavigationPoint_CanTeleport_Params params {};
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationPoint.IsUsableAnchorFor
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ANavigationPoint::IsUsableAnchorFor(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.IsUsableAnchorFor");

	ANavigationPoint_IsUsableAnchorFor_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationPoint.GetReachSpecTo
//		Flags  -> ()
// Parameters:
//		class ANavigationPoint*                            Nav                                                        (Parm)
//		class UClass*                                      SpecClass                                                  (OptionalParm, Parm)
//		class UReachSpec*                                  ReturnValue                                                (Parm, OutParm, ReturnParm)
class UReachSpec* ANavigationPoint::GetReachSpecTo(class ANavigationPoint* Nav, class UClass* SpecClass)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetReachSpecTo");

	ANavigationPoint_GetReachSpecTo_Params params {};
	params.Nav = Nav;
	params.SpecClass = SpecClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationPoint.GetBoundingCylinder
//		Flags  -> ()
// Parameters:
//		float                                              CollisionRadius                                            (Parm, OutParm)
//		float                                              CollisionHeight                                            (Parm, OutParm)
void ANavigationPoint::GetBoundingCylinder(float* CollisionRadius, float* CollisionHeight)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetBoundingCylinder");

	ANavigationPoint_GetBoundingCylinder_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (CollisionRadius != nullptr)
		*CollisionRadius = params.CollisionRadius;
	if (CollisionHeight != nullptr)
		*CollisionHeight = params.CollisionHeight;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pylon.CanReachPylon
//		Flags  -> ()
// Parameters:
//		class APylon*                                      DestPylon                                                  (Parm)
//		class AController*                                 C                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APylon::CanReachPylon(class APylon* DestPylon, class AController* C)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pylon.CanReachPylon");

	APylon_CanReachPylon_Params params {};
	params.DestPylon = DestPylon;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pylon.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void APylon::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pylon.OnToggle");

	APylon_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pylon.IsEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APylon::IsEnabled()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pylon.IsEnabled");

	APylon_IsEnabled_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pylon.SetEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               bEnabled                                                   (Parm)
void APylon::SetEnabled(bool bEnabled)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pylon.SetEnabled");

	APylon_SetEnabled_Params params {};
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pylon.PostBeginPlay
//		Flags  -> ()
void APylon::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pylon.PostBeginPlay");

	APylon_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pylon.NotifyPathChanged
//		Flags  -> ()
void APylon::NotifyPathChanged()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pylon.NotifyPathChanged");

	APylon_NotifyPathChanged_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pylon.VerifyTopLevelConnections
//		Flags  -> ()
// Parameters:
void APylon::VerifyTopLevelConnections()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pylon.VerifyTopLevelConnections");

	APylon_VerifyTopLevelConnections_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pylon.GetTestPathExtent
//		Flags  -> (Net, NetReliable, Exec, Event, Operator, Const, Public, Protected, Delegate, HasDefaults, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector APylon::GetTestPathExtent()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pylon.GetTestPathExtent");

	APylon_GetTestPathExtent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pylon.FlushDynamicEdges
//		Flags  -> ()
void APylon::FlushDynamicEdges()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pylon.FlushDynamicEdges");

	APylon_FlushDynamicEdges_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pylon.UpdateMeshForPreExistingNavMeshObstacles
//		Flags  -> ()
void APylon::UpdateMeshForPreExistingNavMeshObstacles()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pylon.UpdateMeshForPreExistingNavMeshObstacles");

	APylon_UpdateMeshForPreExistingNavMeshObstacles_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pylon.OnPylonStatusChange
//		Flags  -> ()
void APylon::OnPylonStatusChange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pylon.OnPylonStatusChange");

	APylon_OnPylonStatusChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.GetDebugAbbrev
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString ACoverLink::GetDebugAbbrev()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetDebugAbbrev");

	ACoverLink_GetDebugAbbrev_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.GetLocationDescription
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		TEnumAsByte<Engine_ECoverLocationDescription>      ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_ECoverLocationDescription> ACoverLink::GetLocationDescription(int SlotIdx)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetLocationDescription");

	ACoverLink_GetLocationDescription_Params params {};
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.GetDebugString
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString ACoverLink::GetDebugString(int SlotIdx)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetDebugString");

	ACoverLink_GetDebugString_Params params {};
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.AddCoverSlot
//		Flags  -> ()
// Parameters:
//		struct FVector                                     SlotLocation                                               (Parm)
//		struct FRotator                                    SlotRotation                                               (Parm)
//		int                                                SlotIdx                                                    (OptionalParm, Parm)
//		bool                                               bForceSlotUpdate                                           (OptionalParm, Parm)
//		class AScout*                                      Scout                                                      (OptionalParm, Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int ACoverLink::AddCoverSlot(const struct FVector& SlotLocation, const struct FRotator& SlotRotation, int SlotIdx, bool bForceSlotUpdate, class AScout* Scout)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.AddCoverSlot");

	ACoverLink_AddCoverSlot_Params params {};
	params.SlotLocation = SlotLocation;
	params.SlotRotation = SlotRotation;
	params.SlotIdx = SlotIdx;
	params.bForceSlotUpdate = bForceSlotUpdate;
	params.Scout = Scout;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.BreakFracturedMeshes
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Origin                                                     (Parm)
//		float                                              Radius                                                     (Parm)
//		float                                              RBStrength                                                 (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
void ACoverLink::BreakFracturedMeshes(const struct FVector& Origin, float Radius, float RBStrength, class UClass* DamageType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.BreakFracturedMeshes");

	ACoverLink_BreakFracturedMeshes_Params params {};
	params.Origin = Origin;
	params.Radius = Radius;
	params.RBStrength = RBStrength;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.GetSwatTurnTarget
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		int                                                Direction                                                  (Parm)
//		struct FCoverInfo                                  out_Info                                                   (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ACoverLink::GetSwatTurnTarget(int SlotIdx, int Direction, struct FCoverInfo* out_Info)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSwatTurnTarget");

	ACoverLink_GetSwatTurnTarget_Params params {};
	params.SlotIdx = SlotIdx;
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Info != nullptr)
		*out_Info = params.out_Info;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.ShutDown
//		Flags  -> ()
void ACoverLink::ShutDown()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.ShutDown");

	ACoverLink_ShutDown_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.CoverLink.ApplyCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct ANavigationPoint_FCheckpointRecord          Record                                                     (Const, Parm, OutParm)
//void ACoverLink::ApplyCheckpointRecord(struct ANavigationPoint_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.ApplyCheckpointRecord");
//
//	ACoverLink_ApplyCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}
//
//
//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.CoverLink.CreateCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct ANavigationPoint_FCheckpointRecord          Record                                                     (Parm, OutParm)
//void ACoverLink::CreateCheckpointRecord(struct ANavigationPoint_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.CreateCheckpointRecord");
//
//	ACoverLink_CreateCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              inAction                                                   (Parm)
void ACoverLink::OnToggle(class USeqAct_Toggle* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.OnToggle");

	ACoverLink_OnToggle_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.IsEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ACoverLink::IsEnabled()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsEnabled");

	ACoverLink_IsEnabled_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.AutoAdjustSlot
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		bool                                               bOnlyCheckLeans                                            (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ACoverLink::AutoAdjustSlot(int SlotIdx, bool bOnlyCheckLeans)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.AutoAdjustSlot");

	ACoverLink_AutoAdjustSlot_Params params {};
	params.SlotIdx = SlotIdx;
	params.bOnlyCheckLeans = bOnlyCheckLeans;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.OnModifyCover
//		Flags  -> ()
// Parameters:
//		class USeqAct_ModifyCover*                         Action                                                     (Parm)
void ACoverLink::OnModifyCover(class USeqAct_ModifyCover* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.OnModifyCover");

	ACoverLink_OnModifyCover_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.SetSlotPlayerOnly
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		bool                                               bInPlayerOnly                                              (Parm)
void ACoverLink::SetSlotPlayerOnly(int SlotIdx, bool bInPlayerOnly)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.SetSlotPlayerOnly");

	ACoverLink_SetSlotPlayerOnly_Params params {};
	params.SlotIdx = SlotIdx;
	params.bInPlayerOnly = bInPlayerOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.NotifySlotOwnerCoverDisabled
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		bool                                               bAIOnly                                                    (OptionalParm, Parm)
void ACoverLink::NotifySlotOwnerCoverDisabled(int SlotIdx, bool bAIOnly)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.NotifySlotOwnerCoverDisabled");

	ACoverLink_NotifySlotOwnerCoverDisabled_Params params {};
	params.SlotIdx = SlotIdx;
	params.bAIOnly = bAIOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.SetSlotEnabled
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		bool                                               bEnable                                                    (Parm)
void ACoverLink::SetSlotEnabled(int SlotIdx, bool bEnable)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.SetSlotEnabled");

	ACoverLink_SetSlotEnabled_Params params {};
	params.SlotIdx = SlotIdx;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.SetDisabled
//		Flags  -> ()
// Parameters:
//		bool                                               bNewDisabled                                               (Parm)
void ACoverLink::SetDisabled(bool bNewDisabled)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.SetDisabled");

	ACoverLink_SetDisabled_Params params {};
	params.bNewDisabled = bNewDisabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.GetSlotActions
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		TArray<TEnumAsByte<Engine_ECoverAction>>           Actions                                                    (Parm, OutParm, NeedCtorLink)
void ACoverLink::GetSlotActions(int SlotIdx, TArray<TEnumAsByte<Engine_ECoverAction>>* Actions)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotActions");

	ACoverLink_GetSlotActions_Params params {};
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Actions != nullptr)
		*Actions = params.Actions;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.HasFireLinkTo
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		struct FCoverInfo                                  ChkCover                                                   (Parm)
//		bool                                               bAllowFallbackLinks                                        (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ACoverLink::HasFireLinkTo(int SlotIdx, const struct FCoverInfo& ChkCover, bool bAllowFallbackLinks)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.HasFireLinkTo");

	ACoverLink_HasFireLinkTo_Params params {};
	params.SlotIdx = SlotIdx;
	params.ChkCover = ChkCover;
	params.bAllowFallbackLinks = bAllowFallbackLinks;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.GetFireLinkTo
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		struct FCoverInfo                                  ChkCover                                                   (Parm)
//		TEnumAsByte<Engine_ECoverAction>                   ChkAction                                                  (Parm)
//		TEnumAsByte<Engine_ECoverType>                     ChkType                                                    (Parm)
//		int                                                out_FireLinkIdx                                            (Parm, OutParm)
//		TArray<int>                                        out_Items                                                  (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ACoverLink::GetFireLinkTo(int SlotIdx, const struct FCoverInfo& ChkCover, TEnumAsByte<Engine_ECoverAction> ChkAction, TEnumAsByte<Engine_ECoverType> ChkType, int* out_FireLinkIdx, TArray<int>* out_Items)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetFireLinkTo");

	ACoverLink_GetFireLinkTo_Params params {};
	params.SlotIdx = SlotIdx;
	params.ChkCover = ChkCover;
	params.ChkAction = ChkAction;
	params.ChkType = ChkType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_FireLinkIdx != nullptr)
		*out_FireLinkIdx = params.out_FireLinkIdx;
	if (out_Items != nullptr)
		*out_Items = params.out_Items;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.AllowLeftTransition
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ACoverLink::AllowLeftTransition(int SlotIdx)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.AllowLeftTransition");

	ACoverLink_AllowLeftTransition_Params params {};
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.AllowRightTransition
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ACoverLink::AllowRightTransition(int SlotIdx)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.AllowRightTransition");

	ACoverLink_AllowRightTransition_Params params {};
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.GetSlotIdxToRight
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		int                                                Cnt                                                        (OptionalParm, Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int ACoverLink::GetSlotIdxToRight(int SlotIdx, int Cnt)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotIdxToRight");

	ACoverLink_GetSlotIdxToRight_Params params {};
	params.SlotIdx = SlotIdx;
	params.Cnt = Cnt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.GetSlotIdxToLeft
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		int                                                Cnt                                                        (OptionalParm, Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int ACoverLink::GetSlotIdxToLeft(int SlotIdx, int Cnt)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotIdxToLeft");

	ACoverLink_GetSlotIdxToLeft_Params params {};
	params.SlotIdx = SlotIdx;
	params.Cnt = Cnt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.IsRightEdgeSlot
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		bool                                               bIgnoreLeans                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ACoverLink::IsRightEdgeSlot(int SlotIdx, bool bIgnoreLeans)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsRightEdgeSlot");

	ACoverLink_IsRightEdgeSlot_Params params {};
	params.SlotIdx = SlotIdx;
	params.bIgnoreLeans = bIgnoreLeans;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.IsLeftEdgeSlot
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		bool                                               bIgnoreLeans                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ACoverLink::IsLeftEdgeSlot(int SlotIdx, bool bIgnoreLeans)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsLeftEdgeSlot");

	ACoverLink_IsLeftEdgeSlot_Params params {};
	params.SlotIdx = SlotIdx;
	params.bIgnoreLeans = bIgnoreLeans;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.IsEdgeSlot
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		bool                                               bIgnoreLeans                                               (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ACoverLink::IsEdgeSlot(int SlotIdx, bool bIgnoreLeans)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsEdgeSlot");

	ACoverLink_IsEdgeSlot_Params params {};
	params.SlotIdx = SlotIdx;
	params.bIgnoreLeans = bIgnoreLeans;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.FindSlots
//		Flags  -> ()
// Parameters:
//		struct FVector                                     CheckLocation                                              (Parm)
//		float                                              MaxDistance                                                (Parm)
//		int                                                LeftSlotIdx                                                (Parm, OutParm)
//		int                                                RightSlotIdx                                               (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ACoverLink::FindSlots(const struct FVector& CheckLocation, float MaxDistance, int* LeftSlotIdx, int* RightSlotIdx)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.FindSlots");

	ACoverLink_FindSlots_Params params {};
	params.CheckLocation = CheckLocation;
	params.MaxDistance = MaxDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (LeftSlotIdx != nullptr)
		*LeftSlotIdx = params.LeftSlotIdx;
	if (RightSlotIdx != nullptr)
		*RightSlotIdx = params.RightSlotIdx;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.IsStationarySlot
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ACoverLink::IsStationarySlot(int SlotIdx)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsStationarySlot");

	ACoverLink_IsStationarySlot_Params params {};
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.IsValidClaimBetween
//		Flags  -> ()
// Parameters:
//		class APawn*                                       ChkClaim                                                   (Parm)
//		int                                                StartSlotIdx                                               (Parm)
//		int                                                EndSlotIdx                                                 (Parm)
//		bool                                               bSkipTeamCheck                                             (OptionalParm, Parm)
//		bool                                               bSkipOverlapCheck                                          (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ACoverLink::IsValidClaimBetween(class APawn* ChkClaim, int StartSlotIdx, int EndSlotIdx, bool bSkipTeamCheck, bool bSkipOverlapCheck)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsValidClaimBetween");

	ACoverLink_IsValidClaimBetween_Params params {};
	params.ChkClaim = ChkClaim;
	params.StartSlotIdx = StartSlotIdx;
	params.EndSlotIdx = EndSlotIdx;
	params.bSkipTeamCheck = bSkipTeamCheck;
	params.bSkipOverlapCheck = bSkipOverlapCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.IsValidClaim
//		Flags  -> ()
// Parameters:
//		class APawn*                                       ChkClaim                                                   (Parm)
//		int                                                SlotIdx                                                    (Parm)
//		bool                                               bSkipTeamCheck                                             (OptionalParm, Parm)
//		bool                                               bSkipOverlapCheck                                          (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ACoverLink::IsValidClaim(class APawn* ChkClaim, int SlotIdx, bool bSkipTeamCheck, bool bSkipOverlapCheck)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsValidClaim");

	ACoverLink_IsValidClaim_Params params {};
	params.ChkClaim = ChkClaim;
	params.SlotIdx = SlotIdx;
	params.bSkipTeamCheck = bSkipTeamCheck;
	params.bSkipOverlapCheck = bSkipOverlapCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.UnClaim
//		Flags  -> ()
// Parameters:
//		class APawn*                                       OldClaim                                                   (Parm)
//		int                                                SlotIdx                                                    (Parm)
//		bool                                               bUnclaimAll                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ACoverLink::UnClaim(class APawn* OldClaim, int SlotIdx, bool bUnclaimAll)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.UnClaim");

	ACoverLink_UnClaim_Params params {};
	params.OldClaim = OldClaim;
	params.SlotIdx = SlotIdx;
	params.bUnclaimAll = bUnclaimAll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.Claim
//		Flags  -> ()
// Parameters:
//		class APawn*                                       NewClaim                                                   (Parm)
//		int                                                SlotIdx                                                    (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ACoverLink::Claim(class APawn* NewClaim, int SlotIdx)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.Claim");

	ACoverLink_Claim_Params params {};
	params.NewClaim = NewClaim;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.SetInvalidUntil
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		float                                              TimeToBecomeValid                                          (Parm)
void ACoverLink::SetInvalidUntil(int SlotIdx, float TimeToBecomeValid)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.SetInvalidUntil");

	ACoverLink_SetInvalidUntil_Params params {};
	params.SlotIdx = SlotIdx;
	params.TimeToBecomeValid = TimeToBecomeValid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.IsExposedTo
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		struct FCoverInfo                                  ChkSlot                                                    (Parm)
//		float                                              out_ExposedScale                                           (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ACoverLink::IsExposedTo(int SlotIdx, const struct FCoverInfo& ChkSlot, float* out_ExposedScale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsExposedTo");

	ACoverLink_IsExposedTo_Params params {};
	params.SlotIdx = SlotIdx;
	params.ChkSlot = ChkSlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_ExposedScale != nullptr)
		*out_ExposedScale = params.out_ExposedScale;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.GetSlotViewPoint
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		TEnumAsByte<Engine_ECoverType>                     Type                                                       (OptionalParm, Parm)
//		TEnumAsByte<Engine_ECoverAction>                   Action                                                     (OptionalParm, Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector ACoverLink::GetSlotViewPoint(int SlotIdx, TEnumAsByte<Engine_ECoverType> Type, TEnumAsByte<Engine_ECoverAction> Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotViewPoint");

	ACoverLink_GetSlotViewPoint_Params params {};
	params.SlotIdx = SlotIdx;
	params.Type = Type;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.GetSlotRotation
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		bool                                               bForceUseOffset                                            (OptionalParm, Parm)
//		struct FRotator                                    ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FRotator ACoverLink::GetSlotRotation(int SlotIdx, bool bForceUseOffset)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotRotation");

	ACoverLink_GetSlotRotation_Params params {};
	params.SlotIdx = SlotIdx;
	params.bForceUseOffset = bForceUseOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.GetSlotLocation
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		bool                                               bForceUseOffset                                            (OptionalParm, Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector ACoverLink::GetSlotLocation(int SlotIdx, bool bForceUseOffset)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotLocation");

	ACoverLink_GetSlotLocation_Params params {};
	params.SlotIdx = SlotIdx;
	params.bForceUseOffset = bForceUseOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.UnPackFireLinkInteractionInfo
//		Flags  -> ()
// Parameters:
//		unsigned char                                      PackedByte                                                 (Const, Parm)
//		TEnumAsByte<Engine_ECoverType>                     SrcType                                                    (Parm, OutParm)
//		TEnumAsByte<Engine_ECoverAction>                   SrcAction                                                  (Parm, OutParm)
//		TEnumAsByte<Engine_ECoverType>                     DestType                                                   (Parm, OutParm)
//		TEnumAsByte<Engine_ECoverAction>                   DestAction                                                 (Parm, OutParm)
void ACoverLink::UnPackFireLinkInteractionInfo(unsigned char PackedByte, TEnumAsByte<Engine_ECoverType>* SrcType, TEnumAsByte<Engine_ECoverAction>* SrcAction, TEnumAsByte<Engine_ECoverType>* DestType, TEnumAsByte<Engine_ECoverAction>* DestAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.UnPackFireLinkInteractionInfo");

	ACoverLink_UnPackFireLinkInteractionInfo_Params params {};
	params.PackedByte = PackedByte;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SrcType != nullptr)
		*SrcType = params.SrcType;
	if (SrcAction != nullptr)
		*SrcAction = params.SrcAction;
	if (DestType != nullptr)
		*DestType = params.DestType;
	if (DestAction != nullptr)
		*DestAction = params.DestAction;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.PackFireLinkInteractionInfo
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ECoverType>                     SrcType                                                    (Parm)
//		TEnumAsByte<Engine_ECoverAction>                   SrcAction                                                  (Parm)
//		TEnumAsByte<Engine_ECoverType>                     DestType                                                   (Parm)
//		TEnumAsByte<Engine_ECoverAction>                   DestAction                                                 (Parm)
//		unsigned char                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
unsigned char ACoverLink::PackFireLinkInteractionInfo(TEnumAsByte<Engine_ECoverType> SrcType, TEnumAsByte<Engine_ECoverAction> SrcAction, TEnumAsByte<Engine_ECoverType> DestType, TEnumAsByte<Engine_ECoverAction> DestAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.PackFireLinkInteractionInfo");

	ACoverLink_PackFireLinkInteractionInfo_Params params {};
	params.SrcType = SrcType;
	params.SrcAction = SrcAction;
	params.DestType = DestType;
	params.DestAction = DestAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverLink.GetFireLinkTargetCoverInfo
//		Flags  -> ()
// Parameters:
//		int                                                SlotIdx                                                    (Parm)
//		int                                                FireLinkIdx                                                (Parm)
//		struct FCoverInfo                                  out_Info                                                   (Parm, OutParm)
//		TEnumAsByte<Engine_EFireLinkID>                    ArrayID                                                    (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ACoverLink::GetFireLinkTargetCoverInfo(int SlotIdx, int FireLinkIdx, struct FCoverInfo* out_Info, TEnumAsByte<Engine_EFireLinkID> ArrayID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetFireLinkTargetCoverInfo");

	ACoverLink_GetFireLinkTargetCoverInfo_Params params {};
	params.SlotIdx = SlotIdx;
	params.FireLinkIdx = FireLinkIdx;
	params.ArrayID = ArrayID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Info != nullptr)
		*out_Info = params.out_Info;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DoorMarker.SuggestMovePreparation
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ADoorMarker::SuggestMovePreparation(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.SuggestMovePreparation");

	ADoorMarker_SuggestMovePreparation_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DoorMarker.ProceedWithMove
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ADoorMarker::ProceedWithMove(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.ProceedWithMove");

	ADoorMarker_ProceedWithMove_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DoorMarker.SpecialHandling
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		class AActor*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class AActor* ADoorMarker::SpecialHandling(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.SpecialHandling");

	ADoorMarker_SpecialHandling_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DoorMarker.MoverClosed
//		Flags  -> ()
void ADoorMarker::MoverClosed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.MoverClosed");

	ADoorMarker_MoverClosed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DoorMarker.MoverOpened
//		Flags  -> ()
void ADoorMarker::MoverOpened()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.MoverOpened");

	ADoorMarker_MoverOpened_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DoorMarker.PostBeginPlay
//		Flags  -> ()
void ADoorMarker::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.PostBeginPlay");

	ADoorMarker_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Ladder.SuggestMovePreparation
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ALadder::SuggestMovePreparation(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Ladder.SuggestMovePreparation");

	ALadder_SuggestMovePreparation_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LiftCenter.ProceedWithMove
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ALiftCenter::ProceedWithMove(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LiftCenter.ProceedWithMove");

	ALiftCenter_ProceedWithMove_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LiftCenter.SuggestMovePreparation
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ALiftCenter::SuggestMovePreparation(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LiftCenter.SuggestMovePreparation");

	ALiftCenter_SuggestMovePreparation_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LiftCenter.SpecialHandling
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		class AActor*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class AActor* ALiftCenter::SpecialHandling(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LiftCenter.SpecialHandling");

	ALiftCenter_SpecialHandling_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LiftCenter.PostBeginPlay
//		Flags  -> ()
void ALiftCenter::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LiftCenter.PostBeginPlay");

	ALiftCenter_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LiftExit.SuggestMovePreparation
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ALiftExit::SuggestMovePreparation(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LiftExit.SuggestMovePreparation");

	ALiftExit_SuggestMovePreparation_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LiftExit.WaitForLift
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
void ALiftExit::WaitForLift(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LiftExit.WaitForLift");

	ALiftExit_WaitForLift_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LiftExit.CanBeReachedFromLiftBy
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ALiftExit::CanBeReachedFromLiftBy(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LiftExit.CanBeReachedFromLiftBy");

	ALiftExit_CanBeReachedFromLiftBy_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PathNode.GetDebugAbbrev
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString APathNode::GetDebugAbbrev()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PathNode.GetDebugAbbrev");

	APathNode_GetDebugAbbrev_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PickupFactory.DelayRespawn
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APickupFactory::DelayRespawn()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.DelayRespawn");

	APickupFactory_DelayRespawn_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PickupFactory.Destroyed
//		Flags  -> ()
void APickupFactory::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.Destroyed");

	APickupFactory_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PickupFactory.SetPickupVisible
//		Flags  -> ()
void APickupFactory::SetPickupVisible()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SetPickupVisible");

	APickupFactory_SetPickupVisible_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PickupFactory.SetPickupHidden
//		Flags  -> ()
void APickupFactory::SetPickupHidden()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SetPickupHidden");

	APickupFactory_SetPickupHidden_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PickupFactory.RespawnEffect
//		Flags  -> ()
void APickupFactory::RespawnEffect()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.RespawnEffect");

	APickupFactory_RespawnEffect_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PickupFactory.GetRespawnTime
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float APickupFactory::GetRespawnTime()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.GetRespawnTime");

	APickupFactory_GetRespawnTime_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PickupFactory.RecheckValidTouch
//		Flags  -> ()
void APickupFactory::RecheckValidTouch()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.RecheckValidTouch");

	APickupFactory_RecheckValidTouch_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PickupFactory.PickedUpBy
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
void APickupFactory::PickedUpBy(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.PickedUpBy");

	APickupFactory_PickedUpBy_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PickupFactory.GiveTo
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
void APickupFactory::GiveTo(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.GiveTo");

	APickupFactory_GiveTo_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PickupFactory.ReadyToPickup
//		Flags  -> ()
// Parameters:
//		float                                              MaxWait                                                    (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APickupFactory::ReadyToPickup(float MaxWait)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.ReadyToPickup");

	APickupFactory_ReadyToPickup_Params params {};
	params.MaxWait = MaxWait;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PickupFactory.SpawnCopyFor
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Recipient                                                  (Parm)
void APickupFactory::SpawnCopyFor(class APawn* Recipient)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SpawnCopyFor");

	APickupFactory_SpawnCopyFor_Params params {};
	params.Recipient = Recipient;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PickupFactory.DetourWeight
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		float                                              PathWeight                                                 (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float APickupFactory::DetourWeight(class APawn* Other, float PathWeight)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.DetourWeight");

	APickupFactory_DetourWeight_Params params {};
	params.Other = Other;
	params.PathWeight = PathWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PickupFactory.StartSleeping
//		Flags  -> ()
void APickupFactory::StartSleeping()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.StartSleeping");

	APickupFactory_StartSleeping_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PickupFactory.SetRespawn
//		Flags  -> ()
void APickupFactory::SetRespawn()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SetRespawn");

	APickupFactory_SetRespawn_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PickupFactory.CheckForErrors
//		Flags  -> (Singular, Simulated, Event, Static, Const, Public, Private, Protected, NetServer, HasOutParms, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APickupFactory::STATIC_CheckForErrors()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.CheckForErrors");

	APickupFactory_CheckForErrors_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PickupFactory.Reset
//		Flags  -> ()
void APickupFactory::Reset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.Reset");

	APickupFactory_Reset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PickupFactory.SetPickupMesh
//		Flags  -> ()
void APickupFactory::SetPickupMesh()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SetPickupMesh");

	APickupFactory_SetPickupMesh_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PickupFactory.ShutDown
//		Flags  -> ()
void APickupFactory::ShutDown()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.ShutDown");

	APickupFactory_ShutDown_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PickupFactory.SetInitialState
//		Flags  -> ()
void APickupFactory::SetInitialState()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SetInitialState");

	APickupFactory_SetInitialState_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PickupFactory.InitializePickup
//		Flags  -> ()
void APickupFactory::InitializePickup()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.InitializePickup");

	APickupFactory_InitializePickup_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PickupFactory.PreBeginPlay
//		Flags  -> ()
void APickupFactory::PreBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.PreBeginPlay");

	APickupFactory_PreBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PickupFactory.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void APickupFactory::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.ReplicatedEvent");

	APickupFactory_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerStart.PostRenderFor
//		Flags  -> (Net, NetReliable, Native, Event, Static, Delegate, NetServer, HasOutParms, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		class APlayerController*                           PC                                                         (Parm)
//		class UCanvas*                                     Canvas                                                     (Parm)
//		struct FVector                                     CameraPosition                                             (Parm)
//		struct FVector                                     CameraDir                                                  (Parm)
void APlayerStart::STATIC_PostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerStart.PostRenderFor");

	APlayerStart_PostRenderFor_Params params {};
	params.PC = PC;
	params.Canvas = Canvas;
	params.CameraPosition = CameraPosition;
	params.CameraDir = CameraDir;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerStart.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void APlayerStart::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerStart.OnToggle");

	APlayerStart_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PortalMarker.CanTeleport
//		Flags  -> ()
// Parameters:
//		class AActor*                                      A                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APortalMarker::CanTeleport(class AActor* A)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PortalMarker.CanTeleport");

	APortalMarker_CanTeleport_Params params {};
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AISwitchablePylon.IsEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AAISwitchablePylon::IsEnabled()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AISwitchablePylon.IsEnabled");

	AAISwitchablePylon_IsEnabled_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AISwitchablePylon.SetEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               bEnabled                                                   (Parm)
void AAISwitchablePylon::SetEnabled(bool bEnabled)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AISwitchablePylon.SetEnabled");

	AAISwitchablePylon_SetEnabled_Params params {};
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AISwitchablePylon.PostBeginPlay
//		Flags  -> ()
void AAISwitchablePylon::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AISwitchablePylon.PostBeginPlay");

	AAISwitchablePylon_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DynamicPylon.StoppedMoving
//		Flags  -> ()
void ADynamicPylon::StoppedMoving()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DynamicPylon.StoppedMoving");

	ADynamicPylon_StoppedMoving_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DynamicPylon.StartedMoving
//		Flags  -> ()
void ADynamicPylon::StartedMoving()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DynamicPylon.StartedMoving");

	ADynamicPylon_StartedMoving_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DynamicPylon.FlushDynamicEdges
//		Flags  -> ()
void ADynamicPylon::FlushDynamicEdges()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DynamicPylon.FlushDynamicEdges");

	ADynamicPylon_FlushDynamicEdges_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DynamicPylon.RebuildDynamicEdges
//		Flags  -> ()
void ADynamicPylon::RebuildDynamicEdges()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DynamicPylon.RebuildDynamicEdges");

	ADynamicPylon_RebuildDynamicEdges_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DynamicPylon.PostBeginPlay
//		Flags  -> ()
void ADynamicPylon::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DynamicPylon.PostBeginPlay");

	ADynamicPylon_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Teleporter.SpecialHandling
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		class AActor*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class AActor* ATeleporter::SpecialHandling(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.SpecialHandling");

	ATeleporter_SpecialHandling_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Teleporter.PostTouch
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void ATeleporter::PostTouch(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.PostTouch");

	ATeleporter_PostTouch_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Teleporter.Touch
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		class UPrimitiveComponent*                         OtherComp                                                  (Parm, EditInline)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     HitNormal                                                  (Parm)
void ATeleporter::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.Touch");

	ATeleporter_Touch_Params params {};
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Teleporter.Accept
//		Flags  -> (Net, NetReliable, Native, HasDefaults, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		class AActor*                                      Incoming                                                   (Parm)
//		class AActor*                                      Source                                                     (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ATeleporter::Accept(class AActor* Incoming, class AActor* Source)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.Accept");

	ATeleporter_Accept_Params params {};
	params.Incoming = Incoming;
	params.Source = Source;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Teleporter.PostBeginPlay
//		Flags  -> ()
void ATeleporter::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.PostBeginPlay");

	ATeleporter_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Teleporter.CanTeleport
//		Flags  -> ()
// Parameters:
//		class AActor*                                      A                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ATeleporter::CanTeleport(class AActor* A)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.CanTeleport");

	ATeleporter_CanTeleport_Params params {};
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Projectile.ApplyFluidSurfaceImpact
//		Flags  -> ()
// Parameters:
//		class AFluidSurfaceActor*                          Fluid                                                      (Parm)
//		struct FVector                                     HitLocation                                                (Const, Parm, OutParm)
void AProjectile::ApplyFluidSurfaceImpact(class AFluidSurfaceActor* Fluid, struct FVector* HitLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Projectile.ApplyFluidSurfaceImpact");

	AProjectile_ApplyFluidSurfaceImpact_Params params {};
	params.Fluid = Fluid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Projectile.GetRange
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AProjectile::GetRange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Projectile.GetRange");

	AProjectile_GetRange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Projectile.StaticGetTimeToLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     TargetLoc                                                  (Parm)
//		struct FVector                                     StartLoc                                                   (Parm)
//		class AController*                                 RequestedBy                                                (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AProjectile::StaticGetTimeToLocation(const struct FVector& TargetLoc, const struct FVector& StartLoc, class AController* RequestedBy)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Projectile.StaticGetTimeToLocation");

	AProjectile_StaticGetTimeToLocation_Params params {};
	params.TargetLoc = TargetLoc;
	params.StartLoc = StartLoc;
	params.RequestedBy = RequestedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Projectile.GetTimeToLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     TargetLoc                                                  (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AProjectile::GetTimeToLocation(const struct FVector& TargetLoc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Projectile.GetTimeToLocation");

	AProjectile_GetTimeToLocation_Params params {};
	params.TargetLoc = TargetLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Projectile.FellOutOfWorld
//		Flags  -> ()
// Parameters:
//		class UClass*                                      dmgType                                                    (Parm)
void AProjectile::FellOutOfWorld(class UClass* dmgType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Projectile.FellOutOfWorld");

	AProjectile_FellOutOfWorld_Params params {};
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Projectile.IsStationary
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AProjectile::IsStationary()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Projectile.IsStationary");

	AProjectile_IsStationary_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Projectile.RandSpin
//		Flags  -> ()
// Parameters:
//		float                                              spinRate                                                   (Parm)
void AProjectile::RandSpin(float spinRate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Projectile.RandSpin");

	AProjectile_RandSpin_Params params {};
	params.spinRate = spinRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Projectile.Explode
//		Flags  -> ()
// Parameters:
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     HitNormal                                                  (Parm)
void AProjectile::Explode(const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Projectile.Explode");

	AProjectile_Explode_Params params {};
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Projectile.EncroachedBy
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void AProjectile::EncroachedBy(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Projectile.EncroachedBy");

	AProjectile_EncroachedBy_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Projectile.HitWall
//		Flags  -> ()
// Parameters:
//		struct FVector                                     HitNormal                                                  (Parm)
//		class AActor*                                      Wall                                                       (Parm)
//		class UPrimitiveComponent*                         WallComp                                                   (Parm, EditInline)
void AProjectile::HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Projectile.HitWall");

	AProjectile_HitWall_Params params {};
	params.HitNormal = HitNormal;
	params.Wall = Wall;
	params.WallComp = WallComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Projectile.ProcessTouch
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		class UPrimitiveComponent*                         OtherComp                                                  (Parm, EditInline)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     HitNormal                                                  (Parm)
void AProjectile::ProcessTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Projectile.ProcessTouch");

	AProjectile_ProcessTouch_Params params {};
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Projectile.Touch
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		class UPrimitiveComponent*                         OtherComp                                                  (Parm, EditInline)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     HitNormal                                                  (Parm)
void AProjectile::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Projectile.Touch");

	AProjectile_Touch_Params params {};
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Projectile.HurtRadius
//		Flags  -> ()
// Parameters:
//		float                                              DamageAmount                                               (Parm)
//		float                                              InDamageRadius                                             (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		float                                              Momentum                                                   (Parm)
//		struct FVector                                     HurtOrigin                                                 (Parm)
//		class AActor*                                      IgnoredActor                                               (OptionalParm, Parm)
//		class AController*                                 InstigatedByController                                     (OptionalParm, Parm)
//		bool                                               bDoFullDamage                                              (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AProjectile::HurtRadius(float DamageAmount, float InDamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, bool bDoFullDamage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Projectile.HurtRadius");

	AProjectile_HurtRadius_Params params {};
	params.DamageAmount = DamageAmount;
	params.InDamageRadius = InDamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.IgnoredActor = IgnoredActor;
	params.InstigatedByController = InstigatedByController;
	params.bDoFullDamage = bDoFullDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Projectile.ProjectileHurtRadius
//		Flags  -> (Singular, Net, NetReliable, Simulated, Operator, Static, Const, Delegate, NetServer, HasOutParms, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		struct FVector                                     HurtOrigin                                                 (Parm)
//		struct FVector                                     HitNormal                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AProjectile::STATIC_ProjectileHurtRadius(const struct FVector& HurtOrigin, const struct FVector& HitNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Projectile.ProjectileHurtRadius");

	AProjectile_ProjectileHurtRadius_Params params {};
	params.HurtOrigin = HurtOrigin;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Projectile.Reset
//		Flags  -> ()
void AProjectile::Reset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Projectile.Reset");

	AProjectile_Reset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Projectile.CanSplash
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AProjectile::CanSplash()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Projectile.CanSplash");

	AProjectile_CanSplash_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Projectile.GetTeamNum
//		Flags  -> ()
// Parameters:
//		unsigned char                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
unsigned char AProjectile::GetTeamNum()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Projectile.GetTeamNum");

	AProjectile_GetTeamNum_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Projectile.Init
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Direction                                                  (Parm)
void AProjectile::Init(const struct FVector& Direction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Projectile.Init");

	AProjectile_Init_Params params {};
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Projectile.PostBeginPlay
//		Flags  -> ()
void AProjectile::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Projectile.PostBeginPlay");

	AProjectile_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Projectile.PreBeginPlay
//		Flags  -> ()
void AProjectile::PreBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Projectile.PreBeginPlay");

	AProjectile_PreBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Projectile.EncroachingOn
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AProjectile::EncroachingOn(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Projectile.EncroachingOn");

	AProjectile_EncroachingOn_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SceneCaptureActor.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void ASceneCaptureActor::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureActor.OnToggle");

	ASceneCaptureActor_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PortalTeleporter.StopsProjectile
//		Flags  -> ()
// Parameters:
//		class AProjectile*                                 P                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APortalTeleporter::StopsProjectile(class AProjectile* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PortalTeleporter.StopsProjectile");

	APortalTeleporter_StopsProjectile_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PortalTeleporter.CreatePortalTexture
//		Flags  -> ()
// Parameters:
//		class UTextureRenderTarget2D*                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class UTextureRenderTarget2D* APortalTeleporter::CreatePortalTexture()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PortalTeleporter.CreatePortalTexture");

	APortalTeleporter_CreatePortalTexture_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PortalTeleporter.TransformHitLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector APortalTeleporter::TransformHitLocation(const struct FVector& HitLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PortalTeleporter.TransformHitLocation");

	APortalTeleporter_TransformHitLocation_Params params {};
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PortalTeleporter.TransformVectorDir
//		Flags  -> ()
// Parameters:
//		struct FVector                                     V                                                          (Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector APortalTeleporter::TransformVectorDir(const struct FVector& V)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PortalTeleporter.TransformVectorDir");

	APortalTeleporter_TransformVectorDir_Params params {};
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PortalTeleporter.TransformActor
//		Flags  -> ()
// Parameters:
//		class AActor*                                      A                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APortalTeleporter::TransformActor(class AActor* A)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PortalTeleporter.TransformActor");

	APortalTeleporter_TransformActor_Params params {};
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.StaticMeshActor.PreBeginPlay
//		Flags  -> ()
void AStaticMeshActor::PreBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshActor.PreBeginPlay");

	AStaticMeshActor_PreBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceObject.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USequenceObject::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceObject.GetObjClassVersion");

	USequenceObject_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceObject.ShouldClearNameOnPasting
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USequenceObject::ShouldClearNameOnPasting()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceObject.ShouldClearNameOnPasting");

	USequenceObject_ShouldClearNameOnPasting_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceObject.IsPastingIntoLevelSequenceAllowed
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USequenceObject::IsPastingIntoLevelSequenceAllowed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceObject.IsPastingIntoLevelSequenceAllowed");

	USequenceObject_IsPastingIntoLevelSequenceAllowed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceObject.IsValidLevelSequenceObject
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USequenceObject::IsValidLevelSequenceObject()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceObject.IsValidLevelSequenceObject");

	USequenceObject_IsValidLevelSequenceObject_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceObject.GetWorldInfo
//		Flags  -> ()
// Parameters:
//		class AWorldInfo*                                  ReturnValue                                                (Parm, OutParm, ReturnParm)
class AWorldInfo* USequenceObject::GetWorldInfo()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceObject.GetWorldInfo");

	USequenceObject_GetWorldInfo_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceObject.ScriptLog
//		Flags  -> ()
// Parameters:
//		struct FString                                     LogText                                                    (Parm, NeedCtorLink)
//		bool                                               bWarning                                                   (OptionalParm, Parm)
void USequenceObject::ScriptLog(const struct FString& LogText, bool bWarning)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceObject.ScriptLog");

	USequenceObject_ScriptLog_Params params {};
	params.LogText = LogText;
	params.bWarning = bWarning;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceOp.ForceActivateOutput
//		Flags  -> ()
// Parameters:
//		int                                                OutputIdx                                                  (Parm)
void USequenceOp::ForceActivateOutput(int OutputIdx)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.ForceActivateOutput");

	USequenceOp_ForceActivateOutput_Params params {};
	params.OutputIdx = OutputIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceOp.ForceActivateInput
//		Flags  -> ()
// Parameters:
//		int                                                InputIdx                                                   (Parm)
void USequenceOp::ForceActivateInput(int InputIdx)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.ForceActivateInput");

	USequenceOp_ForceActivateInput_Params params {};
	params.InputIdx = InputIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceOp.GetController
//		Flags  -> ()
// Parameters:
//		class AActor*                                      TheActor                                                   (Parm)
//		class AController*                                 ReturnValue                                                (Parm, OutParm, ReturnParm)
class AController* USequenceOp::GetController(class AActor* TheActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetController");

	USequenceOp_GetController_Params params {};
	params.TheActor = TheActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceOp.GetPawn
//		Flags  -> ()
// Parameters:
//		class AActor*                                      TheActor                                                   (Parm)
//		class APawn*                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class APawn* USequenceOp::GetPawn(class AActor* TheActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetPawn");

	USequenceOp_GetPawn_Params params {};
	params.TheActor = TheActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceOp.Reset
//		Flags  -> ()
void USequenceOp::Reset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.Reset");

	USequenceOp_Reset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceOp.PublishLinkedVariableValues
//		Flags  -> ()
void USequenceOp::PublishLinkedVariableValues()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.PublishLinkedVariableValues");

	USequenceOp_PublishLinkedVariableValues_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceOp.PopulateLinkedVariableValues
//		Flags  -> ()
void USequenceOp::PopulateLinkedVariableValues()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.PopulateLinkedVariableValues");

	USequenceOp_PopulateLinkedVariableValues_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceOp.VersionUpdated
//		Flags  -> ()
// Parameters:
//		int                                                OldVersion                                                 (Parm)
//		int                                                NewVersion                                                 (Parm)
void USequenceOp::VersionUpdated(int OldVersion, int NewVersion)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.VersionUpdated");

	USequenceOp_VersionUpdated_Params params {};
	params.OldVersion = OldVersion;
	params.NewVersion = NewVersion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceOp.Deactivated
//		Flags  -> ()
void USequenceOp::Deactivated()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.Deactivated");

	USequenceOp_Deactivated_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceOp.Activated
//		Flags  -> ()
void USequenceOp::Activated()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.Activated");

	USequenceOp_Activated_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceOp.ActivateNamedOutputLink
//		Flags  -> ()
// Parameters:
//		struct FString                                     LinkDesc                                                   (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USequenceOp::ActivateNamedOutputLink(const struct FString& LinkDesc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.ActivateNamedOutputLink");

	USequenceOp_ActivateNamedOutputLink_Params params {};
	params.LinkDesc = LinkDesc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceOp.ActivateOutputLink
//		Flags  -> ()
// Parameters:
//		int                                                OutputIdx                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USequenceOp::ActivateOutputLink(int OutputIdx)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.ActivateOutputLink");

	USequenceOp_ActivateOutputLink_Params params {};
	params.OutputIdx = OutputIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceOp.LinkedVariables
//		Flags  -> ()
// Parameters:
//		class UClass*                                      VarClass                                                   (Parm)
//		class USequenceVariable*                           OutVariable                                                (Parm, OutParm)
//		struct FString                                     inDesc                                                     (OptionalParm, Parm, NeedCtorLink)
void USequenceOp::LinkedVariables(class UClass* VarClass, class USequenceVariable** OutVariable, const struct FString& inDesc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.LinkedVariables");

	USequenceOp_LinkedVariables_Params params {};
	params.VarClass = VarClass;
	params.inDesc = inDesc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutVariable != nullptr)
		*OutVariable = params.OutVariable;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceOp.GetBoolVars
//		Flags  -> ()
// Parameters:
//		TArray<unsigned char>                              boolVars                                                   (Parm, OutParm, NeedCtorLink)
//		struct FString                                     inDesc                                                     (OptionalParm, Parm, NeedCtorLink)
void USequenceOp::GetBoolVars(TArray<unsigned char>* boolVars, const struct FString& inDesc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetBoolVars");

	USequenceOp_GetBoolVars_Params params {};
	params.inDesc = inDesc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (boolVars != nullptr)
		*boolVars = params.boolVars;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceOp.GetInterpDataVars
//		Flags  -> ()
// Parameters:
//		TArray<class UInterpData*>                         outIData                                                   (Parm, OutParm, NeedCtorLink)
//		struct FString                                     inDesc                                                     (OptionalParm, Parm, NeedCtorLink)
void USequenceOp::GetInterpDataVars(TArray<class UInterpData*>* outIData, const struct FString& inDesc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetInterpDataVars");

	USequenceOp_GetInterpDataVars_Params params {};
	params.inDesc = inDesc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (outIData != nullptr)
		*outIData = params.outIData;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceOp.GetObjectVars
//		Flags  -> ()
// Parameters:
//		TArray<class UObject*>                             objVars                                                    (Parm, OutParm, NeedCtorLink)
//		struct FString                                     inDesc                                                     (OptionalParm, Parm, NeedCtorLink)
void USequenceOp::GetObjectVars(TArray<class UObject*>* objVars, const struct FString& inDesc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetObjectVars");

	USequenceOp_GetObjectVars_Params params {};
	params.inDesc = inDesc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (objVars != nullptr)
		*objVars = params.objVars;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceOp.GetLinkedObjects
//		Flags  -> ()
// Parameters:
//		TArray<class USequenceObject*>                     out_Objects                                                (Parm, OutParm, NeedCtorLink)
//		class UClass*                                      ObjectType                                                 (OptionalParm, Parm)
//		bool                                               bRecurse                                                   (OptionalParm, Parm)
void USequenceOp::GetLinkedObjects(TArray<class USequenceObject*>* out_Objects, class UClass* ObjectType, bool bRecurse)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetLinkedObjects");

	USequenceOp_GetLinkedObjects_Params params {};
	params.ObjectType = ObjectType;
	params.bRecurse = bRecurse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Objects != nullptr)
		*out_Objects = params.out_Objects;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceOp.HasLinkedOps
//		Flags  -> ()
// Parameters:
//		bool                                               bConsiderInputLinks                                        (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USequenceOp::HasLinkedOps(bool bConsiderInputLinks)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.HasLinkedOps");

	USequenceOp_HasLinkedOps_Params params {};
	params.bConsiderInputLinks = bConsiderInputLinks;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalMessage.PartiallyDuplicates
//		Flags  -> ()
// Parameters:
//		int                                                Switch1                                                    (Parm)
//		int                                                Switch2                                                    (Parm)
//		class UObject*                                     OptionalObject1                                            (Parm)
//		class UObject*                                     OptionalObject2                                            (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ULocalMessage::PartiallyDuplicates(int Switch1, int Switch2, class UObject* OptionalObject1, class UObject* OptionalObject2)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.PartiallyDuplicates");

	ULocalMessage_PartiallyDuplicates_Params params {};
	params.Switch1 = Switch1;
	params.Switch2 = Switch2;
	params.OptionalObject1 = OptionalObject1;
	params.OptionalObject2 = OptionalObject2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalMessage.IsConsoleMessage
//		Flags  -> ()
// Parameters:
//		int                                                Switch                                                     (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ULocalMessage::IsConsoleMessage(int Switch)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.IsConsoleMessage");

	ULocalMessage_IsConsoleMessage_Params params {};
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalMessage.GetLifeTime
//		Flags  -> ()
// Parameters:
//		int                                                Switch                                                     (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float ULocalMessage::GetLifeTime(int Switch)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetLifeTime");

	ULocalMessage_GetLifeTime_Params params {};
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalMessage.GetFontSize
//		Flags  -> ()
// Parameters:
//		int                                                Switch                                                     (Parm)
//		class APlayerReplicationInfo*                      RelatedPRI1                                                (Parm)
//		class APlayerReplicationInfo*                      RelatedPRI2                                                (Parm)
//		class APlayerReplicationInfo*                      LocalPlayer                                                (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int ULocalMessage::GetFontSize(int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetFontSize");

	ULocalMessage_GetFontSize_Params params {};
	params.Switch = Switch;
	params.RelatedPRI1 = RelatedPRI1;
	params.RelatedPRI2 = RelatedPRI2;
	params.LocalPlayer = LocalPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalMessage.GetPos
//		Flags  -> ()
// Parameters:
//		int                                                Switch                                                     (Parm)
//		class AHUD*                                        myHUD                                                      (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float ULocalMessage::GetPos(int Switch, class AHUD* myHUD)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetPos");

	ULocalMessage_GetPos_Params params {};
	params.Switch = Switch;
	params.myHUD = myHUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalMessage.GetColor
//		Flags  -> ()
// Parameters:
//		int                                                Switch                                                     (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_2                                               (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_3                                               (OptionalParm, Parm)
//		class UObject*                                     OptionalObject                                             (OptionalParm, Parm)
//		struct FColor                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FColor ULocalMessage::GetColor(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetColor");

	ULocalMessage_GetColor_Params params {};
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalMessage.GetConsoleColor
//		Flags  -> ()
// Parameters:
//		class APlayerReplicationInfo*                      RelatedPRI_2                                               (Parm)
//		struct FColor                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FColor ULocalMessage::GetConsoleColor(class APlayerReplicationInfo* RelatedPRI_2)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetConsoleColor");

	ULocalMessage_GetConsoleColor_Params params {};
	params.RelatedPRI_2 = RelatedPRI_2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalMessage.GetString
//		Flags  -> ()
// Parameters:
//		int                                                Switch                                                     (OptionalParm, Parm)
//		bool                                               bPRI1HUD                                                   (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_2                                               (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_3                                               (OptionalParm, Parm)
//		class UObject*                                     OptionalObject                                             (OptionalParm, Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString ULocalMessage::GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetString");

	ULocalMessage_GetString_Params params {};
	params.Switch = Switch;
	params.bPRI1HUD = bPRI1HUD;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalMessage.ClientReceive
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           P                                                          (Parm)
//		int                                                Switch                                                     (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_2                                               (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_3                                               (OptionalParm, Parm)
//		class UObject*                                     OptionalObject                                             (OptionalParm, Parm)
void ULocalMessage::ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.ClientReceive");

	ULocalMessage_ClientReceive_Params params {};
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FailedConnect.GetString
//		Flags  -> ()
// Parameters:
//		int                                                Switch                                                     (OptionalParm, Parm)
//		bool                                               bPRI1HUD                                                   (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_2                                               (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_3                                               (OptionalParm, Parm)
//		class UObject*                                     OptionalObject                                             (OptionalParm, Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UFailedConnect::GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FailedConnect.GetString");

	UFailedConnect_GetString_Params params {};
	params.Switch = Switch;
	params.bPRI1HUD = bPRI1HUD;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FailedConnect.GetFailSwitch
//		Flags  -> ()
// Parameters:
//		struct FString                                     FailString                                                 (Parm, NeedCtorLink)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UFailedConnect::GetFailSwitch(const struct FString& FailString)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FailedConnect.GetFailSwitch");

	UFailedConnect_GetFailSwitch_Params params {};
	params.FailString = FailString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshActor.NotifyHitByExplosion
//		Flags  -> ()
// Parameters:
//		class AController*                                 InstigatorController                                       (Parm)
//		float                                              DamageAmount                                               (Parm)
//		class UClass*                                      dmgType                                                    (Parm)
void AFracturedStaticMeshActor::NotifyHitByExplosion(class AController* InstigatorController, float DamageAmount, class UClass* dmgType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.NotifyHitByExplosion");

	AFracturedStaticMeshActor_NotifyHitByExplosion_Params params {};
	params.InstigatorController = InstigatorController;
	params.DamageAmount = DamageAmount;
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshActor.SetLoseChunkReplacementMaterial
//		Flags  -> ()
// Parameters:
void AFracturedStaticMeshActor::SetLoseChunkReplacementMaterial()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.SetLoseChunkReplacementMaterial");

	AFracturedStaticMeshActor_SetLoseChunkReplacementMaterial_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshActor.HideFragmentsToMaximizeMemoryUsage
//		Flags  -> ()
// Parameters:
void AFracturedStaticMeshActor::HideFragmentsToMaximizeMemoryUsage()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.HideFragmentsToMaximizeMemoryUsage");

	AFracturedStaticMeshActor_HideFragmentsToMaximizeMemoryUsage_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshActor.HideOneFragment
//		Flags  -> ()
// Parameters:
void AFracturedStaticMeshActor::HideOneFragment()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.HideOneFragment");

	AFracturedStaticMeshActor_HideOneFragment_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshActor.ResetVisibility
//		Flags  -> ()
void AFracturedStaticMeshActor::ResetVisibility()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.ResetVisibility");

	AFracturedStaticMeshActor_ResetVisibility_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshActor.BreakOffPartsInRadius
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Origin                                                     (Parm)
//		float                                              Radius                                                     (Parm)
//		float                                              RBStrength                                                 (Parm)
//		bool                                               bWantPhysChunksAndParticles                                (Parm)
void AFracturedStaticMeshActor::BreakOffPartsInRadius(const struct FVector& Origin, float Radius, float RBStrength, bool bWantPhysChunksAndParticles)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.BreakOffPartsInRadius");

	AFracturedStaticMeshActor_BreakOffPartsInRadius_Params params {};
	params.Origin = Origin;
	params.Radius = Radius;
	params.RBStrength = RBStrength;
	params.bWantPhysChunksAndParticles = bWantPhysChunksAndParticles;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshActor.Explode
//		Flags  -> (Singular, NetReliable, Simulated, Exec, Native, Operator, Const, Protected, HasOutParms, NetClient, K2Call, K2Pure)
// Parameters:
void AFracturedStaticMeshActor::Explode()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.Explode");

	AFracturedStaticMeshActor_Explode_Params params {};

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshActor.TakeDamage
//		Flags  -> (Singular, Net, Static, Const, Protected, HasOutParms, NetClient, K2Call, K2Pure)
// Parameters:
//		int                                                Damage                                                     (Parm)
//		class AController*                                 EventInstigator                                            (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     Momentum                                                   (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (OptionalParm, Parm)
//		class AActor*                                      DamageCauser                                               (OptionalParm, Parm)
void AFracturedStaticMeshActor::STATIC_TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.TakeDamage");

	AFracturedStaticMeshActor_TakeDamage_Params params {};
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshActor.RemoveDecals
//		Flags  -> ()
// Parameters:
//		int                                                IndexToRemoveDecalsFrom                                    (Parm)
void AFracturedStaticMeshActor::RemoveDecals(int IndexToRemoveDecalsFrom)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.RemoveDecals");

	AFracturedStaticMeshActor_RemoveDecals_Params params {};
	params.IndexToRemoveDecalsFrom = IndexToRemoveDecalsFrom;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshActor.FractureEffectIsRelevant
//		Flags  -> (Singular, Net, NetReliable, Simulated, Event, Const, Protected, HasOutParms, NetClient, K2Call, K2Pure)
// Parameters:
//		bool                                               bForceDedicated                                            (Parm)
//		class APawn*                                       EffectInstigator                                           (Parm)
//		unsigned char                                      bWantPhysChunksAndParticles                                (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AFracturedStaticMeshActor::FractureEffectIsRelevant(bool bForceDedicated, class APawn* EffectInstigator, unsigned char* bWantPhysChunksAndParticles)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.FractureEffectIsRelevant");

	AFracturedStaticMeshActor_FractureEffectIsRelevant_Params params {};
	params.bForceDedicated = bForceDedicated;
	params.EffectInstigator = EffectInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (bWantPhysChunksAndParticles != nullptr)
		*bWantPhysChunksAndParticles = params.bWantPhysChunksAndParticles;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshActor.IsFracturedByDamageType
//		Flags  -> ()
// Parameters:
//		class UClass*                                      dmgType                                                    (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AFracturedStaticMeshActor::IsFracturedByDamageType(class UClass* dmgType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.IsFracturedByDamageType");

	AFracturedStaticMeshActor_IsFracturedByDamageType_Params params {};
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshActor.SpawnDeferredParts
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AFracturedStaticMeshActor::SpawnDeferredParts()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.SpawnDeferredParts");

	AFracturedStaticMeshActor_SpawnDeferredParts_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshActor.BreakOffIsolatedIslands
//		Flags  -> ()
// Parameters:
//		TArray<unsigned char>                              FragmentVis                                                (Parm, OutParm, NeedCtorLink)
//		TArray<int>                                        IgnoreFrags                                                (Parm, NeedCtorLink)
//		struct FVector                                     ChunkDir                                                   (Parm)
//		TArray<class AFracturedStaticMeshPart*>            DisableCollWithPart                                        (Parm, NeedCtorLink)
//		bool                                               bWantPhysChunks                                            (Parm)
void AFracturedStaticMeshActor::BreakOffIsolatedIslands(TArray<unsigned char>* FragmentVis, TArray<int> IgnoreFrags, const struct FVector& ChunkDir, TArray<class AFracturedStaticMeshPart*> DisableCollWithPart, bool bWantPhysChunks)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.BreakOffIsolatedIslands");

	AFracturedStaticMeshActor_BreakOffIsolatedIslands_Params params {};
	params.IgnoreFrags = IgnoreFrags;
	params.ChunkDir = ChunkDir;
	params.DisableCollWithPart = DisableCollWithPart;
	params.bWantPhysChunks = bWantPhysChunks;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (FragmentVis != nullptr)
		*FragmentVis = params.FragmentVis;

}


//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.FracturedStaticMeshActor.ApplyCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct AFracturedStaticMeshActor_FCheckpointRecord Record                                                     (Const, Parm, OutParm, NeedCtorLink)
//void AFracturedStaticMeshActor::ApplyCheckpointRecord(struct AFracturedStaticMeshActor_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.ApplyCheckpointRecord");
//
//	AFracturedStaticMeshActor_ApplyCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}
//
//
//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.FracturedStaticMeshActor.CreateCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct AFracturedStaticMeshActor_FCheckpointRecord Record                                                     (Parm, OutParm, NeedCtorLink)
//void AFracturedStaticMeshActor::CreateCheckpointRecord(struct AFracturedStaticMeshActor_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.CreateCheckpointRecord");
//
//	AFracturedStaticMeshActor_CreateCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshActor.ShouldSaveForCheckpoint
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AFracturedStaticMeshActor::ShouldSaveForCheckpoint()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.ShouldSaveForCheckpoint");

	AFracturedStaticMeshActor_ShouldSaveForCheckpoint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshActor.ResetHealth
//		Flags  -> ()
void AFracturedStaticMeshActor::ResetHealth()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.ResetHealth");

	AFracturedStaticMeshActor_ResetHealth_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshActor.PostBeginPlay
//		Flags  -> ()
void AFracturedStaticMeshActor::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.PostBeginPlay");

	AFracturedStaticMeshActor_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshActor.SpawnPartMulti
//		Flags  -> ()
// Parameters:
//		TArray<int>                                        ChunkIndices                                               (Parm, NeedCtorLink)
//		struct FVector                                     InitialVel                                                 (Parm)
//		struct FVector                                     InitialAngVel                                              (Parm)
//		float                                              RelativeScale                                              (Parm)
//		bool                                               bExplosion                                                 (Parm)
//		class AFracturedStaticMeshPart*                    ReturnValue                                                (Parm, OutParm, ReturnParm)
class AFracturedStaticMeshPart* AFracturedStaticMeshActor::SpawnPartMulti(TArray<int> ChunkIndices, const struct FVector& InitialVel, const struct FVector& InitialAngVel, float RelativeScale, bool bExplosion)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.SpawnPartMulti");

	AFracturedStaticMeshActor_SpawnPartMulti_Params params {};
	params.ChunkIndices = ChunkIndices;
	params.InitialVel = InitialVel;
	params.InitialAngVel = InitialAngVel;
	params.RelativeScale = RelativeScale;
	params.bExplosion = bExplosion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshActor.SpawnPart
//		Flags  -> ()
// Parameters:
//		int                                                ChunkIndex                                                 (Parm)
//		struct FVector                                     InitialVel                                                 (Parm)
//		struct FVector                                     InitialAngVel                                              (Parm)
//		float                                              RelativeScale                                              (Parm)
//		bool                                               bExplosion                                                 (Parm)
//		class AFracturedStaticMeshPart*                    ReturnValue                                                (Parm, OutParm, ReturnParm)
class AFracturedStaticMeshPart* AFracturedStaticMeshActor::SpawnPart(int ChunkIndex, const struct FVector& InitialVel, const struct FVector& InitialAngVel, float RelativeScale, bool bExplosion)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.SpawnPart");

	AFracturedStaticMeshActor_SpawnPart_Params params {};
	params.ChunkIndex = ChunkIndex;
	params.InitialVel = InitialVel;
	params.InitialAngVel = InitialAngVel;
	params.RelativeScale = RelativeScale;
	params.bExplosion = bExplosion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceEvent.Toggled
//		Flags  -> ()
void USequenceEvent::Toggled()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceEvent.Toggled");

	USequenceEvent_Toggled_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceEvent.Reset
//		Flags  -> ()
void USequenceEvent::Reset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceEvent.Reset");

	USequenceEvent_Reset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceEvent.CheckActivate
//		Flags  -> ()
// Parameters:
//		class AActor*                                      InOriginator                                               (Parm)
//		class AActor*                                      InInstigator                                               (Parm)
//		bool                                               bTest                                                      (OptionalParm, Parm)
//		TArray<int>                                        ActivateIndices                                            (Const, OptionalParm, Parm, OutParm, NeedCtorLink)
//		bool                                               bPushTop                                                   (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USequenceEvent::CheckActivate(class AActor* InOriginator, class AActor* InInstigator, bool bTest, TArray<int>* ActivateIndices, bool bPushTop)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceEvent.CheckActivate");

	USequenceEvent_CheckActivate_Params params {};
	params.InOriginator = InOriginator;
	params.InInstigator = InInstigator;
	params.bTest = bTest;
	params.bPushTop = bPushTop;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ActivateIndices != nullptr)
		*ActivateIndices = params.ActivateIndices;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SequenceEvent.RegisterEvent
//		Flags  -> ()
void USequenceEvent::RegisterEvent()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SequenceEvent.RegisterEvent");

	USequenceEvent_RegisterEvent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HeightFog.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void AHeightFog::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HeightFog.OnToggle");

	AHeightFog_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HeightFog.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void AHeightFog::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HeightFog.ReplicatedEvent");

	AHeightFog_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HeightFog.PostBeginPlay
//		Flags  -> ()
void AHeightFog::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HeightFog.PostBeginPlay");

	AHeightFog_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.RateContent
//		Flags  -> ()
// Parameters:
//		unsigned char                                      PlayerNum                                                  (Parm)
//		struct FCommunityContentFile                       FileToRate                                                 (Const, Parm, OutParm, NeedCtorLink)
//		int                                                NewRating                                                  (Parm)
void UOnlineCommunityContentInterface::RateContent(unsigned char PlayerNum, struct FCommunityContentFile* FileToRate, int NewRating)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.RateContent");

	UOnlineCommunityContentInterface_RateContent_Params params {};
	params.PlayerNum = PlayerNum;
	params.NewRating = NewRating;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (FileToRate != nullptr)
		*FileToRate = params.FileToRate;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.ClearGetContentPayloadCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             GetContentPayloadCompleteDelegate                          (Parm, NeedCtorLink)
void UOnlineCommunityContentInterface::ClearGetContentPayloadCompleteDelegate(const struct FScriptDelegate& GetContentPayloadCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.ClearGetContentPayloadCompleteDelegate");

	UOnlineCommunityContentInterface_ClearGetContentPayloadCompleteDelegate_Params params {};
	params.GetContentPayloadCompleteDelegate = GetContentPayloadCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.AddGetContentPayloadCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             GetContentPayloadCompleteDelegate                          (Parm, NeedCtorLink)
void UOnlineCommunityContentInterface::AddGetContentPayloadCompleteDelegate(const struct FScriptDelegate& GetContentPayloadCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.AddGetContentPayloadCompleteDelegate");

	UOnlineCommunityContentInterface_AddGetContentPayloadCompleteDelegate_Params params {};
	params.GetContentPayloadCompleteDelegate = GetContentPayloadCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.OnGetContentPayloadComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FCommunityContentFile                       FileDownloaded                                             (Parm, NeedCtorLink)
//		TArray<unsigned char>                              Payload                                                    (Const, Parm, OutParm, NeedCtorLink)
void UOnlineCommunityContentInterface::OnGetContentPayloadComplete(bool bWasSuccessful, const struct FCommunityContentFile& FileDownloaded, TArray<unsigned char>* Payload)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.OnGetContentPayloadComplete");

	UOnlineCommunityContentInterface_OnGetContentPayloadComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.FileDownloaded = FileDownloaded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Payload != nullptr)
		*Payload = params.Payload;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.GetContentPayload
//		Flags  -> ()
// Parameters:
//		unsigned char                                      PlayerNum                                                  (Parm)
//		struct FCommunityContentFile                       FileDownloaded                                             (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineCommunityContentInterface::GetContentPayload(unsigned char PlayerNum, struct FCommunityContentFile* FileDownloaded)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.GetContentPayload");

	UOnlineCommunityContentInterface_GetContentPayload_Params params {};
	params.PlayerNum = PlayerNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (FileDownloaded != nullptr)
		*FileDownloaded = params.FileDownloaded;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.ClearDownloadContentCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             DownloadContentCompleteDelegate                            (Parm, NeedCtorLink)
void UOnlineCommunityContentInterface::ClearDownloadContentCompleteDelegate(const struct FScriptDelegate& DownloadContentCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.ClearDownloadContentCompleteDelegate");

	UOnlineCommunityContentInterface_ClearDownloadContentCompleteDelegate_Params params {};
	params.DownloadContentCompleteDelegate = DownloadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.AddDownloadContentCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             DownloadContentCompleteDelegate                            (Parm, NeedCtorLink)
void UOnlineCommunityContentInterface::AddDownloadContentCompleteDelegate(const struct FScriptDelegate& DownloadContentCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.AddDownloadContentCompleteDelegate");

	UOnlineCommunityContentInterface_AddDownloadContentCompleteDelegate_Params params {};
	params.DownloadContentCompleteDelegate = DownloadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.OnDownloadContentComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FCommunityContentFile                       FileDownloaded                                             (Parm, NeedCtorLink)
void UOnlineCommunityContentInterface::OnDownloadContentComplete(bool bWasSuccessful, const struct FCommunityContentFile& FileDownloaded)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.OnDownloadContentComplete");

	UOnlineCommunityContentInterface_OnDownloadContentComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.FileDownloaded = FileDownloaded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.DownloadContent
//		Flags  -> ()
// Parameters:
//		unsigned char                                      PlayerNum                                                  (Parm)
//		struct FCommunityContentFile                       FileToDownload                                             (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineCommunityContentInterface::DownloadContent(unsigned char PlayerNum, struct FCommunityContentFile* FileToDownload)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.DownloadContent");

	UOnlineCommunityContentInterface_DownloadContent_Params params {};
	params.PlayerNum = PlayerNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (FileToDownload != nullptr)
		*FileToDownload = params.FileToDownload;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.ClearUploadContentCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             UploadContentCompleteDelegate                              (Parm, NeedCtorLink)
void UOnlineCommunityContentInterface::ClearUploadContentCompleteDelegate(const struct FScriptDelegate& UploadContentCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.ClearUploadContentCompleteDelegate");

	UOnlineCommunityContentInterface_ClearUploadContentCompleteDelegate_Params params {};
	params.UploadContentCompleteDelegate = UploadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.AddUploadContentCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             UploadContentCompleteDelegate                              (Parm, NeedCtorLink)
void UOnlineCommunityContentInterface::AddUploadContentCompleteDelegate(const struct FScriptDelegate& UploadContentCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.AddUploadContentCompleteDelegate");

	UOnlineCommunityContentInterface_AddUploadContentCompleteDelegate_Params params {};
	params.UploadContentCompleteDelegate = UploadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.OnUploadContentComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FCommunityContentFile                       UploadedFile                                               (Parm, NeedCtorLink)
void UOnlineCommunityContentInterface::OnUploadContentComplete(bool bWasSuccessful, const struct FCommunityContentFile& UploadedFile)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.OnUploadContentComplete");

	UOnlineCommunityContentInterface_OnUploadContentComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.UploadedFile = UploadedFile;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.UploadContent
//		Flags  -> ()
// Parameters:
//		unsigned char                                      PlayerNum                                                  (Parm)
//		TArray<unsigned char>                              Payload                                                    (Const, Parm, OutParm, NeedCtorLink)
//		struct FCommunityContentMetadata                   MetaData                                                   (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineCommunityContentInterface::UploadContent(unsigned char PlayerNum, TArray<unsigned char>* Payload, struct FCommunityContentMetadata* MetaData)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.UploadContent");

	UOnlineCommunityContentInterface_UploadContent_Params params {};
	params.PlayerNum = PlayerNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Payload != nullptr)
		*Payload = params.Payload;
	if (MetaData != nullptr)
		*MetaData = params.MetaData;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.GetFriendsContentList
//		Flags  -> ()
// Parameters:
//		unsigned char                                      PlayerNum                                                  (Parm)
//		struct FOnlineFriend                               Friend                                                     (Const, Parm, OutParm, NeedCtorLink)
//		TArray<struct FCommunityContentFile>               ContentFiles                                               (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineCommunityContentInterface::GetFriendsContentList(unsigned char PlayerNum, struct FOnlineFriend* Friend, TArray<struct FCommunityContentFile>* ContentFiles)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.GetFriendsContentList");

	UOnlineCommunityContentInterface_GetFriendsContentList_Params params {};
	params.PlayerNum = PlayerNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Friend != nullptr)
		*Friend = params.Friend;
	if (ContentFiles != nullptr)
		*ContentFiles = params.ContentFiles;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.ClearReadFriendsContentListCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ReadFriendsContentListCompleteDelegate                     (Parm, NeedCtorLink)
void UOnlineCommunityContentInterface::ClearReadFriendsContentListCompleteDelegate(const struct FScriptDelegate& ReadFriendsContentListCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.ClearReadFriendsContentListCompleteDelegate");

	UOnlineCommunityContentInterface_ClearReadFriendsContentListCompleteDelegate_Params params {};
	params.ReadFriendsContentListCompleteDelegate = ReadFriendsContentListCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.AddReadFriendsContentListCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ReadFriendsContentListCompleteDelegate                     (Parm, NeedCtorLink)
void UOnlineCommunityContentInterface::AddReadFriendsContentListCompleteDelegate(const struct FScriptDelegate& ReadFriendsContentListCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.AddReadFriendsContentListCompleteDelegate");

	UOnlineCommunityContentInterface_AddReadFriendsContentListCompleteDelegate_Params params {};
	params.ReadFriendsContentListCompleteDelegate = ReadFriendsContentListCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.OnReadFriendsContentListComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineCommunityContentInterface::OnReadFriendsContentListComplete(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.OnReadFriendsContentListComplete");

	UOnlineCommunityContentInterface_OnReadFriendsContentListComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.ReadFriendsContentList
//		Flags  -> ()
// Parameters:
//		unsigned char                                      PlayerNum                                                  (Parm)
//		TArray<struct FOnlineFriend>                       Friends                                                    (Const, Parm, OutParm, NeedCtorLink)
//		int                                                StartAt                                                    (OptionalParm, Parm)
//		int                                                NumToRead                                                  (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineCommunityContentInterface::ReadFriendsContentList(unsigned char PlayerNum, TArray<struct FOnlineFriend>* Friends, int StartAt, int NumToRead)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.ReadFriendsContentList");

	UOnlineCommunityContentInterface_ReadFriendsContentList_Params params {};
	params.PlayerNum = PlayerNum;
	params.StartAt = StartAt;
	params.NumToRead = NumToRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Friends != nullptr)
		*Friends = params.Friends;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.GetContentList
//		Flags  -> ()
// Parameters:
//		unsigned char                                      PlayerNum                                                  (Parm)
//		TArray<struct FCommunityContentFile>               ContentFiles                                               (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineCommunityContentInterface::GetContentList(unsigned char PlayerNum, TArray<struct FCommunityContentFile>* ContentFiles)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.GetContentList");

	UOnlineCommunityContentInterface_GetContentList_Params params {};
	params.PlayerNum = PlayerNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ContentFiles != nullptr)
		*ContentFiles = params.ContentFiles;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.ClearReadContentListCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ReadContentListCompleteDelegate                            (Parm, NeedCtorLink)
void UOnlineCommunityContentInterface::ClearReadContentListCompleteDelegate(const struct FScriptDelegate& ReadContentListCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.ClearReadContentListCompleteDelegate");

	UOnlineCommunityContentInterface_ClearReadContentListCompleteDelegate_Params params {};
	params.ReadContentListCompleteDelegate = ReadContentListCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.AddReadContentListCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ReadContentListCompleteDelegate                            (Parm, NeedCtorLink)
void UOnlineCommunityContentInterface::AddReadContentListCompleteDelegate(const struct FScriptDelegate& ReadContentListCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.AddReadContentListCompleteDelegate");

	UOnlineCommunityContentInterface_AddReadContentListCompleteDelegate_Params params {};
	params.ReadContentListCompleteDelegate = ReadContentListCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.OnReadContentListComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineCommunityContentInterface::OnReadContentListComplete(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.OnReadContentListComplete");

	UOnlineCommunityContentInterface_OnReadContentListComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.ReadContentList
//		Flags  -> ()
// Parameters:
//		unsigned char                                      PlayerNum                                                  (Parm)
//		int                                                StartAt                                                    (OptionalParm, Parm)
//		int                                                NumToRead                                                  (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineCommunityContentInterface::ReadContentList(unsigned char PlayerNum, int StartAt, int NumToRead)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.ReadContentList");

	UOnlineCommunityContentInterface_ReadContentList_Params params {};
	params.PlayerNum = PlayerNum;
	params.StartAt = StartAt;
	params.NumToRead = NumToRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.Exit
//		Flags  -> ()
void UOnlineCommunityContentInterface::Exit()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.Exit");

	UOnlineCommunityContentInterface_Exit_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineCommunityContentInterface.Init
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineCommunityContentInterface::Init()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.Init");

	UOnlineCommunityContentInterface_Init_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineEventsInterface.UpdatePlaylistPopulation
//		Flags  -> ()
// Parameters:
//		int                                                PlaylistId                                                 (Parm)
//		int                                                NumPlayers                                                 (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineEventsInterface::UpdatePlaylistPopulation(int PlaylistId, int NumPlayers)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineEventsInterface.UpdatePlaylistPopulation");

	UOnlineEventsInterface_UpdatePlaylistPopulation_Params params {};
	params.PlaylistId = PlaylistId;
	params.NumPlayers = NumPlayers;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineEventsInterface.UploadGameplayEventsData
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                UniqueId                                                   (Parm)
//		TArray<unsigned char>                              Payload                                                    (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineEventsInterface::UploadGameplayEventsData(const struct FUniqueNetId& UniqueId, TArray<unsigned char>* Payload)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineEventsInterface.UploadGameplayEventsData");

	UOnlineEventsInterface_UploadGameplayEventsData_Params params {};
	params.UniqueId = UniqueId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Payload != nullptr)
		*Payload = params.Payload;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineEventsInterface.UploadPlayerData
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                UniqueId                                                   (Parm)
//		struct FString                                     PlayerNick                                                 (Parm, NeedCtorLink)
//		class UOnlineProfileSettings*                      ProfileSettings                                            (Parm)
//		class UOnlinePlayerStorage*                        PlayerStorage                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineEventsInterface::UploadPlayerData(const struct FUniqueNetId& UniqueId, const struct FString& PlayerNick, class UOnlineProfileSettings* ProfileSettings, class UOnlinePlayerStorage* PlayerStorage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineEventsInterface.UploadPlayerData");

	UOnlineEventsInterface_UploadPlayerData_Params params {};
	params.UniqueId = UniqueId;
	params.PlayerNick = PlayerNick;
	params.ProfileSettings = ProfileSettings;
	params.PlayerStorage = PlayerStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIRoot.SafeCaps
//		Flags  -> ()
// Parameters:
//		struct FString                                     StringToCap                                                (Parm, NeedCtorLink)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UUIRoot::SafeCaps(const struct FString& StringToCap)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.SafeCaps");

	UUIRoot_SafeCaps_Params params {};
	params.StringToCap = StringToCap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIRoot.GetOnlinePlayerInterfaceEx
//		Flags  -> ()
// Parameters:
void UUIRoot::GetOnlinePlayerInterfaceEx()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetOnlinePlayerInterfaceEx");

	UUIRoot_GetOnlinePlayerInterfaceEx_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIRoot.GetOnlinePlayerInterface
//		Flags  -> ()
// Parameters:
void UUIRoot::GetOnlinePlayerInterface()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetOnlinePlayerInterface");

	UUIRoot_GetOnlinePlayerInterface_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIRoot.GetOnlineGameInterface
//		Flags  -> ()
// Parameters:
void UUIRoot::GetOnlineGameInterface()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetOnlineGameInterface");

	UUIRoot_GetOnlineGameInterface_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIRoot.StaticResolveDataStore
//		Flags  -> ()
// Parameters:
//		struct FName                                       DataStoreTag                                               (Parm)
//		class ULocalPlayer*                                InPlayerOwner                                              (OptionalParm, Parm)
//		class UUIDataStore*                                ReturnValue                                                (Parm, OutParm, ReturnParm)
class UUIDataStore* UUIRoot::StaticResolveDataStore(const struct FName& DataStoreTag, class ULocalPlayer* InPlayerOwner)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.StaticResolveDataStore");

	UUIRoot_StaticResolveDataStore_Params params {};
	params.DataStoreTag = DataStoreTag;
	params.InPlayerOwner = InPlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIRoot.GetSceneClient
//		Flags  -> ()
// Parameters:
//		class UGameUISceneClient*                          ReturnValue                                                (Parm, OutParm, ReturnParm)
class UGameUISceneClient* UUIRoot::GetSceneClient()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetSceneClient");

	UUIRoot_GetSceneClient_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIRoot.GetCurrentUIController
//		Flags  -> ()
// Parameters:
//		class UUIInteraction*                              ReturnValue                                                (Parm, OutParm, ReturnParm)
class UUIInteraction* UUIRoot::GetCurrentUIController()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetCurrentUIController");

	UUIRoot_GetCurrentUIController_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIRoot.GetInputPlatformType
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                OwningPlayer                                               (OptionalParm, Parm)
//		TEnumAsByte<Engine_EInputPlatformType>             ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_EInputPlatformType> UUIRoot::GetInputPlatformType(class ULocalPlayer* OwningPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetInputPlatformType");

	UUIRoot_GetInputPlatformType_Params params {};
	params.OwningPlayer = OwningPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIPropertyDataProvider.CanSupportComplexPropertyType
//		Flags  -> ()
// Parameters:
//		class UProperty*                                   UnsupportedProperty                                        (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIPropertyDataProvider::CanSupportComplexPropertyType(class UProperty* UnsupportedProperty)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIPropertyDataProvider.CanSupportComplexPropertyType");

	UUIPropertyDataProvider_CanSupportComplexPropertyType_Params params {};
	params.UnsupportedProperty = UnsupportedProperty;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIResourceDataProvider.InitializeProvider
//		Flags  -> ()
// Parameters:
//		bool                                               bIsEditor                                                  (Parm)
void UUIResourceDataProvider::InitializeProvider(bool bIsEditor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIResourceDataProvider.InitializeProvider");

	UUIResourceDataProvider_InitializeProvider_Params params {};
	params.bIsEditor = bIsEditor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.StaticMeshActorBasedOnExtremeContent.SetMaterialBasedOnExtremeContent
//		Flags  -> ()
void AStaticMeshActorBasedOnExtremeContent::SetMaterialBasedOnExtremeContent()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshActorBasedOnExtremeContent.SetMaterialBasedOnExtremeContent");

	AStaticMeshActorBasedOnExtremeContent_SetMaterialBasedOnExtremeContent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.StaticMeshActorBasedOnExtremeContent.PostBeginPlay
//		Flags  -> ()
void AStaticMeshActorBasedOnExtremeContent::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshActorBasedOnExtremeContent.PostBeginPlay");

	AStaticMeshActorBasedOnExtremeContent_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.Trigger.ApplyCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct ATrigger_FCheckpointRecord                  Record                                                     (Const, Parm, OutParm)
//void ATrigger::ApplyCheckpointRecord(struct ATrigger_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Trigger.ApplyCheckpointRecord");
//
//	ATrigger_ApplyCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}
//
//
//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.Trigger.CreateCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct ATrigger_FCheckpointRecord                  Record                                                     (Parm, OutParm)
//void ATrigger::CreateCheckpointRecord(struct ATrigger_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Trigger.CreateCheckpointRecord");
//
//	ATrigger_CreateCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Trigger.ShouldSaveForCheckpoint
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ATrigger::ShouldSaveForCheckpoint()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Trigger.ShouldSaveForCheckpoint");

	ATrigger_ShouldSaveForCheckpoint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Trigger.StopsProjectile
//		Flags  -> ()
// Parameters:
//		class AProjectile*                                 P                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ATrigger::StopsProjectile(class AProjectile* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Trigger.StopsProjectile");

	ATrigger_StopsProjectile_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Trigger.UnTrigger
//		Flags  -> ()
void ATrigger::UnTrigger()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Trigger.UnTrigger");

	ATrigger_UnTrigger_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Trigger.NotifyTriggered
//		Flags  -> ()
void ATrigger::NotifyTriggered()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Trigger.NotifyTriggered");

	ATrigger_NotifyTriggered_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Trigger.Touch
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		class UPrimitiveComponent*                         OtherComp                                                  (Parm, EditInline)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     HitNormal                                                  (Parm)
void ATrigger::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Trigger.Touch");

	ATrigger_Touch_Params params {};
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Trigger.PostBeginPlay
//		Flags  -> ()
void ATrigger::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Trigger.PostBeginPlay");

	ATrigger_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ActorComponent.DetachFromAny
//		Flags  -> ()
void UActorComponent::DetachFromAny()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.DetachFromAny");

	UActorComponent_DetachFromAny_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ActorComponent.ForceUpdate
//		Flags  -> ()
// Parameters:
//		bool                                               bTransformOnly                                             (Parm)
void UActorComponent::ForceUpdate(bool bTransformOnly)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ForceUpdate");

	UActorComponent_ForceUpdate_Params params {};
	params.bTransformOnly = bTransformOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ActorComponent.SetComponentRBFixed
//		Flags  -> ()
// Parameters:
//		bool                                               bFixed                                                     (Parm)
void UActorComponent::SetComponentRBFixed(bool bFixed)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetComponentRBFixed");

	UActorComponent_SetComponentRBFixed_Params params {};
	params.bFixed = bFixed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ActorComponent.SetTickGroup
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Core_ETickingGroup>                    NewTickGroup                                               (Parm)
void UActorComponent::SetTickGroup(TEnumAsByte<Core_ETickingGroup> NewTickGroup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetTickGroup");

	UActorComponent_SetTickGroup_Params params {};
	params.NewTickGroup = NewTickGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AudioComponent.OcclusionChanged
//		Flags  -> ()
// Parameters:
//		bool                                               bNowOccluded                                               (Parm)
void UAudioComponent::OcclusionChanged(bool bNowOccluded)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.OcclusionChanged");

	UAudioComponent_OcclusionChanged_Params params {};
	params.bNowOccluded = bNowOccluded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AudioComponent.OnQueueSubtitles
//		Flags  -> ()
// Parameters:
//		TArray<struct FSubtitleCue>                        Subtitles                                                  (Parm, NeedCtorLink)
//		float                                              CueDuration                                                (Parm)
void UAudioComponent::OnQueueSubtitles(TArray<struct FSubtitleCue> Subtitles, float CueDuration)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.OnQueueSubtitles");

	UAudioComponent_OnQueueSubtitles_Params params {};
	params.Subtitles = Subtitles;
	params.CueDuration = CueDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AudioComponent.OnAudioFinished
//		Flags  -> ()
// Parameters:
//		class UAudioComponent*                             AC                                                         (Parm, EditInline)
void UAudioComponent::OnAudioFinished(class UAudioComponent* AC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.OnAudioFinished");

	UAudioComponent_OnAudioFinished_Params params {};
	params.AC = AC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AudioComponent.ResetToDefaults
//		Flags  -> ()
void UAudioComponent::ResetToDefaults()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.ResetToDefaults");

	UAudioComponent_ResetToDefaults_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AudioComponent.SetWaveParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       InName                                                     (Parm)
//		class USoundNodeWave*                              InWave                                                     (Parm)
void UAudioComponent::SetWaveParameter(const struct FName& InName, class USoundNodeWave* InWave)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetWaveParameter");

	UAudioComponent_SetWaveParameter_Params params {};
	params.InName = InName;
	params.InWave = InWave;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AudioComponent.SetFloatParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       InName                                                     (Parm)
//		float                                              InFloat                                                    (Parm)
void UAudioComponent::SetFloatParameter(const struct FName& InName, float InFloat)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetFloatParameter");

	UAudioComponent_SetFloatParameter_Params params {};
	params.InName = InName;
	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AudioComponent.AdjustVolume
//		Flags  -> ()
// Parameters:
//		float                                              AdjustVolumeDuration                                       (Parm)
//		float                                              AdjustVolumeLevel                                          (Parm)
void UAudioComponent::AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.AdjustVolume");

	UAudioComponent_AdjustVolume_Params params {};
	params.AdjustVolumeDuration = AdjustVolumeDuration;
	params.AdjustVolumeLevel = AdjustVolumeLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AudioComponent.FadeOut
//		Flags  -> ()
// Parameters:
//		float                                              FadeOutDuration                                            (Parm)
//		float                                              FadeVolumeLevel                                            (Parm)
void UAudioComponent::FadeOut(float FadeOutDuration, float FadeVolumeLevel)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.FadeOut");

	UAudioComponent_FadeOut_Params params {};
	params.FadeOutDuration = FadeOutDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AudioComponent.FadeIn
//		Flags  -> ()
// Parameters:
//		float                                              FadeInDuration                                             (Parm)
//		float                                              FadeVolumeLevel                                            (Parm)
void UAudioComponent::FadeIn(float FadeInDuration, float FadeVolumeLevel)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.FadeIn");

	UAudioComponent_FadeIn_Params params {};
	params.FadeInDuration = FadeInDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AudioComponent.IsFadingOut
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UAudioComponent::IsFadingOut()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.IsFadingOut");

	UAudioComponent_IsFadingOut_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AudioComponent.IsFadingIn
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UAudioComponent::IsFadingIn()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.IsFadingIn");

	UAudioComponent_IsFadingIn_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AudioComponent.IsPlaying
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UAudioComponent::IsPlaying()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.IsPlaying");

	UAudioComponent_IsPlaying_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AudioComponent.Stop
//		Flags  -> ()
void UAudioComponent::Stop()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.Stop");

	UAudioComponent_Stop_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AudioComponent.Play
//		Flags  -> ()
void UAudioComponent::Play()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.Play");

	UAudioComponent_Play_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HeightFogComponent.SetEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               bSetEnabled                                                (Parm)
void UHeightFogComponent::SetEnabled(bool bSetEnabled)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HeightFogComponent.SetEnabled");

	UHeightFogComponent_SetEnabled_Params params {};
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LightComponent.OnUpdatePropertyDoNothing
//		Flags  -> ()
void ULightComponent::OnUpdatePropertyDoNothing()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.OnUpdatePropertyDoNothing");

	ULightComponent_OnUpdatePropertyDoNothing_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LightComponent.OnUpdatePropertyLightColor
//		Flags  -> ()
void ULightComponent::OnUpdatePropertyLightColor()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.OnUpdatePropertyLightColor");

	ULightComponent_OnUpdatePropertyLightColor_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LightComponent.OnUpdatePropertyBrightness
//		Flags  -> ()
void ULightComponent::OnUpdatePropertyBrightness()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.OnUpdatePropertyBrightness");

	ULightComponent_OnUpdatePropertyBrightness_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LightComponent.OnUpdatePropertyOcclusionMaskDarkness
//		Flags  -> ()
void ULightComponent::OnUpdatePropertyOcclusionMaskDarkness()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.OnUpdatePropertyOcclusionMaskDarkness");

	ULightComponent_OnUpdatePropertyOcclusionMaskDarkness_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LightComponent.OnUpdatePropertyBloomTint
//		Flags  -> ()
void ULightComponent::OnUpdatePropertyBloomTint()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.OnUpdatePropertyBloomTint");

	ULightComponent_OnUpdatePropertyBloomTint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LightComponent.OnUpdatePropertyBloomScale
//		Flags  -> ()
void ULightComponent::OnUpdatePropertyBloomScale()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.OnUpdatePropertyBloomScale");

	ULightComponent_OnUpdatePropertyBloomScale_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LightComponent.UpdateLightShaftParameters
//		Flags  -> ()
void ULightComponent::UpdateLightShaftParameters()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.UpdateLightShaftParameters");

	ULightComponent_UpdateLightShaftParameters_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LightComponent.UpdateColorAndBrightness
//		Flags  -> ()
void ULightComponent::UpdateColorAndBrightness()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.UpdateColorAndBrightness");

	ULightComponent_UpdateColorAndBrightness_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LightComponent.GetDirection
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector ULightComponent::GetDirection()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.GetDirection");

	ULightComponent_GetDirection_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LightComponent.GetOrigin
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector ULightComponent::GetOrigin()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.GetOrigin");

	ULightComponent_GetOrigin_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LightComponent.SetLightProperties
//		Flags  -> ()
// Parameters:
//		float                                              NewBrightness                                              (OptionalParm, Parm)
//		struct FColor                                      NewLightColor                                              (OptionalParm, Parm)
//		class ULightFunction*                              NewLightFunction                                           (OptionalParm, Parm)
void ULightComponent::SetLightProperties(float NewBrightness, const struct FColor& NewLightColor, class ULightFunction* NewLightFunction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightProperties");

	ULightComponent_SetLightProperties_Params params {};
	params.NewBrightness = NewBrightness;
	params.NewLightColor = NewLightColor;
	params.NewLightFunction = NewLightFunction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LightComponent.SetEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               bSetEnabled                                                (Parm)
void ULightComponent::SetEnabled(bool bSetEnabled)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetEnabled");

	ULightComponent_SetEnabled_Params params {};
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetPPOutlineIgnoreDepth
//		Flags  -> ()
// Parameters:
//		bool                                               bIgnoreDepth                                               (Parm)
void UPrimitiveComponent::SetPPOutlineIgnoreDepth(bool bIgnoreDepth)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPPOutlineIgnoreDepth");

	UPrimitiveComponent_SetPPOutlineIgnoreDepth_Params params {};
	params.bIgnoreDepth = bIgnoreDepth;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetPPOutlineWidth
//		Flags  -> ()
// Parameters:
//		float                                              Width                                                      (Parm)
void UPrimitiveComponent::SetPPOutlineWidth(float Width)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPPOutlineWidth");

	UPrimitiveComponent_SetPPOutlineWidth_Params params {};
	params.Width = Width;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetPPOutlineColor
//		Flags  -> ()
// Parameters:
//		struct FVector                                     InColor                                                    (Parm)
void UPrimitiveComponent::SetPPOutlineColor(const struct FVector& InColor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPPOutlineColor");

	UPrimitiveComponent_SetPPOutlineColor_Params params {};
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetPPOutline
//		Flags  -> ()
// Parameters:
//		bool                                               bEnable                                                    (Parm)
void UPrimitiveComponent::SetPPOutline(bool bEnable)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPPOutline");

	UPrimitiveComponent_SetPPOutline_Params params {};
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetOccludedOutlineColor
//		Flags  -> ()
// Parameters:
//		struct FVector                                     InColor                                                    (Parm)
//		float                                              InScale                                                    (Parm)
void UPrimitiveComponent::SetOccludedOutlineColor(const struct FVector& InColor, float InScale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetOccludedOutlineColor");

	UPrimitiveComponent_SetOccludedOutlineColor_Params params {};
	params.InColor = InColor;
	params.InScale = InScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetOccludedOutlineWidth
//		Flags  -> ()
// Parameters:
//		float                                              Width                                                      (Parm)
void UPrimitiveComponent::SetOccludedOutlineWidth(float Width)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetOccludedOutlineWidth");

	UPrimitiveComponent_SetOccludedOutlineWidth_Params params {};
	params.Width = Width;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetOccludedOutline
//		Flags  -> ()
// Parameters:
//		bool                                               bEnable                                                    (Parm)
//		float                                              Width                                                      (OptionalParm, Parm)
void UPrimitiveComponent::SetOccludedOutline(bool bEnable, float Width)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetOccludedOutline");

	UPrimitiveComponent_SetOccludedOutline_Params params {};
	params.bEnable = bEnable;
	params.Width = Width;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetOccludeState
//		Flags  -> ()
// Parameters:
//		bool                                               bEnable                                                    (Parm)
void UPrimitiveComponent::SetOccludeState(bool bEnable)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetOccludeState");

	UPrimitiveComponent_SetOccludeState_Params params {};
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.ClosestPointOnComponentToComponent
//		Flags  -> ()
// Parameters:
//		class UPrimitiveComponent*                         OtherComponent                                             (Parm, OutParm, EditInline)
//		struct FVector                                     PointOnComponentA                                          (Parm, OutParm)
//		struct FVector                                     PointOnComponentB                                          (Parm, OutParm)
//		TEnumAsByte<Engine_EGJKResult>                     ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_EGJKResult> UPrimitiveComponent::ClosestPointOnComponentToComponent(class UPrimitiveComponent** OtherComponent, struct FVector* PointOnComponentA, struct FVector* PointOnComponentB)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ClosestPointOnComponentToComponent");

	UPrimitiveComponent_ClosestPointOnComponentToComponent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OtherComponent != nullptr)
		*OtherComponent = params.OtherComponent;
	if (PointOnComponentA != nullptr)
		*PointOnComponentA = params.PointOnComponentA;
	if (PointOnComponentB != nullptr)
		*PointOnComponentB = params.PointOnComponentB;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.ClosestPointOnComponentToPoint
//		Flags  -> ()
// Parameters:
//		struct FVector                                     POI                                                        (Parm, OutParm)
//		struct FVector                                     Extent                                                     (Parm, OutParm)
//		struct FVector                                     OutPointA                                                  (Parm, OutParm)
//		struct FVector                                     OutPointB                                                  (Parm, OutParm)
//		TEnumAsByte<Engine_EGJKResult>                     ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_EGJKResult> UPrimitiveComponent::ClosestPointOnComponentToPoint(struct FVector* POI, struct FVector* Extent, struct FVector* OutPointA, struct FVector* OutPointB)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ClosestPointOnComponentToPoint");

	UPrimitiveComponent_ClosestPointOnComponentToPoint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (POI != nullptr)
		*POI = params.POI;
	if (Extent != nullptr)
		*Extent = params.Extent;
	if (OutPointA != nullptr)
		*OutPointA = params.OutPointA;
	if (OutPointB != nullptr)
		*OutPointB = params.OutPointB;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.GetRotation
//		Flags  -> ()
// Parameters:
//		struct FRotator                                    ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FRotator UPrimitiveComponent::GetRotation()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetRotation");

	UPrimitiveComponent_GetRotation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.GetPosition
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector UPrimitiveComponent::GetPosition()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetPosition");

	UPrimitiveComponent_GetPosition_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetAbsolute
//		Flags  -> ()
// Parameters:
//		bool                                               NewAbsoluteTranslation                                     (OptionalParm, Parm)
//		bool                                               NewAbsoluteRotation                                        (OptionalParm, Parm)
//		bool                                               NewAbsoluteScale                                           (OptionalParm, Parm)
void UPrimitiveComponent::SetAbsolute(bool NewAbsoluteTranslation, bool NewAbsoluteRotation, bool NewAbsoluteScale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetAbsolute");

	UPrimitiveComponent_SetAbsolute_Params params {};
	params.NewAbsoluteTranslation = NewAbsoluteTranslation;
	params.NewAbsoluteRotation = NewAbsoluteRotation;
	params.NewAbsoluteScale = NewAbsoluteScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetScale3D
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewScale3D                                                 (Parm)
void UPrimitiveComponent::SetScale3D(const struct FVector& NewScale3D)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetScale3D");

	UPrimitiveComponent_SetScale3D_Params params {};
	params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetScale
//		Flags  -> ()
// Parameters:
//		float                                              NewScale                                                   (Parm)
void UPrimitiveComponent::SetScale(float NewScale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetScale");

	UPrimitiveComponent_SetScale_Params params {};
	params.NewScale = NewScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetRotation
//		Flags  -> ()
// Parameters:
//		struct FRotator                                    NewRotation                                                (Parm)
void UPrimitiveComponent::SetRotation(const struct FRotator& NewRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRotation");

	UPrimitiveComponent_SetRotation_Params params {};
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetTranslation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewTranslation                                             (Parm)
void UPrimitiveComponent::SetTranslation(const struct FVector& NewTranslation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetTranslation");

	UPrimitiveComponent_SetTranslation_Params params {};
	params.NewTranslation = NewTranslation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetActorCollision
//		Flags  -> ()
// Parameters:
//		bool                                               NewCollideActors                                           (Parm)
//		bool                                               NewBlockActors                                             (Parm)
//		bool                                               NewAlwaysCheckCollision                                    (OptionalParm, Parm)
void UPrimitiveComponent::SetActorCollision(bool NewCollideActors, bool NewBlockActors, bool NewAlwaysCheckCollision)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetActorCollision");

	UPrimitiveComponent_SetActorCollision_Params params {};
	params.NewCollideActors = NewCollideActors;
	params.NewBlockActors = NewBlockActors;
	params.NewAlwaysCheckCollision = NewAlwaysCheckCollision;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetTraceBlocking
//		Flags  -> ()
// Parameters:
//		bool                                               NewBlockZeroExtent                                         (Parm)
//		bool                                               NewBlockNonZeroExtent                                      (Parm)
void UPrimitiveComponent::SetTraceBlocking(bool NewBlockZeroExtent, bool NewBlockNonZeroExtent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetTraceBlocking");

	UPrimitiveComponent_SetTraceBlocking_Params params {};
	params.NewBlockZeroExtent = NewBlockZeroExtent;
	params.NewBlockNonZeroExtent = NewBlockNonZeroExtent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetViewOwnerDepthPriorityGroup
//		Flags  -> ()
// Parameters:
//		bool                                               bNewUseViewOwnerDepthPriorityGroup                         (Parm)
//		TEnumAsByte<Engine_ESceneDepthPriorityGroup>       NewViewOwnerDepthPriorityGroup                             (Parm)
void UPrimitiveComponent::SetViewOwnerDepthPriorityGroup(bool bNewUseViewOwnerDepthPriorityGroup, TEnumAsByte<Engine_ESceneDepthPriorityGroup> NewViewOwnerDepthPriorityGroup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetViewOwnerDepthPriorityGroup");

	UPrimitiveComponent_SetViewOwnerDepthPriorityGroup_Params params {};
	params.bNewUseViewOwnerDepthPriorityGroup = bNewUseViewOwnerDepthPriorityGroup;
	params.NewViewOwnerDepthPriorityGroup = NewViewOwnerDepthPriorityGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetDepthPriorityGroup
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ESceneDepthPriorityGroup>       NewDepthPriorityGroup                                      (Parm)
void UPrimitiveComponent::SetDepthPriorityGroup(TEnumAsByte<Engine_ESceneDepthPriorityGroup> NewDepthPriorityGroup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetDepthPriorityGroup");

	UPrimitiveComponent_SetDepthPriorityGroup_Params params {};
	params.NewDepthPriorityGroup = NewDepthPriorityGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetLightingChannels
//		Flags  -> ()
// Parameters:
//		struct FLightingChannelContainer                   NewLightingChannels                                        (Parm)
void UPrimitiveComponent::SetLightingChannels(const struct FLightingChannelContainer& NewLightingChannels)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetLightingChannels");

	UPrimitiveComponent_SetLightingChannels_Params params {};
	params.NewLightingChannels = NewLightingChannels;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetCullDistance
//		Flags  -> ()
// Parameters:
//		float                                              NewCullDistance                                            (Parm)
void UPrimitiveComponent::SetCullDistance(float NewCullDistance)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCullDistance");

	UPrimitiveComponent_SetCullDistance_Params params {};
	params.NewCullDistance = NewCullDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetLightEnvironment
//		Flags  -> ()
// Parameters:
//		class ULightEnvironmentComponent*                  NewLightEnvironment                                        (Parm, EditInline)
void UPrimitiveComponent::SetLightEnvironment(class ULightEnvironmentComponent* NewLightEnvironment)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetLightEnvironment");

	UPrimitiveComponent_SetLightEnvironment_Params params {};
	params.NewLightEnvironment = NewLightEnvironment;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetShadowParent
//		Flags  -> ()
// Parameters:
//		class UPrimitiveComponent*                         NewShadowParent                                            (Parm, EditInline)
void UPrimitiveComponent::SetShadowParent(class UPrimitiveComponent* NewShadowParent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetShadowParent");

	UPrimitiveComponent_SetShadowParent_Params params {};
	params.NewShadowParent = NewShadowParent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetIgnoreOwnerHidden
//		Flags  -> ()
// Parameters:
//		bool                                               bNewIgnoreOwnerHidden                                      (Parm)
void UPrimitiveComponent::SetIgnoreOwnerHidden(bool bNewIgnoreOwnerHidden)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetIgnoreOwnerHidden");

	UPrimitiveComponent_SetIgnoreOwnerHidden_Params params {};
	params.bNewIgnoreOwnerHidden = bNewIgnoreOwnerHidden;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetOnlyOwnerSee
//		Flags  -> ()
// Parameters:
//		bool                                               bNewOnlyOwnerSee                                           (Parm)
void UPrimitiveComponent::SetOnlyOwnerSee(bool bNewOnlyOwnerSee)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetOnlyOwnerSee");

	UPrimitiveComponent_SetOnlyOwnerSee_Params params {};
	params.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetOwnerNoSee
//		Flags  -> ()
// Parameters:
//		bool                                               bNewOwnerNoSee                                             (Parm)
void UPrimitiveComponent::SetOwnerNoSee(bool bNewOwnerNoSee)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetOwnerNoSee");

	UPrimitiveComponent_SetOwnerNoSee_Params params {};
	params.bNewOwnerNoSee = bNewOwnerNoSee;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetHidden
//		Flags  -> ()
// Parameters:
//		bool                                               NewHidden                                                  (Parm)
void UPrimitiveComponent::SetHidden(bool NewHidden)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetHidden");

	UPrimitiveComponent_SetHidden_Params params {};
	params.NewHidden = NewHidden;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.ShouldComponentAddToScene
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UPrimitiveComponent::ShouldComponentAddToScene()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ShouldComponentAddToScene");

	UPrimitiveComponent_ShouldComponentAddToScene_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetRBDominanceGroup
//		Flags  -> ()
// Parameters:
//		unsigned char                                      InDomGroup                                                 (Parm)
void UPrimitiveComponent::SetRBDominanceGroup(unsigned char InDomGroup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBDominanceGroup");

	UPrimitiveComponent_SetRBDominanceGroup_Params params {};
	params.InDomGroup = InDomGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.GetRootBodyInstance
//		Flags  -> ()
// Parameters:
//		class URB_BodyInstance*                            ReturnValue                                                (Parm, OutParm, ReturnParm)
class URB_BodyInstance* UPrimitiveComponent::GetRootBodyInstance()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetRootBodyInstance");

	UPrimitiveComponent_GetRootBodyInstance_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetPhysMaterialOverride
//		Flags  -> ()
// Parameters:
//		class UPhysicalMaterial*                           NewPhysMaterial                                            (Parm)
void UPrimitiveComponent::SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysMaterialOverride");

	UPrimitiveComponent_SetPhysMaterialOverride_Params params {};
	params.NewPhysMaterial = NewPhysMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.InitRBPhys
//		Flags  -> ()
void UPrimitiveComponent::InitRBPhys()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.InitRBPhys");

	UPrimitiveComponent_InitRBPhys_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
//		Flags  -> ()
// Parameters:
//		bool                                               bNewNotifyRigidBodyCollision                               (Parm)
void UPrimitiveComponent::SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision");

	UPrimitiveComponent_SetNotifyRigidBodyCollision_Params params {};
	params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetRBChannel
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ERBCollisionChannel>            Channel                                                    (Parm)
void UPrimitiveComponent::SetRBChannel(TEnumAsByte<Engine_ERBCollisionChannel> Channel)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBChannel");

	UPrimitiveComponent_SetRBChannel_Params params {};
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetRBCollisionChannels
//		Flags  -> ()
// Parameters:
//		struct FRBCollisionChannelContainer                Channels                                                   (Parm)
void UPrimitiveComponent::SetRBCollisionChannels(const struct FRBCollisionChannelContainer& Channels)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBCollisionChannels");

	UPrimitiveComponent_SetRBCollisionChannels_Params params {};
	params.Channels = Channels;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetRBCollidesWithChannel
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ERBCollisionChannel>            Channel                                                    (Parm)
//		bool                                               bNewCollides                                               (Parm)
void UPrimitiveComponent::SetRBCollidesWithChannel(TEnumAsByte<Engine_ERBCollisionChannel> Channel, bool bNewCollides)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBCollidesWithChannel");

	UPrimitiveComponent_SetRBCollidesWithChannel_Params params {};
	params.Channel = Channel;
	params.bNewCollides = bNewCollides;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetBlockRigidBody
//		Flags  -> ()
// Parameters:
//		bool                                               bNewBlockRigidBody                                         (Parm)
void UPrimitiveComponent::SetBlockRigidBody(bool bNewBlockRigidBody)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetBlockRigidBody");

	UPrimitiveComponent_SetBlockRigidBody_Params params {};
	params.bNewBlockRigidBody = bNewBlockRigidBody;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.RigidBodyIsAwake
//		Flags  -> ()
// Parameters:
//		struct FName                                       BoneName                                                   (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UPrimitiveComponent::RigidBodyIsAwake(const struct FName& BoneName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.RigidBodyIsAwake");

	UPrimitiveComponent_RigidBodyIsAwake_Params params {};
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.PutRigidBodyToSleep
//		Flags  -> ()
// Parameters:
//		struct FName                                       BoneName                                                   (OptionalParm, Parm)
void UPrimitiveComponent::PutRigidBodyToSleep(const struct FName& BoneName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.PutRigidBodyToSleep");

	UPrimitiveComponent_PutRigidBodyToSleep_Params params {};
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.WakeRigidBody
//		Flags  -> ()
// Parameters:
//		struct FName                                       BoneName                                                   (OptionalParm, Parm)
void UPrimitiveComponent::WakeRigidBody(const struct FName& BoneName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.WakeRigidBody");

	UPrimitiveComponent_WakeRigidBody_Params params {};
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetRBRotation
//		Flags  -> ()
// Parameters:
//		struct FRotator                                    NewRot                                                     (Parm)
//		struct FName                                       BoneName                                                   (OptionalParm, Parm)
void UPrimitiveComponent::SetRBRotation(const struct FRotator& NewRot, const struct FName& BoneName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBRotation");

	UPrimitiveComponent_SetRBRotation_Params params {};
	params.NewRot = NewRot;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetRBPosition
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewPos                                                     (Parm)
//		struct FName                                       BoneName                                                   (OptionalParm, Parm)
void UPrimitiveComponent::SetRBPosition(const struct FVector& NewPos, const struct FName& BoneName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBPosition");

	UPrimitiveComponent_SetRBPosition_Params params {};
	params.NewPos = NewPos;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.RetardRBLinearVelocity
//		Flags  -> ()
// Parameters:
//		struct FVector                                     RetardDir                                                  (Parm)
//		float                                              VelScale                                                   (Parm)
void UPrimitiveComponent::RetardRBLinearVelocity(const struct FVector& RetardDir, float VelScale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.RetardRBLinearVelocity");

	UPrimitiveComponent_RetardRBLinearVelocity_Params params {};
	params.RetardDir = RetardDir;
	params.VelScale = VelScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetRBAngularVelocity
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewAngVel                                                  (Parm)
//		bool                                               bAddToCurrent                                              (OptionalParm, Parm)
void UPrimitiveComponent::SetRBAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBAngularVelocity");

	UPrimitiveComponent_SetRBAngularVelocity_Params params {};
	params.NewAngVel = NewAngVel;
	params.bAddToCurrent = bAddToCurrent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.SetRBLinearVelocity
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewVel                                                     (Parm)
//		bool                                               bAddToCurrent                                              (OptionalParm, Parm)
void UPrimitiveComponent::SetRBLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBLinearVelocity");

	UPrimitiveComponent_SetRBLinearVelocity_Params params {};
	params.NewVel = NewVel;
	params.bAddToCurrent = bAddToCurrent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.AddTorque
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Torque                                                     (Parm)
//		struct FName                                       BoneName                                                   (OptionalParm, Parm)
void UPrimitiveComponent::AddTorque(const struct FVector& Torque, const struct FName& BoneName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddTorque");

	UPrimitiveComponent_AddTorque_Params params {};
	params.Torque = Torque;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.AddRadialForce
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Origin                                                     (Parm)
//		float                                              Radius                                                     (Parm)
//		float                                              Strength                                                   (Parm)
//		TEnumAsByte<Engine_ERadialImpulseFalloff>          Falloff                                                    (Parm)
void UPrimitiveComponent::AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<Engine_ERadialImpulseFalloff> Falloff)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddRadialForce");

	UPrimitiveComponent_AddRadialForce_Params params {};
	params.Origin = Origin;
	params.Radius = Radius;
	params.Strength = Strength;
	params.Falloff = Falloff;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.AddForce
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Force                                                      (Parm)
//		struct FVector                                     Position                                                   (OptionalParm, Parm)
//		struct FName                                       BoneName                                                   (OptionalParm, Parm)
void UPrimitiveComponent::AddForce(const struct FVector& Force, const struct FVector& Position, const struct FName& BoneName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddForce");

	UPrimitiveComponent_AddForce_Params params {};
	params.Force = Force;
	params.Position = Position;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.AddRadialImpulse
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Origin                                                     (Parm)
//		float                                              Radius                                                     (Parm)
//		float                                              Strength                                                   (Parm)
//		TEnumAsByte<Engine_ERadialImpulseFalloff>          Falloff                                                    (Parm)
//		bool                                               bVelChange                                                 (OptionalParm, Parm)
void UPrimitiveComponent::AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<Engine_ERadialImpulseFalloff> Falloff, bool bVelChange)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddRadialImpulse");

	UPrimitiveComponent_AddRadialImpulse_Params params {};
	params.Origin = Origin;
	params.Radius = Radius;
	params.Strength = Strength;
	params.Falloff = Falloff;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrimitiveComponent.AddImpulse
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Impulse                                                    (Parm)
//		struct FVector                                     Position                                                   (OptionalParm, Parm)
//		struct FName                                       BoneName                                                   (OptionalParm, Parm)
//		bool                                               bVelChange                                                 (OptionalParm, Parm)
void UPrimitiveComponent::AddImpulse(const struct FVector& Impulse, const struct FVector& Position, const struct FName& BoneName, bool bVelChange)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddImpulse");

	UPrimitiveComponent_AddImpulse_Params params {};
	params.Impulse = Impulse;
	params.Position = Position;
	params.BoneName = BoneName;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CylinderComponent.SetCylinderSize
//		Flags  -> ()
// Parameters:
//		float                                              NewRadius                                                  (Parm)
//		float                                              NewHeight                                                  (Parm)
void UCylinderComponent::SetCylinderSize(float NewRadius, float NewHeight)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CylinderComponent.SetCylinderSize");

	UCylinderComponent_SetCylinderSize_Params params {};
	params.NewRadius = NewRadius;
	params.NewHeight = NewHeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SpriteComponent.SetSpriteAndUV
//		Flags  -> ()
// Parameters:
//		class UTexture2D*                                  NewSprite                                                  (Parm)
//		int                                                NewU                                                       (Parm)
//		int                                                NewUL                                                      (Parm)
//		int                                                NewV                                                       (Parm)
//		int                                                NewVL                                                      (Parm)
void USpriteComponent::SetSpriteAndUV(class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SpriteComponent.SetSpriteAndUV");

	USpriteComponent_SetSpriteAndUV_Params params {};
	params.NewSprite = NewSprite;
	params.NewU = NewU;
	params.NewUL = NewUL;
	params.NewV = NewV;
	params.NewVL = NewVL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SpriteComponent.SetUV
//		Flags  -> ()
// Parameters:
//		int                                                NewU                                                       (Parm)
//		int                                                NewUL                                                      (Parm)
//		int                                                NewV                                                       (Parm)
//		int                                                NewVL                                                      (Parm)
void USpriteComponent::SetUV(int NewU, int NewUL, int NewV, int NewVL)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SpriteComponent.SetUV");

	USpriteComponent_SetUV_Params params {};
	params.NewU = NewU;
	params.NewUL = NewUL;
	params.NewV = NewV;
	params.NewVL = NewVL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SpriteComponent.SetSprite
//		Flags  -> ()
// Parameters:
//		class UTexture2D*                                  NewSprite                                                  (Parm)
void USpriteComponent::SetSprite(class UTexture2D* NewSprite)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SpriteComponent.SetSprite");

	USpriteComponent_SetSprite_Params params {};
	params.NewSprite = NewSprite;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineMatchmakingStats.StopTimer
//		Flags  -> ()
// Parameters:
//		struct FMMStats_Timer                              Timer                                                      (Parm, OutParm)
void UOnlineMatchmakingStats::StopTimer(struct FMMStats_Timer* Timer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineMatchmakingStats.StopTimer");

	UOnlineMatchmakingStats_StopTimer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Timer != nullptr)
		*Timer = params.Timer;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineMatchmakingStats.StartTimer
//		Flags  -> ()
// Parameters:
//		struct FMMStats_Timer                              Timer                                                      (Parm, OutParm)
void UOnlineMatchmakingStats::StartTimer(struct FMMStats_Timer* Timer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineMatchmakingStats.StartTimer");

	UOnlineMatchmakingStats_StartTimer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Timer != nullptr)
		*Timer = params.Timer;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.SetDefaultVersionNumber
//		Flags  -> ()
void UOnlinePlayerStorage::SetDefaultVersionNumber()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetDefaultVersionNumber");

	UOnlinePlayerStorage_SetDefaultVersionNumber_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.GetVersionNumber
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UOnlinePlayerStorage::GetVersionNumber()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetVersionNumber");

	UOnlinePlayerStorage_GetVersionNumber_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.AppendVersionToSettings
//		Flags  -> ()
void UOnlinePlayerStorage::AppendVersionToSettings()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.AppendVersionToSettings");

	UOnlinePlayerStorage_AppendVersionToSettings_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.SetToDefaults
//		Flags  -> ()
void UOnlinePlayerStorage::SetToDefaults()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetToDefaults");

	UOnlinePlayerStorage_SetToDefaults_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.AddSettingFloat
//		Flags  -> ()
// Parameters:
//		int                                                SettingId                                                  (Parm)
void UOnlinePlayerStorage::AddSettingFloat(int SettingId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.AddSettingFloat");

	UOnlinePlayerStorage_AddSettingFloat_Params params {};
	params.SettingId = SettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.AddSettingInt
//		Flags  -> ()
// Parameters:
//		int                                                SettingId                                                  (Parm)
void UOnlinePlayerStorage::AddSettingInt(int SettingId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.AddSettingInt");

	UOnlinePlayerStorage_AddSettingInt_Params params {};
	params.SettingId = SettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.GetRangedProfileSettingValue
//		Flags  -> ()
// Parameters:
//		int                                                ProfileId                                                  (Parm)
//		float                                              OutValue                                                   (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerStorage::GetRangedProfileSettingValue(int ProfileId, float* OutValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetRangedProfileSettingValue");

	UOnlinePlayerStorage_GetRangedProfileSettingValue_Params params {};
	params.ProfileId = ProfileId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.SetRangedProfileSettingValue
//		Flags  -> ()
// Parameters:
//		int                                                ProfileId                                                  (Parm)
//		float                                              NewValue                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerStorage::SetRangedProfileSettingValue(int ProfileId, float NewValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetRangedProfileSettingValue");

	UOnlinePlayerStorage_SetRangedProfileSettingValue_Params params {};
	params.ProfileId = ProfileId;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.GetProfileSettingRange
//		Flags  -> ()
// Parameters:
//		int                                                ProfileId                                                  (Parm)
//		float                                              OutMinValue                                                (Parm, OutParm)
//		float                                              OutMaxValue                                                (Parm, OutParm)
//		float                                              RangeIncrement                                             (Parm, OutParm)
//		unsigned char                                      bFormatAsInt                                               (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerStorage::GetProfileSettingRange(int ProfileId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingRange");

	UOnlinePlayerStorage_GetProfileSettingRange_Params params {};
	params.ProfileId = ProfileId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutMinValue != nullptr)
		*OutMinValue = params.OutMinValue;
	if (OutMaxValue != nullptr)
		*OutMaxValue = params.OutMaxValue;
	if (RangeIncrement != nullptr)
		*RangeIncrement = params.RangeIncrement;
	if (bFormatAsInt != nullptr)
		*bFormatAsInt = params.bFormatAsInt;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.GetProfileSettingMappingIds
//		Flags  -> ()
// Parameters:
//		int                                                ProfileId                                                  (Parm)
//		TArray<int>                                        Ids                                                        (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerStorage::GetProfileSettingMappingIds(int ProfileId, TArray<int>* Ids)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingMappingIds");

	UOnlinePlayerStorage_GetProfileSettingMappingIds_Params params {};
	params.ProfileId = ProfileId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Ids != nullptr)
		*Ids = params.Ids;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.GetProfileSettingMappingType
//		Flags  -> ()
// Parameters:
//		int                                                ProfileId                                                  (Parm)
//		TEnumAsByte<Engine_EPropertyValueMappingType>      OutType                                                    (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerStorage::GetProfileSettingMappingType(int ProfileId, TEnumAsByte<Engine_EPropertyValueMappingType>* OutType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingMappingType");

	UOnlinePlayerStorage_GetProfileSettingMappingType_Params params {};
	params.ProfileId = ProfileId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutType != nullptr)
		*OutType = params.OutType;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.SetProfileSettingValueFloat
//		Flags  -> ()
// Parameters:
//		int                                                ProfileSettingId                                           (Parm)
//		float                                              Value                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerStorage::SetProfileSettingValueFloat(int ProfileSettingId, float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetProfileSettingValueFloat");

	UOnlinePlayerStorage_SetProfileSettingValueFloat_Params params {};
	params.ProfileSettingId = ProfileSettingId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.SetProfileSettingValueInt
//		Flags  -> ()
// Parameters:
//		int                                                ProfileSettingId                                           (Parm)
//		int                                                Value                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerStorage::SetProfileSettingValueInt(int ProfileSettingId, int Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetProfileSettingValueInt");

	UOnlinePlayerStorage_SetProfileSettingValueInt_Params params {};
	params.ProfileSettingId = ProfileSettingId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.SetProfileSettingValueId
//		Flags  -> ()
// Parameters:
//		int                                                ProfileSettingId                                           (Parm)
//		int                                                Value                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerStorage::SetProfileSettingValueId(int ProfileSettingId, int Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetProfileSettingValueId");

	UOnlinePlayerStorage_SetProfileSettingValueId_Params params {};
	params.ProfileSettingId = ProfileSettingId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.GetProfileSettingValueFloat
//		Flags  -> ()
// Parameters:
//		int                                                ProfileSettingId                                           (Parm)
//		float                                              Value                                                      (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerStorage::GetProfileSettingValueFloat(int ProfileSettingId, float* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValueFloat");

	UOnlinePlayerStorage_GetProfileSettingValueFloat_Params params {};
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.GetProfileSettingValueInt
//		Flags  -> ()
// Parameters:
//		int                                                ProfileSettingId                                           (Parm)
//		int                                                Value                                                      (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerStorage::GetProfileSettingValueInt(int ProfileSettingId, int* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValueInt");

	UOnlinePlayerStorage_GetProfileSettingValueInt_Params params {};
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.GetProfileSettingValueFromListIndex
//		Flags  -> ()
// Parameters:
//		int                                                ProfileSettingId                                           (Parm)
//		int                                                ListIndex                                                  (Parm)
//		int                                                Value                                                      (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerStorage::GetProfileSettingValueFromListIndex(int ProfileSettingId, int ListIndex, int* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValueFromListIndex");

	UOnlinePlayerStorage_GetProfileSettingValueFromListIndex_Params params {};
	params.ProfileSettingId = ProfileSettingId;
	params.ListIndex = ListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.GetProfileSettingValueId
//		Flags  -> ()
// Parameters:
//		int                                                ProfileSettingId                                           (Parm)
//		int                                                ValueId                                                    (Parm, OutParm)
//		int                                                ListIndex                                                  (OptionalParm, Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerStorage::GetProfileSettingValueId(int ProfileSettingId, int* ValueId, int* ListIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValueId");

	UOnlinePlayerStorage_GetProfileSettingValueId_Params params {};
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ValueId != nullptr)
		*ValueId = params.ValueId;
	if (ListIndex != nullptr)
		*ListIndex = params.ListIndex;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.SetProfileSettingValue
//		Flags  -> ()
// Parameters:
//		int                                                ProfileSettingId                                           (Parm)
//		struct FString                                     NewValue                                                   (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerStorage::SetProfileSettingValue(int ProfileSettingId, struct FString* NewValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetProfileSettingValue");

	UOnlinePlayerStorage_SetProfileSettingValue_Params params {};
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (NewValue != nullptr)
		*NewValue = params.NewValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.SetProfileSettingValueByName
//		Flags  -> ()
// Parameters:
//		struct FName                                       ProfileSettingName                                         (Parm)
//		struct FString                                     NewValue                                                   (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerStorage::SetProfileSettingValueByName(const struct FName& ProfileSettingName, struct FString* NewValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetProfileSettingValueByName");

	UOnlinePlayerStorage_SetProfileSettingValueByName_Params params {};
	params.ProfileSettingName = ProfileSettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (NewValue != nullptr)
		*NewValue = params.NewValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.GetProfileSettingValueByName
//		Flags  -> ()
// Parameters:
//		struct FName                                       ProfileSettingName                                         (Parm)
//		struct FString                                     Value                                                      (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerStorage::GetProfileSettingValueByName(const struct FName& ProfileSettingName, struct FString* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValueByName");

	UOnlinePlayerStorage_GetProfileSettingValueByName_Params params {};
	params.ProfileSettingName = ProfileSettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.GetProfileSettingValues
//		Flags  -> ()
// Parameters:
//		int                                                ProfileSettingId                                           (Parm)
//		TArray<struct FName>                               Values                                                     (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerStorage::GetProfileSettingValues(int ProfileSettingId, TArray<struct FName>* Values)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValues");

	UOnlinePlayerStorage_GetProfileSettingValues_Params params {};
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Values != nullptr)
		*Values = params.Values;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.GetProfileSettingValueName
//		Flags  -> ()
// Parameters:
//		int                                                ProfileSettingId                                           (Parm)
//		struct FName                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FName UOnlinePlayerStorage::GetProfileSettingValueName(int ProfileSettingId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValueName");

	UOnlinePlayerStorage_GetProfileSettingValueName_Params params {};
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.GetProfileSettingValue
//		Flags  -> ()
// Parameters:
//		int                                                ProfileSettingId                                           (Parm)
//		struct FString                                     Value                                                      (Parm, OutParm, NeedCtorLink)
//		int                                                ValueMapID                                                 (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerStorage::GetProfileSettingValue(int ProfileSettingId, struct FString* Value, int ValueMapID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValue");

	UOnlinePlayerStorage_GetProfileSettingValue_Params params {};
	params.ProfileSettingId = ProfileSettingId;
	params.ValueMapID = ValueMapID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.IsProfileSettingIdMapped
//		Flags  -> ()
// Parameters:
//		int                                                ProfileSettingId                                           (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerStorage::IsProfileSettingIdMapped(int ProfileSettingId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.IsProfileSettingIdMapped");

	UOnlinePlayerStorage_IsProfileSettingIdMapped_Params params {};
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.FindDefaultProfileMappingIndexByName
//		Flags  -> ()
// Parameters:
//		struct FName                                       ProfileSettingName                                         (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UOnlinePlayerStorage::FindDefaultProfileMappingIndexByName(const struct FName& ProfileSettingName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.FindDefaultProfileMappingIndexByName");

	UOnlinePlayerStorage_FindDefaultProfileMappingIndexByName_Params params {};
	params.ProfileSettingName = ProfileSettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.FindProfileMappingIndexByName
//		Flags  -> ()
// Parameters:
//		struct FName                                       ProfileSettingName                                         (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UOnlinePlayerStorage::FindProfileMappingIndexByName(const struct FName& ProfileSettingName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.FindProfileMappingIndexByName");

	UOnlinePlayerStorage_FindProfileMappingIndexByName_Params params {};
	params.ProfileSettingName = ProfileSettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.FindProfileMappingIndex
//		Flags  -> ()
// Parameters:
//		int                                                ProfileSettingId                                           (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UOnlinePlayerStorage::FindProfileMappingIndex(int ProfileSettingId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.FindProfileMappingIndex");

	UOnlinePlayerStorage_FindProfileMappingIndex_Params params {};
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.FindProfileSettingIndex
//		Flags  -> ()
// Parameters:
//		int                                                ProfileSettingId                                           (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UOnlinePlayerStorage::FindProfileSettingIndex(int ProfileSettingId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.FindProfileSettingIndex");

	UOnlinePlayerStorage_FindProfileSettingIndex_Params params {};
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.GetProfileSettingColumnHeader
//		Flags  -> ()
// Parameters:
//		int                                                ProfileSettingId                                           (Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UOnlinePlayerStorage::GetProfileSettingColumnHeader(int ProfileSettingId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingColumnHeader");

	UOnlinePlayerStorage_GetProfileSettingColumnHeader_Params params {};
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.GetProfileSettingName
//		Flags  -> ()
// Parameters:
//		int                                                ProfileSettingId                                           (Parm)
//		struct FName                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FName UOnlinePlayerStorage::GetProfileSettingName(int ProfileSettingId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingName");

	UOnlinePlayerStorage_GetProfileSettingName_Params params {};
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerStorage.GetProfileSettingId
//		Flags  -> ()
// Parameters:
//		struct FName                                       ProfileSettingName                                         (Parm)
//		int                                                ProfileSettingId                                           (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerStorage::GetProfileSettingId(const struct FName& ProfileSettingName, int* ProfileSettingId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingId");

	UOnlinePlayerStorage_GetProfileSettingId_Params params {};
	params.ProfileSettingName = ProfileSettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ProfileSettingId != nullptr)
		*ProfileSettingId = params.ProfileSettingId;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineProfileSettings.ModifyAvailableProfileSettings
//		Flags  -> ()
void UOnlineProfileSettings::ModifyAvailableProfileSettings()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.ModifyAvailableProfileSettings");

	UOnlineProfileSettings_ModifyAvailableProfileSettings_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineProfileSettings.AppendVersionToReadIds
//		Flags  -> ()
void UOnlineProfileSettings::AppendVersionToReadIds()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.AppendVersionToReadIds");

	UOnlineProfileSettings_AppendVersionToReadIds_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineProfileSettings.SetToDefaults
//		Flags  -> ()
void UOnlineProfileSettings::SetToDefaults()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.SetToDefaults");

	UOnlineProfileSettings_SetToDefaults_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineProfileSettings.GetProfileSettingDefaultFloat
//		Flags  -> ()
// Parameters:
//		int                                                ProfileSettingId                                           (Parm)
//		float                                              DefaultFloat                                               (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineProfileSettings::GetProfileSettingDefaultFloat(int ProfileSettingId, float* DefaultFloat)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetProfileSettingDefaultFloat");

	UOnlineProfileSettings_GetProfileSettingDefaultFloat_Params params {};
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DefaultFloat != nullptr)
		*DefaultFloat = params.DefaultFloat;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineProfileSettings.GetProfileSettingDefaultInt
//		Flags  -> ()
// Parameters:
//		int                                                ProfileSettingId                                           (Parm)
//		int                                                DefaultInt                                                 (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineProfileSettings::GetProfileSettingDefaultInt(int ProfileSettingId, int* DefaultInt)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetProfileSettingDefaultInt");

	UOnlineProfileSettings_GetProfileSettingDefaultInt_Params params {};
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DefaultInt != nullptr)
		*DefaultInt = params.DefaultInt;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineProfileSettings.GetProfileSettingDefaultId
//		Flags  -> ()
// Parameters:
//		int                                                ProfileSettingId                                           (Parm)
//		int                                                DefaultId                                                  (Parm, OutParm)
//		int                                                ListIndex                                                  (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineProfileSettings::GetProfileSettingDefaultId(int ProfileSettingId, int* DefaultId, int* ListIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetProfileSettingDefaultId");

	UOnlineProfileSettings_GetProfileSettingDefaultId_Params params {};
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DefaultId != nullptr)
		*DefaultId = params.DefaultId;
	if (ListIndex != nullptr)
		*ListIndex = params.ListIndex;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_Filter.GetDumpString
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UNavMeshGoal_Filter::GetDumpString()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_Filter.GetDumpString");

	UNavMeshGoal_Filter_GetDumpString_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoalFilter_OutOfViewFrom.MustBeHiddenFromThisPoint
//		Flags  -> ()
// Parameters:
//		class UNavMeshGoal_GenericFilterContainer*         FilterContainer                                            (Parm)
//		struct FVector                                     InOutOfViewLocation                                        (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavMeshGoalFilter_OutOfViewFrom::MustBeHiddenFromThisPoint(class UNavMeshGoal_GenericFilterContainer* FilterContainer, const struct FVector& InOutOfViewLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoalFilter_OutOfViewFrom.MustBeHiddenFromThisPoint");

	UNavMeshGoalFilter_OutOfViewFrom_MustBeHiddenFromThisPoint_Params params {};
	params.FilterContainer = FilterContainer;
	params.InOutOfViewLocation = InOutOfViewLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicalMaterial.GetPhysicalMaterialProperty
//		Flags  -> ()
// Parameters:
//		class UClass*                                      DesiredClass                                               (Parm)
//		class UPhysicalMaterialPropertyBase*               ReturnValue                                                (Parm, OutParm, ReturnParm)
class UPhysicalMaterialPropertyBase* UPhysicalMaterial::GetPhysicalMaterialProperty(class UClass* DesiredClass)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicalMaterial.GetPhysicalMaterialProperty");

	UPhysicalMaterial_GetPhysicalMaterialProperty_Params params {};
	params.DesiredClass = DesiredClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicalMaterial.FindFractureSounds
//		Flags  -> ()
// Parameters:
//		class USoundCue*                                   OutSoundExplosion                                          (Parm, OutParm)
//		class USoundCue*                                   OutSoundSingle                                             (Parm, OutParm)
void UPhysicalMaterial::FindFractureSounds(class USoundCue** OutSoundExplosion, class USoundCue** OutSoundSingle)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicalMaterial.FindFractureSounds");

	UPhysicalMaterial_FindFractureSounds_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutSoundExplosion != nullptr)
		*OutSoundExplosion = params.OutSoundExplosion;
	if (OutSoundSingle != nullptr)
		*OutSoundSingle = params.OutSoundSingle;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicalMaterial.FindPhysEffectInfo
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_EPhysEffectType>                Type                                                       (Parm)
//		struct FPhysEffectInfo                             ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FPhysEffectInfo UPhysicalMaterial::FindPhysEffectInfo(TEnumAsByte<Engine_EPhysEffectType> Type)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicalMaterial.FindPhysEffectInfo");

	UPhysicalMaterial_FindPhysEffectInfo_Params params {};
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsAsset.FindBodyIndex
//		Flags  -> ()
// Parameters:
//		struct FName                                       BodyName                                                   (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UPhysicsAsset::FindBodyIndex(const struct FName& BodyName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAsset.FindBodyIndex");

	UPhysicsAsset_FindBodyIndex_Params params {};
	params.BodyName = BodyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsAssetInstance.FindConstraintInstance
//		Flags  -> ()
// Parameters:
//		struct FName                                       ConName                                                    (Parm)
//		class UPhysicsAsset*                               InAsset                                                    (Parm)
//		class URB_ConstraintInstance*                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class URB_ConstraintInstance* UPhysicsAssetInstance::FindConstraintInstance(const struct FName& ConName, class UPhysicsAsset* InAsset)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.FindConstraintInstance");

	UPhysicsAssetInstance_FindConstraintInstance_Params params {};
	params.ConName = ConName;
	params.InAsset = InAsset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsAssetInstance.FindBodyInstance
//		Flags  -> ()
// Parameters:
//		struct FName                                       BodyName                                                   (Parm)
//		class UPhysicsAsset*                               InAsset                                                    (Parm)
//		class URB_BodyInstance*                            ReturnValue                                                (Parm, OutParm, ReturnParm)
class URB_BodyInstance* UPhysicsAssetInstance::FindBodyInstance(const struct FName& BodyName, class UPhysicsAsset* InAsset)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.FindBodyInstance");

	UPhysicsAssetInstance_FindBodyInstance_Params params {};
	params.BodyName = BodyName;
	params.InAsset = InAsset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsAssetInstance.SetFullAnimWeightBonesFixed
//		Flags  -> ()
// Parameters:
//		bool                                               bNewFixed                                                  (Parm)
//		class USkeletalMeshComponent*                      SkelMesh                                                   (Parm, EditInline)
void UPhysicsAssetInstance::SetFullAnimWeightBonesFixed(bool bNewFixed, class USkeletalMeshComponent* SkelMesh)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetFullAnimWeightBonesFixed");

	UPhysicsAssetInstance_SetFullAnimWeightBonesFixed_Params params {};
	params.bNewFixed = bNewFixed;
	params.SkelMesh = SkelMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsAssetInstance.SetFullAnimWeightBlockRigidBody
//		Flags  -> ()
// Parameters:
//		bool                                               bNewBlockRigidBody                                         (Parm)
//		class USkeletalMeshComponent*                      SkelMesh                                                   (Parm, EditInline)
void UPhysicsAssetInstance::SetFullAnimWeightBlockRigidBody(bool bNewBlockRigidBody, class USkeletalMeshComponent* SkelMesh)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetFullAnimWeightBlockRigidBody");

	UPhysicsAssetInstance_SetFullAnimWeightBlockRigidBody_Params params {};
	params.bNewBlockRigidBody = bNewBlockRigidBody;
	params.SkelMesh = SkelMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsAssetInstance.SetNamedBodiesBlockRigidBody
//		Flags  -> ()
// Parameters:
//		bool                                               bNewBlockRigidBody                                         (Parm)
//		TArray<struct FName>                               BoneNames                                                  (Parm, NeedCtorLink)
//		class USkeletalMeshComponent*                      SkelMesh                                                   (Parm, EditInline)
void UPhysicsAssetInstance::SetNamedBodiesBlockRigidBody(bool bNewBlockRigidBody, TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMesh)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetNamedBodiesBlockRigidBody");

	UPhysicsAssetInstance_SetNamedBodiesBlockRigidBody_Params params {};
	params.bNewBlockRigidBody = bNewBlockRigidBody;
	params.BoneNames = BoneNames;
	params.SkelMesh = SkelMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsAssetInstance.SetNamedRBBoneSprings
//		Flags  -> ()
// Parameters:
//		bool                                               bEnable                                                    (Parm)
//		TArray<struct FName>                               BoneNames                                                  (Parm, NeedCtorLink)
//		float                                              InBoneLinearSpring                                         (Parm)
//		float                                              InBoneAngularSpring                                        (Parm)
//		class USkeletalMeshComponent*                      SkelMeshComp                                               (Parm, EditInline)
void UPhysicsAssetInstance::SetNamedRBBoneSprings(bool bEnable, TArray<struct FName> BoneNames, float InBoneLinearSpring, float InBoneAngularSpring, class USkeletalMeshComponent* SkelMeshComp)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetNamedRBBoneSprings");

	UPhysicsAssetInstance_SetNamedRBBoneSprings_Params params {};
	params.bEnable = bEnable;
	params.BoneNames = BoneNames;
	params.InBoneLinearSpring = InBoneLinearSpring;
	params.InBoneAngularSpring = InBoneAngularSpring;
	params.SkelMeshComp = SkelMeshComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularVelocityDrive
//		Flags  -> ()
// Parameters:
//		bool                                               bEnableSwingDrive                                          (Parm)
//		bool                                               bEnableTwistDrive                                          (Parm)
//		TArray<struct FName>                               BoneNames                                                  (Parm, NeedCtorLink)
//		class USkeletalMeshComponent*                      SkelMeshComp                                               (Parm, EditInline)
//		bool                                               bSetOtherBodiesToComplement                                (OptionalParm, Parm)
void UPhysicsAssetInstance::SetNamedMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMeshComp, bool bSetOtherBodiesToComplement)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularVelocityDrive");

	UPhysicsAssetInstance_SetNamedMotorsAngularVelocityDrive_Params params {};
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.BoneNames = BoneNames;
	params.SkelMeshComp = SkelMeshComp;
	params.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularPositionDrive
//		Flags  -> ()
// Parameters:
//		bool                                               bEnableSwingDrive                                          (Parm)
//		bool                                               bEnableTwistDrive                                          (Parm)
//		TArray<struct FName>                               BoneNames                                                  (Parm, NeedCtorLink)
//		class USkeletalMeshComponent*                      SkelMeshComp                                               (Parm, EditInline)
//		bool                                               bSetOtherBodiesToComplement                                (OptionalParm, Parm)
void UPhysicsAssetInstance::SetNamedMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMeshComp, bool bSetOtherBodiesToComplement)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularPositionDrive");

	UPhysicsAssetInstance_SetNamedMotorsAngularPositionDrive_Params params {};
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.BoneNames = BoneNames;
	params.SkelMeshComp = SkelMeshComp;
	params.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsAssetInstance.SetAllMotorsAngularDriveParams
//		Flags  -> ()
// Parameters:
//		float                                              InSpring                                                   (Parm)
//		float                                              InDamping                                                  (Parm)
//		float                                              InForceLimit                                               (Parm)
//		class USkeletalMeshComponent*                      SkelMesh                                                   (OptionalParm, Parm, EditInline)
//		bool                                               bSkipFullAnimWeightBodies                                  (OptionalParm, Parm)
void UPhysicsAssetInstance::SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, class USkeletalMeshComponent* SkelMesh, bool bSkipFullAnimWeightBodies)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetAllMotorsAngularDriveParams");

	UPhysicsAssetInstance_SetAllMotorsAngularDriveParams_Params params {};
	params.InSpring = InSpring;
	params.InDamping = InDamping;
	params.InForceLimit = InForceLimit;
	params.SkelMesh = SkelMesh;
	params.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsAssetInstance.SetAllMotorsAngularVelocityDrive
//		Flags  -> ()
// Parameters:
//		bool                                               bEnableSwingDrive                                          (Parm)
//		bool                                               bEnableTwistDrive                                          (Parm)
//		class USkeletalMeshComponent*                      SkelMeshComp                                               (Parm, EditInline)
//		bool                                               bSkipFullAnimWeightBodies                                  (OptionalParm, Parm)
void UPhysicsAssetInstance::SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, class USkeletalMeshComponent* SkelMeshComp, bool bSkipFullAnimWeightBodies)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetAllMotorsAngularVelocityDrive");

	UPhysicsAssetInstance_SetAllMotorsAngularVelocityDrive_Params params {};
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.SkelMeshComp = SkelMeshComp;
	params.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsAssetInstance.SetAllMotorsAngularPositionDrive
//		Flags  -> ()
// Parameters:
//		bool                                               bEnableSwingDrive                                          (Parm)
//		bool                                               bEnableTwistDrive                                          (Parm)
//		class USkeletalMeshComponent*                      SkelMesh                                                   (OptionalParm, Parm, EditInline)
//		bool                                               bSkipFullAnimWeightBodies                                  (OptionalParm, Parm)
void UPhysicsAssetInstance::SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, class USkeletalMeshComponent* SkelMesh, bool bSkipFullAnimWeightBodies)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetAllMotorsAngularPositionDrive");

	UPhysicsAssetInstance_SetAllMotorsAngularPositionDrive_Params params {};
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.SkelMesh = SkelMesh;
	params.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsAssetInstance.ForceAllBodiesBelowUnfixed
//		Flags  -> ()
// Parameters:
//		struct FName                                       InBoneName                                                 (Const, Parm, OutParm)
//		class UPhysicsAsset*                               InAsset                                                    (Parm)
//		class USkeletalMeshComponent*                      InSkelMesh                                                 (Parm, EditInline)
//		bool                                               InbInstanceAlwaysFullAnimWeight                            (Parm)
void UPhysicsAssetInstance::ForceAllBodiesBelowUnfixed(struct FName* InBoneName, class UPhysicsAsset* InAsset, class USkeletalMeshComponent* InSkelMesh, bool InbInstanceAlwaysFullAnimWeight)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.ForceAllBodiesBelowUnfixed");

	UPhysicsAssetInstance_ForceAllBodiesBelowUnfixed_Params params {};
	params.InAsset = InAsset;
	params.InSkelMesh = InSkelMesh;
	params.InbInstanceAlwaysFullAnimWeight = InbInstanceAlwaysFullAnimWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InBoneName != nullptr)
		*InBoneName = params.InBoneName;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsAssetInstance.SetNamedBodiesFixed
//		Flags  -> ()
// Parameters:
//		bool                                               bNewFixed                                                  (Parm)
//		TArray<struct FName>                               BoneNames                                                  (Parm, NeedCtorLink)
//		class USkeletalMeshComponent*                      SkelMesh                                                   (Parm, EditInline)
//		bool                                               bSetOtherBodiesToComplement                                (OptionalParm, Parm)
//		bool                                               bSkipFullAnimWeightBodies                                  (OptionalParm, Parm)
void UPhysicsAssetInstance::SetNamedBodiesFixed(bool bNewFixed, TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMesh, bool bSetOtherBodiesToComplement, bool bSkipFullAnimWeightBodies)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetNamedBodiesFixed");

	UPhysicsAssetInstance_SetNamedBodiesFixed_Params params {};
	params.bNewFixed = bNewFixed;
	params.BoneNames = BoneNames;
	params.SkelMesh = SkelMesh;
	params.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;
	params.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsAssetInstance.SetAllBodiesFixed
//		Flags  -> ()
// Parameters:
//		bool                                               bNewFixed                                                  (Parm)
void UPhysicsAssetInstance::SetAllBodiesFixed(bool bNewFixed)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetAllBodiesFixed");

	UPhysicsAssetInstance_SetAllBodiesFixed_Params params {};
	params.bNewFixed = bNewFixed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsAssetInstance.GetTotalMassBelowBone
//		Flags  -> ()
// Parameters:
//		struct FName                                       InBoneName                                                 (Parm)
//		class UPhysicsAsset*                               InAsset                                                    (Parm)
//		class USkeletalMesh*                               InSkelMesh                                                 (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UPhysicsAssetInstance::GetTotalMassBelowBone(const struct FName& InBoneName, class UPhysicsAsset* InAsset, class USkeletalMesh* InSkelMesh)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.GetTotalMassBelowBone");

	UPhysicsAssetInstance_GetTotalMassBelowBone_Params params {};
	params.InBoneName = InBoneName;
	params.InAsset = InAsset;
	params.InSkelMesh = InSkelMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsAssetInstance.SetAngularDriveScale
//		Flags  -> ()
// Parameters:
//		float                                              InAngularSpringScale                                       (Parm)
//		float                                              InAngularDampingScale                                      (Parm)
//		float                                              InAngularForceLimitScale                                   (Parm)
void UPhysicsAssetInstance::SetAngularDriveScale(float InAngularSpringScale, float InAngularDampingScale, float InAngularForceLimitScale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetAngularDriveScale");

	UPhysicsAssetInstance_SetAngularDriveScale_Params params {};
	params.InAngularSpringScale = InAngularSpringScale;
	params.InAngularDampingScale = InAngularDampingScale;
	params.InAngularForceLimitScale = InAngularForceLimitScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PhysicsAssetInstance.SetLinearDriveScale
//		Flags  -> ()
// Parameters:
//		float                                              InLinearSpringScale                                        (Parm)
//		float                                              InLinearDampingScale                                       (Parm)
//		float                                              InLinearForceLimitScale                                    (Parm)
void UPhysicsAssetInstance::SetLinearDriveScale(float InLinearSpringScale, float InLinearDampingScale, float InLinearForceLimitScale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetLinearDriveScale");

	UPhysicsAssetInstance_SetLinearDriveScale_Params params {};
	params.InLinearSpringScale = InLinearSpringScale;
	params.InLinearDampingScale = InLinearDampingScale;
	params.InLinearForceLimitScale = InLinearForceLimitScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_BodyInstance.UpdateDampingProperties
//		Flags  -> ()
void URB_BodyInstance::UpdateDampingProperties()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.UpdateDampingProperties");

	URB_BodyInstance_UpdateDampingProperties_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_BodyInstance.UpdateMassProperties
//		Flags  -> ()
// Parameters:
//		class URB_BodySetup*                               Setup                                                      (Parm)
void URB_BodyInstance::UpdateMassProperties(class URB_BodySetup* Setup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.UpdateMassProperties");

	URB_BodyInstance_UpdateMassProperties_Params params {};
	params.Setup = Setup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_BodyInstance.SetContactReportForceThreshold
//		Flags  -> ()
// Parameters:
//		float                                              Threshold                                                  (Parm)
void URB_BodyInstance::SetContactReportForceThreshold(float Threshold)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetContactReportForceThreshold");

	URB_BodyInstance_SetContactReportForceThreshold_Params params {};
	params.Threshold = Threshold;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_BodyInstance.EnableCollisionResponse
//		Flags  -> ()
// Parameters:
//		bool                                               bEnableResponse                                            (Parm)
void URB_BodyInstance::EnableCollisionResponse(bool bEnableResponse)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.EnableCollisionResponse");

	URB_BodyInstance_EnableCollisionResponse_Params params {};
	params.bEnableResponse = bEnableResponse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_BodyInstance.SetPhysMaterialOverride
//		Flags  -> ()
// Parameters:
//		class UPhysicalMaterial*                           NewPhysMaterial                                            (Parm)
void URB_BodyInstance::SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetPhysMaterialOverride");

	URB_BodyInstance_SetPhysMaterialOverride_Params params {};
	params.NewPhysMaterial = NewPhysMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_BodyInstance.SetBlockRigidBody
//		Flags  -> ()
// Parameters:
//		bool                                               bNewBlockRigidBody                                         (Parm)
void URB_BodyInstance::SetBlockRigidBody(bool bNewBlockRigidBody)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetBlockRigidBody");

	URB_BodyInstance_SetBlockRigidBody_Params params {};
	params.bNewBlockRigidBody = bNewBlockRigidBody;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_BodyInstance.SetBoneSpringTarget
//		Flags  -> ()
// Parameters:
//		struct FMatrix                                     InBoneTarget                                               (Const, Parm, OutParm)
//		bool                                               bTeleport                                                  (Parm)
void URB_BodyInstance::SetBoneSpringTarget(struct FMatrix* InBoneTarget, bool bTeleport)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetBoneSpringTarget");

	URB_BodyInstance_SetBoneSpringTarget_Params params {};
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InBoneTarget != nullptr)
		*InBoneTarget = params.InBoneTarget;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_BodyInstance.SetBoneSpringParams
//		Flags  -> ()
// Parameters:
//		float                                              InLinearSpring                                             (Parm)
//		float                                              InLinearDamping                                            (Parm)
//		float                                              InAngularSpring                                            (Parm)
//		float                                              InAngularDamping                                           (Parm)
void URB_BodyInstance::SetBoneSpringParams(float InLinearSpring, float InLinearDamping, float InAngularSpring, float InAngularDamping)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetBoneSpringParams");

	URB_BodyInstance_SetBoneSpringParams_Params params {};
	params.InLinearSpring = InLinearSpring;
	params.InLinearDamping = InLinearDamping;
	params.InAngularSpring = InAngularSpring;
	params.InAngularDamping = InAngularDamping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_BodyInstance.EnableBoneSpring
//		Flags  -> ()
// Parameters:
//		bool                                               bInEnableLinear                                            (Parm)
//		bool                                               bInEnableAngular                                           (Parm)
//		struct FMatrix                                     InBoneTarget                                               (Const, Parm, OutParm)
void URB_BodyInstance::EnableBoneSpring(bool bInEnableLinear, bool bInEnableAngular, struct FMatrix* InBoneTarget)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.EnableBoneSpring");

	URB_BodyInstance_EnableBoneSpring_Params params {};
	params.bInEnableLinear = bInEnableLinear;
	params.bInEnableAngular = bInEnableAngular;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InBoneTarget != nullptr)
		*InBoneTarget = params.InBoneTarget;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_BodyInstance.GetUnrealWorldVelocityAtPoint
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Point                                                      (Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector URB_BodyInstance::GetUnrealWorldVelocityAtPoint(const struct FVector& Point)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.GetUnrealWorldVelocityAtPoint");

	URB_BodyInstance_GetUnrealWorldVelocityAtPoint_Params params {};
	params.Point = Point;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_BodyInstance.GetUnrealWorldAngularVelocity
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector URB_BodyInstance::GetUnrealWorldAngularVelocity()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.GetUnrealWorldAngularVelocity");

	URB_BodyInstance_GetUnrealWorldAngularVelocity_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_BodyInstance.GetUnrealWorldVelocity
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector URB_BodyInstance::GetUnrealWorldVelocity()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.GetUnrealWorldVelocity");

	URB_BodyInstance_GetUnrealWorldVelocity_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_BodyInstance.GetUnrealWorldTM
//		Flags  -> ()
// Parameters:
//		struct FMatrix                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FMatrix URB_BodyInstance::GetUnrealWorldTM()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.GetUnrealWorldTM");

	URB_BodyInstance_GetUnrealWorldTM_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_BodyInstance.GetPhysicsAssetInstance
//		Flags  -> ()
// Parameters:
//		class UPhysicsAssetInstance*                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class UPhysicsAssetInstance* URB_BodyInstance::GetPhysicsAssetInstance()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.GetPhysicsAssetInstance");

	URB_BodyInstance_GetPhysicsAssetInstance_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_BodyInstance.IsValidBodyInstance
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool URB_BodyInstance::IsValidBodyInstance()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.IsValidBodyInstance");

	URB_BodyInstance_IsValidBodyInstance_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_BodyInstance.IsFixed
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool URB_BodyInstance::IsFixed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.IsFixed");

	URB_BodyInstance_IsFixed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_BodyInstance.SetFixed
//		Flags  -> ()
// Parameters:
//		bool                                               bNewFixed                                                  (Parm)
void URB_BodyInstance::SetFixed(bool bNewFixed)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetFixed");

	URB_BodyInstance_SetFixed_Params params {};
	params.bNewFixed = bNewFixed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_BodyInstance.GetBodyMass
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float URB_BodyInstance::GetBodyMass()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.GetBodyMass");

	URB_BodyInstance_GetBodyMass_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintInstance.MoveKinActorTransform
//		Flags  -> ()
// Parameters:
//		struct FMatrix                                     NewTM                                                      (Parm, OutParm)
void URB_ConstraintInstance::MoveKinActorTransform(struct FMatrix* NewTM)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.MoveKinActorTransform");

	URB_ConstraintInstance_MoveKinActorTransform_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (NewTM != nullptr)
		*NewTM = params.NewTM;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintInstance.SetLinearLimitSize
//		Flags  -> ()
// Parameters:
//		float                                              NewLimitSize                                               (Parm)
void URB_ConstraintInstance::SetLinearLimitSize(float NewLimitSize)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearLimitSize");

	URB_ConstraintInstance_SetLinearLimitSize_Params params {};
	params.NewLimitSize = NewLimitSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintInstance.SetAngularDOFLimitScale
//		Flags  -> ()
// Parameters:
//		float                                              InSwing1LimitScale                                         (Parm)
//		float                                              InSwing2LimitScale                                         (Parm)
//		float                                              InTwistLimitScale                                          (Parm)
//		class URB_ConstraintSetup*                         InSetup                                                    (Parm)
void URB_ConstraintInstance::SetAngularDOFLimitScale(float InSwing1LimitScale, float InSwing2LimitScale, float InTwistLimitScale, class URB_ConstraintSetup* InSetup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularDOFLimitScale");

	URB_ConstraintInstance_SetAngularDOFLimitScale_Params params {};
	params.InSwing1LimitScale = InSwing1LimitScale;
	params.InSwing2LimitScale = InSwing2LimitScale;
	params.InTwistLimitScale = InTwistLimitScale;
	params.InSetup = InSetup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintInstance.SetAngularDriveParams
//		Flags  -> ()
// Parameters:
//		float                                              InSpring                                                   (Parm)
//		float                                              InDamping                                                  (Parm)
//		float                                              InForceLimit                                               (Parm)
void URB_ConstraintInstance::SetAngularDriveParams(float InSpring, float InDamping, float InForceLimit)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularDriveParams");

	URB_ConstraintInstance_SetAngularDriveParams_Params params {};
	params.InSpring = InSpring;
	params.InDamping = InDamping;
	params.InForceLimit = InForceLimit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintInstance.SetAngularVelocityTarget
//		Flags  -> ()
// Parameters:
//		struct FVector                                     InVelTarget                                                (Parm)
void URB_ConstraintInstance::SetAngularVelocityTarget(const struct FVector& InVelTarget)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularVelocityTarget");

	URB_ConstraintInstance_SetAngularVelocityTarget_Params params {};
	params.InVelTarget = InVelTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintInstance.SetAngularPositionTarget
//		Flags  -> ()
// Parameters:
//		struct FQuat                                       InPosTarget                                                (Const, Parm, OutParm)
void URB_ConstraintInstance::SetAngularPositionTarget(struct FQuat* InPosTarget)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularPositionTarget");

	URB_ConstraintInstance_SetAngularPositionTarget_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InPosTarget != nullptr)
		*InPosTarget = params.InPosTarget;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintInstance.SetLinearDriveParams
//		Flags  -> ()
// Parameters:
//		float                                              InSpring                                                   (Parm)
//		float                                              InDamping                                                  (Parm)
//		float                                              InForceLimit                                               (Parm)
void URB_ConstraintInstance::SetLinearDriveParams(float InSpring, float InDamping, float InForceLimit)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearDriveParams");

	URB_ConstraintInstance_SetLinearDriveParams_Params params {};
	params.InSpring = InSpring;
	params.InDamping = InDamping;
	params.InForceLimit = InForceLimit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintInstance.SetLinearVelocityTarget
//		Flags  -> ()
// Parameters:
//		struct FVector                                     InVelTarget                                                (Parm)
void URB_ConstraintInstance::SetLinearVelocityTarget(const struct FVector& InVelTarget)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearVelocityTarget");

	URB_ConstraintInstance_SetLinearVelocityTarget_Params params {};
	params.InVelTarget = InVelTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintInstance.SetLinearPositionTarget
//		Flags  -> ()
// Parameters:
//		struct FVector                                     InPosTarget                                                (Parm)
void URB_ConstraintInstance::SetLinearPositionTarget(const struct FVector& InPosTarget)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearPositionTarget");

	URB_ConstraintInstance_SetLinearPositionTarget_Params params {};
	params.InPosTarget = InPosTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintInstance.SetAngularVelocityDrive
//		Flags  -> ()
// Parameters:
//		bool                                               bEnableSwingDrive                                          (Parm)
//		bool                                               bEnableTwistDrive                                          (Parm)
void URB_ConstraintInstance::SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularVelocityDrive");

	URB_ConstraintInstance_SetAngularVelocityDrive_Params params {};
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintInstance.SetAngularPositionDrive
//		Flags  -> ()
// Parameters:
//		bool                                               bEnableSwingDrive                                          (Parm)
//		bool                                               bEnableTwistDrive                                          (Parm)
void URB_ConstraintInstance::SetAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularPositionDrive");

	URB_ConstraintInstance_SetAngularPositionDrive_Params params {};
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintInstance.SetLinearVelocityDrive
//		Flags  -> ()
// Parameters:
//		bool                                               bEnableXDrive                                              (Parm)
//		bool                                               bEnableYDrive                                              (Parm)
//		bool                                               bEnableZDrive                                              (Parm)
void URB_ConstraintInstance::SetLinearVelocityDrive(bool bEnableXDrive, bool bEnableYDrive, bool bEnableZDrive)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearVelocityDrive");

	URB_ConstraintInstance_SetLinearVelocityDrive_Params params {};
	params.bEnableXDrive = bEnableXDrive;
	params.bEnableYDrive = bEnableYDrive;
	params.bEnableZDrive = bEnableZDrive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintInstance.SetLinearPositionDrive
//		Flags  -> ()
// Parameters:
//		bool                                               bEnableXDrive                                              (Parm)
//		bool                                               bEnableYDrive                                              (Parm)
//		bool                                               bEnableZDrive                                              (Parm)
void URB_ConstraintInstance::SetLinearPositionDrive(bool bEnableXDrive, bool bEnableYDrive, bool bEnableZDrive)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearPositionDrive");

	URB_ConstraintInstance_SetLinearPositionDrive_Params params {};
	params.bEnableXDrive = bEnableXDrive;
	params.bEnableYDrive = bEnableYDrive;
	params.bEnableZDrive = bEnableZDrive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintInstance.GetConstraintLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector URB_ConstraintInstance::GetConstraintLocation()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.GetConstraintLocation");

	URB_ConstraintInstance_GetConstraintLocation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintInstance.GetPhysicsAssetInstance
//		Flags  -> ()
// Parameters:
//		class UPhysicsAssetInstance*                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class UPhysicsAssetInstance* URB_ConstraintInstance::GetPhysicsAssetInstance()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.GetPhysicsAssetInstance");

	URB_ConstraintInstance_GetPhysicsAssetInstance_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintInstance.TermConstraint
//		Flags  -> ()
void URB_ConstraintInstance::TermConstraint()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.TermConstraint");

	URB_ConstraintInstance_TermConstraint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintInstance.InitConstraint
//		Flags  -> ()
// Parameters:
//		class UPrimitiveComponent*                         PrimComp1                                                  (Parm, EditInline)
//		class UPrimitiveComponent*                         PrimComp2                                                  (Parm, EditInline)
//		class URB_ConstraintSetup*                         Setup                                                      (Parm)
//		float                                              Scale                                                      (Parm)
//		class AActor*                                      InOwner                                                    (Parm)
//		class UPrimitiveComponent*                         InPrimComp                                                 (Parm, EditInline)
//		bool                                               bMakeKinForBody1                                           (Parm)
void URB_ConstraintInstance::InitConstraint(class UPrimitiveComponent* PrimComp1, class UPrimitiveComponent* PrimComp2, class URB_ConstraintSetup* Setup, float Scale, class AActor* InOwner, class UPrimitiveComponent* InPrimComp, bool bMakeKinForBody1)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.InitConstraint");

	URB_ConstraintInstance_InitConstraint_Params params {};
	params.PrimComp1 = PrimComp1;
	params.PrimComp2 = PrimComp2;
	params.Setup = Setup;
	params.Scale = Scale;
	params.InOwner = InOwner;
	params.InPrimComp = InPrimComp;
	params.bMakeKinForBody1 = bMakeKinForBody1;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NxGenericForceFieldBrush.StopsProjectile
//		Flags  -> ()
// Parameters:
//		class AProjectile*                                 P                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ANxGenericForceFieldBrush::StopsProjectile(class AProjectile* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NxGenericForceFieldBrush.StopsProjectile");

	ANxGenericForceFieldBrush_StopsProjectile_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NxGenericForceFieldBrush.PostBeginPlay
//		Flags  -> ()
void ANxGenericForceFieldBrush::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NxGenericForceFieldBrush.PostBeginPlay");

	ANxGenericForceFieldBrush_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NxForceField.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              inAction                                                   (Parm)
void ANxForceField::OnToggle(class USeqAct_Toggle* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NxForceField.OnToggle");

	ANxForceField_OnToggle_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NxForceField.DoInitRBPhys
//		Flags  -> ()
void ANxForceField::DoInitRBPhys()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NxForceField.DoInitRBPhys");

	ANxForceField_DoInitRBPhys_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NxCylindricalForceFieldCapsule.DoInitRBPhys
//		Flags  -> ()
void ANxCylindricalForceFieldCapsule::DoInitRBPhys()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NxCylindricalForceFieldCapsule.DoInitRBPhys");

	ANxCylindricalForceFieldCapsule_DoInitRBPhys_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RadialBlurComponent.OnUpdatePropertyBlurOpacity
//		Flags  -> ()
void URadialBlurComponent::OnUpdatePropertyBlurOpacity()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.OnUpdatePropertyBlurOpacity");

	URadialBlurComponent_OnUpdatePropertyBlurOpacity_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RadialBlurComponent.OnUpdatePropertyBlurFalloffExponent
//		Flags  -> ()
void URadialBlurComponent::OnUpdatePropertyBlurFalloffExponent()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.OnUpdatePropertyBlurFalloffExponent");

	URadialBlurComponent_OnUpdatePropertyBlurFalloffExponent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RadialBlurComponent.OnUpdatePropertyBlurScale
//		Flags  -> ()
void URadialBlurComponent::OnUpdatePropertyBlurScale()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.OnUpdatePropertyBlurScale");

	URadialBlurComponent_OnUpdatePropertyBlurScale_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RadialBlurComponent.SetEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               bInEnabled                                                 (Parm)
void URadialBlurComponent::SetEnabled(bool bInEnabled)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.SetEnabled");

	URadialBlurComponent_SetEnabled_Params params {};
	params.bInEnabled = bInEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RadialBlurComponent.SetBlurOpacity
//		Flags  -> ()
// Parameters:
//		float                                              InBlurOpacity                                              (Parm)
void URadialBlurComponent::SetBlurOpacity(float InBlurOpacity)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.SetBlurOpacity");

	URadialBlurComponent_SetBlurOpacity_Params params {};
	params.InBlurOpacity = InBlurOpacity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RadialBlurComponent.SetBlurFalloffExponent
//		Flags  -> ()
// Parameters:
//		float                                              InBlurFalloffExponent                                      (Parm)
void URadialBlurComponent::SetBlurFalloffExponent(float InBlurFalloffExponent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.SetBlurFalloffExponent");

	URadialBlurComponent_SetBlurFalloffExponent_Params params {};
	params.InBlurFalloffExponent = InBlurFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RadialBlurComponent.SetBlurScale
//		Flags  -> ()
// Parameters:
//		float                                              InBlurScale                                                (Parm)
void URadialBlurComponent::SetBlurScale(float InBlurScale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.SetBlurScale");

	URadialBlurComponent_SetBlurScale_Params params {};
	params.InBlurScale = InBlurScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RadialBlurComponent.SetMaterial
//		Flags  -> ()
// Parameters:
//		class UMaterialInterface*                          InMaterial                                                 (Parm)
void URadialBlurComponent::SetMaterial(class UMaterialInterface* InMaterial)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.SetMaterial");

	URadialBlurComponent_SetMaterial_Params params {};
	params.InMaterial = InMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SceneCaptureComponent.SetEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               bEnable                                                    (Parm)
void USceneCaptureComponent::SetEnabled(bool bEnable)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.SetEnabled");

	USceneCaptureComponent_SetEnabled_Params params {};
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SceneCaptureComponent.SetFrameRate
//		Flags  -> ()
// Parameters:
//		float                                              NewFrameRate                                               (Parm)
void USceneCaptureComponent::SetFrameRate(float NewFrameRate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.SetFrameRate");

	USceneCaptureComponent_SetFrameRate_Params params {};
	params.NewFrameRate = NewFrameRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SceneCapture2DComponent.SetView
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewLocation                                                (Parm)
//		struct FRotator                                    NewRotation                                                (Parm)
void USceneCapture2DComponent::SetView(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SceneCapture2DComponent.SetView");

	USceneCapture2DComponent_SetView_Params params {};
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SceneCapture2DComponent.SetCaptureParameters
//		Flags  -> ()
// Parameters:
//		class UTextureRenderTarget2D*                      NewTextureTarget                                           (OptionalParm, Parm)
//		float                                              NewFOV                                                     (OptionalParm, Parm)
//		float                                              NewNearPlane                                               (OptionalParm, Parm)
//		float                                              NewFarPlane                                                (OptionalParm, Parm)
void USceneCapture2DComponent::SetCaptureParameters(class UTextureRenderTarget2D* NewTextureTarget, float NewFOV, float NewNearPlane, float NewFarPlane)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SceneCapture2DComponent.SetCaptureParameters");

	USceneCapture2DComponent_SetCaptureParameters_Params params {};
	params.NewTextureTarget = NewTextureTarget;
	params.NewFOV = NewFOV;
	params.NewNearPlane = NewNearPlane;
	params.NewFarPlane = NewFarPlane;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SceneCapture2DHitMaskComponent.SetFadingStartTimeSinceHit
//		Flags  -> ()
// Parameters:
//		float                                              InFadingStartTimeSinceHit                                  (Const, Parm)
void USceneCapture2DHitMaskComponent::SetFadingStartTimeSinceHit(float InFadingStartTimeSinceHit)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SceneCapture2DHitMaskComponent.SetFadingStartTimeSinceHit");

	USceneCapture2DHitMaskComponent_SetFadingStartTimeSinceHit_Params params {};
	params.InFadingStartTimeSinceHit = InFadingStartTimeSinceHit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SceneCapture2DHitMaskComponent.SetCaptureParameters
//		Flags  -> ()
// Parameters:
//		struct FVector                                     InMaskPosition                                             (Const, Parm)
//		float                                              InMaskRadius                                               (Const, Parm)
//		struct FVector                                     InStartupPosition                                          (Const, Parm)
//		bool                                               bOnlyWhenFacing                                            (Const, Parm)
void USceneCapture2DHitMaskComponent::SetCaptureParameters(const struct FVector& InMaskPosition, float InMaskRadius, const struct FVector& InStartupPosition, bool bOnlyWhenFacing)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SceneCapture2DHitMaskComponent.SetCaptureParameters");

	USceneCapture2DHitMaskComponent_SetCaptureParameters_Params params {};
	params.InMaskPosition = InMaskPosition;
	params.InMaskRadius = InMaskRadius;
	params.InStartupPosition = InStartupPosition;
	params.bOnlyWhenFacing = bOnlyWhenFacing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SceneCapture2DHitMaskComponent.SetCaptureTargetTexture
//		Flags  -> ()
// Parameters:
//		class UTextureRenderTarget2D*                      InTextureTarget                                            (Const, Parm)
void USceneCapture2DHitMaskComponent::SetCaptureTargetTexture(class UTextureRenderTarget2D* InTextureTarget)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SceneCapture2DHitMaskComponent.SetCaptureTargetTexture");

	USceneCapture2DHitMaskComponent_SetCaptureTargetTexture_Params params {};
	params.InTextureTarget = InTextureTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ImageReflectionShadowPlaneComponent.SetEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               bSetEnabled                                                (Parm)
void UImageReflectionShadowPlaneComponent::SetEnabled(bool bSetEnabled)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ImageReflectionShadowPlaneComponent.SetEnabled");

	UImageReflectionShadowPlaneComponent_SetEnabled_Params params {};
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MeshComponent.CreateAndSetMaterialInstanceTimeVarying
//		Flags  -> ()
// Parameters:
//		int                                                ElementIndex                                               (Parm)
//		class UMaterialInstanceTimeVarying*                ReturnValue                                                (Parm, OutParm, ReturnParm)
class UMaterialInstanceTimeVarying* UMeshComponent::CreateAndSetMaterialInstanceTimeVarying(int ElementIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.CreateAndSetMaterialInstanceTimeVarying");

	UMeshComponent_CreateAndSetMaterialInstanceTimeVarying_Params params {};
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MeshComponent.CreateAndSetMaterialInstanceConstant
//		Flags  -> ()
// Parameters:
//		int                                                ElementIndex                                               (Parm)
//		class UMaterialInstanceConstant*                   ReturnValue                                                (Parm, OutParm, ReturnParm)
class UMaterialInstanceConstant* UMeshComponent::CreateAndSetMaterialInstanceConstant(int ElementIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.CreateAndSetMaterialInstanceConstant");

	UMeshComponent_CreateAndSetMaterialInstanceConstant_Params params {};
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MeshComponent.PrestreamTextures
//		Flags  -> ()
// Parameters:
//		float                                              Seconds                                                    (Parm)
//		bool                                               bPrioritizeCharacterTextures                               (Parm)
//		int                                                CinematicTextureGroups                                     (OptionalParm, Parm)
void UMeshComponent::PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.PrestreamTextures");

	UMeshComponent_PrestreamTextures_Params params {};
	params.Seconds = Seconds;
	params.bPrioritizeCharacterTextures = bPrioritizeCharacterTextures;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MeshComponent.GetNumElements
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UMeshComponent::GetNumElements()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.GetNumElements");

	UMeshComponent_GetNumElements_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MeshComponent.SetMaterial
//		Flags  -> ()
// Parameters:
//		int                                                ElementIndex                                               (Parm)
//		class UMaterialInterface*                          Material                                                   (Parm)
void UMeshComponent::SetMaterial(int ElementIndex, class UMaterialInterface* Material)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.SetMaterial");

	UMeshComponent_SetMaterial_Params params {};
	params.ElementIndex = ElementIndex;
	params.Material = Material;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MeshComponent.GetMaterial
//		Flags  -> ()
// Parameters:
//		int                                                ElementIndex                                               (Parm)
//		class UMaterialInterface*                          ReturnValue                                                (Parm, OutParm, ReturnParm)
class UMaterialInterface* UMeshComponent::GetMaterial(int ElementIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.GetMaterial");

	UMeshComponent_GetMaterial_Params params {};
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.StaticMeshComponent.CanBecomeDynamic
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UStaticMeshComponent::CanBecomeDynamic()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.CanBecomeDynamic");

	UStaticMeshComponent_CanBecomeDynamic_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.StaticMeshComponent.SetForceStaticDecals
//		Flags  -> ()
// Parameters:
//		bool                                               bInForceStaticDecals                                       (Parm)
void UStaticMeshComponent::SetForceStaticDecals(bool bInForceStaticDecals)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.SetForceStaticDecals");

	UStaticMeshComponent_SetForceStaticDecals_Params params {};
	params.bInForceStaticDecals = bInForceStaticDecals;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.StaticMeshComponent.DisableRBCollisionWithSMC
//		Flags  -> ()
// Parameters:
//		class UPrimitiveComponent*                         OtherSMC                                                   (Parm, EditInline)
//		bool                                               bDisabled                                                  (Parm)
void UStaticMeshComponent::DisableRBCollisionWithSMC(class UPrimitiveComponent* OtherSMC, bool bDisabled)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.DisableRBCollisionWithSMC");

	UStaticMeshComponent_DisableRBCollisionWithSMC_Params params {};
	params.OtherSMC = OtherSMC;
	params.bDisabled = bDisabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.StaticMeshComponent.SetStaticMesh
//		Flags  -> ()
// Parameters:
//		class UStaticMesh*                                 NewMesh                                                    (Parm)
//		bool                                               bForce                                                     (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UStaticMeshComponent::SetStaticMesh(class UStaticMesh* NewMesh, bool bForce)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.SetStaticMesh");

	UStaticMeshComponent_SetStaticMesh_Params params {};
	params.NewMesh = NewMesh;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ImageBasedReflectionComponent.OnUpdatePropertyReflectionColor
//		Flags  -> ()
void UImageBasedReflectionComponent::OnUpdatePropertyReflectionColor()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ImageBasedReflectionComponent.OnUpdatePropertyReflectionColor");

	UImageBasedReflectionComponent_OnUpdatePropertyReflectionColor_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ImageBasedReflectionComponent.UpdateImageReflectionParameters
//		Flags  -> ()
void UImageBasedReflectionComponent::UpdateImageReflectionParameters()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ImageBasedReflectionComponent.UpdateImageReflectionParameters");

	UImageBasedReflectionComponent_UpdateImageReflectionParameters_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ImageBasedReflectionComponent.SetEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               bSetEnabled                                                (Parm)
void UImageBasedReflectionComponent::SetEnabled(bool bSetEnabled)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ImageBasedReflectionComponent.SetEnabled");

	UImageBasedReflectionComponent_SetEnabled_Params params {};
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SceneCapturePortalComponent.SetCaptureParameters
//		Flags  -> ()
// Parameters:
//		class UTextureRenderTarget2D*                      NewTextureTarget                                           (OptionalParm, Parm)
//		float                                              NewScaleFOV                                                (OptionalParm, Parm)
//		class AActor*                                      NewViewDest                                                (OptionalParm, Parm)
void USceneCapturePortalComponent::SetCaptureParameters(class UTextureRenderTarget2D* NewTextureTarget, float NewScaleFOV, class AActor* NewViewDest)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SceneCapturePortalComponent.SetCaptureParameters");

	USceneCapturePortalComponent_SetCaptureParameters_Params params {};
	params.NewTextureTarget = NewTextureTarget;
	params.NewScaleFOV = NewScaleFOV;
	params.NewViewDest = NewViewDest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ActorFactory.PostCreateActor
//		Flags  -> ()
// Parameters:
//		class AActor*                                      NewActor                                                   (Parm)
//		class USeqAct_ActorFactory*                        ActorFactoryData                                           (Const, OptionalParm, Parm)
void UActorFactory::PostCreateActor(class AActor* NewActor, class USeqAct_ActorFactory* ActorFactoryData)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ActorFactory.PostCreateActor");

	UActorFactory_PostCreateActor_Params params {};
	params.NewActor = NewActor;
	params.ActorFactoryData = ActorFactoryData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Surface.GetSurfaceHeight
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float USurface::GetSurfaceHeight()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Surface.GetSurfaceHeight");

	USurface_GetSurfaceHeight_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Surface.GetSurfaceWidth
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float USurface::GetSurfaceWidth()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Surface.GetSurfaceWidth");

	USurface_GetSurfaceWidth_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInterface.SetForceMipLevelsToBeResident
//		Flags  -> ()
// Parameters:
//		bool                                               OverrideForceMiplevelsToBeResident                         (Parm)
//		bool                                               bForceMiplevelsToBeResidentValue                           (Parm)
//		float                                              ForceDuration                                              (Parm)
//		int                                                CinematicTextureGroups                                     (OptionalParm, Parm)
void UMaterialInterface::SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.SetForceMipLevelsToBeResident");

	UMaterialInterface_SetForceMipLevelsToBeResident_Params params {};
	params.OverrideForceMiplevelsToBeResident = OverrideForceMiplevelsToBeResident;
	params.bForceMiplevelsToBeResidentValue = bForceMiplevelsToBeResidentValue;
	params.ForceDuration = ForceDuration;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInterface.GetMobileVectorParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FLinearColor                                OutValue                                                   (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMaterialInterface::GetMobileVectorParameterValue(const struct FName& ParameterName, struct FLinearColor* OutValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetMobileVectorParameterValue");

	UMaterialInterface_GetMobileVectorParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInterface.GetMobileTextureParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		class UTexture*                                    OutValue                                                   (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMaterialInterface::GetMobileTextureParameterValue(const struct FName& ParameterName, class UTexture** OutValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetMobileTextureParameterValue");

	UMaterialInterface_GetMobileTextureParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInterface.GetMobileScalarParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		float                                              OutValue                                                   (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMaterialInterface::GetMobileScalarParameterValue(const struct FName& ParameterName, float* OutValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetMobileScalarParameterValue");

	UMaterialInterface_GetMobileScalarParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInterface.GetTexAddressParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		unsigned char                                      TextureIndex                                               (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMaterialInterface::GetTexAddressParameterValue(const struct FName& ParameterName, unsigned char* TextureIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetTexAddressParameterValue");

	UMaterialInterface_GetTexAddressParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (TextureIndex != nullptr)
		*TextureIndex = params.TextureIndex;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInterface.GetGroupName
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FName                                       GroupName                                                  (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMaterialInterface::GetGroupName(const struct FName& ParameterName, struct FName* GroupName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetGroupName");

	UMaterialInterface_GetGroupName_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (GroupName != nullptr)
		*GroupName = params.GroupName;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInterface.GetLinearColorCurveParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FInterpCurveLinearColor                     OutValue                                                   (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMaterialInterface::GetLinearColorCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveLinearColor* OutValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetLinearColorCurveParameterValue");

	UMaterialInterface_GetLinearColorCurveParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInterface.GetLinearColorParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FLinearColor                                OutValue                                                   (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMaterialInterface::GetLinearColorParameterValue(const struct FName& ParameterName, struct FLinearColor* OutValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetLinearColorParameterValue");

	UMaterialInterface_GetLinearColorParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInterface.GetVectorCurveParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FInterpCurveVector                          OutValue                                                   (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMaterialInterface::GetVectorCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveVector* OutValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetVectorCurveParameterValue");

	UMaterialInterface_GetVectorCurveParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInterface.GetVectorParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FLinearColor                                OutValue                                                   (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMaterialInterface::GetVectorParameterValue(const struct FName& ParameterName, struct FLinearColor* OutValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetVectorParameterValue");

	UMaterialInterface_GetVectorParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInterface.GetTextureParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		class UTexture*                                    OutValue                                                   (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMaterialInterface::GetTextureParameterValue(const struct FName& ParameterName, class UTexture** OutValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetTextureParameterValue");

	UMaterialInterface_GetTextureParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInterface.GetScalarCurveParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FInterpCurveFloat                           OutValue                                                   (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMaterialInterface::GetScalarCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveFloat* OutValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetScalarCurveParameterValue");

	UMaterialInterface_GetScalarCurveParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInterface.GetScalarParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		float                                              OutValue                                                   (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMaterialInterface::GetScalarParameterValue(const struct FName& ParameterName, float* OutValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetScalarParameterValue");

	UMaterialInterface_GetScalarParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInterface.GetFontParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		class UFont*                                       OutFontValue                                               (Parm, OutParm)
//		int                                                OutFontPage                                                (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMaterialInterface::GetFontParameterValue(const struct FName& ParameterName, class UFont** OutFontValue, int* OutFontPage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetFontParameterValue");

	UMaterialInterface_GetFontParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutFontValue != nullptr)
		*OutFontValue = params.OutFontValue;
	if (OutFontPage != nullptr)
		*OutFontPage = params.OutFontPage;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInterface.GetParameterDesc
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FString                                     OutDesc                                                    (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMaterialInterface::GetParameterDesc(const struct FName& ParameterName, struct FString* OutDesc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetParameterDesc");

	UMaterialInterface_GetParameterDesc_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutDesc != nullptr)
		*OutDesc = params.OutDesc;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInterface.GetPhysicalMaterial
//		Flags  -> ()
// Parameters:
//		class UPhysicalMaterial*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class UPhysicalMaterial* UMaterialInterface::GetPhysicalMaterial()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetPhysicalMaterial");

	UMaterialInterface_GetPhysicalMaterial_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInterface.GetMaterial
//		Flags  -> ()
// Parameters:
//		class UMaterial*                                   ReturnValue                                                (Parm, OutParm, ReturnParm)
class UMaterial* UMaterialInterface::GetMaterial()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetMaterial");

	UMaterialInterface_GetMaterial_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstance.IsInMapOrTransientPackage
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMaterialInstance::IsInMapOrTransientPackage()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.IsInMapOrTransientPackage");

	UMaterialInstance_IsInMapOrTransientPackage_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstance.ClearParameterValues
//		Flags  -> ()
// Parameters:
//		bool                                               bOnlyClearTextures                                         (OptionalParm, Parm)
void UMaterialInstance::ClearParameterValues(bool bOnlyClearTextures)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.ClearParameterValues");

	UMaterialInstance_ClearParameterValues_Params params {};
	params.bOnlyClearTextures = bOnlyClearTextures;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstance.SetTexAddressParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		unsigned char                                      TextureIndex                                               (Parm)
//		unsigned char                                      AddressX                                                   (Parm)
//		unsigned char                                      AddressY                                                   (Parm)
void UMaterialInstance::SetTexAddressParameterValue(const struct FName& ParameterName, unsigned char TextureIndex, unsigned char AddressX, unsigned char AddressY)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetTexAddressParameterValue");

	UMaterialInstance_SetTexAddressParameterValue_Params params {};
	params.ParameterName = ParameterName;
	params.TextureIndex = TextureIndex;
	params.AddressX = AddressX;
	params.AddressY = AddressY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstance.SetFontParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		class UFont*                                       FontValue                                                  (Parm)
//		int                                                FontPage                                                   (Parm)
void UMaterialInstance::SetFontParameterValue(const struct FName& ParameterName, class UFont* FontValue, int FontPage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetFontParameterValue");

	UMaterialInstance_SetFontParameterValue_Params params {};
	params.ParameterName = ParameterName;
	params.FontValue = FontValue;
	params.FontPage = FontPage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstance.GetTextureParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		class UTexture*                                    Value                                                      (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMaterialInstance::GetTextureParameterValue(const struct FName& ParameterName, class UTexture** Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.GetTextureParameterValue");

	UMaterialInstance_GetTextureParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstance.SetTextureParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		class UTexture*                                    Value                                                      (Parm)
void UMaterialInstance::SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetTextureParameterValue");

	UMaterialInstance_SetTextureParameterValue_Params params {};
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstance.SetScalarCurveParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FInterpCurveFloat                           Value                                                      (Const, Parm, OutParm, NeedCtorLink)
void UMaterialInstance::SetScalarCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveFloat* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetScalarCurveParameterValue");

	UMaterialInstance_SetScalarCurveParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstance.SetScalarParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		float                                              Value                                                      (Parm)
void UMaterialInstance::SetScalarParameterValue(const struct FName& ParameterName, float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetScalarParameterValue");

	UMaterialInstance_SetScalarParameterValue_Params params {};
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstance.SetVectorParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FLinearColor                                Value                                                      (Const, Parm, OutParm)
void UMaterialInstance::SetVectorParameterValue(const struct FName& ParameterName, struct FLinearColor* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetVectorParameterValue");

	UMaterialInstance_SetVectorParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstance.SetParent
//		Flags  -> ()
// Parameters:
//		class UMaterialInterface*                          NewParent                                                  (Parm)
void UMaterialInstance::SetParent(class UMaterialInterface* NewParent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetParent");

	UMaterialInstance_SetParent_Params params {};
	params.NewParent = NewParent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceConstant.ClearParameterValues
//		Flags  -> ()
// Parameters:
//		bool                                               bOnlyClearTextures                                         (OptionalParm, Parm)
void UMaterialInstanceConstant::ClearParameterValues(bool bOnlyClearTextures)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.ClearParameterValues");

	UMaterialInstanceConstant_ClearParameterValues_Params params {};
	params.bOnlyClearTextures = bOnlyClearTextures;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceConstant.SetTexAddressParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		unsigned char                                      TextureIndex                                               (Parm)
//		unsigned char                                      AddressX                                                   (Parm)
//		unsigned char                                      AddressY                                                   (Parm)
void UMaterialInstanceConstant::SetTexAddressParameterValue(const struct FName& ParameterName, unsigned char TextureIndex, unsigned char AddressX, unsigned char AddressY)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.SetTexAddressParameterValue");

	UMaterialInstanceConstant_SetTexAddressParameterValue_Params params {};
	params.ParameterName = ParameterName;
	params.TextureIndex = TextureIndex;
	params.AddressX = AddressX;
	params.AddressY = AddressY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceConstant.GetMobileVectorParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FLinearColor                                OutValue                                                   (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMaterialInstanceConstant::GetMobileVectorParameterValue(const struct FName& ParameterName, struct FLinearColor* OutValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.GetMobileVectorParameterValue");

	UMaterialInstanceConstant_GetMobileVectorParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceConstant.GetMobileTextureParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		class UTexture*                                    OutValue                                                   (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMaterialInstanceConstant::GetMobileTextureParameterValue(const struct FName& ParameterName, class UTexture** OutValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.GetMobileTextureParameterValue");

	UMaterialInstanceConstant_GetMobileTextureParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceConstant.GetMobileScalarParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		float                                              OutValue                                                   (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMaterialInstanceConstant::GetMobileScalarParameterValue(const struct FName& ParameterName, float* OutValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.GetMobileScalarParameterValue");

	UMaterialInstanceConstant_GetMobileScalarParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceConstant.SetFontParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		class UFont*                                       FontValue                                                  (Parm)
//		int                                                FontPage                                                   (Parm)
void UMaterialInstanceConstant::SetFontParameterValue(const struct FName& ParameterName, class UFont* FontValue, int FontPage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.SetFontParameterValue");

	UMaterialInstanceConstant_SetFontParameterValue_Params params {};
	params.ParameterName = ParameterName;
	params.FontValue = FontValue;
	params.FontPage = FontPage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceConstant.SetVectorParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FLinearColor                                Value                                                      (Const, Parm, OutParm)
void UMaterialInstanceConstant::SetVectorParameterValue(const struct FName& ParameterName, struct FLinearColor* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.SetVectorParameterValue");

	UMaterialInstanceConstant_SetVectorParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceConstant.SetTextureParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		class UTexture*                                    Value                                                      (Parm)
void UMaterialInstanceConstant::SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.SetTextureParameterValue");

	UMaterialInstanceConstant_SetTextureParameterValue_Params params {};
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceConstant.SetScalarParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		float                                              Value                                                      (Parm)
void UMaterialInstanceConstant::SetScalarParameterValue(const struct FName& ParameterName, float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.SetScalarParameterValue");

	UMaterialInstanceConstant_SetScalarParameterValue_Params params {};
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceConstant.SetParent
//		Flags  -> ()
// Parameters:
//		class UMaterialInterface*                          NewParent                                                  (Parm)
void UMaterialInstanceConstant::SetParent(class UMaterialInterface* NewParent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.SetParent");

	UMaterialInstanceConstant_SetParent_Params params {};
	params.NewParent = NewParent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_CameraFade.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_CameraFade::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_CameraFade.GetObjClassVersion");

	USeqAct_CameraFade_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_CameraLookAt.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_CameraLookAt::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_CameraLookAt.GetObjClassVersion");

	USeqAct_CameraLookAt_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_CameraShake.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_CameraShake::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_CameraShake.GetObjClassVersion");

	USeqAct_CameraShake_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_ChangeCollision.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_ChangeCollision::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ChangeCollision.GetObjClassVersion");

	USeqAct_ChangeCollision_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_ConvertToString.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_ConvertToString::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ConvertToString.GetObjClassVersion");

	USeqAct_ConvertToString_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore.GetDataStoreClient
//		Flags  -> ()
// Parameters:
//		class UDataStoreClient*                            ReturnValue                                                (Parm, OutParm, ReturnParm)
class UDataStoreClient* UUIDataStore::GetDataStoreClient()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.GetDataStoreClient");

	UUIDataStore_GetDataStoreClient_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore.RefreshSubscribers
//		Flags  -> ()
// Parameters:
//		struct FName                                       PropertyTag                                                (OptionalParm, Parm)
//		bool                                               bInvalidateValues                                          (OptionalParm, Parm)
//		class UUIDataProvider*                             SourceProvider                                             (OptionalParm, Parm)
//		int                                                ArrayIndex                                                 (OptionalParm, Parm)
void UUIDataStore::RefreshSubscribers(const struct FName& PropertyTag, bool bInvalidateValues, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.RefreshSubscribers");

	UUIDataStore_RefreshSubscribers_Params params {};
	params.PropertyTag = PropertyTag;
	params.bInvalidateValues = bInvalidateValues;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore.NotifyGameSessionEnded
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataStore::NotifyGameSessionEnded()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.NotifyGameSessionEnded");

	UUIDataStore_NotifyGameSessionEnded_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore.SubscriberDetached
//		Flags  -> ()
// Parameters:
void UUIDataStore::SubscriberDetached()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.SubscriberDetached");

	UUIDataStore_SubscriberDetached_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore.SubscriberAttached
//		Flags  -> ()
// Parameters:
void UUIDataStore::SubscriberAttached()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.SubscriberAttached");

	UUIDataStore_SubscriberAttached_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore.Unregistered
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                PlayerOwner                                                (Parm)
void UUIDataStore::Unregistered(class ULocalPlayer* PlayerOwner)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.Unregistered");

	UUIDataStore_Unregistered_Params params {};
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore.Registered
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                PlayerOwner                                                (Parm)
void UUIDataStore::Registered(class ULocalPlayer* PlayerOwner)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.Registered");

	UUIDataStore_Registered_Params params {};
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore.OnDataStoreValueUpdated
//		Flags  -> ()
// Parameters:
//		class UUIDataStore*                                SourceDataStore                                            (Parm)
//		bool                                               bValuesInvalidated                                         (Parm)
//		struct FName                                       PropertyTag                                                (Parm)
//		class UUIDataProvider*                             SourceProvider                                             (Parm)
//		int                                                ArrayIndex                                                 (Parm)
void UUIDataStore::OnDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.OnDataStoreValueUpdated");

	UUIDataStore_OnDataStoreValueUpdated_Params params {};
	params.SourceDataStore = SourceDataStore;
	params.bValuesInvalidated = bValuesInvalidated;
	params.PropertyTag = PropertyTag;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSearch.ClearAllSearchResults
//		Flags  -> ()
// Parameters:
void UUIDataStore_OnlineGameSearch::ClearAllSearchResults()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.ClearAllSearchResults");

	UUIDataStore_OnlineGameSearch_ClearAllSearchResults_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSearch.MoveToPrevious
//		Flags  -> ()
// Parameters:
//		bool                                               bInvalidateExistingSearchResults                           (OptionalParm, Parm)
void UUIDataStore_OnlineGameSearch::MoveToPrevious(bool bInvalidateExistingSearchResults)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.MoveToPrevious");

	UUIDataStore_OnlineGameSearch_MoveToPrevious_Params params {};
	params.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSearch.MoveToNext
//		Flags  -> ()
// Parameters:
//		bool                                               bInvalidateExistingSearchResults                           (OptionalParm, Parm)
void UUIDataStore_OnlineGameSearch::MoveToNext(bool bInvalidateExistingSearchResults)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.MoveToNext");

	UUIDataStore_OnlineGameSearch_MoveToNext_Params params {};
	params.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByName
//		Flags  -> ()
// Parameters:
//		struct FName                                       SearchName                                                 (Parm)
//		bool                                               bInvalidateExistingSearchResults                           (OptionalParm, Parm)
void UUIDataStore_OnlineGameSearch::SetCurrentByName(const struct FName& SearchName, bool bInvalidateExistingSearchResults)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByName");

	UUIDataStore_OnlineGameSearch_SetCurrentByName_Params params {};
	params.SearchName = SearchName;
	params.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByIndex
//		Flags  -> ()
// Parameters:
//		int                                                NewIndex                                                   (Parm)
//		bool                                               bInvalidateExistingSearchResults                           (OptionalParm, Parm)
void UUIDataStore_OnlineGameSearch::SetCurrentByIndex(int NewIndex, bool bInvalidateExistingSearchResults)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByIndex");

	UUIDataStore_OnlineGameSearch_SetCurrentByIndex_Params params {};
	params.NewIndex = NewIndex;
	params.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSearch.FindSearchConfigurationIndex
//		Flags  -> ()
// Parameters:
//		struct FName                                       SearchTag                                                  (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UUIDataStore_OnlineGameSearch::FindSearchConfigurationIndex(const struct FName& SearchTag)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.FindSearchConfigurationIndex");

	UUIDataStore_OnlineGameSearch_FindSearchConfigurationIndex_Params params {};
	params.SearchTag = SearchTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSearch.GetActiveGameSearch
//		Flags  -> ()
// Parameters:
//		class UOnlineGameSearch*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class UOnlineGameSearch* UUIDataStore_OnlineGameSearch::GetActiveGameSearch()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.GetActiveGameSearch");

	UUIDataStore_OnlineGameSearch_GetActiveGameSearch_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSearch.GetCurrentGameSearch
//		Flags  -> ()
// Parameters:
//		class UOnlineGameSearch*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class UOnlineGameSearch* UUIDataStore_OnlineGameSearch::GetCurrentGameSearch()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.GetCurrentGameSearch");

	UUIDataStore_OnlineGameSearch_GetCurrentGameSearch_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSearch.ShowHostGamercard
//		Flags  -> ()
// Parameters:
//		unsigned char                                      ControllerIndex                                            (Parm)
//		int                                                ListIndex                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataStore_OnlineGameSearch::ShowHostGamercard(unsigned char ControllerIndex, int ListIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.ShowHostGamercard");

	UUIDataStore_OnlineGameSearch_ShowHostGamercard_Params params {};
	params.ControllerIndex = ControllerIndex;
	params.ListIndex = ListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSearch.GetSearchResultFromIndex
//		Flags  -> ()
// Parameters:
//		int                                                ListIndex                                                  (Parm)
//		struct FOnlineGameSearchResult                     Result                                                     (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataStore_OnlineGameSearch::GetSearchResultFromIndex(int ListIndex, struct FOnlineGameSearchResult* Result)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.GetSearchResultFromIndex");

	UUIDataStore_OnlineGameSearch_GetSearchResultFromIndex_Params params {};
	params.ListIndex = ListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSearch.OnSearchComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UUIDataStore_OnlineGameSearch::OnSearchComplete(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.OnSearchComplete");

	UUIDataStore_OnlineGameSearch_OnSearchComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSearch.OverrideQuerySubmission
//		Flags  -> ()
// Parameters:
//		unsigned char                                      ControllerId                                               (Parm)
//		class UOnlineGameSearch*                           Search                                                     (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataStore_OnlineGameSearch::OverrideQuerySubmission(unsigned char ControllerId, class UOnlineGameSearch* Search)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.OverrideQuerySubmission");

	UUIDataStore_OnlineGameSearch_OverrideQuerySubmission_Params params {};
	params.ControllerId = ControllerId;
	params.Search = Search;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSearch.SubmitGameSearch
//		Flags  -> ()
// Parameters:
//		unsigned char                                      ControllerIndex                                            (Parm)
//		bool                                               bInvalidateExistingSearchResults                           (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataStore_OnlineGameSearch::SubmitGameSearch(unsigned char ControllerIndex, bool bInvalidateExistingSearchResults)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.SubmitGameSearch");

	UUIDataStore_OnlineGameSearch_SubmitGameSearch_Params params {};
	params.ControllerIndex = ControllerIndex;
	params.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSearch.InvalidateCurrentSearchResults
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataStore_OnlineGameSearch::InvalidateCurrentSearchResults()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.InvalidateCurrentSearchResults");

	UUIDataStore_OnlineGameSearch_InvalidateCurrentSearchResults_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSearch.Init
//		Flags  -> ()
void UUIDataStore_OnlineGameSearch::Init()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.Init");

	UUIDataStore_OnlineGameSearch_Init_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlinePlayerData.GetCachedPlayerStorage
//		Flags  -> ()
// Parameters:
//		int                                                ControllerId                                               (Parm)
//		class UOnlinePlayerStorage*                        ReturnValue                                                (Parm, OutParm, ReturnParm)
class UOnlinePlayerStorage* UUIDataStore_OnlinePlayerData::GetCachedPlayerStorage(int ControllerId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.GetCachedPlayerStorage");

	UUIDataStore_OnlinePlayerData_GetCachedPlayerStorage_Params params {};
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlinePlayerData.GetCachedPlayerProfile
//		Flags  -> ()
// Parameters:
//		int                                                ControllerId                                               (Parm)
//		class UOnlineProfileSettings*                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class UOnlineProfileSettings* UUIDataStore_OnlinePlayerData::GetCachedPlayerProfile(int ControllerId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.GetCachedPlayerProfile");

	UUIDataStore_OnlinePlayerData_GetCachedPlayerProfile_Params params {};
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlinePlayerData.ClearDelegates
//		Flags  -> ()
void UUIDataStore_OnlinePlayerData::ClearDelegates()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.ClearDelegates");

	UUIDataStore_OnlinePlayerData_ClearDelegates_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlinePlayerData.RegisterDelegates
//		Flags  -> ()
void UUIDataStore_OnlinePlayerData::RegisterDelegates()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.RegisterDelegates");

	UUIDataStore_OnlinePlayerData_RegisterDelegates_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlinePlayerData.OnPlayerDataChange
//		Flags  -> ()
void UUIDataStore_OnlinePlayerData::OnPlayerDataChange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.OnPlayerDataChange");

	UUIDataStore_OnlinePlayerData_OnPlayerDataChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlinePlayerData.OnLoginChange
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
void UUIDataStore_OnlinePlayerData::OnLoginChange(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.OnLoginChange");

	UUIDataStore_OnlinePlayerData_OnLoginChange_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlinePlayerData.OnUnregister
//		Flags  -> ()
// Parameters:
void UUIDataStore_OnlinePlayerData::OnUnregister()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.OnUnregister");

	UUIDataStore_OnlinePlayerData_OnUnregister_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlinePlayerData.OnRegister
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                InPlayer                                                   (Parm)
void UUIDataStore_OnlinePlayerData::OnRegister(class ULocalPlayer* InPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.OnRegister");

	UUIDataStore_OnlinePlayerData_OnRegister_Params params {};
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineStats.SortResultsByRank
//		Flags  -> ()
// Parameters:
//		class UOnlineStatsRead*                            StatsToSort                                                (Parm)
void UUIDataStore_OnlineStats::SortResultsByRank(class UOnlineStatsRead* StatsToSort)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.SortResultsByRank");

	UUIDataStore_OnlineStats_SortResultsByRank_Params params {};
	params.StatsToSort = StatsToSort;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineStats.OnReadComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UUIDataStore_OnlineStats::OnReadComplete(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.OnReadComplete");

	UUIDataStore_OnlineStats_OnReadComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineStats.ShowGamercard
//		Flags  -> (Singular, Net, NetReliable, Simulated, Exec, Static, HasOptionalParms, Const, Public, HasDefaults, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		unsigned char                                      ConrollerIndex                                             (Parm)
//		int                                                ListIndex                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataStore_OnlineStats::STATIC_ShowGamercard(unsigned char ConrollerIndex, int ListIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.ShowGamercard");

	UUIDataStore_OnlineStats_ShowGamercard_Params params {};
	params.ConrollerIndex = ConrollerIndex;
	params.ListIndex = ListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineStats.RefreshStats
//		Flags  -> (Net, NetReliable, Simulated, Native, Static, HasOptionalParms, Const, Public, HasDefaults, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		unsigned char                                      ControllerIndex                                            (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataStore_OnlineStats::STATIC_RefreshStats(unsigned char ControllerIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.RefreshStats");

	UUIDataStore_OnlineStats_RefreshStats_Params params {};
	params.ControllerIndex = ControllerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineStats.SetStatsReadInfo
//		Flags  -> ()
void UUIDataStore_OnlineStats::SetStatsReadInfo()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.SetStatsReadInfo");

	UUIDataStore_OnlineStats_SetStatsReadInfo_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineStats.Init
//		Flags  -> ()
void UUIDataStore_OnlineStats::Init()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.Init");

	UUIDataStore_OnlineStats_Init_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSettings.Unregistered
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                PlayerOwner                                                (Parm)
void UUIDataStore_OnlineGameSettings::Unregistered(class ULocalPlayer* PlayerOwner)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.Unregistered");

	UUIDataStore_OnlineGameSettings_Unregistered_Params params {};
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSettings.Registered
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                PlayerOwner                                                (Parm)
void UUIDataStore_OnlineGameSettings::Registered(class ULocalPlayer* PlayerOwner)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.Registered");

	UUIDataStore_OnlineGameSettings_Registered_Params params {};
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSettings.MoveToPrevious
//		Flags  -> ()
void UUIDataStore_OnlineGameSettings::MoveToPrevious()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.MoveToPrevious");

	UUIDataStore_OnlineGameSettings_MoveToPrevious_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSettings.MoveToNext
//		Flags  -> ()
void UUIDataStore_OnlineGameSettings::MoveToNext()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.MoveToNext");

	UUIDataStore_OnlineGameSettings_MoveToNext_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByName
//		Flags  -> ()
// Parameters:
//		struct FName                                       SettingsName                                               (Parm)
void UUIDataStore_OnlineGameSettings::SetCurrentByName(const struct FName& SettingsName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByName");

	UUIDataStore_OnlineGameSettings_SetCurrentByName_Params params {};
	params.SettingsName = SettingsName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByIndex
//		Flags  -> ()
// Parameters:
//		int                                                NewIndex                                                   (Parm)
void UUIDataStore_OnlineGameSettings::SetCurrentByIndex(int NewIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByIndex");

	UUIDataStore_OnlineGameSettings_SetCurrentByIndex_Params params {};
	params.NewIndex = NewIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSettings.GetCurrentProvider
//		Flags  -> ()
// Parameters:
//		class UUIDataProvider_Settings*                    ReturnValue                                                (Parm, OutParm, ReturnParm)
class UUIDataProvider_Settings* UUIDataStore_OnlineGameSettings::GetCurrentProvider()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.GetCurrentProvider");

	UUIDataStore_OnlineGameSettings_GetCurrentProvider_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSettings.GetCurrentGameSettings
//		Flags  -> ()
// Parameters:
//		class UOnlineGameSettings*                         ReturnValue                                                (Parm, OutParm, ReturnParm)
class UOnlineGameSettings* UUIDataStore_OnlineGameSettings::GetCurrentGameSettings()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.GetCurrentGameSettings");

	UUIDataStore_OnlineGameSettings_GetCurrentGameSettings_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_OnlineGameSettings.CreateGame
//		Flags  -> ()
// Parameters:
//		unsigned char                                      ControllerIndex                                            (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataStore_OnlineGameSettings::CreateGame(unsigned char ControllerIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.CreateGame");

	UUIDataStore_OnlineGameSettings_CreateGame_Params params {};
	params.ControllerIndex = ControllerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_InputAlias.HasAliasMappingForPlatform
//		Flags  -> ()
// Parameters:
//		struct FName                                       DesiredAlias                                               (Parm)
//		TEnumAsByte<Engine_EInputPlatformType>             DesiredPlatform                                            (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataStore_InputAlias::HasAliasMappingForPlatform(const struct FName& DesiredAlias, TEnumAsByte<Engine_EInputPlatformType> DesiredPlatform)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.HasAliasMappingForPlatform");

	UUIDataStore_InputAlias_HasAliasMappingForPlatform_Params params {};
	params.DesiredAlias = DesiredAlias;
	params.DesiredPlatform = DesiredPlatform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_InputAlias.FindInputAliasIndex
//		Flags  -> ()
// Parameters:
//		struct FName                                       DesiredAlias                                               (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UUIDataStore_InputAlias::FindInputAliasIndex(const struct FName& DesiredAlias)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.FindInputAliasIndex");

	UUIDataStore_InputAlias_FindInputAliasIndex_Params params {};
	params.DesiredAlias = DesiredAlias;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_InputAlias.GetAliasInputKeyDataByIndex
//		Flags  -> ()
// Parameters:
//		struct FRawInputKeyEventData                       out_InputKeyData                                           (Parm, OutParm)
//		int                                                AliasIndex                                                 (Parm)
//		TEnumAsByte<Engine_EInputPlatformType>             OverridePlatform                                           (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataStore_InputAlias::GetAliasInputKeyDataByIndex(struct FRawInputKeyEventData* out_InputKeyData, int AliasIndex, TEnumAsByte<Engine_EInputPlatformType> OverridePlatform)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.GetAliasInputKeyDataByIndex");

	UUIDataStore_InputAlias_GetAliasInputKeyDataByIndex_Params params {};
	params.AliasIndex = AliasIndex;
	params.OverridePlatform = OverridePlatform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_InputKeyData != nullptr)
		*out_InputKeyData = params.out_InputKeyData;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_InputAlias.GetAliasInputKeyData
//		Flags  -> ()
// Parameters:
//		struct FRawInputKeyEventData                       out_InputKeyData                                           (Parm, OutParm)
//		struct FName                                       DesiredAlias                                               (Parm)
//		TEnumAsByte<Engine_EInputPlatformType>             OverridePlatform                                           (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataStore_InputAlias::GetAliasInputKeyData(struct FRawInputKeyEventData* out_InputKeyData, const struct FName& DesiredAlias, TEnumAsByte<Engine_EInputPlatformType> OverridePlatform)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.GetAliasInputKeyData");

	UUIDataStore_InputAlias_GetAliasInputKeyData_Params params {};
	params.DesiredAlias = DesiredAlias;
	params.OverridePlatform = OverridePlatform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_InputKeyData != nullptr)
		*out_InputKeyData = params.out_InputKeyData;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_InputAlias.GetAliasInputKeyNameByIndex
//		Flags  -> ()
// Parameters:
//		int                                                AliasIndex                                                 (Parm)
//		TEnumAsByte<Engine_EInputPlatformType>             OverridePlatform                                           (OptionalParm, Parm)
//		struct FName                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FName UUIDataStore_InputAlias::GetAliasInputKeyNameByIndex(int AliasIndex, TEnumAsByte<Engine_EInputPlatformType> OverridePlatform)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.GetAliasInputKeyNameByIndex");

	UUIDataStore_InputAlias_GetAliasInputKeyNameByIndex_Params params {};
	params.AliasIndex = AliasIndex;
	params.OverridePlatform = OverridePlatform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_InputAlias.GetAliasInputKeyName
//		Flags  -> ()
// Parameters:
//		struct FName                                       DesiredAlias                                               (Parm)
//		TEnumAsByte<Engine_EInputPlatformType>             OverridePlatform                                           (OptionalParm, Parm)
//		struct FName                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FName UUIDataStore_InputAlias::GetAliasInputKeyName(const struct FName& DesiredAlias, TEnumAsByte<Engine_EInputPlatformType> OverridePlatform)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.GetAliasInputKeyName");

	UUIDataStore_InputAlias_GetAliasInputKeyName_Params params {};
	params.DesiredAlias = DesiredAlias;
	params.OverridePlatform = OverridePlatform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_InputAlias.GetAliasFontMarkupByIndex
//		Flags  -> ()
// Parameters:
//		int                                                AliasIndex                                                 (Parm)
//		TEnumAsByte<Engine_EInputPlatformType>             OverridePlatform                                           (OptionalParm, Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UUIDataStore_InputAlias::GetAliasFontMarkupByIndex(int AliasIndex, TEnumAsByte<Engine_EInputPlatformType> OverridePlatform)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.GetAliasFontMarkupByIndex");

	UUIDataStore_InputAlias_GetAliasFontMarkupByIndex_Params params {};
	params.AliasIndex = AliasIndex;
	params.OverridePlatform = OverridePlatform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_InputAlias.GetAliasFontMarkup
//		Flags  -> ()
// Parameters:
//		struct FName                                       DesiredAlias                                               (Parm)
//		TEnumAsByte<Engine_EInputPlatformType>             OverridePlatform                                           (OptionalParm, Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UUIDataStore_InputAlias::GetAliasFontMarkup(const struct FName& DesiredAlias, TEnumAsByte<Engine_EInputPlatformType> OverridePlatform)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.GetAliasFontMarkup");

	UUIDataStore_InputAlias_GetAliasFontMarkup_Params params {};
	params.DesiredAlias = DesiredAlias;
	params.OverridePlatform = OverridePlatform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_StringAliasMap.GetStringWithFieldName
//		Flags  -> ()
// Parameters:
//		struct FString                                     FieldName                                                  (Parm, NeedCtorLink)
//		struct FString                                     MappedString                                               (Parm, OutParm, NeedCtorLink)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UUIDataStore_StringAliasMap::GetStringWithFieldName(const struct FString& FieldName, struct FString* MappedString)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_StringAliasMap.GetStringWithFieldName");

	UUIDataStore_StringAliasMap_GetStringWithFieldName_Params params {};
	params.FieldName = FieldName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (MappedString != nullptr)
		*MappedString = params.MappedString;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_StringAliasMap.FindMappingWithFieldName
//		Flags  -> ()
// Parameters:
//		struct FString                                     FieldName                                                  (OptionalParm, Parm, NeedCtorLink)
//		struct FString                                     SetName                                                    (OptionalParm, Parm, NeedCtorLink)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UUIDataStore_StringAliasMap::FindMappingWithFieldName(const struct FString& FieldName, const struct FString& SetName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_StringAliasMap.FindMappingWithFieldName");

	UUIDataStore_StringAliasMap_FindMappingWithFieldName_Params params {};
	params.FieldName = FieldName;
	params.SetName = SetName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_StringAliasMap.GetPlayerOwner
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                ReturnValue                                                (Parm, OutParm, ReturnParm)
class ULocalPlayer* UUIDataStore_StringAliasMap::GetPlayerOwner()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_StringAliasMap.GetPlayerOwner");

	UUIDataStore_StringAliasMap_GetPlayerOwner_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIResourceCombinationProvider.ClearProviderReferences
//		Flags  -> ()
void UUIResourceCombinationProvider::ClearProviderReferences()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIResourceCombinationProvider.ClearProviderReferences");

	UUIResourceCombinationProvider_ClearProviderReferences_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIResourceCombinationProvider.InitializeProvider
//		Flags  -> ()
// Parameters:
//		bool                                               bIsEditor                                                  (Parm)
//		class UUIResourceDataProvider*                     InStaticResourceProvider                                   (Parm)
//		class UUIDataProvider_OnlineProfileSettings*       InProfileProvider                                          (Parm)
void UUIResourceCombinationProvider::InitializeProvider(bool bIsEditor, class UUIResourceDataProvider* InStaticResourceProvider, class UUIDataProvider_OnlineProfileSettings* InProfileProvider)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIResourceCombinationProvider.InitializeProvider");

	UUIResourceCombinationProvider_InitializeProvider_Params params {};
	params.bIsEditor = bIsEditor;
	params.InStaticResourceProvider = InStaticResourceProvider;
	params.InProfileProvider = InProfileProvider;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UISceneClient.InitializeSceneClient
//		Flags  -> ()
void UUISceneClient::InitializeSceneClient()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.InitializeSceneClient");

	UUISceneClient_InitializeSceneClient_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UISceneClient.GetInverseCanvasToScreen
//		Flags  -> ()
// Parameters:
//		struct FMatrix                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FMatrix UUISceneClient::GetInverseCanvasToScreen()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.GetInverseCanvasToScreen");

	UUISceneClient_GetInverseCanvasToScreen_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UISceneClient.GetCanvasToScreen
//		Flags  -> ()
// Parameters:
//		struct FMatrix                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FMatrix UUISceneClient::GetCanvasToScreen()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.GetCanvasToScreen");

	UUISceneClient_GetCanvasToScreen_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UISceneClient.IsUIActive
//		Flags  -> ()
// Parameters:
//		int                                                Flags                                                      (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUISceneClient::IsUIActive(int Flags)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.IsUIActive");

	UUISceneClient_IsUIActive_Params params {};
	params.Flags = Flags;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameUISceneClient.FindLocalPlayerIndex
//		Flags  -> ()
// Parameters:
//		class UPlayer*                                     P                                                          (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UGameUISceneClient::FindLocalPlayerIndex(class UPlayer* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.FindLocalPlayerIndex");

	UGameUISceneClient_FindLocalPlayerIndex_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameUISceneClient.NotifyPlayerRemoved
//		Flags  -> ()
// Parameters:
//		int                                                PlayerIndex                                                (Parm)
//		class ULocalPlayer*                                RemovedPlayer                                              (Parm)
void UGameUISceneClient::NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.NotifyPlayerRemoved");

	UGameUISceneClient_NotifyPlayerRemoved_Params params {};
	params.PlayerIndex = PlayerIndex;
	params.RemovedPlayer = RemovedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameUISceneClient.NotifyPlayerAdded
//		Flags  -> ()
// Parameters:
//		int                                                PlayerIndex                                                (Parm)
//		class ULocalPlayer*                                AddedPlayer                                                (Parm)
void UGameUISceneClient::NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.NotifyPlayerAdded");

	UGameUISceneClient_NotifyPlayerAdded_Params params {};
	params.PlayerIndex = PlayerIndex;
	params.AddedPlayer = AddedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameUISceneClient.NotifyGameSessionEnded
//		Flags  -> ()
void UGameUISceneClient::NotifyGameSessionEnded()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.NotifyGameSessionEnded");

	UGameUISceneClient_NotifyGameSessionEnded_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameUISceneClient.NotifyClientTravel
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           TravellingPlayer                                           (Parm)
//		struct FString                                     TravelURL                                                  (Parm, NeedCtorLink)
//		TEnumAsByte<Engine_ETravelType>                    TravelType                                                 (Parm)
//		bool                                               bIsSeamlessTravel                                          (Parm)
void UGameUISceneClient::NotifyClientTravel(class APlayerController* TravellingPlayer, const struct FString& TravelURL, TEnumAsByte<Engine_ETravelType> TravelType, bool bIsSeamlessTravel)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.NotifyClientTravel");

	UGameUISceneClient_NotifyClientTravel_Params params {};
	params.TravellingPlayer = TravellingPlayer;
	params.TravelURL = TravelURL;
	params.TravelType = TravelType;
	params.bIsSeamlessTravel = bIsSeamlessTravel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameUISceneClient.PauseGame
//		Flags  -> ()
// Parameters:
//		bool                                               bDesiredPauseState                                         (Parm)
//		int                                                PlayerIndex                                                (OptionalParm, Parm)
void UGameUISceneClient::PauseGame(bool bDesiredPauseState, int PlayerIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.PauseGame");

	UGameUISceneClient_PauseGame_Params params {};
	params.bDesiredPauseState = bDesiredPauseState;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameUISceneClient.CanUnpauseInternalUI
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameUISceneClient::CanUnpauseInternalUI()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.CanUnpauseInternalUI");

	UGameUISceneClient_CanUnpauseInternalUI_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameUISceneClient.RequestInputProcessingUpdate
//		Flags  -> ()
void UGameUISceneClient::RequestInputProcessingUpdate()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.RequestInputProcessingUpdate");

	UGameUISceneClient_RequestInputProcessingUpdate_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameUISceneClient.GetCurrentNetMode
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ENetMode>                       ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_ENetMode> UGameUISceneClient::GetCurrentNetMode()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.GetCurrentNetMode");

	UGameUISceneClient_GetCurrentNetMode_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InteractiveFoliageActor.Touch
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		class UPrimitiveComponent*                         OtherComp                                                  (Parm, EditInline)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     HitNormal                                                  (Parm)
void AInteractiveFoliageActor::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InteractiveFoliageActor.Touch");

	AInteractiveFoliageActor_Touch_Params params {};
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InteractiveFoliageActor.TakeDamage
//		Flags  -> ()
// Parameters:
//		int                                                Damage                                                     (Parm)
//		class AController*                                 EventInstigator                                            (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     Momentum                                                   (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (OptionalParm, Parm)
//		class AActor*                                      DamageCauser                                               (OptionalParm, Parm)
void AInteractiveFoliageActor::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InteractiveFoliageActor.TakeDamage");

	AInteractiveFoliageActor_TakeDamage_Params params {};
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FluidInfluenceActor.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void AFluidInfluenceActor::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FluidInfluenceActor.ReplicatedEvent");

	AFluidInfluenceActor_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FluidInfluenceActor.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              inAction                                                   (Parm)
void AFluidInfluenceActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FluidInfluenceActor.OnToggle");

	AFluidInfluenceActor_OnToggle_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FluidSurfaceActor.Touch
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		class UPrimitiveComponent*                         OtherComp                                                  (Parm, EditInline)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     HitNormal                                                  (Parm)
void AFluidSurfaceActor::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FluidSurfaceActor.Touch");

	AFluidSurfaceActor_Touch_Params params {};
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FluidSurfaceActor.TakeDamage
//		Flags  -> ()
// Parameters:
//		int                                                Damage                                                     (Parm)
//		class AController*                                 EventInstigator                                            (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     Momentum                                                   (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (OptionalParm, Parm)
//		class AActor*                                      DamageCauser                                               (OptionalParm, Parm)
void AFluidSurfaceActor::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FluidSurfaceActor.TakeDamage");

	AFluidSurfaceActor_TakeDamage_Params params {};
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FluidSurfaceComponent.SetSimulationPosition
//		Flags  -> ()
// Parameters:
//		struct FVector                                     WorldPos                                                   (Parm)
void UFluidSurfaceComponent::SetSimulationPosition(const struct FVector& WorldPos)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FluidSurfaceComponent.SetSimulationPosition");

	UFluidSurfaceComponent_SetSimulationPosition_Params params {};
	params.WorldPos = WorldPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FluidSurfaceComponent.SetDetailPosition
//		Flags  -> ()
// Parameters:
//		struct FVector                                     WorldPos                                                   (Parm)
void UFluidSurfaceComponent::SetDetailPosition(const struct FVector& WorldPos)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FluidSurfaceComponent.SetDetailPosition");

	UFluidSurfaceComponent_SetDetailPosition_Params params {};
	params.WorldPos = WorldPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FluidSurfaceComponent.ApplyForce
//		Flags  -> ()
// Parameters:
//		struct FVector                                     WorldPos                                                   (Parm)
//		float                                              Strength                                                   (Parm)
//		float                                              Radius                                                     (Parm)
//		bool                                               bImpulse                                                   (OptionalParm, Parm)
void UFluidSurfaceComponent::ApplyForce(const struct FVector& WorldPos, float Strength, float Radius, bool bImpulse)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FluidSurfaceComponent.ApplyForce");

	UFluidSurfaceComponent_ApplyForce_Params params {};
	params.WorldPos = WorldPos;
	params.Strength = Strength;
	params.Radius = Radius;
	params.bImpulse = bImpulse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SpeedTreeComponent.SetMaterial
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ESpeedTreeMeshType>             MeshType                                                   (Parm)
//		class UMaterialInterface*                          Material                                                   (Parm)
void USpeedTreeComponent::SetMaterial(TEnumAsByte<Engine_ESpeedTreeMeshType> MeshType, class UMaterialInterface* Material)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SpeedTreeComponent.SetMaterial");

	USpeedTreeComponent_SetMaterial_Params params {};
	params.MeshType = MeshType;
	params.Material = Material;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SpeedTreeComponent.GetMaterial
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ESpeedTreeMeshType>             MeshType                                                   (Parm)
//		class UMaterialInterface*                          ReturnValue                                                (Parm, OutParm, ReturnParm)
class UMaterialInterface* USpeedTreeComponent::GetMaterial(TEnumAsByte<Engine_ESpeedTreeMeshType> MeshType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SpeedTreeComponent.GetMaterial");

	USpeedTreeComponent_GetMaterial_Params params {};
	params.MeshType = MeshType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LensFlareSource.SetActorParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		class AActor*                                      Param                                                      (Parm)
void ALensFlareSource::SetActorParameter(const struct FName& ParameterName, class AActor* Param)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetActorParameter");

	ALensFlareSource_SetActorParameter_Params params {};
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LensFlareSource.SetExtColorParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		float                                              Red                                                        (Parm)
//		float                                              Green                                                      (Parm)
//		float                                              Blue                                                       (Parm)
//		float                                              Alpha                                                      (Parm)
void ALensFlareSource::SetExtColorParameter(const struct FName& ParameterName, float Red, float Green, float Blue, float Alpha)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetExtColorParameter");

	ALensFlareSource_SetExtColorParameter_Params params {};
	params.ParameterName = ParameterName;
	params.Red = Red;
	params.Green = Green;
	params.Blue = Blue;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LensFlareSource.SetColorParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FLinearColor                                Param                                                      (Parm)
void ALensFlareSource::SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetColorParameter");

	ALensFlareSource_SetColorParameter_Params params {};
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LensFlareSource.SetVectorParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FVector                                     Param                                                      (Parm)
void ALensFlareSource::SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetVectorParameter");

	ALensFlareSource_SetVectorParameter_Params params {};
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LensFlareSource.SetFloatParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		float                                              Param                                                      (Parm)
void ALensFlareSource::SetFloatParameter(const struct FName& ParameterName, float Param)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetFloatParameter");

	ALensFlareSource_SetFloatParameter_Params params {};
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LensFlareSource.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void ALensFlareSource::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.ReplicatedEvent");

	ALensFlareSource_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LensFlareSource.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void ALensFlareSource::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.OnToggle");

	ALensFlareSource_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LensFlareSource.PostBeginPlay
//		Flags  -> ()
void ALensFlareSource::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.PostBeginPlay");

	ALensFlareSource_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LensFlareSource.SetTemplate
//		Flags  -> ()
// Parameters:
//		class ULensFlare*                                  NewTemplate                                                (Parm)
void ALensFlareSource::SetTemplate(class ULensFlare* NewTemplate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetTemplate");

	ALensFlareSource_SetTemplate_Params params {};
	params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LensFlareComponent.CreateAndSetMaterialInstanceConstant
//		Flags  -> ()
// Parameters:
//		int                                                ElementIndex                                               (Parm)
//		class UMaterialInstanceConstant*                   ReturnValue                                                (Parm, OutParm, ReturnParm)
class UMaterialInstanceConstant* ULensFlareComponent::CreateAndSetMaterialInstanceConstant(int ElementIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LensFlareComponent.CreateAndSetMaterialInstanceConstant");

	ULensFlareComponent_CreateAndSetMaterialInstanceConstant_Params params {};
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LensFlareComponent.SetMaterial
//		Flags  -> ()
// Parameters:
//		int                                                ElementIndex                                               (Parm)
//		class UMaterialInterface*                          Material                                                   (Parm)
void ULensFlareComponent::SetMaterial(int ElementIndex, class UMaterialInterface* Material)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LensFlareComponent.SetMaterial");

	ULensFlareComponent_SetMaterial_Params params {};
	params.ElementIndex = ElementIndex;
	params.Material = Material;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LensFlareComponent.GetMaterial
//		Flags  -> ()
// Parameters:
//		int                                                ElementIndex                                               (Parm)
//		class UMaterialInterface*                          ReturnValue                                                (Parm, OutParm, ReturnParm)
class UMaterialInterface* ULensFlareComponent::GetMaterial(int ElementIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LensFlareComponent.GetMaterial");

	ULensFlareComponent_GetMaterial_Params params {};
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LensFlareComponent.SetIsActive
//		Flags  -> ()
// Parameters:
//		bool                                               bInIsActive                                                (Parm)
void ULensFlareComponent::SetIsActive(bool bInIsActive)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LensFlareComponent.SetIsActive");

	ULensFlareComponent_SetIsActive_Params params {};
	params.bInIsActive = bInIsActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LensFlareComponent.SetSourceColor
//		Flags  -> ()
// Parameters:
//		struct FLinearColor                                InSourceColor                                              (Parm)
void ULensFlareComponent::SetSourceColor(const struct FLinearColor& InSourceColor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LensFlareComponent.SetSourceColor");

	ULensFlareComponent_SetSourceColor_Params params {};
	params.InSourceColor = InSourceColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LensFlareComponent.SetTemplate
//		Flags  -> ()
// Parameters:
//		class ULensFlare*                                  NewTemplate                                                (Parm)
//		bool                                               bForceSet                                                  (OptionalParm, Parm)
void ULensFlareComponent::SetTemplate(class ULensFlare* NewTemplate, bool bForceSet)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LensFlareComponent.SetTemplate");

	ULensFlareComponent_SetTemplate_Params params {};
	params.NewTemplate = NewTemplate;
	params.bForceSet = bForceSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FogVolumeDensityComponent.SetEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               bSetEnabled                                                (Parm)
void UFogVolumeDensityComponent::SetEnabled(bool bSetEnabled)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityComponent.SetEnabled");

	UFogVolumeDensityComponent_SetEnabled_Params params {};
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ApexDestructibleActor.OnSetMaterial
//		Flags  -> ()
// Parameters:
//		class USeqAct_SetMaterial*                         Action                                                     (Parm)
void AApexDestructibleActor::OnSetMaterial(class USeqAct_SetMaterial* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ApexDestructibleActor.OnSetMaterial");

	AApexDestructibleActor_OnSetMaterial_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ApexDestructibleActor.TakeRadiusDamage
//		Flags  -> ()
// Parameters:
//		class AController*                                 InstigatedBy                                               (Parm)
//		float                                              BaseDamage                                                 (Parm)
//		float                                              DamageRadius                                               (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		float                                              Momentum                                                   (Parm)
//		struct FVector                                     HurtOrigin                                                 (Parm)
//		bool                                               bFullDamage                                                (Parm)
//		class AActor*                                      DamageCauser                                               (Parm)
//		float                                              DamageFalloffExponent                                      (OptionalParm, Parm)
void AApexDestructibleActor::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ApexDestructibleActor.TakeRadiusDamage");

	AApexDestructibleActor_TakeRadiusDamage_Params params {};
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ApexDestructibleActor.TakeDamage
//		Flags  -> ()
// Parameters:
//		int                                                Damage                                                     (Parm)
//		class AController*                                 EventInstigator                                            (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     Momentum                                                   (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (OptionalParm, Parm)
//		class AActor*                                      DamageCauser                                               (OptionalParm, Parm)
void AApexDestructibleActor::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ApexDestructibleActor.TakeDamage");

	AApexDestructibleActor_TakeDamage_Params params {};
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ApexDestructibleActor.PostBeginPlay
//		Flags  -> ()
void AApexDestructibleActor::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ApexDestructibleActor.PostBeginPlay");

	AApexDestructibleActor_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ApexDestructibleActor.CacheFractureEffects
//		Flags  -> ()
void AApexDestructibleActor::CacheFractureEffects()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ApexDestructibleActor.CacheFractureEffects");

	AApexDestructibleActor_CacheFractureEffects_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ApexDestructibleActor.SpawnFractureEmitter
//		Flags  -> (Net, NetReliable, Exec, Event, Operator, Const, Public, HasOutParms, HasDefaults, NetClient, DLLImport, K2Call)
// Parameters:
//		class UParticleSystem*                             EmitterTemplate                                            (Parm)
//		struct FVector                                     SpawnLocation                                              (Parm)
//		struct FVector                                     SpawnDirection                                             (Parm)
void AApexDestructibleActor::SpawnFractureEmitter(class UParticleSystem* EmitterTemplate, const struct FVector& SpawnLocation, const struct FVector& SpawnDirection)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ApexDestructibleActor.SpawnFractureEmitter");

	AApexDestructibleActor_SpawnFractureEmitter_Params params {};
	params.EmitterTemplate = EmitterTemplate;
	params.SpawnLocation = SpawnLocation;
	params.SpawnDirection = SpawnDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshPart.BreakOffPartsInRadius
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Origin                                                     (Parm)
//		float                                              Radius                                                     (Parm)
//		float                                              RBStrength                                                 (Parm)
//		bool                                               bWantPhysChunksAndParticles                                (Parm)
void AFracturedStaticMeshPart::BreakOffPartsInRadius(const struct FVector& Origin, float Radius, float RBStrength, bool bWantPhysChunksAndParticles)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.BreakOffPartsInRadius");

	AFracturedStaticMeshPart_BreakOffPartsInRadius_Params params {};
	params.Origin = Origin;
	params.Radius = Radius;
	params.RBStrength = RBStrength;
	params.bWantPhysChunksAndParticles = bWantPhysChunksAndParticles;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshPart.Explode
//		Flags  -> ()
void AFracturedStaticMeshPart::Explode()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.Explode");

	AFracturedStaticMeshPart_Explode_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshPart.FellOutOfWorld
//		Flags  -> ()
// Parameters:
//		class UClass*                                      dmgType                                                    (Parm)
void AFracturedStaticMeshPart::FellOutOfWorld(class UClass* dmgType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.FellOutOfWorld");

	AFracturedStaticMeshPart_FellOutOfWorld_Params params {};
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshPart.TryToCleanUp
//		Flags  -> ()
void AFracturedStaticMeshPart::TryToCleanUp()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.TryToCleanUp");

	AFracturedStaticMeshPart_TryToCleanUp_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshPart.TakeDamage
//		Flags  -> ()
// Parameters:
//		int                                                Damage                                                     (Parm)
//		class AController*                                 EventInstigator                                            (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     Momentum                                                   (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (OptionalParm, Parm)
//		class AActor*                                      DamageCauser                                               (OptionalParm, Parm)
void AFracturedStaticMeshPart::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.TakeDamage");

	AFracturedStaticMeshPart_TakeDamage_Params params {};
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshPart.RecyclePart
//		Flags  -> ()
// Parameters:
//		bool                                               bAddToFreePool                                             (Parm)
void AFracturedStaticMeshPart::RecyclePart(bool bAddToFreePool)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.RecyclePart");

	AFracturedStaticMeshPart_RecyclePart_Params params {};
	params.bAddToFreePool = bAddToFreePool;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshPart.Initialize
//		Flags  -> ()
void AFracturedStaticMeshPart::Initialize()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.Initialize");

	AFracturedStaticMeshPart_Initialize_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FractureManager.Tick
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
void AFractureManager::Tick(float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.Tick");

	AFractureManager_Tick_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FractureManager.ReturnPartActor
//		Flags  -> ()
// Parameters:
//		class AFracturedStaticMeshPart*                    Part                                                       (Parm)
void AFractureManager::ReturnPartActor(class AFracturedStaticMeshPart* Part)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.ReturnPartActor");

	AFractureManager_ReturnPartActor_Params params {};
	params.Part = Part;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FractureManager.SpawnPartActor
//		Flags  -> ()
// Parameters:
//		class AFracturedStaticMeshActor*                   Parent                                                     (Parm)
//		struct FVector                                     SpawnLocation                                              (Parm)
//		struct FRotator                                    SpawnRotation                                              (Parm)
//		class AFracturedStaticMeshPart*                    ReturnValue                                                (Parm, OutParm, ReturnParm)
class AFracturedStaticMeshPart* AFractureManager::SpawnPartActor(class AFracturedStaticMeshActor* Parent, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.SpawnPartActor");

	AFractureManager_SpawnPartActor_Params params {};
	params.Parent = Parent;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FractureManager.GetFSMPart
//		Flags  -> ()
// Parameters:
//		class AFracturedStaticMeshActor*                   Parent                                                     (Parm)
//		struct FVector                                     SpawnLocation                                              (Parm)
//		struct FRotator                                    SpawnRotation                                              (Parm)
//		class AFracturedStaticMeshPart*                    ReturnValue                                                (Parm, OutParm, ReturnParm)
class AFracturedStaticMeshPart* AFractureManager::GetFSMPart(class AFracturedStaticMeshActor* Parent, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.GetFSMPart");

	AFractureManager_GetFSMPart_Params params {};
	params.Parent = Parent;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FractureManager.ResetPoolVisibility
//		Flags  -> ()
void AFractureManager::ResetPoolVisibility()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.ResetPoolVisibility");

	AFractureManager_ResetPoolVisibility_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FractureManager.CreateFSMParts
//		Flags  -> ()
void AFractureManager::CreateFSMParts()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.CreateFSMParts");

	AFractureManager_CreateFSMParts_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FractureManager.CleanUpFSMParts
//		Flags  -> ()
void AFractureManager::CleanUpFSMParts()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.CleanUpFSMParts");

	AFractureManager_CleanUpFSMParts_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FractureManager.Destroyed
//		Flags  -> ()
void AFractureManager::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.Destroyed");

	AFractureManager_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FractureManager.PreBeginPlay
//		Flags  -> ()
void AFractureManager::PreBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.PreBeginPlay");

	AFractureManager_PreBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FractureManager.GetFSMFractureCullDistanceScale
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AFractureManager::GetFSMFractureCullDistanceScale()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.GetFSMFractureCullDistanceScale");

	AFractureManager_GetFSMFractureCullDistanceScale_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FractureManager.GetFSMRadialSpawnChanceScale
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AFractureManager::GetFSMRadialSpawnChanceScale()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.GetFSMRadialSpawnChanceScale");

	AFractureManager_GetFSMRadialSpawnChanceScale_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FractureManager.GetFSMDirectSpawnChanceScale
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AFractureManager::GetFSMDirectSpawnChanceScale()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.GetFSMDirectSpawnChanceScale");

	AFractureManager_GetFSMDirectSpawnChanceScale_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FractureManager.GetNumFSMPartsScale
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AFractureManager::GetNumFSMPartsScale()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.GetNumFSMPartsScale");

	AFractureManager_GetNumFSMPartsScale_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FractureManager.SpawnChunkDestroyEffect
//		Flags  -> (Net, Simulated, Native, HasOptionalParms, Const, Protected, HasOutParms, NetClient, K2Call, K2Pure)
// Parameters:
//		class UParticleSystem*                             Effect                                                     (Parm)
//		struct FBox                                        ChunkBox                                                   (Parm)
//		struct FVector                                     ChunkDir                                                   (Parm)
//		float                                              Scale                                                      (Parm)
void AFractureManager::SpawnChunkDestroyEffect(class UParticleSystem* Effect, const struct FBox& ChunkBox, const struct FVector& ChunkDir, float Scale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.SpawnChunkDestroyEffect");

	AFractureManager_SpawnChunkDestroyEffect_Params params {};
	params.Effect = Effect;
	params.ChunkBox = ChunkBox;
	params.ChunkDir = ChunkDir;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ImageReflection.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void AImageReflection::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ImageReflection.OnToggle");

	AImageReflection_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ImageReflection.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void AImageReflection::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ImageReflection.ReplicatedEvent");

	AImageReflection_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ImageReflection.PostBeginPlay
//		Flags  -> ()
void AImageReflection::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ImageReflection.PostBeginPlay");

	AImageReflection_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ImageReflectionShadowPlane.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void AImageReflectionShadowPlane::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ImageReflectionShadowPlane.OnToggle");

	AImageReflectionShadowPlane_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ImageReflectionShadowPlane.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void AImageReflectionShadowPlane::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ImageReflectionShadowPlane.ReplicatedEvent");

	AImageReflectionShadowPlane_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ImageReflectionShadowPlane.PostBeginPlay
//		Flags  -> ()
void AImageReflectionShadowPlane::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ImageReflectionShadowPlane.PostBeginPlay");

	AImageReflectionShadowPlane_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SoundCue.GetCueDuration
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float USoundCue::GetCueDuration()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SoundCue.GetCueDuration");

	USoundCue_GetCueDuration_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineRecentPlayersList.GetCurrentPlayersListCount
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UOnlineRecentPlayersList::GetCurrentPlayersListCount()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.GetCurrentPlayersListCount");

	UOnlineRecentPlayersList_GetCurrentPlayersListCount_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineRecentPlayersList.SetCurrentPlayersList
//		Flags  -> ()
// Parameters:
//		TArray<struct FCurrentPlayerMet>                   Players                                                    (Const, Parm, NeedCtorLink)
void UOnlineRecentPlayersList::SetCurrentPlayersList(TArray<struct FCurrentPlayerMet> Players)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.SetCurrentPlayersList");

	UOnlineRecentPlayersList_SetCurrentPlayersList_Params params {};
	params.Players = Players;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineRecentPlayersList.ShowCurrentPlayersList
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FString                                     Title                                                      (Parm, NeedCtorLink)
//		struct FString                                     Description                                                (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineRecentPlayersList::ShowCurrentPlayersList(unsigned char LocalUserNum, const struct FString& Title, const struct FString& Description)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.ShowCurrentPlayersList");

	UOnlineRecentPlayersList_ShowCurrentPlayersList_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.Title = Title;
	params.Description = Description;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineRecentPlayersList.ShowLastPartyPlayerList
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FString                                     Title                                                      (Parm, NeedCtorLink)
//		struct FString                                     Description                                                (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineRecentPlayersList::ShowLastPartyPlayerList(unsigned char LocalUserNum, const struct FString& Title, const struct FString& Description)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.ShowLastPartyPlayerList");

	UOnlineRecentPlayersList_ShowLastPartyPlayerList_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.Title = Title;
	params.Description = Description;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineRecentPlayersList.ShowRecentPartiesPlayerList
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FString                                     Title                                                      (Parm, NeedCtorLink)
//		struct FString                                     Description                                                (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineRecentPlayersList::ShowRecentPartiesPlayerList(unsigned char LocalUserNum, const struct FString& Title, const struct FString& Description)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.ShowRecentPartiesPlayerList");

	UOnlineRecentPlayersList_ShowRecentPartiesPlayerList_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.Title = Title;
	params.Description = Description;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineRecentPlayersList.ShowRecentPlayerList
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FString                                     Title                                                      (Parm, NeedCtorLink)
//		struct FString                                     Description                                                (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineRecentPlayersList::ShowRecentPlayerList(unsigned char LocalUserNum, const struct FString& Title, const struct FString& Description)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.ShowRecentPlayerList");

	UOnlineRecentPlayersList_ShowRecentPlayerList_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.Title = Title;
	params.Description = Description;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineRecentPlayersList.SetLastParty
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PartyLeader                                                (Parm)
//		TArray<struct FUniqueNetId>                        PartyMembers                                               (Const, Parm, OutParm, NeedCtorLink)
void UOnlineRecentPlayersList::SetLastParty(const struct FUniqueNetId& PartyLeader, TArray<struct FUniqueNetId>* PartyMembers)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.SetLastParty");

	UOnlineRecentPlayersList_SetLastParty_Params params {};
	params.PartyLeader = PartyLeader;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (PartyMembers != nullptr)
		*PartyMembers = params.PartyMembers;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineRecentPlayersList.GetTeamForCurrentPlayer
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                Player                                                     (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UOnlineRecentPlayersList::GetTeamForCurrentPlayer(const struct FUniqueNetId& Player)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.GetTeamForCurrentPlayer");

	UOnlineRecentPlayersList_GetTeamForCurrentPlayer_Params params {};
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineRecentPlayersList.GetSkillForCurrentPlayer
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                Player                                                     (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UOnlineRecentPlayersList::GetSkillForCurrentPlayer(const struct FUniqueNetId& Player)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.GetSkillForCurrentPlayer");

	UOnlineRecentPlayersList_GetSkillForCurrentPlayer_Params params {};
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineRecentPlayersList.GetPlayersFromCurrentPlayers
//		Flags  -> ()
// Parameters:
//		TArray<struct FUniqueNetId>                        Players                                                    (Parm, OutParm, NeedCtorLink)
void UOnlineRecentPlayersList::GetPlayersFromCurrentPlayers(TArray<struct FUniqueNetId>* Players)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.GetPlayersFromCurrentPlayers");

	UOnlineRecentPlayersList_GetPlayersFromCurrentPlayers_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineRecentPlayersList.GetPlayersFromRecentParties
//		Flags  -> ()
// Parameters:
//		TArray<struct FUniqueNetId>                        Players                                                    (Parm, OutParm, NeedCtorLink)
void UOnlineRecentPlayersList::GetPlayersFromRecentParties(TArray<struct FUniqueNetId>* Players)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.GetPlayersFromRecentParties");

	UOnlineRecentPlayersList_GetPlayersFromRecentParties_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineRecentPlayersList.ClearRecentParties
//		Flags  -> ()
void UOnlineRecentPlayersList::ClearRecentParties()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.ClearRecentParties");

	UOnlineRecentPlayersList_ClearRecentParties_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineRecentPlayersList.AddPartyToRecentParties
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PartyLeader                                                (Parm)
//		TArray<struct FUniqueNetId>                        PartyMembers                                               (Const, Parm, OutParm, NeedCtorLink)
void UOnlineRecentPlayersList::AddPartyToRecentParties(const struct FUniqueNetId& PartyLeader, TArray<struct FUniqueNetId>* PartyMembers)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.AddPartyToRecentParties");

	UOnlineRecentPlayersList_AddPartyToRecentParties_Params params {};
	params.PartyLeader = PartyLeader;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (PartyMembers != nullptr)
		*PartyMembers = params.PartyMembers;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineRecentPlayersList.ClearRecentPlayers
//		Flags  -> ()
void UOnlineRecentPlayersList::ClearRecentPlayers()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.ClearRecentPlayers");

	UOnlineRecentPlayersList_ClearRecentPlayers_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineRecentPlayersList.AddPlayerToRecentPlayers
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                NewPlayer                                                  (Parm)
void UOnlineRecentPlayersList::AddPlayerToRecentPlayers(const struct FUniqueNetId& NewPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.AddPlayerToRecentPlayers");

	UOnlineRecentPlayersList_AddPlayerToRecentPlayers_Params params {};
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSuppliedUIInterface.ShowMatchmakingUI
//		Flags  -> ()
// Parameters:
//		unsigned char                                      SearchingPlayerNum                                         (Parm)
//		class UOnlineGameSearch*                           SearchSettings                                             (Parm)
//		class UOnlineGameSettings*                         GameSettings                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSuppliedUIInterface::ShowMatchmakingUI(unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings, class UOnlineGameSettings* GameSettings)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSuppliedUIInterface.ShowMatchmakingUI");

	UOnlineSuppliedUIInterface_ShowMatchmakingUI_Params params {};
	params.SearchingPlayerNum = SearchingPlayerNum;
	params.SearchSettings = SearchSettings;
	params.GameSettings = GameSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSuppliedUIInterface.ClearShowOnlineStatsUICompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ShowOnlineStatsUICompleteDelegate                          (Parm, NeedCtorLink)
void UOnlineSuppliedUIInterface::ClearShowOnlineStatsUICompleteDelegate(const struct FScriptDelegate& ShowOnlineStatsUICompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSuppliedUIInterface.ClearShowOnlineStatsUICompleteDelegate");

	UOnlineSuppliedUIInterface_ClearShowOnlineStatsUICompleteDelegate_Params params {};
	params.ShowOnlineStatsUICompleteDelegate = ShowOnlineStatsUICompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSuppliedUIInterface.AddShowOnlineStatsUICompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ShowOnlineStatsUICompleteDelegate                          (Parm, NeedCtorLink)
void UOnlineSuppliedUIInterface::AddShowOnlineStatsUICompleteDelegate(const struct FScriptDelegate& ShowOnlineStatsUICompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSuppliedUIInterface.AddShowOnlineStatsUICompleteDelegate");

	UOnlineSuppliedUIInterface_AddShowOnlineStatsUICompleteDelegate_Params params {};
	params.ShowOnlineStatsUICompleteDelegate = ShowOnlineStatsUICompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSuppliedUIInterface.ShowOnlineStatsUI
//		Flags  -> ()
// Parameters:
//		TArray<struct FUniqueNetId>                        Players                                                    (Const, Parm, OutParm, NeedCtorLink)
//		class UOnlineStatsRead*                            StatsRead                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSuppliedUIInterface::ShowOnlineStatsUI(TArray<struct FUniqueNetId>* Players, class UOnlineStatsRead* StatsRead)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSuppliedUIInterface.ShowOnlineStatsUI");

	UOnlineSuppliedUIInterface_ShowOnlineStatsUI_Params params {};
	params.StatsRead = StatsRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSuppliedUIInterface.OnShowOnlineStatsUIComplete
//		Flags  -> ()
void UOnlineSuppliedUIInterface::OnShowOnlineStatsUIComplete()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSuppliedUIInterface.OnShowOnlineStatsUIComplete");

	UOnlineSuppliedUIInterface_OnShowOnlineStatsUIComplete_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PathNode_Dynamic.GetDebugAbbrev
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString APathNode_Dynamic::GetDebugAbbrev()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PathNode_Dynamic.GetDebugAbbrev");

	APathNode_Dynamic_GetDebugAbbrev_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintActor.OnToggleConstraintDrive
//		Flags  -> ()
// Parameters:
//		class USeqAct_ToggleConstraintDrive*               Action                                                     (Parm)
void ARB_ConstraintActor::OnToggleConstraintDrive(class USeqAct_ToggleConstraintDrive* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintActor.OnToggleConstraintDrive");

	ARB_ConstraintActor_OnToggleConstraintDrive_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintActor.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void ARB_ConstraintActor::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintActor.OnToggle");

	ARB_ConstraintActor_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintActor.OnDestroy
//		Flags  -> ()
// Parameters:
//		class USeqAct_Destroy*                             Action                                                     (Parm)
void ARB_ConstraintActor::OnDestroy(class USeqAct_Destroy* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintActor.OnDestroy");

	ARB_ConstraintActor_OnDestroy_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintActor.TermConstraint
//		Flags  -> ()
void ARB_ConstraintActor::TermConstraint()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintActor.TermConstraint");

	ARB_ConstraintActor_TermConstraint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintActor.InitConstraint
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Actor1                                                     (Parm)
//		class AActor*                                      Actor2                                                     (Parm)
//		struct FName                                       Actor1Bone                                                 (OptionalParm, Parm)
//		struct FName                                       Actor2Bone                                                 (OptionalParm, Parm)
//		float                                              BreakThreshold                                             (OptionalParm, Parm)
void ARB_ConstraintActor::InitConstraint(class AActor* Actor1, class AActor* Actor2, const struct FName& Actor1Bone, const struct FName& Actor2Bone, float BreakThreshold)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintActor.InitConstraint");

	ARB_ConstraintActor_InitConstraint_Params params {};
	params.Actor1 = Actor1;
	params.Actor2 = Actor2;
	params.Actor1Bone = Actor1Bone;
	params.Actor2Bone = Actor2Bone;
	params.BreakThreshold = BreakThreshold;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_ConstraintActor.SetDisableCollision
//		Flags  -> ()
// Parameters:
//		bool                                               NewDisableCollision                                        (Parm)
void ARB_ConstraintActor::SetDisableCollision(bool NewDisableCollision)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintActor.SetDisableCollision");

	ARB_ConstraintActor_SetDisableCollision_Params params {};
	params.NewDisableCollision = NewDisableCollision;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ReverbVolumeToggleable.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void AReverbVolumeToggleable::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ReverbVolumeToggleable.OnToggle");

	AReverbVolumeToggleable_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_MITV_Activate.Activated
//		Flags  -> ()
// Parameters:
void USeqAct_MITV_Activate::Activated()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_MITV_Activate.Activated");

	USeqAct_MITV_Activate_Activated_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_MITV_Activate.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_MITV_Activate::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_MITV_Activate.GetObjClassVersion");

	USeqAct_MITV_Activate_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.GeneratePathToLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Goal                                                       (Parm)
//		float                                              WithinDistance                                             (OptionalParm, Parm)
//		bool                                               bAllowPartialPath                                          (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::GeneratePathToLocation(const struct FVector& Goal, float WithinDistance, bool bAllowPartialPath)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.GeneratePathToLocation");

	AController_GeneratePathToLocation_Params params {};
	params.Goal = Goal;
	params.WithinDistance = WithinDistance;
	params.bAllowPartialPath = bAllowPartialPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.GeneratePathToActor
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Goal                                                       (Parm)
//		float                                              WithinDistance                                             (OptionalParm, Parm)
//		bool                                               bAllowPartialPath                                          (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::GeneratePathToActor(class AActor* Goal, float WithinDistance, bool bAllowPartialPath)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.GeneratePathToActor");

	AController_GeneratePathToActor_Params params {};
	params.Goal = Goal;
	params.WithinDistance = WithinDistance;
	params.bAllowPartialPath = bAllowPartialPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.InterpolationFinished
//		Flags  -> ()
// Parameters:
//		class USeqAct_Interp*                              InterpAction                                               (Parm)
void AController::InterpolationFinished(class USeqAct_Interp* InterpAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.InterpolationFinished");

	AController_InterpolationFinished_Params params {};
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.InterpolationStarted
//		Flags  -> ()
// Parameters:
//		class USeqAct_Interp*                              InterpAction                                               (Parm)
//		class UInterpGroupInst*                            GroupInst                                                  (Parm)
void AController::InterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.InterpolationStarted");

	AController_InterpolationStarted_Params params {};
	params.InterpAction = InterpAction;
	params.GroupInst = GroupInst;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.InitNavigationHandle
//		Flags  -> ()
void AController::InitNavigationHandle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.InitNavigationHandle");

	AController_InitNavigationHandle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.ReadyForLift
//		Flags  -> ()
void AController::ReadyForLift()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReadyForLift");

	AController_ReadyForLift_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.SendMessage
//		Flags  -> ()
// Parameters:
//		class APlayerReplicationInfo*                      Recipient                                                  (Parm)
//		struct FName                                       MessageType                                                (Parm)
//		float                                              Wait                                                       (Parm)
//		class UClass*                                      DamageType                                                 (OptionalParm, Parm)
void AController::SendMessage(class APlayerReplicationInfo* Recipient, const struct FName& MessageType, float Wait, class UClass* DamageType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.SendMessage");

	AController_SendMessage_Params params {};
	params.Recipient = Recipient;
	params.MessageType = MessageType;
	params.Wait = Wait;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.CurrentLevelUnloaded
//		Flags  -> ()
void AController::CurrentLevelUnloaded()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.CurrentLevelUnloaded");

	AController_CurrentLevelUnloaded_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.IsInCombat
//		Flags  -> ()
// Parameters:
//		bool                                               bForceCheck                                                (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::IsInCombat(bool bForceCheck)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsInCombat");

	AController_IsInCombat_Params params {};
	params.bForceCheck = bForceCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.IsSpectating
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::IsSpectating()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsSpectating");

	AController_IsSpectating_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.OnToggleHidden
//		Flags  -> ()
// Parameters:
//		class USeqAct_ToggleHidden*                        Action                                                     (Parm)
void AController::OnToggleHidden(class USeqAct_ToggleHidden* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnToggleHidden");

	AController_OnToggleHidden_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.NotifyAddInventory
//		Flags  -> ()
// Parameters:
//		class AInventory*                                  NewItem                                                    (Parm)
void AController::NotifyAddInventory(class AInventory* NewItem)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyAddInventory");

	AController_NotifyAddInventory_Params params {};
	params.NewItem = NewItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.OnModifyHealth
//		Flags  -> ()
// Parameters:
//		class USeqAct_ModifyHealth*                        Action                                                     (Parm)
void AController::OnModifyHealth(class USeqAct_ModifyHealth* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnModifyHealth");

	AController_OnModifyHealth_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.NotifyCoverClaimViolation
//		Flags  -> ()
// Parameters:
//		class AController*                                 NewClaim                                                   (Parm)
//		class ACoverLink*                                  Link                                                       (Parm)
//		int                                                SlotIdx                                                    (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::NotifyCoverClaimViolation(class AController* NewClaim, class ACoverLink* Link, int SlotIdx)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyCoverClaimViolation");

	AController_NotifyCoverClaimViolation_Params params {};
	params.NewClaim = NewClaim;
	params.Link = Link;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.NotifyCoverAdjusted
//		Flags  -> ()
void AController::NotifyCoverAdjusted()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyCoverAdjusted");

	AController_NotifyCoverAdjusted_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.NotifyCoverDisabled
//		Flags  -> ()
// Parameters:
//		class ACoverLink*                                  Link                                                       (Parm)
//		int                                                SlotIdx                                                    (Parm)
//		bool                                               bAdjacentIdx                                               (OptionalParm, Parm)
void AController::NotifyCoverDisabled(class ACoverLink* Link, int SlotIdx, bool bAdjacentIdx)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyCoverDisabled");

	AController_NotifyCoverDisabled_Params params {};
	params.Link = Link;
	params.SlotIdx = SlotIdx;
	params.bAdjacentIdx = bAdjacentIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.OnSetVelocity
//		Flags  -> ()
// Parameters:
//		class USeqAct_SetVelocity*                         Action                                                     (Parm)
void AController::OnSetVelocity(class USeqAct_SetVelocity* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnSetVelocity");

	AController_OnSetVelocity_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.OnSetPhysics
//		Flags  -> ()
// Parameters:
//		class USeqAct_SetPhysics*                          Action                                                     (Parm)
void AController::OnSetPhysics(class USeqAct_SetPhysics* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnSetPhysics");

	AController_OnSetPhysics_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.OnToggleGodMode
//		Flags  -> ()
// Parameters:
//		class USeqAct_ToggleGodMode*                       inAction                                                   (Parm)
void AController::OnToggleGodMode(class USeqAct_ToggleGodMode* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnToggleGodMode");

	AController_OnToggleGodMode_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.OnAttachToActor
//		Flags  -> ()
// Parameters:
//		class USeqAct_AttachToActor*                       Action                                                     (Parm)
void AController::OnAttachToActor(class USeqAct_AttachToActor* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnAttachToActor");

	AController_OnAttachToActor_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.OnTeleport
//		Flags  -> ()
// Parameters:
//		class USeqAct_Teleport*                            Action                                                     (Parm)
void AController::OnTeleport(class USeqAct_Teleport* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnTeleport");

	AController_OnTeleport_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.IsDead
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::IsDead()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsDead");

	AController_IsDead_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.GetHumanReadableName
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString AController::GetHumanReadableName()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetHumanReadableName");

	AController_GetHumanReadableName_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.DisplayDebug
//		Flags  -> ()
// Parameters:
//		class AHUD*                                        HUD                                                        (Parm)
//		float                                              out_YL                                                     (Parm, OutParm)
//		float                                              out_YPos                                                   (Parm, OutParm)
void AController::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.DisplayDebug");

	AController_DisplayDebug_Params params {};
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.StopLatentExecution
//		Flags  -> ()
void AController::StopLatentExecution()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.StopLatentExecution");

	AController_StopLatentExecution_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.InLatentExecution
//		Flags  -> ()
// Parameters:
//		int                                                LatentActionNumber                                         (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::InLatentExecution(int LatentActionNumber)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.InLatentExecution");

	AController_InLatentExecution_Params params {};
	params.LatentActionNumber = LatentActionNumber;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.ReachedPreciseDestination
//		Flags  -> ()
void AController::ReachedPreciseDestination()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReachedPreciseDestination");

	AController_ReachedPreciseDestination_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.NotifyMissedJump
//		Flags  -> ()
void AController::NotifyMissedJump()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyMissedJump");

	AController_NotifyMissedJump_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.NotifyJumpApex
//		Flags  -> ()
void AController::NotifyJumpApex()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyJumpApex");

	AController_NotifyJumpApex_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.NotifyBump
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		struct FVector                                     HitNormal                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::NotifyBump(class AActor* Other, const struct FVector& HitNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyBump");

	AController_NotifyBump_Params params {};
	params.Other = Other;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.NotifyFallingHitWall
//		Flags  -> ()
// Parameters:
//		struct FVector                                     HitNormal                                                  (Parm)
//		class AActor*                                      Wall                                                       (Parm)
void AController::NotifyFallingHitWall(const struct FVector& HitNormal, class AActor* Wall)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyFallingHitWall");

	AController_NotifyFallingHitWall_Params params {};
	params.HitNormal = HitNormal;
	params.Wall = Wall;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.NotifyHitWall
//		Flags  -> ()
// Parameters:
//		struct FVector                                     HitNormal                                                  (Parm)
//		class AActor*                                      Wall                                                       (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::NotifyHitWall(const struct FVector& HitNormal, class AActor* Wall)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyHitWall");

	AController_NotifyHitWall_Params params {};
	params.HitNormal = HitNormal;
	params.Wall = Wall;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.NotifyLanded
//		Flags  -> ()
// Parameters:
//		struct FVector                                     HitNormal                                                  (Parm)
//		class AActor*                                      FloorActor                                                 (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::NotifyLanded(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyLanded");

	AController_NotifyLanded_Params params {};
	params.HitNormal = HitNormal;
	params.FloorActor = FloorActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.NotifyHeadVolumeChange
//		Flags  -> ()
// Parameters:
//		class APhysicsVolume*                              NewVolume                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::NotifyHeadVolumeChange(class APhysicsVolume* NewVolume)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyHeadVolumeChange");

	AController_NotifyHeadVolumeChange_Params params {};
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.NotifyPhysicsVolumeChange
//		Flags  -> ()
// Parameters:
//		class APhysicsVolume*                              NewVolume                                                  (Parm)
void AController::NotifyPhysicsVolumeChange(class APhysicsVolume* NewVolume)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyPhysicsVolumeChange");

	AController_NotifyPhysicsVolumeChange_Params params {};
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.LandingShake
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::LandingShake()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.LandingShake");

	AController_LandingShake_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.IsAimingAt
//		Flags  -> (Net, Simulated, Event, Operator, HasOptionalParms, Const, Public, Protected, HasOutParms, NetClient, K2Call, K2Pure)
// Parameters:
//		class AActor*                                      ATarget                                                    (Parm)
//		float                                              Epsilon                                                    (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::IsAimingAt(class AActor* ATarget, float Epsilon)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsAimingAt");

	AController_IsAimingAt_Params params {};
	params.ATarget = ATarget;
	params.Epsilon = Epsilon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.GetActorEyesViewPoint
//		Flags  -> ()
// Parameters:
//		struct FVector                                     out_Location                                               (Parm, OutParm)
//		struct FRotator                                    out_Rotation                                               (Parm, OutParm)
void AController::GetActorEyesViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetActorEyesViewPoint");

	AController_GetActorEyesViewPoint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Rotation != nullptr)
		*out_Rotation = params.out_Rotation;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.GetPlayerViewPointQuat
//		Flags  -> ()
// Parameters:
//		struct FVector                                     out_Location                                               (Parm, OutParm)
//		struct FQuat                                       out_Quaternion                                             (Parm, OutParm)
void AController::GetPlayerViewPointQuat(struct FVector* out_Location, struct FQuat* out_Quaternion)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetPlayerViewPointQuat");

	AController_GetPlayerViewPointQuat_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Quaternion != nullptr)
		*out_Quaternion = params.out_Quaternion;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.GetPlayerViewPoint
//		Flags  -> ()
// Parameters:
//		struct FVector                                     out_Location                                               (Parm, OutParm)
//		struct FRotator                                    out_Rotation                                               (Parm, OutParm)
void AController::GetPlayerViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetPlayerViewPoint");

	AController_GetPlayerViewPoint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Rotation != nullptr)
		*out_Rotation = params.out_Rotation;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.HandlePathObstruction
//		Flags  -> ()
// Parameters:
//		class AActor*                                      BlockedBy                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::HandlePathObstruction(class AActor* BlockedBy)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.HandlePathObstruction");

	AController_HandlePathObstruction_Params params {};
	params.BlockedBy = BlockedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.UnderLift
//		Flags  -> ()
// Parameters:
//		class ALiftCenter*                                 Lift                                                       (Parm)
void AController::UnderLift(class ALiftCenter* Lift)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.UnderLift");

	AController_UnderLift_Params params {};
	params.Lift = Lift;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.MoverFinished
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::MoverFinished()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.MoverFinished");

	AController_MoverFinished_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.WaitForMover
//		Flags  -> ()
// Parameters:
//		class AInterpActor*                                M                                                          (Parm)
void AController::WaitForMover(class AInterpActor* M)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.WaitForMover");

	AController_WaitForMover_Params params {};
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.AllowDetourTo
//		Flags  -> ()
// Parameters:
//		class ANavigationPoint*                            N                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::AllowDetourTo(class ANavigationPoint* N)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.AllowDetourTo");

	AController_AllowDetourTo_Params params {};
	params.N = N;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.MayFall
//		Flags  -> ()
// Parameters:
//		bool                                               bFloor                                                     (Parm)
//		struct FVector                                     FloorNormal                                                (Parm)
void AController::MayFall(bool bFloor, const struct FVector& FloorNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.MayFall");

	AController_MayFall_Params params {};
	params.bFloor = bFloor;
	params.FloorNormal = FloorNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.EndClimbLadder
//		Flags  -> ()
void AController::EndClimbLadder()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.EndClimbLadder");

	AController_EndClimbLadder_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.LongFall
//		Flags  -> ()
void AController::LongFall()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.LongFall");

	AController_LongFall_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.WaitForLanding
//		Flags  -> ()
// Parameters:
//		float                                              waitDuration                                               (OptionalParm, Parm)
void AController::WaitForLanding(float waitDuration)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.WaitForLanding");

	AController_WaitForLanding_Params params {};
	params.waitDuration = waitDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.PickWallAdjust
//		Flags  -> ()
// Parameters:
//		struct FVector                                     HitNormal                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::PickWallAdjust(const struct FVector& HitNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.PickWallAdjust");

	AController_PickWallAdjust_Params params {};
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.MoveUnreachable
//		Flags  -> ()
// Parameters:
//		struct FVector                                     AttemptedDest                                              (Parm)
//		class AActor*                                      AttemptedTarget                                            (Parm)
void AController::MoveUnreachable(const struct FVector& AttemptedDest, class AActor* AttemptedTarget)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.MoveUnreachable");

	AController_MoveUnreachable_Params params {};
	params.AttemptedDest = AttemptedDest;
	params.AttemptedTarget = AttemptedTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.ActorReachable
//		Flags  -> ()
// Parameters:
//		class AActor*                                      anActor                                                    (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::ActorReachable(class AActor* anActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.ActorReachable");

	AController_ActorReachable_Params params {};
	params.anActor = anActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.PointReachable
//		Flags  -> ()
// Parameters:
//		struct FVector                                     aPoint                                                     (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::PointReachable(const struct FVector& aPoint)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.PointReachable");

	AController_PointReachable_Params params {};
	params.aPoint = aPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.FindPathToIntercept
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
//		class AActor*                                      InRouteGoal                                                (Parm)
//		bool                                               bWeightDetours                                             (OptionalParm, Parm)
//		int                                                MaxPathLength                                              (OptionalParm, Parm)
//		bool                                               bReturnPartial                                             (OptionalParm, Parm)
//		class AActor*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class AActor* AController::FindPathToIntercept(class APawn* P, class AActor* InRouteGoal, bool bWeightDetours, int MaxPathLength, bool bReturnPartial)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindPathToIntercept");

	AController_FindPathToIntercept_Params params {};
	params.P = P;
	params.InRouteGoal = InRouteGoal;
	params.bWeightDetours = bWeightDetours;
	params.MaxPathLength = MaxPathLength;
	params.bReturnPartial = bReturnPartial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.FindRandomDest
//		Flags  -> ()
// Parameters:
//		class ANavigationPoint*                            ReturnValue                                                (Parm, OutParm, ReturnParm)
class ANavigationPoint* AController::FindRandomDest()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindRandomDest");

	AController_FindRandomDest_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.FindPathTowardNearest
//		Flags  -> ()
// Parameters:
//		class UClass*                                      GoalClass                                                  (Parm)
//		bool                                               bWeightDetours                                             (OptionalParm, Parm)
//		int                                                MaxPathLength                                              (OptionalParm, Parm)
//		bool                                               bReturnPartial                                             (OptionalParm, Parm)
//		class AActor*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class AActor* AController::FindPathTowardNearest(class UClass* GoalClass, bool bWeightDetours, int MaxPathLength, bool bReturnPartial)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindPathTowardNearest");

	AController_FindPathTowardNearest_Params params {};
	params.GoalClass = GoalClass;
	params.bWeightDetours = bWeightDetours;
	params.MaxPathLength = MaxPathLength;
	params.bReturnPartial = bReturnPartial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.FindPathToward
//		Flags  -> ()
// Parameters:
//		class AActor*                                      anActor                                                    (Parm)
//		bool                                               bWeightDetours                                             (OptionalParm, Parm)
//		int                                                MaxPathLength                                              (OptionalParm, Parm)
//		bool                                               bReturnPartial                                             (OptionalParm, Parm)
//		class AActor*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class AActor* AController::FindPathToward(class AActor* anActor, bool bWeightDetours, int MaxPathLength, bool bReturnPartial)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindPathToward");

	AController_FindPathToward_Params params {};
	params.anActor = anActor;
	params.bWeightDetours = bWeightDetours;
	params.MaxPathLength = MaxPathLength;
	params.bReturnPartial = bReturnPartial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.FindPathTo
//		Flags  -> ()
// Parameters:
//		struct FVector                                     aPoint                                                     (Parm)
//		int                                                MaxPathLength                                              (OptionalParm, Parm)
//		bool                                               bReturnPartial                                             (OptionalParm, Parm)
//		class AActor*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class AActor* AController::FindPathTo(const struct FVector& aPoint, int MaxPathLength, bool bReturnPartial)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindPathTo");

	AController_FindPathTo_Params params {};
	params.aPoint = aPoint;
	params.MaxPathLength = MaxPathLength;
	params.bReturnPartial = bReturnPartial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.FinishRotation
//		Flags  -> ()
void AController::FinishRotation()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.FinishRotation");

	AController_FinishRotation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.SetupSpecialPathAbilities
//		Flags  -> ()
void AController::SetupSpecialPathAbilities()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetupSpecialPathAbilities");

	AController_SetupSpecialPathAbilities_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.MoveToward
//		Flags  -> ()
// Parameters:
//		class AActor*                                      NewTarget                                                  (Parm)
//		class AActor*                                      ViewFocus                                                  (OptionalParm, Parm)
//		float                                              DestinationOffset                                          (OptionalParm, Parm)
//		bool                                               bUseStrafing                                               (OptionalParm, Parm)
//		bool                                               bShouldWalk                                                (OptionalParm, Parm)
void AController::MoveToward(class AActor* NewTarget, class AActor* ViewFocus, float DestinationOffset, bool bUseStrafing, bool bShouldWalk)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.MoveToward");

	AController_MoveToward_Params params {};
	params.NewTarget = NewTarget;
	params.ViewFocus = ViewFocus;
	params.DestinationOffset = DestinationOffset;
	params.bUseStrafing = bUseStrafing;
	params.bShouldWalk = bShouldWalk;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.MoveToDirectNonPathPos
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewDestination                                             (Parm)
//		class AActor*                                      ViewFocus                                                  (OptionalParm, Parm)
//		float                                              DestinationOffset                                          (OptionalParm, Parm)
//		bool                                               bShouldWalk                                                (OptionalParm, Parm)
void AController::MoveToDirectNonPathPos(const struct FVector& NewDestination, class AActor* ViewFocus, float DestinationOffset, bool bShouldWalk)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.MoveToDirectNonPathPos");

	AController_MoveToDirectNonPathPos_Params params {};
	params.NewDestination = NewDestination;
	params.ViewFocus = ViewFocus;
	params.DestinationOffset = DestinationOffset;
	params.bShouldWalk = bShouldWalk;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.MoveTo
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewDestination                                             (Parm)
//		class AActor*                                      ViewFocus                                                  (OptionalParm, Parm)
//		float                                              DestinationOffset                                          (OptionalParm, Parm)
//		bool                                               bShouldWalk                                                (OptionalParm, Parm)
void AController::MoveTo(const struct FVector& NewDestination, class AActor* ViewFocus, float DestinationOffset, bool bShouldWalk)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.MoveTo");

	AController_MoveTo_Params params {};
	params.NewDestination = NewDestination;
	params.ViewFocus = ViewFocus;
	params.DestinationOffset = DestinationOffset;
	params.bShouldWalk = bShouldWalk;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.EnemyNotVisible
//		Flags  -> ()
void AController::EnemyNotVisible()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.EnemyNotVisible");

	AController_EnemyNotVisible_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.SeeMonster
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Seen                                                       (Parm)
void AController::SeeMonster(class APawn* Seen)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.SeeMonster");

	AController_SeeMonster_Params params {};
	params.Seen = Seen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.SeePlayer
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Seen                                                       (Parm)
void AController::SeePlayer(class APawn* Seen)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.SeePlayer");

	AController_SeePlayer_Params params {};
	params.Seen = Seen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.HearNoise
//		Flags  -> ()
// Parameters:
//		float                                              Loudness                                                   (Parm)
//		class AActor*                                      NoiseMaker                                                 (Parm)
//		struct FName                                       NoiseType                                                  (OptionalParm, Parm)
void AController::HearNoise(float Loudness, class AActor* NoiseMaker, const struct FName& NoiseType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.HearNoise");

	AController_HearNoise_Params params {};
	params.Loudness = Loudness;
	params.NoiseMaker = NoiseMaker;
	params.NoiseType = NoiseType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.PickTarget
//		Flags  -> ()
// Parameters:
//		class UClass*                                      TargetClass                                                (Parm)
//		float                                              bestAim                                                    (Parm, OutParm)
//		float                                              bestDist                                                   (Parm, OutParm)
//		struct FVector                                     FireDir                                                    (Parm)
//		struct FVector                                     projStart                                                  (Parm)
//		float                                              MaxRange                                                   (Parm)
//		class APawn*                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class APawn* AController::PickTarget(class UClass* TargetClass, float* bestAim, float* bestDist, const struct FVector& FireDir, const struct FVector& projStart, float MaxRange)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.PickTarget");

	AController_PickTarget_Params params {};
	params.TargetClass = TargetClass;
	params.FireDir = FireDir;
	params.projStart = projStart;
	params.MaxRange = MaxRange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (bestAim != nullptr)
		*bestAim = params.bestAim;
	if (bestDist != nullptr)
		*bestDist = params.bestDist;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.CanSeeByPoints
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ViewLocation                                               (Parm)
//		struct FVector                                     TestLocation                                               (Parm)
//		struct FRotator                                    ViewRotation                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::CanSeeByPoints(const struct FVector& ViewLocation, const struct FVector& TestLocation, const struct FRotator& ViewRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.CanSeeByPoints");

	AController_CanSeeByPoints_Params params {};
	params.ViewLocation = ViewLocation;
	params.TestLocation = TestLocation;
	params.ViewRotation = ViewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.CanSee
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::CanSee(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.CanSee");

	AController_CanSee_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.LineOfSightTo
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		struct FVector                                     chkLocation                                                (OptionalParm, Parm)
//		bool                                               bTryAlternateTargetLoc                                     (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::LineOfSightTo(class AActor* Other, const struct FVector& chkLocation, bool bTryAlternateTargetLoc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.LineOfSightTo");

	AController_LineOfSightTo_Params params {};
	params.Other = Other;
	params.chkLocation = chkLocation;
	params.bTryAlternateTargetLoc = bTryAlternateTargetLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.NotifyChangedWeapon
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     PrevWeapon                                                 (Parm)
//		class AWeapon*                                     NewWeapon                                                  (Parm)
void AController::NotifyChangedWeapon(class AWeapon* PrevWeapon, class AWeapon* NewWeapon)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyChangedWeapon");

	AController_NotifyChangedWeapon_Params params {};
	params.PrevWeapon = PrevWeapon;
	params.NewWeapon = NewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.ClientSwitchToBestWeapon
//		Flags  -> ()
// Parameters:
//		bool                                               bForceNewWeapon                                            (OptionalParm, Parm)
void AController::ClientSwitchToBestWeapon(bool bForceNewWeapon)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSwitchToBestWeapon");

	AController_ClientSwitchToBestWeapon_Params params {};
	params.bForceNewWeapon = bForceNewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.SwitchToBestWeapon
//		Flags  -> ()
// Parameters:
//		bool                                               bForceNewWeapon                                            (OptionalParm, Parm)
void AController::SwitchToBestWeapon(bool bForceNewWeapon)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.SwitchToBestWeapon");

	AController_SwitchToBestWeapon_Params params {};
	params.bForceNewWeapon = bForceNewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.ReceiveProjectileWarning
//		Flags  -> ()
// Parameters:
//		class AProjectile*                                 Proj                                                       (Parm)
void AController::ReceiveProjectileWarning(class AProjectile* Proj)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReceiveProjectileWarning");

	AController_ReceiveProjectileWarning_Params params {};
	params.Proj = Proj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.ReceiveWarning
//		Flags  -> ()
// Parameters:
//		class APawn*                                       shooter                                                    (Parm)
//		float                                              projSpeed                                                  (Parm)
//		struct FVector                                     FireDir                                                    (Parm)
void AController::ReceiveWarning(class APawn* shooter, float projSpeed, const struct FVector& FireDir)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReceiveWarning");

	AController_ReceiveWarning_Params params {};
	params.shooter = shooter;
	params.projSpeed = projSpeed;
	params.FireDir = FireDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.InstantWarnTarget
//		Flags  -> ()
// Parameters:
//		class AActor*                                      InTarget                                                   (Parm)
//		class AWeapon*                                     FiredWeapon                                                (Parm)
//		struct FVector                                     FireDir                                                    (Parm)
void AController::InstantWarnTarget(class AActor* InTarget, class AWeapon* FiredWeapon, const struct FVector& FireDir)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.InstantWarnTarget");

	AController_InstantWarnTarget_Params params {};
	params.InTarget = InTarget;
	params.FiredWeapon = FiredWeapon;
	params.FireDir = FireDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.GetAdjustedAimFor
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     W                                                          (Parm)
//		struct FVector                                     StartFireLoc                                               (Parm)
//		struct FRotator                                    ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FRotator AController::GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetAdjustedAimFor");

	AController_GetAdjustedAimFor_Params params {};
	params.W = W;
	params.StartFireLoc = StartFireLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.HandlePickup
//		Flags  -> ()
// Parameters:
//		class AInventory*                                  Inv                                                        (Parm)
void AController::HandlePickup(class AInventory* Inv)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.HandlePickup");

	AController_HandlePickup_Params params {};
	params.Inv = Inv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.RoundHasEnded
//		Flags  -> ()
// Parameters:
//		class AActor*                                      EndRoundFocus                                              (OptionalParm, Parm)
void AController::RoundHasEnded(class AActor* EndRoundFocus)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.RoundHasEnded");

	AController_RoundHasEnded_Params params {};
	params.EndRoundFocus = EndRoundFocus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.StopFiring
//		Flags  -> ()
void AController::StopFiring()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.StopFiring");

	AController_StopFiring_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.FireWeaponAt
//		Flags  -> ()
// Parameters:
//		class AActor*                                      inActor                                                    (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::FireWeaponAt(class AActor* inActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.FireWeaponAt");

	AController_FireWeaponAt_Params params {};
	params.inActor = inActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.RatePickup
//		Flags  -> ()
// Parameters:
//		class AActor*                                      PickupHolder                                               (Parm)
//		class UClass*                                      inPickup                                                   (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AController::RatePickup(class AActor* PickupHolder, class UClass* inPickup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.RatePickup");

	AController_RatePickup_Params params {};
	params.PickupHolder = PickupHolder;
	params.inPickup = inPickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.WarnProjExplode
//		Flags  -> ()
// Parameters:
//		class AProjectile*                                 Proj                                                       (Parm)
void AController::WarnProjExplode(class AProjectile* Proj)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.WarnProjExplode");

	AController_WarnProjExplode_Params params {};
	params.Proj = Proj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.NotifyProjLanded
//		Flags  -> ()
// Parameters:
//		class AProjectile*                                 Proj                                                       (Parm)
void AController::NotifyProjLanded(class AProjectile* Proj)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyProjLanded");

	AController_NotifyProjLanded_Params params {};
	params.Proj = Proj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.NotifyKilled
//		Flags  -> ()
// Parameters:
//		class AController*                                 Killer                                                     (Parm)
//		class AController*                                 Killed                                                     (Parm)
//		class APawn*                                       KilledPawn                                                 (Parm)
//		class UClass*                                      damageTyp                                                  (Parm)
void AController::NotifyKilled(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* damageTyp)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyKilled");

	AController_NotifyKilled_Params params {};
	params.Killer = Killer;
	params.Killed = Killed;
	params.KilledPawn = KilledPawn;
	params.damageTyp = damageTyp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.GameHasEnded
//		Flags  -> ()
// Parameters:
//		class AActor*                                      EndGameFocus                                               (OptionalParm, Parm)
//		bool                                               bIsWinner                                                  (OptionalParm, Parm)
void AController::GameHasEnded(class AActor* EndGameFocus, bool bIsWinner)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.GameHasEnded");

	AController_GameHasEnded_Params params {};
	params.EndGameFocus = EndGameFocus;
	params.bIsWinner = bIsWinner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.SetCharacter
//		Flags  -> ()
// Parameters:
//		struct FString                                     inCharacter                                                (Parm, NeedCtorLink)
void AController::SetCharacter(const struct FString& inCharacter)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetCharacter");

	AController_SetCharacter_Params params {};
	params.inCharacter = inCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.ServerGivePawn
//		Flags  -> ()
void AController::ServerGivePawn()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.ServerGivePawn");

	AController_ServerGivePawn_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.ServerRestartPlayer
//		Flags  -> ()
void AController::ServerRestartPlayer()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.ServerRestartPlayer");

	AController_ServerRestartPlayer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.GetTeamNum
//		Flags  -> ()
// Parameters:
//		unsigned char                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
unsigned char AController::GetTeamNum()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetTeamNum");

	AController_GetTeamNum_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.InitPlayerReplicationInfo
//		Flags  -> ()
void AController::InitPlayerReplicationInfo()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.InitPlayerReplicationInfo");

	AController_InitPlayerReplicationInfo_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.NotifyTakeHit
//		Flags  -> ()
// Parameters:
//		class AController*                                 InstigatedBy                                               (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		int                                                Damage                                                     (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FVector                                     Momentum                                                   (Parm)
void AController::NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyTakeHit");

	AController_NotifyTakeHit_Params params {};
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.Momentum = Momentum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.EnemyJustTeleported
//		Flags  -> ()
void AController::EnemyJustTeleported()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.EnemyJustTeleported");

	AController_EnemyJustTeleported_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.BeyondFogDistance
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ViewPoint                                                  (Parm)
//		struct FVector                                     OtherPoint                                                 (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::BeyondFogDistance(const struct FVector& ViewPoint, const struct FVector& OtherPoint)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.BeyondFogDistance");

	AController_BeyondFogDistance_Params params {};
	params.ViewPoint = ViewPoint;
	params.OtherPoint = OtherPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.Restart
//		Flags  -> ()
// Parameters:
//		bool                                               bVehicleTransition                                         (Parm)
void AController::Restart(bool bVehicleTransition)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.Restart");

	AController_Restart_Params params {};
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.CleanupPRI
//		Flags  -> ()
void AController::CleanupPRI()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.CleanupPRI");

	AController_CleanupPRI_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.Destroyed
//		Flags  -> ()
void AController::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.Destroyed");

	AController_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.NotifyPostLanded
//		Flags  -> ()
void AController::NotifyPostLanded()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyPostLanded");

	AController_NotifyPostLanded_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.GamePlayEndedState
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::GamePlayEndedState()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.GamePlayEndedState");

	AController_GamePlayEndedState_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.PawnDied
//		Flags  -> ()
// Parameters:
//		class APawn*                                       inPawn                                                     (Parm)
void AController::PawnDied(class APawn* inPawn)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.PawnDied");

	AController_PawnDied_Params params {};
	params.inPawn = inPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.UnPossess
//		Flags  -> ()
void AController::UnPossess()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.UnPossess");

	AController_UnPossess_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.Possess
//		Flags  -> ()
// Parameters:
//		class APawn*                                       inPawn                                                     (Parm)
//		bool                                               bVehicleTransition                                         (Parm)
void AController::Possess(class APawn* inPawn, bool bVehicleTransition)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.Possess");

	AController_Possess_Params params {};
	params.inPawn = inPawn;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.OnPossess
//		Flags  -> ()
// Parameters:
//		class USeqAct_Possess*                             inAction                                                   (Parm)
void AController::OnPossess(class USeqAct_Possess* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnPossess");

	AController_OnPossess_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void AController::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReplicatedEvent");

	AController_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.ClientSetRotation
//		Flags  -> ()
// Parameters:
//		struct FRotator                                    NewRotation                                                (Parm)
//		bool                                               bResetCamera                                               (OptionalParm, Parm)
void AController::ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSetRotation");

	AController_ClientSetRotation_Params params {};
	params.NewRotation = NewRotation;
	params.bResetCamera = bResetCamera;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.ClientSetLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewLocation                                                (Parm)
//		struct FRotator                                    NewRotation                                                (Parm)
void AController::ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSetLocation");

	AController_ClientSetLocation_Params params {};
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.Reset
//		Flags  -> ()
void AController::Reset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.Reset");

	AController_Reset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.PostBeginPlay
//		Flags  -> ()
void AController::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.PostBeginPlay");

	AController_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.SetSkelControlScale
//		Flags  -> ()
// Parameters:
//		struct FName                                       SkelControlName                                            (Parm)
//		float                                              Scale                                                      (Parm)
void AController::SetSkelControlScale(const struct FName& SkelControlName, float Scale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetSkelControlScale");

	AController_SetSkelControlScale_Params params {};
	params.SkelControlName = SkelControlName;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.SetMorphWeight
//		Flags  -> ()
// Parameters:
//		struct FName                                       MorphNodeName                                              (Parm)
//		float                                              MorphWeight                                                (Parm)
void AController::SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetMorphWeight");

	AController_SetMorphWeight_Params params {};
	params.MorphNodeName = MorphNodeName;
	params.MorphWeight = MorphWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.StopActorFaceFXAnim
//		Flags  -> ()
void AController::StopActorFaceFXAnim()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.StopActorFaceFXAnim");

	AController_StopActorFaceFXAnim_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.PlayActorFaceFXAnim
//		Flags  -> ()
// Parameters:
//		class UFaceFXAnimSet*                              AnimSet                                                    (Parm)
//		struct FString                                     GroupName                                                  (Parm, NeedCtorLink)
//		struct FString                                     SeqName                                                    (Parm, NeedCtorLink)
//		class USoundCue*                                   SoundCueToPlay                                             (Parm)
//		class UAkEvent*                                    AkEventToPlay                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.PlayActorFaceFXAnim");

	AController_PlayActorFaceFXAnim_Params params {};
	params.AnimSet = AnimSet;
	params.GroupName = GroupName;
	params.SeqName = SeqName;
	params.SoundCueToPlay = SoundCueToPlay;
	params.AkEventToPlay = AkEventToPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.FinishAnimControl
//		Flags  -> ()
// Parameters:
//		class UInterpGroup*                                InInterpGroup                                              (Parm)
void AController::FinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.FinishAnimControl");

	AController_FinishAnimControl_Params params {};
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.SetAnimPosition
//		Flags  -> ()
// Parameters:
//		struct FName                                       SlotName                                                   (Parm)
//		int                                                ChannelIndex                                               (Parm)
//		struct FName                                       InAnimSeqName                                              (Parm)
//		float                                              InPosition                                                 (Parm)
//		bool                                               bFireNotifies                                              (Parm)
//		bool                                               bLooping                                                   (Parm)
//		bool                                               bEnableRootMotion                                          (Parm)
//		struct FPointer                                    pRootBoneOption                                            (OptionalParm, Parm)
//		struct FPointer                                    pRootBoneRotationOption                                    (OptionalParm, Parm)
void AController::SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion, const struct FPointer& pRootBoneOption, const struct FPointer& pRootBoneRotationOption)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetAnimPosition");

	AController_SetAnimPosition_Params params {};
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;
	params.bEnableRootMotion = bEnableRootMotion;
	params.pRootBoneOption = pRootBoneOption;
	params.pRootBoneRotationOption = pRootBoneRotationOption;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.BeginAnimControl
//		Flags  -> ()
// Parameters:
//		class UInterpGroup*                                InInterpGroup                                              (Parm)
void AController::BeginAnimControl(class UInterpGroup* InInterpGroup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.BeginAnimControl");

	AController_BeginAnimControl_Params params {};
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.NotifyPathChanged
//		Flags  -> ()
void AController::NotifyPathChanged()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyPathChanged");

	AController_NotifyPathChanged_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.GetAdjustLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector AController::GetAdjustLocation()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetAdjustLocation");

	AController_GetAdjustLocation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.SetAdjustLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewLoc                                                     (Parm)
//		bool                                               bAdjust                                                    (Parm)
//		bool                                               bOffsetFromBase                                            (OptionalParm, Parm)
void AController::SetAdjustLocation(const struct FVector& NewLoc, bool bAdjust, bool bOffsetFromBase)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetAdjustLocation");

	AController_SetAdjustLocation_Params params {};
	params.NewLoc = NewLoc;
	params.bAdjust = bAdjust;
	params.bOffsetFromBase = bOffsetFromBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.GetDestinationPosition
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector AController::GetDestinationPosition()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetDestinationPosition");

	AController_GetDestinationPosition_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.SetDestinationPosition
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Dest                                                       (Parm)
//		bool                                               bOffsetFromBase                                            (OptionalParm, Parm)
void AController::SetDestinationPosition(const struct FVector& Dest, bool bOffsetFromBase)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetDestinationPosition");

	AController_SetDestinationPosition_Params params {};
	params.Dest = Dest;
	params.bOffsetFromBase = bOffsetFromBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.GetFocalPoint
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector AController::GetFocalPoint()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetFocalPoint");

	AController_GetFocalPoint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.SetFocalPoint
//		Flags  -> ()
// Parameters:
//		struct FVector                                     FP                                                         (Parm)
//		bool                                               bOffsetFromBase                                            (OptionalParm, Parm)
void AController::SetFocalPoint(const struct FVector& FP, bool bOffsetFromBase)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetFocalPoint");

	AController_SetFocalPoint_Params params {};
	params.FP = FP;
	params.bOffsetFromBase = bOffsetFromBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.RouteCache_RemoveIndex
//		Flags  -> ()
// Parameters:
//		int                                                InIndex                                                    (Parm)
//		int                                                Count                                                      (OptionalParm, Parm)
void AController::RouteCache_RemoveIndex(int InIndex, int Count)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.RouteCache_RemoveIndex");

	AController_RouteCache_RemoveIndex_Params params {};
	params.InIndex = InIndex;
	params.Count = Count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.RouteCache_RemoveItem
//		Flags  -> ()
// Parameters:
//		class ANavigationPoint*                            Nav                                                        (Parm)
void AController::RouteCache_RemoveItem(class ANavigationPoint* Nav)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.RouteCache_RemoveItem");

	AController_RouteCache_RemoveItem_Params params {};
	params.Nav = Nav;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.RouteCache_InsertItem
//		Flags  -> ()
// Parameters:
//		class ANavigationPoint*                            Nav                                                        (Parm)
//		int                                                Idx                                                        (OptionalParm, Parm)
void AController::RouteCache_InsertItem(class ANavigationPoint* Nav, int Idx)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.RouteCache_InsertItem");

	AController_RouteCache_InsertItem_Params params {};
	params.Nav = Nav;
	params.Idx = Idx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.RouteCache_AddItem
//		Flags  -> ()
// Parameters:
//		class ANavigationPoint*                            Nav                                                        (Parm)
void AController::RouteCache_AddItem(class ANavigationPoint* Nav)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.RouteCache_AddItem");

	AController_RouteCache_AddItem_Params params {};
	params.Nav = Nav;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.RouteCache_Empty
//		Flags  -> ()
void AController::RouteCache_Empty()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.RouteCache_Empty");

	AController_RouteCache_Empty_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.IsLocalController
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::IsLocalController()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsLocalController");

	AController_IsLocalController_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Controller.IsLocalPlayerController
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AController::IsLocalPlayerController()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsLocalPlayerController");

	AController_IsLocalPlayerController_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.UpdateFromURL
//		Flags  -> ()
// Parameters:
//		struct FString                                     URL                                                        (Const, Parm, OutParm, NeedCtorLink)
//		class AGameInfo*                                   Game                                                       (Parm)
void USettings::UpdateFromURL(struct FString* URL, class AGameInfo* Game)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.UpdateFromURL");

	USettings_UpdateFromURL_Params params {};
	params.Game = Game;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.BuildURL
//		Flags  -> ()
// Parameters:
//		struct FString                                     URL                                                        (Parm, OutParm, NeedCtorLink)
void USettings::BuildURL(struct FString* URL)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.BuildURL");

	USettings_BuildURL_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.AppendContextsToURL
//		Flags  -> ()
// Parameters:
//		struct FString                                     URL                                                        (Parm, OutParm, NeedCtorLink)
void USettings::AppendContextsToURL(struct FString* URL)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.AppendContextsToURL");

	USettings_AppendContextsToURL_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.AppendPropertiesToURL
//		Flags  -> ()
// Parameters:
//		struct FString                                     URL                                                        (Parm, OutParm, NeedCtorLink)
void USettings::AppendPropertiesToURL(struct FString* URL)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.AppendPropertiesToURL");

	USettings_AppendPropertiesToURL_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.AppendDataBindingsToURL
//		Flags  -> ()
// Parameters:
//		struct FString                                     URL                                                        (Parm, OutParm, NeedCtorLink)
void USettings::AppendDataBindingsToURL(struct FString* URL)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.AppendDataBindingsToURL");

	USettings_AppendDataBindingsToURL_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetQoSAdvertisedStringSettings
//		Flags  -> ()
// Parameters:
//		TArray<struct FLocalizedStringSetting>             QoSSettings                                                (Parm, OutParm, NeedCtorLink)
void USettings::GetQoSAdvertisedStringSettings(TArray<struct FLocalizedStringSetting>* QoSSettings)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetQoSAdvertisedStringSettings");

	USettings_GetQoSAdvertisedStringSettings_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (QoSSettings != nullptr)
		*QoSSettings = params.QoSSettings;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetQoSAdvertisedProperties
//		Flags  -> ()
// Parameters:
//		TArray<struct FSettingsProperty>                   QoSProps                                                   (Parm, OutParm, NeedCtorLink)
void USettings::GetQoSAdvertisedProperties(TArray<struct FSettingsProperty>* QoSProps)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetQoSAdvertisedProperties");

	USettings_GetQoSAdvertisedProperties_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (QoSProps != nullptr)
		*QoSProps = params.QoSProps;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetRangedPropertyValue
//		Flags  -> ()
// Parameters:
//		int                                                PropertyId                                                 (Parm)
//		float                                              OutValue                                                   (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USettings::GetRangedPropertyValue(int PropertyId, float* OutValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetRangedPropertyValue");

	USettings_GetRangedPropertyValue_Params params {};
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.SetRangedPropertyValue
//		Flags  -> ()
// Parameters:
//		int                                                PropertyId                                                 (Parm)
//		float                                              NewValue                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USettings::SetRangedPropertyValue(int PropertyId, float NewValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetRangedPropertyValue");

	USettings_SetRangedPropertyValue_Params params {};
	params.PropertyId = PropertyId;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetPropertyRange
//		Flags  -> ()
// Parameters:
//		int                                                PropertyId                                                 (Parm)
//		float                                              OutMinValue                                                (Parm, OutParm)
//		float                                              OutMaxValue                                                (Parm, OutParm)
//		float                                              RangeIncrement                                             (Parm, OutParm)
//		unsigned char                                      bFormatAsInt                                               (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USettings::GetPropertyRange(int PropertyId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyRange");

	USettings_GetPropertyRange_Params params {};
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutMinValue != nullptr)
		*OutMinValue = params.OutMinValue;
	if (OutMaxValue != nullptr)
		*OutMaxValue = params.OutMaxValue;
	if (RangeIncrement != nullptr)
		*RangeIncrement = params.RangeIncrement;
	if (bFormatAsInt != nullptr)
		*bFormatAsInt = params.bFormatAsInt;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetPropertyMappingType
//		Flags  -> ()
// Parameters:
//		int                                                PropertyId                                                 (Parm)
//		TEnumAsByte<Engine_EPropertyValueMappingType>      OutType                                                    (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USettings::GetPropertyMappingType(int PropertyId, TEnumAsByte<Engine_EPropertyValueMappingType>* OutType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyMappingType");

	USettings_GetPropertyMappingType_Params params {};
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutType != nullptr)
		*OutType = params.OutType;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.HasStringSetting
//		Flags  -> ()
// Parameters:
//		int                                                SettingId                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USettings::HasStringSetting(int SettingId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.HasStringSetting");

	USettings_HasStringSetting_Params params {};
	params.SettingId = SettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.HasProperty
//		Flags  -> ()
// Parameters:
//		int                                                PropertyId                                                 (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USettings::HasProperty(int PropertyId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.HasProperty");

	USettings_HasProperty_Params params {};
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.UpdateProperties
//		Flags  -> ()
// Parameters:
//		TArray<struct FSettingsProperty>                   Props                                                      (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               bShouldAddIfMissing                                        (OptionalParm, Parm)
void USettings::UpdateProperties(TArray<struct FSettingsProperty>* Props, bool bShouldAddIfMissing)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.UpdateProperties");

	USettings_UpdateProperties_Params params {};
	params.bShouldAddIfMissing = bShouldAddIfMissing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Props != nullptr)
		*Props = params.Props;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.UpdateStringSettings
//		Flags  -> ()
// Parameters:
//		TArray<struct FLocalizedStringSetting>             Settings                                                   (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               bShouldAddIfMissing                                        (OptionalParm, Parm)
void USettings::UpdateStringSettings(TArray<struct FLocalizedStringSetting>* Settings, bool bShouldAddIfMissing)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.UpdateStringSettings");

	USettings_UpdateStringSettings_Params params {};
	params.bShouldAddIfMissing = bShouldAddIfMissing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Settings != nullptr)
		*Settings = params.Settings;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetPropertyType
//		Flags  -> ()
// Parameters:
//		int                                                PropertyId                                                 (Parm)
//		TEnumAsByte<Engine_ESettingsDataType>              ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_ESettingsDataType> USettings::GetPropertyType(int PropertyId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyType");

	USettings_GetPropertyType_Params params {};
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetPropertyValueId
//		Flags  -> ()
// Parameters:
//		int                                                PropertyId                                                 (Parm)
//		int                                                ValueId                                                    (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USettings::GetPropertyValueId(int PropertyId, int* ValueId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyValueId");

	USettings_GetPropertyValueId_Params params {};
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ValueId != nullptr)
		*ValueId = params.ValueId;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.SetPropertyValueId
//		Flags  -> ()
// Parameters:
//		int                                                PropertyId                                                 (Parm)
//		int                                                ValueId                                                    (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USettings::SetPropertyValueId(int PropertyId, int ValueId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetPropertyValueId");

	USettings_SetPropertyValueId_Params params {};
	params.PropertyId = PropertyId;
	params.ValueId = ValueId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetStringProperty
//		Flags  -> ()
// Parameters:
//		int                                                PropertyId                                                 (Parm)
//		struct FString                                     Value                                                      (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USettings::GetStringProperty(int PropertyId, struct FString* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringProperty");

	USettings_GetStringProperty_Params params {};
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.SetStringProperty
//		Flags  -> ()
// Parameters:
//		int                                                PropertyId                                                 (Parm)
//		struct FString                                     Value                                                      (Parm, NeedCtorLink)
void USettings::SetStringProperty(int PropertyId, const struct FString& Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetStringProperty");

	USettings_SetStringProperty_Params params {};
	params.PropertyId = PropertyId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetIntProperty
//		Flags  -> ()
// Parameters:
//		int                                                PropertyId                                                 (Parm)
//		int                                                Value                                                      (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USettings::GetIntProperty(int PropertyId, int* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetIntProperty");

	USettings_GetIntProperty_Params params {};
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.SetIntProperty
//		Flags  -> ()
// Parameters:
//		int                                                PropertyId                                                 (Parm)
//		int                                                Value                                                      (Parm)
void USettings::SetIntProperty(int PropertyId, int Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetIntProperty");

	USettings_SetIntProperty_Params params {};
	params.PropertyId = PropertyId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetFloatProperty
//		Flags  -> ()
// Parameters:
//		int                                                PropertyId                                                 (Parm)
//		float                                              Value                                                      (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USettings::GetFloatProperty(int PropertyId, float* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetFloatProperty");

	USettings_GetFloatProperty_Params params {};
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.SetFloatProperty
//		Flags  -> ()
// Parameters:
//		int                                                PropertyId                                                 (Parm)
//		float                                              Value                                                      (Parm)
void USettings::SetFloatProperty(int PropertyId, float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetFloatProperty");

	USettings_SetFloatProperty_Params params {};
	params.PropertyId = PropertyId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.SetPropertyFromStringByName
//		Flags  -> ()
// Parameters:
//		struct FName                                       PropertyName                                               (Parm)
//		struct FString                                     NewValue                                                   (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USettings::SetPropertyFromStringByName(const struct FName& PropertyName, struct FString* NewValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetPropertyFromStringByName");

	USettings_SetPropertyFromStringByName_Params params {};
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (NewValue != nullptr)
		*NewValue = params.NewValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetPropertyAsStringByName
//		Flags  -> ()
// Parameters:
//		struct FName                                       PropertyName                                               (Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString USettings::GetPropertyAsStringByName(const struct FName& PropertyName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyAsStringByName");

	USettings_GetPropertyAsStringByName_Params params {};
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetPropertyAsString
//		Flags  -> ()
// Parameters:
//		int                                                PropertyId                                                 (Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString USettings::GetPropertyAsString(int PropertyId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyAsString");

	USettings_GetPropertyAsString_Params params {};
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetPropertyColumnHeader
//		Flags  -> ()
// Parameters:
//		int                                                PropertyId                                                 (Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString USettings::GetPropertyColumnHeader(int PropertyId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyColumnHeader");

	USettings_GetPropertyColumnHeader_Params params {};
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetPropertyName
//		Flags  -> ()
// Parameters:
//		int                                                PropertyId                                                 (Parm)
//		struct FName                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FName USettings::GetPropertyName(int PropertyId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyName");

	USettings_GetPropertyName_Params params {};
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetPropertyId
//		Flags  -> ()
// Parameters:
//		struct FName                                       PropertyName                                               (Parm)
//		int                                                PropertyId                                                 (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USettings::GetPropertyId(const struct FName& PropertyName, int* PropertyId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyId");

	USettings_GetPropertyId_Params params {};
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (PropertyId != nullptr)
		*PropertyId = params.PropertyId;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.SetStringSettingValueFromStringByName
//		Flags  -> ()
// Parameters:
//		struct FName                                       StringSettingName                                          (Parm)
//		struct FString                                     NewValue                                                   (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USettings::SetStringSettingValueFromStringByName(const struct FName& StringSettingName, struct FString* NewValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetStringSettingValueFromStringByName");

	USettings_SetStringSettingValueFromStringByName_Params params {};
	params.StringSettingName = StringSettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (NewValue != nullptr)
		*NewValue = params.NewValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetStringSettingValueNameByName
//		Flags  -> ()
// Parameters:
//		struct FName                                       StringSettingName                                          (Parm)
//		struct FName                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FName USettings::GetStringSettingValueNameByName(const struct FName& StringSettingName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingValueNameByName");

	USettings_GetStringSettingValueNameByName_Params params {};
	params.StringSettingName = StringSettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetStringSettingValueName
//		Flags  -> ()
// Parameters:
//		int                                                StringSettingId                                            (Parm)
//		int                                                ValueIndex                                                 (Parm)
//		struct FName                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FName USettings::GetStringSettingValueName(int StringSettingId, int ValueIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingValueName");

	USettings_GetStringSettingValueName_Params params {};
	params.StringSettingId = StringSettingId;
	params.ValueIndex = ValueIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.IsWildcardStringSetting
//		Flags  -> ()
// Parameters:
//		int                                                StringSettingId                                            (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USettings::IsWildcardStringSetting(int StringSettingId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.IsWildcardStringSetting");

	USettings_IsWildcardStringSetting_Params params {};
	params.StringSettingId = StringSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetStringSettingColumnHeader
//		Flags  -> ()
// Parameters:
//		int                                                StringSettingId                                            (Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString USettings::GetStringSettingColumnHeader(int StringSettingId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingColumnHeader");

	USettings_GetStringSettingColumnHeader_Params params {};
	params.StringSettingId = StringSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetStringSettingName
//		Flags  -> ()
// Parameters:
//		int                                                StringSettingId                                            (Parm)
//		struct FName                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FName USettings::GetStringSettingName(int StringSettingId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingName");

	USettings_GetStringSettingName_Params params {};
	params.StringSettingId = StringSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetStringSettingId
//		Flags  -> ()
// Parameters:
//		struct FName                                       StringSettingName                                          (Parm)
//		int                                                StringSettingId                                            (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USettings::GetStringSettingId(const struct FName& StringSettingName, int* StringSettingId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingId");

	USettings_GetStringSettingId_Params params {};
	params.StringSettingName = StringSettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (StringSettingId != nullptr)
		*StringSettingId = params.StringSettingId;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetStringSettingValueByName
//		Flags  -> ()
// Parameters:
//		struct FName                                       StringSettingName                                          (Parm)
//		int                                                ValueIndex                                                 (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USettings::GetStringSettingValueByName(const struct FName& StringSettingName, int* ValueIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingValueByName");

	USettings_GetStringSettingValueByName_Params params {};
	params.StringSettingName = StringSettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ValueIndex != nullptr)
		*ValueIndex = params.ValueIndex;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.SetStringSettingValueByName
//		Flags  -> ()
// Parameters:
//		struct FName                                       StringSettingName                                          (Parm)
//		int                                                ValueIndex                                                 (Parm)
//		bool                                               bShouldAutoAdd                                             (Parm)
void USettings::SetStringSettingValueByName(const struct FName& StringSettingName, int ValueIndex, bool bShouldAutoAdd)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetStringSettingValueByName");

	USettings_SetStringSettingValueByName_Params params {};
	params.StringSettingName = StringSettingName;
	params.ValueIndex = ValueIndex;
	params.bShouldAutoAdd = bShouldAutoAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetStringSettingValueNames
//		Flags  -> ()
// Parameters:
//		int                                                StringSettingId                                            (Parm)
//		TArray<struct FIdToStringMapping>                  Values                                                     (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USettings::GetStringSettingValueNames(int StringSettingId, TArray<struct FIdToStringMapping>* Values)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingValueNames");

	USettings_GetStringSettingValueNames_Params params {};
	params.StringSettingId = StringSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Values != nullptr)
		*Values = params.Values;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.IncrementStringSettingValue
//		Flags  -> ()
// Parameters:
//		int                                                StringSettingId                                            (Parm)
//		int                                                Direction                                                  (Parm)
//		bool                                               bShouldWrap                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USettings::IncrementStringSettingValue(int StringSettingId, int Direction, bool bShouldWrap)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.IncrementStringSettingValue");

	USettings_IncrementStringSettingValue_Params params {};
	params.StringSettingId = StringSettingId;
	params.Direction = Direction;
	params.bShouldWrap = bShouldWrap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetStringSettingValue
//		Flags  -> ()
// Parameters:
//		int                                                StringSettingId                                            (Parm)
//		int                                                ValueIndex                                                 (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USettings::GetStringSettingValue(int StringSettingId, int* ValueIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingValue");

	USettings_GetStringSettingValue_Params params {};
	params.StringSettingId = StringSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ValueIndex != nullptr)
		*ValueIndex = params.ValueIndex;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.SetStringSettingValue
//		Flags  -> ()
// Parameters:
//		int                                                StringSettingId                                            (Parm)
//		int                                                ValueIndex                                                 (Parm)
//		bool                                               bShouldAutoAdd                                             (OptionalParm, Parm)
void USettings::SetStringSettingValue(int StringSettingId, int ValueIndex, bool bShouldAutoAdd)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetStringSettingValue");

	USettings_SetStringSettingValue_Params params {};
	params.StringSettingId = StringSettingId;
	params.ValueIndex = ValueIndex;
	params.bShouldAutoAdd = bShouldAutoAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetSettingsDataDateTime
//		Flags  -> ()
// Parameters:
//		struct FSettingsData                               Data                                                       (Parm, OutParm)
//		int                                                OutInt1                                                    (Parm, OutParm)
//		int                                                OutInt2                                                    (Parm, OutParm)
void USettings::GetSettingsDataDateTime(struct FSettingsData* Data, int* OutInt1, int* OutInt2)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetSettingsDataDateTime");

	USettings_GetSettingsDataDateTime_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
	if (OutInt1 != nullptr)
		*OutInt1 = params.OutInt1;
	if (OutInt2 != nullptr)
		*OutInt2 = params.OutInt2;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetSettingsDataBlob
//		Flags  -> ()
// Parameters:
//		struct FSettingsData                               Data                                                       (Parm, OutParm)
//		TArray<unsigned char>                              OutBlob                                                    (Parm, OutParm, NeedCtorLink)
void USettings::GetSettingsDataBlob(struct FSettingsData* Data, TArray<unsigned char>* OutBlob)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetSettingsDataBlob");

	USettings_GetSettingsDataBlob_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
	if (OutBlob != nullptr)
		*OutBlob = params.OutBlob;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetSettingsDataInt
//		Flags  -> ()
// Parameters:
//		struct FSettingsData                               Data                                                       (Parm, OutParm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USettings::GetSettingsDataInt(struct FSettingsData* Data)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetSettingsDataInt");

	USettings_GetSettingsDataInt_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.GetSettingsDataFloat
//		Flags  -> ()
// Parameters:
//		struct FSettingsData                               Data                                                       (Parm, OutParm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float USettings::GetSettingsDataFloat(struct FSettingsData* Data)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetSettingsDataFloat");

	USettings_GetSettingsDataFloat_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.EmptySettingsData
//		Flags  -> ()
// Parameters:
//		struct FSettingsData                               Data                                                       (Parm, OutParm)
void USettings::EmptySettingsData(struct FSettingsData* Data)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.EmptySettingsData");

	USettings_EmptySettingsData_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.SetSettingsData
//		Flags  -> ()
// Parameters:
//		struct FSettingsData                               Data                                                       (Parm, OutParm)
//		struct FSettingsData                               Data2Copy                                                  (Parm, OutParm)
void USettings::SetSettingsData(struct FSettingsData* Data, struct FSettingsData* Data2Copy)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetSettingsData");

	USettings_SetSettingsData_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
	if (Data2Copy != nullptr)
		*Data2Copy = params.Data2Copy;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.SetSettingsDataBlob
//		Flags  -> ()
// Parameters:
//		struct FSettingsData                               Data                                                       (Parm, OutParm)
//		TArray<unsigned char>                              InBlob                                                     (Parm, OutParm, NeedCtorLink)
void USettings::SetSettingsDataBlob(struct FSettingsData* Data, TArray<unsigned char>* InBlob)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetSettingsDataBlob");

	USettings_SetSettingsDataBlob_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
	if (InBlob != nullptr)
		*InBlob = params.InBlob;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.SetSettingsDataDateTime
//		Flags  -> ()
// Parameters:
//		struct FSettingsData                               Data                                                       (Parm, OutParm)
//		int                                                InInt1                                                     (Parm)
//		int                                                InInt2                                                     (Parm)
void USettings::SetSettingsDataDateTime(struct FSettingsData* Data, int InInt1, int InInt2)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetSettingsDataDateTime");

	USettings_SetSettingsDataDateTime_Params params {};
	params.InInt1 = InInt1;
	params.InInt2 = InInt2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.SetSettingsDataInt
//		Flags  -> ()
// Parameters:
//		struct FSettingsData                               Data                                                       (Parm, OutParm)
//		int                                                InInt                                                      (Parm)
void USettings::SetSettingsDataInt(struct FSettingsData* Data, int InInt)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetSettingsDataInt");

	USettings_SetSettingsDataInt_Params params {};
	params.InInt = InInt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Settings.SetSettingsDataFloat
//		Flags  -> ()
// Parameters:
//		struct FSettingsData                               Data                                                       (Parm, OutParm)
//		float                                              InFloat                                                    (Parm)
void USettings::SetSettingsDataFloat(struct FSettingsData* Data, float InFloat)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetSettingsDataFloat");

	USettings_SetSettingsDataFloat_Params params {};
	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.StopCameraAnim
//		Flags  -> ()
// Parameters:
//		class UCameraAnimInst*                             AnimInst                                                   (Parm)
//		bool                                               bImmediate                                                 (OptionalParm, Parm)
void ACamera::StopCameraAnim(class UCameraAnimInst* AnimInst, bool bImmediate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.StopCameraAnim");

	ACamera_StopCameraAnim_Params params {};
	params.AnimInst = AnimInst;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.StopAllCameraAnimsByType
//		Flags  -> ()
// Parameters:
//		class UCameraAnim*                                 Anim                                                       (Parm)
//		bool                                               bImmediate                                                 (OptionalParm, Parm)
void ACamera::StopAllCameraAnimsByType(class UCameraAnim* Anim, bool bImmediate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.StopAllCameraAnimsByType");

	ACamera_StopAllCameraAnimsByType_Params params {};
	params.Anim = Anim;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.StopAllCameraAnims
//		Flags  -> ()
// Parameters:
//		bool                                               bImmediate                                                 (OptionalParm, Parm)
void ACamera::StopAllCameraAnims(bool bImmediate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.StopAllCameraAnims");

	ACamera_StopAllCameraAnims_Params params {};
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.PlayCameraAnim
//		Flags  -> ()
// Parameters:
//		class UCameraAnim*                                 Anim                                                       (Parm)
//		float                                              Rate                                                       (OptionalParm, Parm)
//		float                                              Scale                                                      (OptionalParm, Parm)
//		float                                              BlendInTime                                                (OptionalParm, Parm)
//		float                                              BlendOutTime                                               (OptionalParm, Parm)
//		bool                                               bLoop                                                      (OptionalParm, Parm)
//		bool                                               bRandomStartTime                                           (OptionalParm, Parm)
//		float                                              Duration                                                   (OptionalParm, Parm)
//		bool                                               bSingleInstance                                            (OptionalParm, Parm)
//		bool                                               bForceFinished                                             (OptionalParm, Parm)
//		class UCameraAnimInst*                             ReturnValue                                                (Parm, OutParm, ReturnParm)
class UCameraAnimInst* ACamera::PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, bool bSingleInstance, bool bForceFinished)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.PlayCameraAnim");

	ACamera_PlayCameraAnim_Params params {};
	params.Anim = Anim;
	params.Rate = Rate;
	params.Scale = Scale;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLoop = bLoop;
	params.bRandomStartTime = bRandomStartTime;
	params.Duration = Duration;
	params.bSingleInstance = bSingleInstance;
	params.bForceFinished = bForceFinished;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.ClearAllCameraShakes
//		Flags  -> ()
void ACamera::ClearAllCameraShakes()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.ClearAllCameraShakes");

	ACamera_ClearAllCameraShakes_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.PlayWorldCameraShake
//		Flags  -> (Singular, Net, Native, Event, Operator, HasOptionalParms, Const, Public, Protected, NetServer, HasOutParms, NetClient, K2Call, K2Pure)
// Parameters:
//		class UCameraShake*                                Shake                                                      (Parm)
//		class AActor*                                      ShakeInstigator                                            (Parm)
//		struct FVector                                     Epicenter                                                  (Parm)
//		float                                              InnerRadius                                                (Parm)
//		float                                              OuterRadius                                                (Parm)
//		float                                              Falloff                                                    (Parm)
//		bool                                               bTryForceFeedback                                          (Parm)
//		bool                                               bOrientShakeTowardsEpicenter                               (OptionalParm, Parm)
void ACamera::PlayWorldCameraShake(class UCameraShake* Shake, class AActor* ShakeInstigator, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bTryForceFeedback, bool bOrientShakeTowardsEpicenter)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.PlayWorldCameraShake");

	ACamera_PlayWorldCameraShake_Params params {};
	params.Shake = Shake;
	params.ShakeInstigator = ShakeInstigator;
	params.Epicenter = Epicenter;
	params.InnerRadius = InnerRadius;
	params.OuterRadius = OuterRadius;
	params.Falloff = Falloff;
	params.bTryForceFeedback = bTryForceFeedback;
	params.bOrientShakeTowardsEpicenter = bOrientShakeTowardsEpicenter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.CalcRadialShakeScale
//		Flags  -> (Singular, Net, Simulated, Static, HasOptionalParms, Const, Public, Protected, NetServer, HasOutParms, NetClient, K2Call, K2Pure)
// Parameters:
//		class ACamera*                                     Cam                                                        (Parm)
//		struct FVector                                     Epicenter                                                  (Parm)
//		float                                              InnerRadius                                                (Parm)
//		float                                              OuterRadius                                                (Parm)
//		float                                              Falloff                                                    (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float ACamera::STATIC_CalcRadialShakeScale(class ACamera* Cam, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.CalcRadialShakeScale");

	ACamera_CalcRadialShakeScale_Params params {};
	params.Cam = Cam;
	params.Epicenter = Epicenter;
	params.InnerRadius = InnerRadius;
	params.OuterRadius = OuterRadius;
	params.Falloff = Falloff;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.StopCameraShake
//		Flags  -> ()
// Parameters:
//		class UCameraShake*                                Shake                                                      (Parm)
void ACamera::StopCameraShake(class UCameraShake* Shake)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.StopCameraShake");

	ACamera_StopCameraShake_Params params {};
	params.Shake = Shake;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.PlayCameraShake
//		Flags  -> ()
// Parameters:
//		class UCameraShake*                                Shake                                                      (Parm)
//		float                                              Scale                                                      (Parm)
//		TEnumAsByte<Engine_ECameraAnimPlaySpace>           PlaySpace                                                  (OptionalParm, Parm)
//		struct FRotator                                    UserPlaySpaceRot                                           (OptionalParm, Parm)
void ACamera::PlayCameraShake(class UCameraShake* Shake, float Scale, TEnumAsByte<Engine_ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.PlayCameraShake");

	ACamera_PlayCameraShake_Params params {};
	params.Shake = Shake;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.ClearCameraLensEffects
//		Flags  -> ()
void ACamera::ClearCameraLensEffects()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.ClearCameraLensEffects");

	ACamera_ClearCameraLensEffects_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.RemoveCameraLensEffect
//		Flags  -> ()
// Parameters:
//		class AEmitterCameraLensEffectBase*                Emitter                                                    (Parm)
void ACamera::RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.RemoveCameraLensEffect");

	ACamera_RemoveCameraLensEffect_Params params {};
	params.Emitter = Emitter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.AddCameraLensEffect
//		Flags  -> (Simulated, Exec, Native, Event, Operator, Static, Const, Public, Protected, NetServer, HasOutParms, NetClient, K2Call, K2Pure)
// Parameters:
//		class UClass*                                      LensEffectEmitterClass                                     (Parm)
void ACamera::STATIC_AddCameraLensEffect(class UClass* LensEffectEmitterClass)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.AddCameraLensEffect");

	ACamera_AddCameraLensEffect_Params params {};
	params.LensEffectEmitterClass = LensEffectEmitterClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.FindCameraLensEffect
//		Flags  -> ()
// Parameters:
//		class UClass*                                      LensEffectEmitterClass                                     (Parm)
//		class AEmitterCameraLensEffectBase*                ReturnValue                                                (Parm, OutParm, ReturnParm)
class AEmitterCameraLensEffectBase* ACamera::FindCameraLensEffect(class UClass* LensEffectEmitterClass)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.FindCameraLensEffect");

	ACamera_FindCameraLensEffect_Params params {};
	params.LensEffectEmitterClass = LensEffectEmitterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.DisplayDebug
//		Flags  -> (Net, Simulated, Native, HasOptionalParms, Const, Public, Protected, NetServer, HasOutParms, NetClient, K2Call, K2Pure)
// Parameters:
//		class AHUD*                                        HUD                                                        (Parm)
//		float                                              out_YL                                                     (Parm, OutParm)
//		float                                              out_YPos                                                   (Parm, OutParm)
void ACamera::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.DisplayDebug");

	ACamera_DisplayDebug_Params params {};
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.ProcessViewRotation
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
//		struct FRotator                                    OutViewRotation                                            (Parm, OutParm)
//		struct FRotator                                    OutDeltaRot                                                (Parm, OutParm)
void ACamera::ProcessViewRotation(float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.ProcessViewRotation");

	ACamera_ProcessViewRotation_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutViewRotation != nullptr)
		*OutViewRotation = params.OutViewRotation;
	if (OutDeltaRot != nullptr)
		*OutDeltaRot = params.OutDeltaRot;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.SetViewTarget
//		Flags  -> ()
// Parameters:
//		class AActor*                                      NewViewTarget                                              (Parm)
//		struct FViewTargetTransitionParams                 TransitionParams                                           (OptionalParm, Parm)
void ACamera::SetViewTarget(class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.SetViewTarget");

	ACamera_SetViewTarget_Params params {};
	params.NewViewTarget = NewViewTarget;
	params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.UpdateViewTarget
//		Flags  -> (Singular, NetReliable, Exec, Native, Static, Const, Public, Protected, NetServer, HasOutParms, NetClient, K2Call, K2Pure)
// Parameters:
//		struct FTViewTarget                                OutVT                                                      (Parm, OutParm)
//		float                                              DeltaTime                                                  (Parm)
void ACamera::STATIC_UpdateViewTarget(struct FTViewTarget* OutVT, float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.UpdateViewTarget");

	ACamera_UpdateViewTarget_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutVT != nullptr)
		*OutVT = params.OutVT;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.CheckViewTarget
//		Flags  -> ()
// Parameters:
//		struct FTViewTarget                                VT                                                         (Parm, OutParm)
void ACamera::CheckViewTarget(struct FTViewTarget* VT)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.CheckViewTarget");

	ACamera_CheckViewTarget_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (VT != nullptr)
		*VT = params.VT;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.FillCameraCache
//		Flags  -> ()
// Parameters:
//		struct FTPOV                                       NewPOV                                                     (Const, Parm, OutParm)
void ACamera::FillCameraCache(struct FTPOV* NewPOV)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.FillCameraCache");

	ACamera_FillCameraCache_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (NewPOV != nullptr)
		*NewPOV = params.NewPOV;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.BlendViewTargets
//		Flags  -> (Singular, Net, NetReliable, Exec, Native, Event, Operator, Static, Public, Protected, NetServer, HasOutParms, NetClient, K2Call, K2Pure)
// Parameters:
//		struct FTViewTarget                                A                                                          (Const, Parm, OutParm)
//		struct FTViewTarget                                B                                                          (Const, Parm, OutParm)
//		float                                              Alpha                                                      (Parm)
//		struct FTPOV                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FTPOV ACamera::STATIC_BlendViewTargets(struct FTViewTarget* A, struct FTViewTarget* B, float Alpha)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.BlendViewTargets");

	ACamera_BlendViewTargets_Params params {};
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (A != nullptr)
		*A = params.A;
	if (B != nullptr)
		*B = params.B;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.ApplyAudioFade
//		Flags  -> ()
void ACamera::ApplyAudioFade()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.ApplyAudioFade");

	ACamera_ApplyAudioFade_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.DoUpdateCamera
//		Flags  -> (Net, Simulated, Native, Event, HasOptionalParms, Public, Protected, NetServer, HasOutParms, NetClient, K2Call, K2Pure)
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
void ACamera::DoUpdateCamera(float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.DoUpdateCamera");

	ACamera_DoUpdateCamera_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.UpdateCamera
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
void ACamera::UpdateCamera(float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.UpdateCamera");

	ACamera_UpdateCamera_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.SetDesiredColorScale
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewColorScale                                              (Parm)
//		float                                              InterpTime                                                 (Parm)
void ACamera::SetDesiredColorScale(const struct FVector& NewColorScale, float InterpTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.SetDesiredColorScale");

	ACamera_SetDesiredColorScale_Params params {};
	params.NewColorScale = NewColorScale;
	params.InterpTime = InterpTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.GetCameraRotation
//		Flags  -> ()
// Parameters:
//		struct FRotator                                    ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FRotator ACamera::GetCameraRotation()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.GetCameraRotation");

	ACamera_GetCameraRotation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.GetCameraViewPoint
//		Flags  -> ()
// Parameters:
//		struct FVector                                     OutCamLoc                                                  (Parm, OutParm)
//		struct FRotator                                    OutCamRot                                                  (Parm, OutParm)
void ACamera::GetCameraViewPoint(struct FVector* OutCamLoc, struct FRotator* OutCamRot)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.GetCameraViewPoint");

	ACamera_GetCameraViewPoint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutCamLoc != nullptr)
		*OutCamLoc = params.OutCamLoc;
	if (OutCamRot != nullptr)
		*OutCamRot = params.OutCamRot;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.SetFOV
//		Flags  -> ()
// Parameters:
//		float                                              NewFOV                                                     (Parm)
void ACamera::SetFOV(float NewFOV)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.SetFOV");

	ACamera_SetFOV_Params params {};
	params.NewFOV = NewFOV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.GetFOVAngle
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float ACamera::GetFOVAngle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.GetFOVAngle");

	ACamera_GetFOVAngle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.AdjustViewportFOV
//		Flags  -> ()
// Parameters:
//		float                                              InOutFOV                                                   (Parm, OutParm)
void ACamera::AdjustViewportFOV(float* InOutFOV)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.AdjustViewportFOV");

	ACamera_AdjustViewportFOV_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InOutFOV != nullptr)
		*InOutFOV = params.InOutFOV;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.InitializeFor
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           PC                                                         (Parm)
void ACamera::InitializeFor(class APlayerController* PC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.InitializeFor");

	ACamera_InitializeFor_Params params {};
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.ApplyCameraModifiers
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
//		struct FTPOV                                       OutPOV                                                     (Parm, OutParm)
void ACamera::ApplyCameraModifiers(float DeltaTime, struct FTPOV* OutPOV)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.ApplyCameraModifiers");

	ACamera_ApplyCameraModifiers_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPOV != nullptr)
		*OutPOV = params.OutPOV;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.Destroyed
//		Flags  -> ()
void ACamera::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.Destroyed");

	ACamera_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.PostBeginPlay
//		Flags  -> ()
void ACamera::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.PostBeginPlay");

	ACamera_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Camera.CreateCameraModifier
//		Flags  -> ()
// Parameters:
//		class UClass*                                      ModifierClass                                              (Parm)
//		class UCameraModifier*                             ReturnValue                                                (Parm, OutParm, ReturnParm)
class UCameraModifier* ACamera::CreateCameraModifier(class UClass* ModifierClass)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Camera.CreateCameraModifier");

	ACamera_CreateCameraModifier_Params params {};
	params.ModifierClass = ModifierClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SetMatineeConstantCameraAnim
//		Flags  -> ()
// Parameters:
//		bool                                               bOn                                                        (Parm)
//		unsigned char                                      Type                                                       (Parm)
//		float                                              Rate                                                       (Parm)
void APlayerController::SetMatineeConstantCameraAnim(bool bOn, unsigned char Type, float Rate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetMatineeConstantCameraAnim");

	APlayerController_SetMatineeConstantCameraAnim_Params params {};
	params.bOn = bOn;
	params.Type = Type;
	params.Rate = Rate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.NotifyDisconnect
//		Flags  -> ()
// Parameters:
//		struct FString                                     Command                                                    (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::NotifyDisconnect(const struct FString& Command)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyDisconnect");

	APlayerController_NotifyDisconnect_Params params {};
	params.Command = Command;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ReceivedGameClass
//		Flags  -> ()
// Parameters:
//		class UClass*                                      GameClass                                                  (Parm)
void APlayerController::ReceivedGameClass(class UClass* GameClass)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReceivedGameClass");

	APlayerController_ReceivedGameClass_Params params {};
	params.GameClass = GameClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.LogOutBugItAIGoToLogFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     InScreenShotDesc                                           (Const, Parm, NeedCtorLink)
//		struct FString                                     InGoString                                                 (Const, Parm, NeedCtorLink)
//		struct FString                                     InLocString                                                (Const, Parm, NeedCtorLink)
void APlayerController::LogOutBugItAIGoToLogFile(const struct FString& InScreenShotDesc, const struct FString& InGoString, const struct FString& InLocString)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LogOutBugItAIGoToLogFile");

	APlayerController_LogOutBugItAIGoToLogFile_Params params {};
	params.InScreenShotDesc = InScreenShotDesc;
	params.InGoString = InGoString;
	params.InLocString = InLocString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.LogOutBugItGoToLogFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     InScreenShotDesc                                           (Const, Parm, NeedCtorLink)
//		struct FString                                     InGoString                                                 (Const, Parm, NeedCtorLink)
//		struct FString                                     InLocString                                                (Const, Parm, NeedCtorLink)
void APlayerController::LogOutBugItGoToLogFile(const struct FString& InScreenShotDesc, const struct FString& InGoString, const struct FString& InLocString)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LogOutBugItGoToLogFile");

	APlayerController_LogOutBugItGoToLogFile_Params params {};
	params.InScreenShotDesc = InScreenShotDesc;
	params.InGoString = InGoString;
	params.InLocString = InLocString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.DisableDebugAI
//		Flags  -> ()
void APlayerController::DisableDebugAI()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DisableDebugAI");

	APlayerController_DisableDebugAI_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnEngineInitialTick
//		Flags  -> ()
void APlayerController::OnEngineInitialTick()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnEngineInitialTick");

	APlayerController_OnEngineInitialTick_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.BugItStringCreator
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ViewLocation                                               (Const, Parm, OutParm)
//		struct FRotator                                    ViewRotation                                               (Const, Parm, OutParm)
//		struct FString                                     GoString                                                   (Parm, OutParm, NeedCtorLink)
//		struct FString                                     LocString                                                  (Parm, OutParm, NeedCtorLink)
void APlayerController::BugItStringCreator(struct FVector* ViewLocation, struct FRotator* ViewRotation, struct FString* GoString, struct FString* LocString)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BugItStringCreator");

	APlayerController_BugItStringCreator_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ViewLocation != nullptr)
		*ViewLocation = params.ViewLocation;
	if (ViewRotation != nullptr)
		*ViewRotation = params.ViewRotation;
	if (GoString != nullptr)
		*GoString = params.GoString;
	if (LocString != nullptr)
		*LocString = params.LocString;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.BugItAI
//		Flags  -> (Singular, Exec, Native, Event, Static, Const, Protected, NetServer, HasDefaults, K2Call, K2Pure)
// Parameters:
//		struct FString                                     ScreenShotDescription                                      (OptionalParm, Parm, NeedCtorLink)
void APlayerController::STATIC_BugItAI(const struct FString& ScreenShotDescription)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BugItAI");

	APlayerController_BugItAI_Params params {};
	params.ScreenShotDescription = ScreenShotDescription;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.LogLoc
//		Flags  -> (Net, Simulated, Operator, Static, Const, Protected, NetServer, HasDefaults, K2Call, K2Pure)
// Parameters:
void APlayerController::STATIC_LogLoc()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LogLoc");

	APlayerController_LogLoc_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.BugIt
//		Flags  -> (Singular, Net, Native, Operator, Static, Const, Protected, NetServer, HasDefaults, K2Call, K2Pure)
// Parameters:
//		struct FString                                     ScreenShotDescription                                      (OptionalParm, Parm, NeedCtorLink)
void APlayerController::STATIC_BugIt(const struct FString& ScreenShotDescription)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BugIt");

	APlayerController_BugIt_Params params {};
	params.ScreenShotDescription = ScreenShotDescription;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.BugItWorker
//		Flags  -> ()
// Parameters:
//		struct FVector                                     TheLocation                                                (Parm)
//		struct FRotator                                    TheRotation                                                (Parm)
void APlayerController::BugItWorker(const struct FVector& TheLocation, const struct FRotator& TheRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BugItWorker");

	APlayerController_BugItWorker_Params params {};
	params.TheLocation = TheLocation;
	params.TheRotation = TheRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.BugItGoString
//		Flags  -> ()
// Parameters:
//		struct FString                                     TheLocation                                                (Parm, NeedCtorLink)
//		struct FString                                     TheRotation                                                (Parm, NeedCtorLink)
void APlayerController::BugItGoString(const struct FString& TheLocation, const struct FString& TheRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BugItGoString");

	APlayerController_BugItGoString_Params params {};
	params.TheLocation = TheLocation;
	params.TheRotation = TheRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.BugItGo
//		Flags  -> (NetReliable, Native, Operator, Const, Protected, NetServer, HasDefaults, K2Call, K2Pure)
// Parameters:
//		float                                              X                                                          (Parm, CoerceParm)
//		float                                              Y                                                          (Parm, CoerceParm)
//		float                                              Z                                                          (Parm, CoerceParm)
//		int                                                Pitch                                                      (Parm, CoerceParm)
//		int                                                Yaw                                                        (Parm, CoerceParm)
//		int                                                Roll                                                       (Parm, CoerceParm)
void APlayerController::BugItGo(float X, float Y, float Z, int Pitch, int Yaw, int Roll)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BugItGo");

	APlayerController_BugItGo_Params params {};
	params.X = X;
	params.Y = Y;
	params.Z = Z;
	params.Pitch = Pitch;
	params.Yaw = Yaw;
	params.Roll = Roll;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.HasPeerConnection
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PeerNetId                                                  (Const, Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::HasPeerConnection(struct FUniqueNetId* PeerNetId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HasPeerConnection");

	APlayerController_HasPeerConnection_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (PeerNetId != nullptr)
		*PeerNetId = params.PeerNetId;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnSetSoundMode
//		Flags  -> ()
// Parameters:
//		class USeqAct_SetSoundMode*                        Action                                                     (Parm)
void APlayerController::OnSetSoundMode(class USeqAct_SetSoundMode* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnSetSoundMode");

	APlayerController_OnSetSoundMode_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientSpawnCameraLensEffect
//		Flags  -> ()
// Parameters:
//		class UClass*                                      LensEffectEmitterClass                                     (Parm)
void APlayerController::ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSpawnCameraLensEffect");

	APlayerController_ClientSpawnCameraLensEffect_Params params {};
	params.LensEffectEmitterClass = LensEffectEmitterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.DebugCameraAnims
//		Flags  -> ()
void APlayerController::DebugCameraAnims()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DebugCameraAnims");

	APlayerController_DebugCameraAnims_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientStopCameraAnim
//		Flags  -> ()
// Parameters:
//		class UCameraAnim*                                 AnimToStop                                                 (Parm)
//		bool                                               bImmediate                                                 (OptionalParm, Parm)
void APlayerController::ClientStopCameraAnim(class UCameraAnim* AnimToStop, bool bImmediate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopCameraAnim");

	APlayerController_ClientStopCameraAnim_Params params {};
	params.AnimToStop = AnimToStop;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientPlayCameraAnim
//		Flags  -> ()
// Parameters:
//		class UCameraAnim*                                 AnimToPlay                                                 (Parm)
//		float                                              Scale                                                      (OptionalParm, Parm)
//		float                                              Rate                                                       (OptionalParm, Parm)
//		float                                              BlendInTime                                                (OptionalParm, Parm)
//		float                                              BlendOutTime                                               (OptionalParm, Parm)
//		bool                                               bLoop                                                      (OptionalParm, Parm)
//		bool                                               bRandomStartTime                                           (OptionalParm, Parm)
//		TEnumAsByte<Engine_ECameraAnimPlaySpace>           Space                                                      (OptionalParm, Parm)
//		struct FRotator                                    CustomPlaySpace                                            (OptionalParm, Parm)
//		bool                                               bForceFinished                                             (OptionalParm, Parm)
void APlayerController::ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, TEnumAsByte<Engine_ECameraAnimPlaySpace> Space, const struct FRotator& CustomPlaySpace, bool bForceFinished)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayCameraAnim");

	APlayerController_ClientPlayCameraAnim_Params params {};
	params.AnimToPlay = AnimToPlay;
	params.Scale = Scale;
	params.Rate = Rate;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLoop = bLoop;
	params.bRandomStartTime = bRandomStartTime;
	params.Space = Space;
	params.CustomPlaySpace = CustomPlaySpace;
	params.bForceFinished = bForceFinished;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnCameraShake
//		Flags  -> ()
// Parameters:
//		class USeqAct_CameraShake*                         inAction                                                   (Parm)
void APlayerController::OnCameraShake(class USeqAct_CameraShake* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnCameraShake");

	APlayerController_OnCameraShake_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientStopCameraShake
//		Flags  -> ()
// Parameters:
//		class UCameraShake*                                Shake                                                      (Parm)
void APlayerController::ClientStopCameraShake(class UCameraShake* Shake)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopCameraShake");

	APlayerController_ClientStopCameraShake_Params params {};
	params.Shake = Shake;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientPlayCameraShake
//		Flags  -> ()
// Parameters:
//		class UCameraShake*                                Shake                                                      (Parm)
//		float                                              Scale                                                      (OptionalParm, Parm)
//		bool                                               bTryForceFeedback                                          (OptionalParm, Parm)
//		TEnumAsByte<Engine_ECameraAnimPlaySpace>           PlaySpace                                                  (OptionalParm, Parm)
//		struct FRotator                                    UserPlaySpaceRot                                           (OptionalParm, Parm)
void APlayerController::ClientPlayCameraShake(class UCameraShake* Shake, float Scale, bool bTryForceFeedback, TEnumAsByte<Engine_ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayCameraShake");

	APlayerController_ClientPlayCameraShake_Params params {};
	params.Shake = Shake;
	params.Scale = Scale;
	params.bTryForceFeedback = bTryForceFeedback;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.DoForceFeedbackForScreenShake
//		Flags  -> ()
// Parameters:
//		class UCameraShake*                                ShakeData                                                  (Parm)
//		float                                              ShakeScale                                                 (Parm)
void APlayerController::DoForceFeedbackForScreenShake(class UCameraShake* ShakeData, float ShakeScale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DoForceFeedbackForScreenShake");

	APlayerController_DoForceFeedbackForScreenShake_Params params {};
	params.ShakeData = ShakeData;
	params.ShakeScale = ShakeScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.InputMatchDelegate
//		Flags  -> ()
void APlayerController::InputMatchDelegate()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.InputMatchDelegate");

	APlayerController_InputMatchDelegate_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.Sentinel_PostAcquireTravelTheWorldPoints
//		Flags  -> ()
void APlayerController::Sentinel_PostAcquireTravelTheWorldPoints()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Sentinel_PostAcquireTravelTheWorldPoints");

	APlayerController_Sentinel_PostAcquireTravelTheWorldPoints_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.Sentinel_PreAcquireTravelTheWorldPoints
//		Flags  -> ()
void APlayerController::Sentinel_PreAcquireTravelTheWorldPoints()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Sentinel_PreAcquireTravelTheWorldPoints");

	APlayerController_Sentinel_PreAcquireTravelTheWorldPoints_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.Sentinel_SetupForGamebasedTravelTheWorld
//		Flags  -> ()
void APlayerController::Sentinel_SetupForGamebasedTravelTheWorld()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Sentinel_SetupForGamebasedTravelTheWorld");

	APlayerController_Sentinel_SetupForGamebasedTravelTheWorld_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnFlyThroughHasEnded
//		Flags  -> ()
// Parameters:
//		class USeqAct_FlyThroughHasEnded*                  inAction                                                   (Parm)
void APlayerController::OnFlyThroughHasEnded(class USeqAct_FlyThroughHasEnded* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnFlyThroughHasEnded");

	APlayerController_OnFlyThroughHasEnded_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetAchievementProgression
//		Flags  -> ()
// Parameters:
//		int                                                AchievementId                                              (Parm)
//		float                                              CurrentValue                                               (Parm, OutParm)
//		float                                              MaxValue                                                   (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::GetAchievementProgression(int AchievementId, float* CurrentValue, float* MaxValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetAchievementProgression");

	APlayerController_GetAchievementProgression_Params params {};
	params.AchievementId = AchievementId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (CurrentValue != nullptr)
		*CurrentValue = params.CurrentValue;
	if (MaxValue != nullptr)
		*MaxValue = params.MaxValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetPartyGameTypeName
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString APlayerController::GetPartyGameTypeName()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPartyGameTypeName");

	APlayerController_GetPartyGameTypeName_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetPartyMapName
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString APlayerController::GetPartyMapName()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPartyMapName");

	APlayerController_GetPartyMapName_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.IsPartyLeader
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::IsPartyLeader()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsPartyLeader");

	APlayerController_IsPartyLeader_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientAddTextureStreamingLoc
//		Flags  -> ()
// Parameters:
//		struct FVector                                     InLoc                                                      (Parm)
//		float                                              Duration                                                   (Parm)
//		bool                                               bOverrideLocation                                          (Parm)
void APlayerController::ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientAddTextureStreamingLoc");

	APlayerController_ClientAddTextureStreamingLoc_Params params {};
	params.InLoc = InLoc;
	params.Duration = Duration;
	params.bOverrideLocation = bOverrideLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientPrestreamTextures
//		Flags  -> ()
// Parameters:
//		class AActor*                                      ForcedActor                                                (Parm)
//		float                                              ForceDuration                                              (Parm)
//		bool                                               bEnableStreaming                                           (Parm)
//		int                                                CinematicTextureGroups                                     (OptionalParm, Parm)
void APlayerController::ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPrestreamTextures");

	APlayerController_ClientPrestreamTextures_Params params {};
	params.ForcedActor = ForcedActor;
	params.ForceDuration = ForceDuration;
	params.bEnableStreaming = bEnableStreaming;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident
//		Flags  -> ()
// Parameters:
//		class UMaterialInterface*                          Material                                                   (Parm)
//		float                                              ForceDuration                                              (Parm)
//		int                                                CinematicTextureGroups                                     (OptionalParm, Parm)
void APlayerController::ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident");

	APlayerController_ClientSetForceMipLevelsToBeResident_Params params {};
	params.Material = Material;
	params.ForceDuration = ForceDuration;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientControlMovieTexture
//		Flags  -> ()
// Parameters:
//		class UTextureMovie*                               MovieTexture                                               (Parm)
//		TEnumAsByte<Engine_EMovieControlType>              Mode                                                       (Parm)
void APlayerController::ClientControlMovieTexture(class UTextureMovie* MovieTexture, TEnumAsByte<Engine_EMovieControlType> Mode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientControlMovieTexture");

	APlayerController_ClientControlMovieTexture_Params params {};
	params.MovieTexture = MovieTexture;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetSplitscreenPlayerCount
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int APlayerController::GetSplitscreenPlayerCount()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetSplitscreenPlayerCount");

	APlayerController_GetSplitscreenPlayerCount_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetSplitscreenPlayerByIndex
//		Flags  -> ()
// Parameters:
//		int                                                PlayerIndex                                                (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class APlayerReplicationInfo* APlayerController::GetSplitscreenPlayerByIndex(int PlayerIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetSplitscreenPlayerByIndex");

	APlayerController_GetSplitscreenPlayerByIndex_Params params {};
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.IsSplitscreenPlayer
//		Flags  -> ()
// Parameters:
//		int                                                out_SplitscreenPlayerIndex                                 (OptionalParm, Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::IsSplitscreenPlayer(int* out_SplitscreenPlayerIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsSplitscreenPlayer");

	APlayerController_IsSplitscreenPlayer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_SplitscreenPlayerIndex != nullptr)
		*out_SplitscreenPlayerIndex = params.out_SplitscreenPlayerIndex;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.IsPrimaryPlayer
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::IsPrimaryPlayer()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsPrimaryPlayer");

	APlayerController_IsPrimaryPlayer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerNotifyPartyHostLeaving
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PartyHostPlayerId                                          (Parm)
void APlayerController::ServerNotifyPartyHostLeaving(const struct FUniqueNetId& PartyHostPlayerId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerNotifyPartyHostLeaving");

	APlayerController_ServerNotifyPartyHostLeaving_Params params {};
	params.PartyHostPlayerId = PartyHostPlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientNotifyPartyHostLeaving
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PartyHostPlayerId                                          (Parm)
void APlayerController::ClientNotifyPartyHostLeaving(const struct FUniqueNetId& PartyHostPlayerId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientNotifyPartyHostLeaving");

	APlayerController_ClientNotifyPartyHostLeaving_Params params {};
	params.PartyHostPlayerId = PartyHostPlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientReturnToParty
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                RequestingPlayerId                                         (Parm)
void APlayerController::ClientReturnToParty(const struct FUniqueNetId& RequestingPlayerId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReturnToParty");

	APlayerController_ClientReturnToParty_Params params {};
	params.RequestingPlayerId = RequestingPlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnJoinTravelToSessionComplete
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void APlayerController::OnJoinTravelToSessionComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnJoinTravelToSessionComplete");

	APlayerController_OnJoinTravelToSessionComplete_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.PreJoinUpdateGameSettings
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		class UOnlineGameSettings*                         GameSettings                                               (Parm)
void APlayerController::PreJoinUpdateGameSettings(const struct FName& SessionName, class UOnlineGameSettings* GameSettings)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PreJoinUpdateGameSettings");

	APlayerController_PreJoinUpdateGameSettings_Params params {};
	params.SessionName = SessionName;
	params.GameSettings = GameSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientTravelToSession
//		Flags  -> (Singular, NetReliable, Simulated, Exec, Event, Operator, HasOptionalParms, Protected, NetServer, HasDefaults, K2Call, K2Pure)
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		class UClass*                                      SearchClass                                                (Parm)
//		unsigned char*                                     PlatformSpecificInfo                                       (Parm)
void APlayerController::ClientTravelToSession(const struct FName& SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTravelToSession");

	APlayerController_ClientTravelToSession_Params params {};
	params.SessionName = SessionName;
	params.SearchClass = SearchClass;
	params.PlatformSpecificInfo = PlatformSpecificInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.PathClear
//		Flags  -> ()
void APlayerController::PathClear()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PathClear");

	APlayerController_PathClear_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.PathChild
//		Flags  -> ()
// Parameters:
//		int                                                Cnt                                                        (OptionalParm, Parm)
void APlayerController::PathChild(int Cnt)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PathChild");

	APlayerController_PathChild_Params params {};
	params.Cnt = Cnt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.PathStep
//		Flags  -> ()
// Parameters:
//		int                                                Cnt                                                        (OptionalParm, Parm)
void APlayerController::PathStep(int Cnt)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PathStep");

	APlayerController_PathStep_Params params {};
	params.Cnt = Cnt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SoakPause
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
void APlayerController::SoakPause(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SoakPause");

	APlayerController_SoakPause_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.IncrementNumberOfMatchesPlayed
//		Flags  -> ()
void APlayerController::IncrementNumberOfMatchesPlayed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IncrementNumberOfMatchesPlayed");

	APlayerController_IncrementNumberOfMatchesPlayed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.CanViewUserCreatedContent
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::CanViewUserCreatedContent()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanViewUserCreatedContent");

	APlayerController_CanViewUserCreatedContent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientEndOnlineGame
//		Flags  -> ()
void APlayerController::ClientEndOnlineGame()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientEndOnlineGame");

	APlayerController_ClientEndOnlineGame_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientStartOnlineGame
//		Flags  -> ()
void APlayerController::ClientStartOnlineGame()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStartOnlineGame");

	APlayerController_ClientStartOnlineGame_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerRegisterClientStatGuid
//		Flags  -> ()
// Parameters:
//		struct FString                                     StatGuid                                                   (Parm, NeedCtorLink)
void APlayerController::ServerRegisterClientStatGuid(const struct FString& StatGuid)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerRegisterClientStatGuid");

	APlayerController_ServerRegisterClientStatGuid_Params params {};
	params.StatGuid = StatGuid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnRegisterHostStatGuidComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void APlayerController::OnRegisterHostStatGuidComplete(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnRegisterHostStatGuidComplete");

	APlayerController_OnRegisterHostStatGuidComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientRegisterHostStatGuid
//		Flags  -> ()
// Parameters:
//		struct FString                                     StatGuid                                                   (Parm, NeedCtorLink)
void APlayerController::ClientRegisterHostStatGuid(const struct FString& StatGuid)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRegisterHostStatGuid");

	APlayerController_ClientRegisterHostStatGuid_Params params {};
	params.StatGuid = StatGuid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.RemoveAllHudDebugStrings
//		Flags  -> ()
void APlayerController::RemoveAllHudDebugStrings()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RemoveAllHudDebugStrings");

	APlayerController_RemoveAllHudDebugStrings_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.AddHudDebugTextCoordinate
//		Flags  -> ()
// Parameters:
//		struct FString                                     DebugText                                                  (Parm, NeedCtorLink)
//		struct FColor                                      TextColor                                                  (OptionalParm, Parm)
void APlayerController::AddHudDebugTextCoordinate(const struct FString& DebugText, const struct FColor& TextColor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddHudDebugTextCoordinate");

	APlayerController_AddHudDebugTextCoordinate_Params params {};
	params.DebugText = DebugText;
	params.TextColor = TextColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.HudDebugTextCoordinates
//		Flags  -> ()
// Parameters:
//		int                                                CoordinateX                                                (Parm)
//		int                                                CoordinateY                                                (Parm)
void APlayerController::HudDebugTextCoordinates(int CoordinateX, int CoordinateY)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HudDebugTextCoordinates");

	APlayerController_HudDebugTextCoordinates_Params params {};
	params.CoordinateX = CoordinateX;
	params.CoordinateY = CoordinateY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.AddHudDebugText
//		Flags  -> ()
// Parameters:
//		struct FString                                     DebugText                                                  (Parm, NeedCtorLink)
//		struct FColor                                      TextColor                                                  (OptionalParm, Parm)
void APlayerController::AddHudDebugText(const struct FString& DebugText, const struct FColor& TextColor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddHudDebugText");

	APlayerController_AddHudDebugText_Params params {};
	params.DebugText = DebugText;
	params.TextColor = TextColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.DrawHudDebugTextList
//		Flags  -> ()
// Parameters:
//		class UCanvas*                                     Canvas                                                     (Parm)
//		float                                              RenderDelta                                                (Parm)
void APlayerController::DrawHudDebugTextList(class UCanvas* Canvas, float RenderDelta)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DrawHudDebugTextList");

	APlayerController_DrawHudDebugTextList_Params params {};
	params.Canvas = Canvas;
	params.RenderDelta = RenderDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.RemoveAllDebugStrings
//		Flags  -> ()
void APlayerController::RemoveAllDebugStrings()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RemoveAllDebugStrings");

	APlayerController_RemoveAllDebugStrings_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.RemoveDebugText
//		Flags  -> ()
// Parameters:
//		class AActor*                                      SrcActor                                                   (Parm)
void APlayerController::RemoveDebugText(class AActor* SrcActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RemoveDebugText");

	APlayerController_RemoveDebugText_Params params {};
	params.SrcActor = SrcActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.AddDebugText
//		Flags  -> ()
// Parameters:
//		struct FString                                     DebugText                                                  (Parm, NeedCtorLink)
//		class AActor*                                      SrcActor                                                   (OptionalParm, Parm)
//		float                                              Duration                                                   (OptionalParm, Parm)
//		struct FVector                                     Offset                                                     (OptionalParm, Parm)
//		struct FVector                                     DesiredOffset                                              (OptionalParm, Parm)
//		struct FColor                                      TextColor                                                  (OptionalParm, Parm)
//		bool                                               bSkipOverwriteCheck                                        (OptionalParm, Parm)
//		bool                                               bAbsoluteLocation                                          (OptionalParm, Parm)
//		bool                                               bKeepAttachedToActor                                       (OptionalParm, Parm)
//		class UFont*                                       InFont                                                     (OptionalParm, Parm)
void APlayerController::AddDebugText(const struct FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddDebugText");

	APlayerController_AddDebugText_Params params {};
	params.DebugText = DebugText;
	params.SrcActor = SrcActor;
	params.Duration = Duration;
	params.Offset = Offset;
	params.DesiredOffset = DesiredOffset;
	params.TextColor = TextColor;
	params.bSkipOverwriteCheck = bSkipOverwriteCheck;
	params.bAbsoluteLocation = bAbsoluteLocation;
	params.bKeepAttachedToActor = bKeepAttachedToActor;
	params.InFont = InFont;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.AddDebugTextWithScreenOffset
//		Flags  -> ()
// Parameters:
//		struct FString                                     DebugText                                                  (Parm, NeedCtorLink)
//		class AActor*                                      SrcActor                                                   (OptionalParm, Parm)
//		float                                              Duration                                                   (OptionalParm, Parm)
//		struct FVector                                     Offset                                                     (OptionalParm, Parm)
//		struct FVector                                     DesiredOffset                                              (OptionalParm, Parm)
//		struct FColor                                      TextColor                                                  (OptionalParm, Parm)
//		bool                                               bSkipOverwriteCheck                                        (OptionalParm, Parm)
//		bool                                               bAbsoluteLocation                                          (OptionalParm, Parm)
//		bool                                               bKeepAttachedToActor                                       (OptionalParm, Parm)
//		class UFont*                                       InFont                                                     (OptionalParm, Parm)
//		struct FVector                                     ScreenOffset                                               (OptionalParm, Parm)
void APlayerController::AddDebugTextWithScreenOffset(const struct FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, const struct FVector& ScreenOffset)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddDebugTextWithScreenOffset");

	APlayerController_AddDebugTextWithScreenOffset_Params params {};
	params.DebugText = DebugText;
	params.SrcActor = SrcActor;
	params.Duration = Duration;
	params.Offset = Offset;
	params.DesiredOffset = DesiredOffset;
	params.TextColor = TextColor;
	params.bSkipOverwriteCheck = bSkipOverwriteCheck;
	params.bAbsoluteLocation = bAbsoluteLocation;
	params.bKeepAttachedToActor = bKeepAttachedToActor;
	params.InFont = InFont;
	params.ScreenOffset = ScreenOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.DrawDebugTextList
//		Flags  -> (Simulated, Native, Operator, Protected, NetServer, HasDefaults, K2Call, K2Pure)
// Parameters:
//		class UCanvas*                                     Canvas                                                     (Parm)
//		float                                              RenderDelta                                                (Parm)
void APlayerController::DrawDebugTextList(class UCanvas* Canvas, float RenderDelta)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DrawDebugTextList");

	APlayerController_DrawDebugTextList_Params params {};
	params.Canvas = Canvas;
	params.RenderDelta = RenderDelta;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnDestroy
//		Flags  -> ()
// Parameters:
//		class USeqAct_Destroy*                             Action                                                     (Parm)
void APlayerController::OnDestroy(class USeqAct_Destroy* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnDestroy");

	APlayerController_OnDestroy_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientStartNetworkedVoice
//		Flags  -> ()
void APlayerController::ClientStartNetworkedVoice()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStartNetworkedVoice");

	APlayerController_ClientStartNetworkedVoice_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientStopNetworkedVoice
//		Flags  -> ()
void APlayerController::ClientStopNetworkedVoice()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopNetworkedVoice");

	APlayerController_ClientStopNetworkedVoice_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientSetHostUniqueId
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                InHostId                                                   (Parm)
void APlayerController::ClientSetHostUniqueId(const struct FUniqueNetId& InHostId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetHostUniqueId");

	APlayerController_ClientSetHostUniqueId_Params params {};
	params.InHostId = InHostId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientWriteLeaderboardStats
//		Flags  -> ()
// Parameters:
//		class UClass*                                      OnlineStatsWriteClass                                      (Parm)
//		bool                                               bIsIncomplete                                              (OptionalParm, Parm)
void APlayerController::ClientWriteLeaderboardStats(class UClass* OnlineStatsWriteClass, bool bIsIncomplete)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientWriteLeaderboardStats");

	APlayerController_ClientWriteLeaderboardStats_Params params {};
	params.OnlineStatsWriteClass = OnlineStatsWriteClass;
	params.bIsIncomplete = bIsIncomplete;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientWriteOnlinePlayerScores
//		Flags  -> (Net, Static, Protected, NetServer, HasDefaults, K2Call, K2Pure)
// Parameters:
//		int                                                LeaderboardId                                              (Parm)
void APlayerController::STATIC_ClientWriteOnlinePlayerScores(int LeaderboardId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientWriteOnlinePlayerScores");

	APlayerController_ClientWriteOnlinePlayerScores_Params params {};
	params.LeaderboardId = LeaderboardId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientArbitratedMatchEnded
//		Flags  -> ()
void APlayerController::ClientArbitratedMatchEnded()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientArbitratedMatchEnded");

	APlayerController_ClientArbitratedMatchEnded_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.NotifyNotEnoughSpaceInInvite
//		Flags  -> ()
void APlayerController::NotifyNotEnoughSpaceInInvite()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyNotEnoughSpaceInInvite");

	APlayerController_NotifyNotEnoughSpaceInInvite_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.NotifyNotAllPlayersCanJoinInvite
//		Flags  -> ()
void APlayerController::NotifyNotAllPlayersCanJoinInvite()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyNotAllPlayersCanJoinInvite");

	APlayerController_NotifyNotAllPlayersCanJoinInvite_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.NotifyInviteFailed
//		Flags  -> ()
void APlayerController::NotifyInviteFailed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyInviteFailed");

	APlayerController_NotifyInviteFailed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnInviteJoinComplete
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void APlayerController::OnInviteJoinComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnInviteJoinComplete");

	APlayerController_OnInviteJoinComplete_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ModifyClientURL
//		Flags  -> ()
// Parameters:
//		struct FString                                     URL                                                        (Parm, NeedCtorLink)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString APlayerController::ModifyClientURL(const struct FString& URL)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ModifyClientURL");

	APlayerController_ModifyClientURL_Params params {};
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnDestroyForInviteComplete
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void APlayerController::OnDestroyForInviteComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnDestroyForInviteComplete");

	APlayerController_OnDestroyForInviteComplete_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnEndForInviteComplete
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void APlayerController::OnEndForInviteComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnEndForInviteComplete");

	APlayerController_OnEndForInviteComplete_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClearInviteDelegates
//		Flags  -> ()
void APlayerController::ClearInviteDelegates()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClearInviteDelegates");

	APlayerController_ClearInviteDelegates_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.CanAllPlayersPlayOnline
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::CanAllPlayersPlayOnline()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanAllPlayersPlayOnline");

	APlayerController_CanAllPlayersPlayOnline_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.InviteHasEnoughSpace
//		Flags  -> ()
// Parameters:
//		class UOnlineGameSettings*                         InviteSettings                                             (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::InviteHasEnoughSpace(class UOnlineGameSettings* InviteSettings)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.InviteHasEnoughSpace");

	APlayerController_InviteHasEnoughSpace_Params params {};
	params.InviteSettings = InviteSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnGameInviteAccepted
//		Flags  -> ()
// Parameters:
//		struct FOnlineGameSearchResult                     InviteResult                                               (Const, Parm, OutParm)
void APlayerController::OnGameInviteAccepted(struct FOnlineGameSearchResult* InviteResult)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnGameInviteAccepted");

	APlayerController_OnGameInviteAccepted_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InviteResult != nullptr)
		*InviteResult = params.InviteResult;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerRegisteredForArbitration
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void APlayerController::ServerRegisteredForArbitration(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerRegisteredForArbitration");

	APlayerController_ServerRegisteredForArbitration_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnArbitrationRegisterComplete
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void APlayerController::OnArbitrationRegisterComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnArbitrationRegisterComplete");

	APlayerController_OnArbitrationRegisterComplete_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientRegisterForArbitration
//		Flags  -> ()
void APlayerController::ClientRegisterForArbitration()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRegisterForArbitration");

	APlayerController_ClientRegisterForArbitration_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientWasKicked
//		Flags  -> ()
void APlayerController::ClientWasKicked()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientWasKicked");

	APlayerController_ClientWasKicked_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.IsShowingSubtitles
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::IsShowingSubtitles()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsShowingSubtitles");

	APlayerController_IsShowingSubtitles_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SetShowSubtitles
//		Flags  -> ()
// Parameters:
//		bool                                               bValue                                                     (Parm)
void APlayerController::SetShowSubtitles(bool bValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetShowSubtitles");

	APlayerController_SetShowSubtitles_Params params {};
	params.bValue = bValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.NotifyDirectorControl
//		Flags  -> ()
// Parameters:
//		bool                                               bNowControlling                                            (Parm)
//		class USeqAct_Interp*                              CurrentMatinee                                             (Parm)
void APlayerController::NotifyDirectorControl(bool bNowControlling, class USeqAct_Interp* CurrentMatinee)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyDirectorControl");

	APlayerController_NotifyDirectorControl_Params params {};
	params.bNowControlling = bNowControlling;
	params.CurrentMatinee = CurrentMatinee;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerUnmutePlayer
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PlayerNetId                                                (Parm)
void APlayerController::ServerUnmutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUnmutePlayer");

	APlayerController_ServerUnmutePlayer_Params params {};
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerMutePlayer
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PlayerNetId                                                (Parm)
void APlayerController::ServerMutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerMutePlayer");

	APlayerController_ServerMutePlayer_Params params {};
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GameplayUnmutePlayer
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PlayerNetId                                                (Parm)
void APlayerController::GameplayUnmutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GameplayUnmutePlayer");

	APlayerController_GameplayUnmutePlayer_Params params {};
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GameplayMutePlayer
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PlayerNetId                                                (Parm)
void APlayerController::GameplayMutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GameplayMutePlayer");

	APlayerController_GameplayMutePlayer_Params params {};
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientUnmutePlayer
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PlayerNetId                                                (Parm)
void APlayerController::ClientUnmutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUnmutePlayer");

	APlayerController_ClientUnmutePlayer_Params params {};
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientMutePlayer
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PlayerNetId                                                (Parm)
void APlayerController::ClientMutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientMutePlayer");

	APlayerController_ClientMutePlayer_Params params {};
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientVoiceHandshakeComplete
//		Flags  -> ()
void APlayerController::ClientVoiceHandshakeComplete()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientVoiceHandshakeComplete");

	APlayerController_ClientVoiceHandshakeComplete_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetPlayerControllerFromNetId
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PlayerNetId                                                (Parm)
//		class APlayerController*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class APlayerController* APlayerController::GetPlayerControllerFromNetId(const struct FUniqueNetId& PlayerNetId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPlayerControllerFromNetId");

	APlayerController_GetPlayerControllerFromNetId_Params params {};
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientSetOnlineStatus
//		Flags  -> ()
void APlayerController::ClientSetOnlineStatus()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetOnlineStatus");

	APlayerController_ClientSetOnlineStatus_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SeamlessTravelFrom
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           OldPC                                                      (Parm)
void APlayerController::SeamlessTravelFrom(class APlayerController* OldPC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SeamlessTravelFrom");

	APlayerController_SeamlessTravelFrom_Params params {};
	params.OldPC = OldPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SeamlessTravelTo
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           NewPC                                                      (Parm)
void APlayerController::SeamlessTravelTo(class APlayerController* NewPC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SeamlessTravelTo");

	APlayerController_SeamlessTravelTo_Params params {};
	params.NewPC = NewPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetSeamlessTravelActorList
//		Flags  -> ()
// Parameters:
//		bool                                               bToEntry                                                   (Parm)
//		TArray<class AActor*>                              ActorList                                                  (Parm, OutParm, NeedCtorLink)
void APlayerController::GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetSeamlessTravelActorList");

	APlayerController_GetSeamlessTravelActorList_Params params {};
	params.bToEntry = bToEntry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ActorList != nullptr)
		*ActorList = params.ActorList;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.IsPlayerMuted
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                Sender                                                     (Const, Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::IsPlayerMuted(struct FUniqueNetId* Sender)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsPlayerMuted");

	APlayerController_IsPlayerMuted_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Sender != nullptr)
		*Sender = params.Sender;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetUIController
//		Flags  -> ()
// Parameters:
//		class UUIInteraction*                              ReturnValue                                                (Parm, OutParm, ReturnParm)
class UUIInteraction* APlayerController::GetUIController()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetUIController");

	APlayerController_GetUIController_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SaveActorConfig
//		Flags  -> ()
// Parameters:
//		struct FName                                       actorName                                                  (Parm, CoerceParm)
void APlayerController::SaveActorConfig(const struct FName& actorName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SaveActorConfig");

	APlayerController_SaveActorConfig_Params params {};
	params.actorName = actorName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SaveClassConfig
//		Flags  -> ()
// Parameters:
//		struct FString                                     ClassName                                                  (Parm, CoerceParm, NeedCtorLink)
void APlayerController::SaveClassConfig(const struct FString& ClassName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SaveClassConfig");

	APlayerController_SaveClassConfig_Params params {};
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientWaitForLevelsVisible
//		Flags  -> ()
// Parameters:
//		class USeqAct_WaitForLevelsVisible*                inAction                                                   (Parm)
void APlayerController::ClientWaitForLevelsVisible(class USeqAct_WaitForLevelsVisible* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientWaitForLevelsVisible");

	APlayerController_ClientWaitForLevelsVisible_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientSetBlockOnAsyncLoading
//		Flags  -> ()
void APlayerController::ClientSetBlockOnAsyncLoading()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetBlockOnAsyncLoading");

	APlayerController_ClientSetBlockOnAsyncLoading_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientFlushLevelStreaming
//		Flags  -> ()
void APlayerController::ClientFlushLevelStreaming()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientFlushLevelStreaming");

	APlayerController_ClientFlushLevelStreaming_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientCancelPendingMapChange
//		Flags  -> ()
void APlayerController::ClientCancelPendingMapChange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCancelPendingMapChange");

	APlayerController_ClientCancelPendingMapChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientCommitMapChange
//		Flags  -> ()
void APlayerController::ClientCommitMapChange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCommitMapChange");

	APlayerController_ClientCommitMapChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.DelayedPrepareMapChange
//		Flags  -> ()
void APlayerController::DelayedPrepareMapChange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DelayedPrepareMapChange");

	APlayerController_DelayedPrepareMapChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientPrepareMapChange
//		Flags  -> ()
// Parameters:
//		struct FName                                       LevelName                                                  (Parm)
//		bool                                               bFirst                                                     (Parm)
//		bool                                               bLast                                                      (Parm)
void APlayerController::ClientPrepareMapChange(const struct FName& LevelName, bool bFirst, bool bLast)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPrepareMapChange");

	APlayerController_ClientPrepareMapChange_Params params {};
	params.LevelName = LevelName;
	params.bFirst = bFirst;
	params.bLast = bLast;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerUpdateLevelVisibility
//		Flags  -> ()
// Parameters:
//		struct FName                                       PackageName                                                (Parm)
//		bool                                               bIsVisible                                                 (Parm)
void APlayerController::ServerUpdateLevelVisibility(const struct FName& PackageName, bool bIsVisible)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUpdateLevelVisibility");

	APlayerController_ServerUpdateLevelVisibility_Params params {};
	params.PackageName = PackageName;
	params.bIsVisible = bIsVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientUpdateLevelStreamingStatus
//		Flags  -> ()
// Parameters:
//		struct FName                                       PackageName                                                (Parm)
//		bool                                               bNewShouldBeLoaded                                         (Parm)
//		bool                                               bNewShouldBeVisible                                        (Parm)
//		bool                                               bNewShouldBlockOnLoad                                      (Parm)
void APlayerController::ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUpdateLevelStreamingStatus");

	APlayerController_ClientUpdateLevelStreamingStatus_Params params {};
	params.PackageName = PackageName;
	params.bNewShouldBeLoaded = bNewShouldBeLoaded;
	params.bNewShouldBeVisible = bNewShouldBeVisible;
	params.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.LevelStreamingStatusChanged
//		Flags  -> ()
// Parameters:
//		class ULevelStreaming*                             LevelObject                                                (Parm)
//		bool                                               bNewShouldBeLoaded                                         (Parm)
//		bool                                               bNewShouldBeVisible                                        (Parm)
//		bool                                               bNewShouldBlockOnLoad                                      (Parm)
void APlayerController::LevelStreamingStatusChanged(class ULevelStreaming* LevelObject, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LevelStreamingStatusChanged");

	APlayerController_LevelStreamingStatusChanged_Params params {};
	params.LevelObject = LevelObject;
	params.bNewShouldBeLoaded = bNewShouldBeLoaded;
	params.bNewShouldBeVisible = bNewShouldBeVisible;
	params.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientForceGarbageCollection
//		Flags  -> ()
void APlayerController::ClientForceGarbageCollection()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientForceGarbageCollection");

	APlayerController_ClientForceGarbageCollection_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnConsoleCommand
//		Flags  -> ()
// Parameters:
//		class USeqAct_ConsoleCommand*                      inAction                                                   (Parm)
void APlayerController::OnConsoleCommand(class USeqAct_ConsoleCommand* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnConsoleCommand");

	APlayerController_OnConsoleCommand_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ResetPlayerMovementInput
//		Flags  -> ()
void APlayerController::ResetPlayerMovementInput()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetPlayerMovementInput");

	APlayerController_ResetPlayerMovementInput_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.IsLookInputIgnored
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::IsLookInputIgnored()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsLookInputIgnored");

	APlayerController_IsLookInputIgnored_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.IgnoreLookInput
//		Flags  -> ()
// Parameters:
//		bool                                               bNewLookInput                                              (Parm)
void APlayerController::IgnoreLookInput(bool bNewLookInput)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IgnoreLookInput");

	APlayerController_IgnoreLookInput_Params params {};
	params.bNewLookInput = bNewLookInput;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.IsMoveInputIgnored
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::IsMoveInputIgnored()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsMoveInputIgnored");

	APlayerController_IsMoveInputIgnored_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.IgnoreMoveInput
//		Flags  -> ()
// Parameters:
//		bool                                               bNewMoveInput                                              (Parm)
void APlayerController::IgnoreMoveInput(bool bNewMoveInput)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IgnoreMoveInput");

	APlayerController_IgnoreMoveInput_Params params {};
	params.bNewMoveInput = bNewMoveInput;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientSetCinematicMode
//		Flags  -> ()
// Parameters:
//		bool                                               bInCinematicMode                                           (Parm)
//		bool                                               bAffectsMovement                                           (Parm)
//		bool                                               bAffectsTurning                                            (Parm)
//		bool                                               bAffectsHUD                                                (Parm)
void APlayerController::ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCinematicMode");

	APlayerController_ClientSetCinematicMode_Params params {};
	params.bInCinematicMode = bInCinematicMode;
	params.bAffectsMovement = bAffectsMovement;
	params.bAffectsTurning = bAffectsTurning;
	params.bAffectsHUD = bAffectsHUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ProcessCinematic
//		Flags  -> ()
// Parameters:
//		bool                                               bInCinematicMode                                           (Parm)
void APlayerController::ProcessCinematic(bool bInCinematicMode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ProcessCinematic");

	APlayerController_ProcessCinematic_Params params {};
	params.bInCinematicMode = bInCinematicMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SetCinematicMode
//		Flags  -> ()
// Parameters:
//		bool                                               bInCinematicMode                                           (Parm)
void APlayerController::SetCinematicMode(bool bInCinematicMode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetCinematicMode");

	APlayerController_SetCinematicMode_Params params {};
	params.bInCinematicMode = bInCinematicMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnToggleCinematicMode
//		Flags  -> ()
// Parameters:
//		class USeqAct_ToggleCinematicMode*                 Action                                                     (Parm)
void APlayerController::OnToggleCinematicMode(class USeqAct_ToggleCinematicMode* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnToggleCinematicMode");

	APlayerController_OnToggleCinematicMode_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.IsForceFeedbackAllowed
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::IsForceFeedbackAllowed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsForceFeedbackAllowed");

	APlayerController_IsForceFeedbackAllowed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientStopForceFeedbackWaveform
//		Flags  -> ()
// Parameters:
//		class UForceFeedbackWaveform*                      FFWaveform                                                 (OptionalParm, Parm)
void APlayerController::ClientStopForceFeedbackWaveform(class UForceFeedbackWaveform* FFWaveform)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopForceFeedbackWaveform");

	APlayerController_ClientStopForceFeedbackWaveform_Params params {};
	params.FFWaveform = FFWaveform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientPlayForceFeedbackWaveform
//		Flags  -> ()
// Parameters:
//		class UForceFeedbackWaveform*                      FFWaveform                                                 (Parm)
//		class AActor*                                      FFWaveformInstigator                                       (OptionalParm, Parm)
void APlayerController::ClientPlayForceFeedbackWaveform(class UForceFeedbackWaveform* FFWaveform, class AActor* FFWaveformInstigator)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayForceFeedbackWaveform");

	APlayerController_ClientPlayForceFeedbackWaveform_Params params {};
	params.FFWaveform = FFWaveform;
	params.FFWaveformInstigator = FFWaveformInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.PlayRumble
//		Flags  -> ()
// Parameters:
//		class UAnimNotify_Rumble*                          TheAnimNotify                                              (Const, Parm)
void APlayerController::PlayRumble(class UAnimNotify_Rumble* TheAnimNotify)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayRumble");

	APlayerController_PlayRumble_Params params {};
	params.TheAnimNotify = TheAnimNotify;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnForceFeedback
//		Flags  -> ()
// Parameters:
//		class USeqAct_ForceFeedback*                       Action                                                     (Parm)
void APlayerController::OnForceFeedback(class USeqAct_ForceFeedback* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnForceFeedback");

	APlayerController_OnForceFeedback_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.NotifyTakeHit
//		Flags  -> ()
// Parameters:
//		class AController*                                 InstigatedBy                                               (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		int                                                Damage                                                     (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FVector                                     Momentum                                                   (Parm)
void APlayerController::NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyTakeHit");

	APlayerController_NotifyTakeHit_Params params {};
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.Momentum = Momentum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ShowGameState
//		Flags  -> ()
void APlayerController::ShowGameState()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShowGameState");

	APlayerController_ShowGameState_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ShowPlayerState
//		Flags  -> ()
void APlayerController::ShowPlayerState()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShowPlayerState");

	APlayerController_ShowPlayerState_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerRemoteEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       EventName                                                  (Parm)
void APlayerController::ServerRemoteEvent(const struct FName& EventName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerRemoteEvent");

	APlayerController_ServerRemoteEvent_Params params {};
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.RE
//		Flags  -> ()
// Parameters:
//		struct FName                                       EventName                                                  (OptionalParm, Parm)
void APlayerController::RE(const struct FName& EventName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RE");

	APlayerController_RE_Params params {};
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.RemoteEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       EventName                                                  (OptionalParm, Parm)
void APlayerController::RemoteEvent(const struct FName& EventName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RemoteEvent");

	APlayerController_RemoteEvent_Params params {};
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ListCE
//		Flags  -> ()
void APlayerController::ListCE()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ListCE");

	APlayerController_ListCE_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ListConsoleEvents
//		Flags  -> ()
// Parameters:
void APlayerController::ListConsoleEvents()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ListConsoleEvents");

	APlayerController_ListConsoleEvents_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.CE
//		Flags  -> ()
// Parameters:
//		struct FName                                       EventName                                                  (OptionalParm, Parm)
void APlayerController::CE(const struct FName& EventName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CE");

	APlayerController_CE_Params params {};
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.CauseEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       EventName                                                  (OptionalParm, Parm)
void APlayerController::CauseEvent(const struct FName& EventName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CauseEvent");

	APlayerController_CauseEvent_Params params {};
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerCauseEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       EventName                                                  (Parm)
void APlayerController::ServerCauseEvent(const struct FName& EventName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerCauseEvent");

	APlayerController_ServerCauseEvent_Params params {};
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnToggleHUD
//		Flags  -> ()
// Parameters:
//		class USeqAct_ToggleHUD*                           inAction                                                   (Parm)
void APlayerController::OnToggleHUD(class USeqAct_ToggleHUD* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnToggleHUD");

	APlayerController_OnToggleHUD_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnSetCameraTarget
//		Flags  -> (Simulated, Exec, Event, Static, Const, Private, NetServer, HasDefaults, K2Call, K2Pure)
// Parameters:
//		class USeqAct_SetCameraTarget*                     inAction                                                   (Parm)
void APlayerController::STATIC_OnSetCameraTarget(class USeqAct_SetCameraTarget* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnSetCameraTarget");

	APlayerController_OnSetCameraTarget_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ModifyOnSetCameraTargetBlendTime
//		Flags  -> ()
// Parameters:
//		class AActor*                                      inEventOriginator                                          (Parm)
//		class AActor*                                      inRealCameraTarget                                         (Parm)
//		float                                              outBlendTime                                               (Parm, OutParm)
void APlayerController::ModifyOnSetCameraTargetBlendTime(class AActor* inEventOriginator, class AActor* inRealCameraTarget, float* outBlendTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ModifyOnSetCameraTargetBlendTime");

	APlayerController_ModifyOnSetCameraTargetBlendTime_Params params {};
	params.inEventOriginator = inEventOriginator;
	params.inRealCameraTarget = inRealCameraTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (outBlendTime != nullptr)
		*outBlendTime = params.outBlendTime;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientClearKismetText
//		Flags  -> ()
// Parameters:
//		struct FVector2D                                   MessageOffset                                              (Parm)
void APlayerController::ClientClearKismetText(const struct FVector2D& MessageOffset)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientClearKismetText");

	APlayerController_ClientClearKismetText_Params params {};
	params.MessageOffset = MessageOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientDrawKismetText
//		Flags  -> ()
// Parameters:
//		struct FKismetDrawTextInfo                         DrawTextInfo                                               (Parm, NeedCtorLink)
//		float                                              DisplayTime                                                (Parm)
void APlayerController::ClientDrawKismetText(const struct FKismetDrawTextInfo& DrawTextInfo, float DisplayTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientDrawKismetText");

	APlayerController_ClientDrawKismetText_Params params {};
	params.DrawTextInfo = DrawTextInfo;
	params.DisplayTime = DisplayTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnDrawText
//		Flags  -> ()
// Parameters:
//		class USeqAct_DrawText*                            inAction                                                   (Parm)
void APlayerController::OnDrawText(class USeqAct_DrawText* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnDrawText");

	APlayerController_OnDrawText_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.DisplayDebug
//		Flags  -> ()
// Parameters:
//		class AHUD*                                        HUD                                                        (Parm)
//		float                                              out_YL                                                     (Parm, OutParm)
//		float                                              out_YPos                                                   (Parm, OutParm)
void APlayerController::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DisplayDebug");

	APlayerController_DisplayDebug_Params params {};
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientIgnoreLookInput
//		Flags  -> ()
// Parameters:
//		bool                                               bIgnore                                                    (Parm)
void APlayerController::ClientIgnoreLookInput(bool bIgnore)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientIgnoreLookInput");

	APlayerController_ClientIgnoreLookInput_Params params {};
	params.bIgnore = bIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientIgnoreMoveInput
//		Flags  -> ()
// Parameters:
//		bool                                               bIgnore                                                    (Parm)
void APlayerController::ClientIgnoreMoveInput(bool bIgnore)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientIgnoreMoveInput");

	APlayerController_ClientIgnoreMoveInput_Params params {};
	params.bIgnore = bIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnToggleInput
//		Flags  -> ()
// Parameters:
//		class USeqAct_ToggleInput*                         inAction                                                   (Parm)
void APlayerController::OnToggleInput(class USeqAct_ToggleInput* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnToggleInput");

	APlayerController_OnToggleInput_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.AdjustHUDRenderSize
//		Flags  -> ()
// Parameters:
//		int                                                X                                                          (Parm, OutParm)
//		int                                                Y                                                          (Parm, OutParm)
//		int                                                SizeX                                                      (Parm, OutParm)
//		int                                                SizeY                                                      (Parm, OutParm)
//		int                                                FullScreenSizeX                                            (Const, Parm)
//		int                                                FullScreenSizeY                                            (Const, Parm)
void APlayerController::AdjustHUDRenderSize(int* X, int* Y, int* SizeX, int* SizeY, int FullScreenSizeX, int FullScreenSizeY)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AdjustHUDRenderSize");

	APlayerController_AdjustHUDRenderSize_Params params {};
	params.FullScreenSizeX = FullScreenSizeX;
	params.FullScreenSizeY = FullScreenSizeY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (SizeX != nullptr)
		*SizeX = params.SizeX;
	if (SizeY != nullptr)
		*SizeY = params.SizeY;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.DrawHUD
//		Flags  -> ()
// Parameters:
//		class AHUD*                                        H                                                          (Parm)
void APlayerController::DrawHUD(class AHUD* H)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DrawHUD");

	APlayerController_DrawHUD_Params params {};
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.CanRestartPlayer
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::CanRestartPlayer()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanRestartPlayer");

	APlayerController_CanRestartPlayer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerViewSelf
//		Flags  -> ()
// Parameters:
//		struct FViewTargetTransitionParams                 TransitionParams                                           (OptionalParm, Parm)
void APlayerController::ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewSelf");

	APlayerController_ServerViewSelf_Params params {};
	params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ViewAPlayer
//		Flags  -> ()
// Parameters:
//		int                                                Dir                                                        (Parm)
void APlayerController::ViewAPlayer(int Dir)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ViewAPlayer");

	APlayerController_ViewAPlayer_Params params {};
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetNextViewablePlayer
//		Flags  -> ()
// Parameters:
//		int                                                Dir                                                        (Parm)
//		class APlayerReplicationInfo*                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class APlayerReplicationInfo* APlayerController::GetNextViewablePlayer(int Dir)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetNextViewablePlayer");

	APlayerController_GetNextViewablePlayer_Params params {};
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerViewPrevPlayer
//		Flags  -> ()
void APlayerController::ServerViewPrevPlayer()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewPrevPlayer");

	APlayerController_ServerViewPrevPlayer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerViewNextPlayer
//		Flags  -> ()
void APlayerController::ServerViewNextPlayer()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewNextPlayer");

	APlayerController_ServerViewNextPlayer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerSetSpectatorLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewLoc                                                     (Parm)
void APlayerController::ServerSetSpectatorLocation(const struct FVector& NewLoc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetSpectatorLocation");

	APlayerController_ServerSetSpectatorLocation_Params params {};
	params.NewLoc = NewLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.IsSpectating
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::IsSpectating()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsSpectating");

	APlayerController_IsSpectating_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.AdjustPlayerWalkingMoveAccel
//		Flags  -> ()
// Parameters:
//		struct FVector                                     newAccel                                                   (Parm, OutParm)
void APlayerController::AdjustPlayerWalkingMoveAccel(struct FVector* newAccel)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AdjustPlayerWalkingMoveAccel");

	APlayerController_AdjustPlayerWalkingMoveAccel_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (newAccel != nullptr)
		*newAccel = params.newAccel;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.CheckJumpOrDuck
//		Flags  -> ()
void APlayerController::CheckJumpOrDuck()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CheckJumpOrDuck");

	APlayerController_CheckJumpOrDuck_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.LimitViewRotation
//		Flags  -> ()
// Parameters:
//		struct FRotator                                    ViewRotation                                               (Parm)
//		float                                              ViewPitchMin                                               (Parm)
//		float                                              ViewPitchMax                                               (Parm)
//		struct FRotator                                    ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FRotator APlayerController::LimitViewRotation(const struct FRotator& ViewRotation, float ViewPitchMin, float ViewPitchMax)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LimitViewRotation");

	APlayerController_LimitViewRotation_Params params {};
	params.ViewRotation = ViewRotation;
	params.ViewPitchMin = ViewPitchMin;
	params.ViewPitchMax = ViewPitchMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ProcessViewRotation
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
//		struct FRotator                                    out_ViewRotation                                           (Parm, OutParm)
//		struct FRotator                                    DeltaRot                                                   (Parm)
void APlayerController::ProcessViewRotation(float DeltaTime, struct FRotator* out_ViewRotation, const struct FRotator& DeltaRot)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ProcessViewRotation");

	APlayerController_ProcessViewRotation_Params params {};
	params.DeltaTime = DeltaTime;
	params.DeltaRot = DeltaRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_ViewRotation != nullptr)
		*out_ViewRotation = params.out_ViewRotation;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.UpdateRotation
//		Flags  -> (Singular, Net, Native, Operator, Static, Const, Public, NetServer, HasOutParms, K2Call, K2Pure)
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
void APlayerController::STATIC_UpdateRotation(float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UpdateRotation");

	APlayerController_UpdateRotation_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ViewShake
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
void APlayerController::ViewShake(float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ViewShake");

	APlayerController_ViewShake_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetPlayerViewPoint
//		Flags  -> ()
// Parameters:
//		struct FVector                                     out_Location                                               (Parm, OutParm)
//		struct FRotator                                    out_Rotation                                               (Parm, OutParm)
void APlayerController::GetPlayerViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPlayerViewPoint");

	APlayerController_GetPlayerViewPoint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Rotation != nullptr)
		*out_Rotation = params.out_Rotation;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SpawnPlayerCamera
//		Flags  -> ()
void APlayerController::SpawnPlayerCamera()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SpawnPlayerCamera");

	APlayerController_SpawnPlayerCamera_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerVerifyViewTarget
//		Flags  -> ()
void APlayerController::ServerVerifyViewTarget()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerVerifyViewTarget");

	APlayerController_ServerVerifyViewTarget_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetViewTarget
//		Flags  -> ()
// Parameters:
//		class AActor*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class AActor* APlayerController::GetViewTarget()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetViewTarget");

	APlayerController_GetViewTarget_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientSetViewTarget
//		Flags  -> ()
// Parameters:
//		class AActor*                                      A                                                          (Parm)
//		struct FViewTargetTransitionParams                 TransitionParams                                           (OptionalParm, Parm)
void APlayerController::ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget");

	APlayerController_ClientSetViewTarget_Params params {};
	params.A = A;
	params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SetViewTargetWithBlend
//		Flags  -> (Net, NetReliable, Simulated, Native, Operator, Const, Public, NetServer, HasOutParms, K2Call, K2Pure)
// Parameters:
//		class AActor*                                      NewViewTarget                                              (Parm)
//		float                                              BlendTime                                                  (OptionalParm, Parm)
//		TEnumAsByte<Engine_EViewTargetBlendFunction>       BlendFunc                                                  (OptionalParm, Parm)
//		float                                              BlendExp                                                   (OptionalParm, Parm)
//		bool                                               bLockOutgoing                                              (OptionalParm, Parm)
void APlayerController::SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, TEnumAsByte<Engine_EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetViewTargetWithBlend");

	APlayerController_SetViewTargetWithBlend_Params params {};
	params.NewViewTarget = NewViewTarget;
	params.BlendTime = BlendTime;
	params.BlendFunc = BlendFunc;
	params.BlendExp = BlendExp;
	params.bLockOutgoing = bLockOutgoing;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SetViewTarget
//		Flags  -> ()
// Parameters:
//		class AActor*                                      NewViewTarget                                              (Parm)
//		struct FViewTargetTransitionParams                 TransitionParams                                           (OptionalParm, Parm)
void APlayerController::SetViewTarget(class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetViewTarget");

	APlayerController_SetViewTarget_Params params {};
	params.NewViewTarget = NewViewTarget;
	params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.IsLocalController
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::IsLocalController()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsLocalController");

	APlayerController_IsLocalController_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.IsLocalPlayerController
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::IsLocalPlayerController()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsLocalPlayerController");

	APlayerController_IsLocalPlayerController_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetFOVAngle
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float APlayerController::GetFOVAngle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetFOVAngle");

	APlayerController_GetFOVAngle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.AdjustFOV
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
void APlayerController::AdjustFOV(float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AdjustFOV");

	APlayerController_AdjustFOV_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.NotifyLanded
//		Flags  -> ()
// Parameters:
//		struct FVector                                     HitNormal                                                  (Parm)
//		class AActor*                                      FloorActor                                                 (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::NotifyLanded(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyLanded");

	APlayerController_NotifyLanded_Params params {};
	params.HitNormal = HitNormal;
	params.FloorActor = FloorActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.AimHelpDot
//		Flags  -> ()
// Parameters:
//		bool                                               bInstantHit                                                (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float APlayerController::AimHelpDot(bool bInstantHit)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AimHelpDot");

	APlayerController_AimHelpDot_Params params {};
	params.bInstantHit = bInstantHit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetAdjustedAimFor
//		Flags  -> (Net, NetReliable, Simulated, Exec, Native, Event, Operator, Const, Public, NetServer, HasOutParms, K2Call, K2Pure)
// Parameters:
//		class AWeapon*                                     W                                                          (Parm)
//		struct FVector                                     StartFireLoc                                               (Parm)
//		struct FRotator                                    ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FRotator APlayerController::GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetAdjustedAimFor");

	APlayerController_GetAdjustedAimFor_Params params {};
	params.W = W;
	params.StartFireLoc = StartFireLoc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.CameraTransitionFinished
//		Flags  -> ()
void APlayerController::CameraTransitionFinished()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CameraTransitionFinished");

	APlayerController_CameraTransitionFinished_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.CameraLookAtFinished
//		Flags  -> ()
// Parameters:
//		class USeqAct_CameraLookAt*                        Action                                                     (Parm)
void APlayerController::CameraLookAtFinished(class USeqAct_CameraLookAt* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CameraLookAtFinished");

	APlayerController_CameraLookAtFinished_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.AimingHelp
//		Flags  -> ()
// Parameters:
//		bool                                               bInstantHit                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::AimingHelp(bool bInstantHit)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AimingHelp");

	APlayerController_AimingHelp_Params params {};
	params.bInstantHit = bInstantHit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.PlayerMove
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
void APlayerController::PlayerMove(float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayerMove");

	APlayerController_PlayerMove_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.PlayerTick
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
void APlayerController::PlayerTick(float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayerTick");

	APlayerController_PlayerTick_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.NotifyChangedWeapon
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     PreviousWeapon                                             (Parm)
//		class AWeapon*                                     NewWeapon                                                  (Parm)
void APlayerController::NotifyChangedWeapon(class AWeapon* PreviousWeapon, class AWeapon* NewWeapon)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyChangedWeapon");

	APlayerController_NotifyChangedWeapon_Params params {};
	params.PreviousWeapon = PreviousWeapon;
	params.NewWeapon = NewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientGameEnded
//		Flags  -> ()
// Parameters:
//		class AActor*                                      EndGameFocus                                               (Parm)
//		bool                                               bIsWinner                                                  (Parm)
void APlayerController::ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientGameEnded");

	APlayerController_ClientGameEnded_Params params {};
	params.EndGameFocus = EndGameFocus;
	params.bIsWinner = bIsWinner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GameHasEnded
//		Flags  -> ()
// Parameters:
//		class AActor*                                      EndGameFocus                                               (OptionalParm, Parm)
//		bool                                               bIsWinner                                                  (OptionalParm, Parm)
void APlayerController::GameHasEnded(class AActor* EndGameFocus, bool bIsWinner)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GameHasEnded");

	APlayerController_GameHasEnded_Params params {};
	params.EndGameFocus = EndGameFocus;
	params.bIsWinner = bIsWinner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientRestart
//		Flags  -> ()
// Parameters:
//		class APawn*                                       NewPawn                                                    (Parm)
void APlayerController::ClientRestart(class APawn* NewPawn)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRestart");

	APlayerController_ClientRestart_Params params {};
	params.NewPawn = NewPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.EnterStartState
//		Flags  -> ()
void APlayerController::EnterStartState()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EnterStartState");

	APlayerController_EnterStartState_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ForceSingleNetUpdateFor
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Target                                                     (Parm)
void APlayerController::ForceSingleNetUpdateFor(class AActor* Target)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ForceSingleNetUpdateFor");

	APlayerController_ForceSingleNetUpdateFor_Params params {};
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.HasClientLoadedCurrentWorld
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::HasClientLoadedCurrentWorld()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HasClientLoadedCurrentWorld");

	APlayerController_HasClientLoadedCurrentWorld_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.NotifyLoadedWorld
//		Flags  -> (NetReliable, Simulated, Exec, Native, Static, HasOptionalParms, Public, NetServer, HasOutParms, K2Call, K2Pure)
// Parameters:
//		struct FName                                       WorldPackageName                                           (Parm)
//		bool                                               bFinalDest                                                 (Parm)
void APlayerController::STATIC_NotifyLoadedWorld(const struct FName& WorldPackageName, bool bFinalDest)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyLoadedWorld");

	APlayerController_NotifyLoadedWorld_Params params {};
	params.WorldPackageName = WorldPackageName;
	params.bFinalDest = bFinalDest;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerNotifyLoadedWorld
//		Flags  -> ()
// Parameters:
//		struct FName                                       WorldPackageName                                           (Parm)
void APlayerController::ServerNotifyLoadedWorld(const struct FName& WorldPackageName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerNotifyLoadedWorld");

	APlayerController_ServerNotifyLoadedWorld_Params params {};
	params.WorldPackageName = WorldPackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.Restart
//		Flags  -> ()
// Parameters:
//		bool                                               bVehicleTransition                                         (Parm)
void APlayerController::Restart(bool bVehicleTransition)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Restart");

	APlayerController_Restart_Params params {};
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientSetProgressMessage
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_EProgressMessageType>           MessageType                                                (Parm)
//		struct FString                                     Message                                                    (Parm, NeedCtorLink)
//		struct FString                                     Title                                                      (OptionalParm, Parm, NeedCtorLink)
//		bool                                               bIgnoreFutureNetworkMessages                               (OptionalParm, Parm)
void APlayerController::ClientSetProgressMessage(TEnumAsByte<Engine_EProgressMessageType> MessageType, const struct FString& Message, const struct FString& Title, bool bIgnoreFutureNetworkMessages)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetProgressMessage");

	APlayerController_ClientSetProgressMessage_Params params {};
	params.MessageType = MessageType;
	params.Message = Message;
	params.Title = Title;
	params.bIgnoreFutureNetworkMessages = bIgnoreFutureNetworkMessages;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SwitchLevel
//		Flags  -> ()
// Parameters:
//		struct FString                                     URL                                                        (Parm, NeedCtorLink)
void APlayerController::SwitchLevel(const struct FString& URL)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SwitchLevel");

	APlayerController_SwitchLevel_Params params {};
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerChangeTeam
//		Flags  -> ()
// Parameters:
//		int                                                N                                                          (Parm)
void APlayerController::ServerChangeTeam(int N)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerChangeTeam");

	APlayerController_ServerChangeTeam_Params params {};
	params.N = N;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ChangeTeam
//		Flags  -> ()
// Parameters:
//		struct FString                                     TeamName                                                   (OptionalParm, Parm, NeedCtorLink)
void APlayerController::ChangeTeam(const struct FString& TeamName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ChangeTeam");

	APlayerController_ChangeTeam_Params params {};
	params.TeamName = TeamName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SwitchTeam
//		Flags  -> ()
void APlayerController::SwitchTeam()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SwitchTeam");

	APlayerController_SwitchTeam_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerChangeName
//		Flags  -> ()
// Parameters:
//		struct FString                                     S                                                          (Parm, CoerceParm, NeedCtorLink)
void APlayerController::ServerChangeName(const struct FString& S)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerChangeName");

	APlayerController_ServerChangeName_Params params {};
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SetName
//		Flags  -> ()
// Parameters:
//		struct FString                                     S                                                          (Parm, CoerceParm, NeedCtorLink)
void APlayerController::SetName(const struct FString& S)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetName");

	APlayerController_SetName_Params params {};
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerSuicide
//		Flags  -> ()
void APlayerController::ServerSuicide()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSuicide");

	APlayerController_ServerSuicide_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.Suicide
//		Flags  -> ()
void APlayerController::Suicide()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Suicide");

	APlayerController_Suicide_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.TriggerInteracted
//		Flags  -> (Singular, NetReliable, Simulated, Event, Operator, Static, HasOptionalParms, Public, NetServer, HasOutParms, K2Call, K2Pure)
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::STATIC_TriggerInteracted()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TriggerInteracted");

	APlayerController_TriggerInteracted_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.FindVehicleToDrive
//		Flags  -> (Singular, Net, NetReliable, Simulated, Exec, Native, Operator, HasOptionalParms, Public, NetServer, HasOutParms, K2Call, K2Pure)
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::FindVehicleToDrive()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FindVehicleToDrive");

	APlayerController_FindVehicleToDrive_Params params {};

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.PerformedUseAction
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::PerformedUseAction()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PerformedUseAction");

	APlayerController_PerformedUseAction_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerUse
//		Flags  -> ()
void APlayerController::ServerUse()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUse");

	APlayerController_ServerUse_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.Use
//		Flags  -> ()
void APlayerController::Use()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Use");

	APlayerController_Use_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetTriggerUseList
//		Flags  -> (Static, HasOptionalParms, Public, NetServer, HasOutParms, K2Call, K2Pure)
// Parameters:
//		float                                              interactDistanceToCheck                                    (Parm)
//		float                                              crosshairDist                                              (Parm)
//		float                                              minDot                                                     (Parm)
//		bool                                               bUsuableOnly                                               (Parm)
//		TArray<class ATrigger*>                            out_useList                                                (Parm, OutParm, NeedCtorLink)
void APlayerController::STATIC_GetTriggerUseList(float interactDistanceToCheck, float crosshairDist, float minDot, bool bUsuableOnly, TArray<class ATrigger*>* out_useList)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetTriggerUseList");

	APlayerController_GetTriggerUseList_Params params {};
	params.interactDistanceToCheck = interactDistanceToCheck;
	params.crosshairDist = crosshairDist;
	params.minDot = minDot;
	params.bUsuableOnly = bUsuableOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_useList != nullptr)
		*out_useList = params.out_useList;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.StopAltFire
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FireModeNum                                                (OptionalParm, Parm)
void APlayerController::StopAltFire(unsigned char FireModeNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StopAltFire");

	APlayerController_StopAltFire_Params params {};
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.StartAltFire
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FireModeNum                                                (OptionalParm, Parm)
void APlayerController::StartAltFire(unsigned char FireModeNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StartAltFire");

	APlayerController_StartAltFire_Params params {};
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.StopFire
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FireModeNum                                                (OptionalParm, Parm)
void APlayerController::StopFire(unsigned char FireModeNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StopFire");

	APlayerController_StopFire_Params params {};
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.StartFire
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FireModeNum                                                (OptionalParm, Parm)
void APlayerController::StartFire(unsigned char FireModeNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StartFire");

	APlayerController_StartFire_Params params {};
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.NextWeapon
//		Flags  -> ()
void APlayerController::NextWeapon()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NextWeapon");

	APlayerController_NextWeapon_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.PrevWeapon
//		Flags  -> ()
void APlayerController::PrevWeapon()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PrevWeapon");

	APlayerController_PrevWeapon_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerThrowWeapon
//		Flags  -> ()
void APlayerController::ServerThrowWeapon()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerThrowWeapon");

	APlayerController_ServerThrowWeapon_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ThrowWeapon
//		Flags  -> ()
void APlayerController::ThrowWeapon()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ThrowWeapon");

	APlayerController_ThrowWeapon_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.UTrace
//		Flags  -> ()
void APlayerController::UTrace()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UTrace");

	APlayerController_UTrace_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerUTrace
//		Flags  -> ()
void APlayerController::ServerUTrace()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUTrace");

	APlayerController_ServerUTrace_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ConditionalPause
//		Flags  -> ()
// Parameters:
//		bool                                               bDesiredPauseState                                         (Parm)
void APlayerController::ConditionalPause(bool bDesiredPauseState)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ConditionalPause");

	APlayerController_ConditionalPause_Params params {};
	params.bDesiredPauseState = bDesiredPauseState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerPause
//		Flags  -> ()
void APlayerController::ServerPause()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerPause");

	APlayerController_ServerPause_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.Pause
//		Flags  -> ()
void APlayerController::Pause()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Pause");

	APlayerController_Pause_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.IsPaused
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::IsPaused()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsPaused");

	APlayerController_IsPaused_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SetPause
//		Flags  -> ()
// Parameters:
//		bool                                               bPause                                                     (Parm)
//		struct FScriptDelegate                             CanUnpauseDelegate                                         (OptionalParm, Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::SetPause(bool bPause, const struct FScriptDelegate& CanUnpauseDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetPause");

	APlayerController_SetPause_Params params {};
	params.bPause = bPause;
	params.CanUnpauseDelegate = CanUnpauseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.CanUnpause
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::CanUnpause()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanUnpause");

	APlayerController_CanUnpause_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientPauseRumble
//		Flags  -> ()
// Parameters:
//		bool                                               bShouldPauseRumble                                         (Parm)
void APlayerController::ClientPauseRumble(bool bShouldPauseRumble)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPauseRumble");

	APlayerController_ClientPauseRumble_Params params {};
	params.bShouldPauseRumble = bShouldPauseRumble;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.PauseRumbleForAllPlayers
//		Flags  -> ()
// Parameters:
//		bool                                               bShouldPauseRumble                                         (OptionalParm, Parm)
void APlayerController::PauseRumbleForAllPlayers(bool bShouldPauseRumble)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PauseRumbleForAllPlayers");

	APlayerController_PauseRumbleForAllPlayers_Params params {};
	params.bShouldPauseRumble = bShouldPauseRumble;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.LocalTravel
//		Flags  -> ()
// Parameters:
//		struct FString                                     URL                                                        (Parm, NeedCtorLink)
void APlayerController::LocalTravel(const struct FString& URL)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LocalTravel");

	APlayerController_LocalTravel_Params params {};
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.RestartLevel
//		Flags  -> ()
void APlayerController::RestartLevel()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RestartLevel");

	APlayerController_RestartLevel_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerSpeech
//		Flags  -> ()
// Parameters:
//		struct FName                                       Type                                                       (Parm)
//		int                                                Index                                                      (Parm)
//		struct FString                                     Callsign                                                   (Parm, NeedCtorLink)
void APlayerController::ServerSpeech(const struct FName& Type, int Index, const struct FString& Callsign)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSpeech");

	APlayerController_ServerSpeech_Params params {};
	params.Type = Type;
	params.Index = Index;
	params.Callsign = Callsign;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.Speech
//		Flags  -> ()
// Parameters:
//		struct FName                                       Type                                                       (Parm)
//		int                                                Index                                                      (Parm)
//		struct FString                                     Callsign                                                   (Parm, NeedCtorLink)
void APlayerController::Speech(const struct FName& Type, int Index, const struct FString& Callsign)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Speech");

	APlayerController_Speech_Params params {};
	params.Type = Type;
	params.Index = Index;
	params.Callsign = Callsign;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerRestartGame
//		Flags  -> ()
void APlayerController::ServerRestartGame()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerRestartGame");

	APlayerController_ServerRestartGame_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.HandleWalking
//		Flags  -> ()
void APlayerController::HandleWalking()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HandleWalking");

	APlayerController_HandleWalking_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerUpdateCamera
//		Flags  -> (Singular, NetReliable, Native, Event, HasOptionalParms, Public, NetServer, HasOutParms, K2Call, K2Pure)
// Parameters:
//		struct FVector                                     CamLoc                                                     (Parm)
//		int                                                CamPitchAndYaw                                             (Parm)
void APlayerController::ServerUpdateCamera(const struct FVector& CamLoc, int CamPitchAndYaw)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUpdateCamera");

	APlayerController_ServerUpdateCamera_Params params {};
	params.CamLoc = CamLoc;
	params.CamPitchAndYaw = CamPitchAndYaw;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.CallServerMove
//		Flags  -> (Simulated, Operator, HasOptionalParms, Public, NetServer, HasOutParms, K2Call, K2Pure)
// Parameters:
//		class USavedMove*                                  NewMove                                                    (Parm)
//		struct FVector                                     ClientLoc                                                  (Parm)
//		unsigned char                                      ClientRoll                                                 (Parm)
//		int                                                View                                                       (Parm)
//		class USavedMove*                                  OldMove                                                    (Parm)
void APlayerController::CallServerMove(class USavedMove* NewMove, const struct FVector& ClientLoc, unsigned char ClientRoll, int View, class USavedMove* OldMove)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CallServerMove");

	APlayerController_CallServerMove_Params params {};
	params.NewMove = NewMove;
	params.ClientLoc = ClientLoc;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.OldMove = OldMove;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ReplicateMove
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
//		struct FVector                                     newAccel                                                   (Parm)
//		TEnumAsByte<Engine_EDoubleClickDir>                DoubleClickMove                                            (Parm)
//		struct FRotator                                    DeltaRot                                                   (Parm)
void APlayerController::ReplicateMove(float DeltaTime, const struct FVector& newAccel, TEnumAsByte<Engine_EDoubleClickDir> DoubleClickMove, const struct FRotator& DeltaRot)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReplicateMove");

	APlayerController_ReplicateMove_Params params {};
	params.DeltaTime = DeltaTime;
	params.newAccel = newAccel;
	params.DoubleClickMove = DoubleClickMove;
	params.DeltaRot = DeltaRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.CompressAccel
//		Flags  -> ()
// Parameters:
//		int                                                C                                                          (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int APlayerController::CompressAccel(int C)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CompressAccel");

	APlayerController_CompressAccel_Params params {};
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetFreeMove
//		Flags  -> ()
// Parameters:
//		class USavedMove*                                  ReturnValue                                                (Parm, OutParm, ReturnParm)
class USavedMove* APlayerController::GetFreeMove()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetFreeMove");

	APlayerController_GetFreeMove_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientUpdatePosition
//		Flags  -> ()
// Parameters:
void APlayerController::ClientUpdatePosition()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUpdatePosition");

	APlayerController_ClientUpdatePosition_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClearAckedMoves
//		Flags  -> ()
void APlayerController::ClearAckedMoves()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClearAckedMoves");

	APlayerController_ClearAckedMoves_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerUpdatePing
//		Flags  -> ()
// Parameters:
//		int                                                NewPing                                                    (Parm)
void APlayerController::ServerUpdatePing(int NewPing)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUpdatePing");

	APlayerController_ServerUpdatePing_Params params {};
	params.NewPing = NewPing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.UpdateStateFromAdjustment
//		Flags  -> ()
// Parameters:
//		struct FName                                       NewState                                                   (Parm)
void APlayerController::UpdateStateFromAdjustment(const struct FName& NewState)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UpdateStateFromAdjustment");

	APlayerController_UpdateStateFromAdjustment_Params params {};
	params.NewState = NewState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.LongClientAdjustPosition
//		Flags  -> (NetReliable, Simulated, Exec, Public, NetServer, HasOutParms, K2Call, K2Pure)
// Parameters:
//		float                                              TimeStamp                                                  (Parm)
//		struct FName                                       NewState                                                   (Parm)
//		TEnumAsByte<Engine_EPhysics>                       newPhysics                                                 (Parm)
//		float                                              NewLocX                                                    (Parm)
//		float                                              NewLocY                                                    (Parm)
//		float                                              NewLocZ                                                    (Parm)
//		float                                              NewVelX                                                    (Parm)
//		float                                              NewVelY                                                    (Parm)
//		float                                              NewVelZ                                                    (Parm)
//		class AActor*                                      NewBase                                                    (Parm)
//		float                                              NewFloorX                                                  (Parm)
//		float                                              NewFloorY                                                  (Parm)
//		float                                              NewFloorZ                                                  (Parm)
void APlayerController::LongClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<Engine_EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LongClientAdjustPosition");

	APlayerController_LongClientAdjustPosition_Params params {};
	params.TimeStamp = TimeStamp;
	params.NewState = NewState;
	params.newPhysics = newPhysics;
	params.NewLocX = NewLocX;
	params.NewLocY = NewLocY;
	params.NewLocZ = NewLocZ;
	params.NewVelX = NewVelX;
	params.NewVelY = NewVelY;
	params.NewVelZ = NewVelZ;
	params.NewBase = NewBase;
	params.NewFloorX = NewFloorX;
	params.NewFloorY = NewFloorY;
	params.NewFloorZ = NewFloorZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SkipPositionUpdateForRM
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::SkipPositionUpdateForRM()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SkipPositionUpdateForRM");

	APlayerController_SkipPositionUpdateForRM_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.UpdatePing
//		Flags  -> ()
// Parameters:
//		float                                              TimeStamp                                                  (Parm)
void APlayerController::UpdatePing(float TimeStamp)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UpdatePing");

	APlayerController_UpdatePing_Params params {};
	params.TimeStamp = TimeStamp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientAdjustPosition
//		Flags  -> (NetReliable, Exec, Operator, Public, NetServer, HasOutParms, K2Call, K2Pure)
// Parameters:
//		float                                              TimeStamp                                                  (Parm)
//		struct FName                                       NewState                                                   (Parm)
//		TEnumAsByte<Engine_EPhysics>                       newPhysics                                                 (Parm)
//		float                                              NewLocX                                                    (Parm)
//		float                                              NewLocY                                                    (Parm)
//		float                                              NewLocZ                                                    (Parm)
//		float                                              NewVelX                                                    (Parm)
//		float                                              NewVelY                                                    (Parm)
//		float                                              NewVelZ                                                    (Parm)
//		class AActor*                                      NewBase                                                    (Parm)
void APlayerController::ClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<Engine_EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientAdjustPosition");

	APlayerController_ClientAdjustPosition_Params params {};
	params.TimeStamp = TimeStamp;
	params.NewState = NewState;
	params.newPhysics = newPhysics;
	params.NewLocX = NewLocX;
	params.NewLocY = NewLocY;
	params.NewLocZ = NewLocZ;
	params.NewVelX = NewVelX;
	params.NewVelY = NewVelY;
	params.NewVelZ = NewVelZ;
	params.NewBase = NewBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientAckGoodMove
//		Flags  -> ()
// Parameters:
//		float                                              TimeStamp                                                  (Parm)
void APlayerController::ClientAckGoodMove(float TimeStamp)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientAckGoodMove");

	APlayerController_ClientAckGoodMove_Params params {};
	params.TimeStamp = TimeStamp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientCapBandwidth
//		Flags  -> ()
// Parameters:
//		int                                                Cap                                                        (Parm)
void APlayerController::ClientCapBandwidth(int Cap)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCapBandwidth");

	APlayerController_ClientCapBandwidth_Params params {};
	params.Cap = Cap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ShortClientAdjustPosition
//		Flags  -> (Net, Native, Event, Operator, Static, HasOptionalParms, Const, Public, Private, NetServer, HasDefaults, K2Call, K2Pure)
// Parameters:
//		float                                              TimeStamp                                                  (Parm)
//		struct FName                                       NewState                                                   (Parm)
//		TEnumAsByte<Engine_EPhysics>                       newPhysics                                                 (Parm)
//		float                                              NewLocX                                                    (Parm)
//		float                                              NewLocY                                                    (Parm)
//		float                                              NewLocZ                                                    (Parm)
//		class AActor*                                      NewBase                                                    (Parm)
void APlayerController::STATIC_ShortClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<Engine_EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShortClientAdjustPosition");

	APlayerController_ShortClientAdjustPosition_Params params {};
	params.TimeStamp = TimeStamp;
	params.NewState = NewState;
	params.newPhysics = newPhysics;
	params.NewLocX = NewLocX;
	params.NewLocY = NewLocY;
	params.NewLocZ = NewLocZ;
	params.NewBase = NewBase;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.VeryShortClientAdjustPosition
//		Flags  -> (Net, Simulated, Exec, Static, HasOptionalParms, Const, Public, Private, NetServer, HasDefaults, K2Call, K2Pure)
// Parameters:
//		float                                              TimeStamp                                                  (Parm)
//		float                                              NewLocX                                                    (Parm)
//		float                                              NewLocY                                                    (Parm)
//		float                                              NewLocZ                                                    (Parm)
//		class AActor*                                      NewBase                                                    (Parm)
void APlayerController::STATIC_VeryShortClientAdjustPosition(float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.VeryShortClientAdjustPosition");

	APlayerController_VeryShortClientAdjustPosition_Params params {};
	params.TimeStamp = TimeStamp;
	params.NewLocX = NewLocX;
	params.NewLocY = NewLocY;
	params.NewLocZ = NewLocZ;
	params.NewBase = NewBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.MoveAutonomous
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
//		unsigned char                                      CompressedFlags                                            (Parm)
//		struct FVector                                     newAccel                                                   (Parm)
//		struct FRotator                                    DeltaRot                                                   (Parm)
void APlayerController::MoveAutonomous(float DeltaTime, unsigned char CompressedFlags, const struct FVector& newAccel, const struct FRotator& DeltaRot)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.MoveAutonomous");

	APlayerController_MoveAutonomous_Params params {};
	params.DeltaTime = DeltaTime;
	params.CompressedFlags = CompressedFlags;
	params.newAccel = newAccel;
	params.DeltaRot = DeltaRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ProcessMove
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
//		struct FVector                                     newAccel                                                   (Parm)
//		TEnumAsByte<Engine_EDoubleClickDir>                DoubleClickMove                                            (Parm)
//		struct FRotator                                    DeltaRot                                                   (Parm)
void APlayerController::ProcessMove(float DeltaTime, const struct FVector& newAccel, TEnumAsByte<Engine_EDoubleClickDir> DoubleClickMove, const struct FRotator& DeltaRot)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ProcessMove");

	APlayerController_ProcessMove_Params params {};
	params.DeltaTime = DeltaTime;
	params.newAccel = newAccel;
	params.DoubleClickMove = DoubleClickMove;
	params.DeltaRot = DeltaRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ProcessDrive
//		Flags  -> ()
// Parameters:
//		float                                              InForward                                                  (Parm)
//		float                                              InStrafe                                                   (Parm)
//		float                                              InUp                                                       (Parm)
//		bool                                               InJump                                                     (Parm)
void APlayerController::ProcessDrive(float InForward, float InStrafe, float InUp, bool InJump)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ProcessDrive");

	APlayerController_ProcessDrive_Params params {};
	params.InForward = InForward;
	params.InStrafe = InStrafe;
	params.InUp = InUp;
	params.InJump = InJump;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerDrive
//		Flags  -> (Simulated, Operator, Static, HasOptionalParms, Const, Public, Private, NetServer, HasDefaults, K2Call, K2Pure)
// Parameters:
//		float                                              InForward                                                  (Parm)
//		float                                              InStrafe                                                   (Parm)
//		float                                              aUp                                                        (Parm)
//		bool                                               InJump                                                     (Parm)
//		int                                                View                                                       (Parm)
void APlayerController::STATIC_ServerDrive(float InForward, float InStrafe, float aUp, bool InJump, int View)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerDrive");

	APlayerController_ServerDrive_Params params {};
	params.InForward = InForward;
	params.InStrafe = InStrafe;
	params.aUp = aUp;
	params.InJump = InJump;
	params.View = View;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SendClientAdjustment
//		Flags  -> ()
void APlayerController::SendClientAdjustment()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SendClientAdjustment");

	APlayerController_SendClientAdjustment_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerMove
//		Flags  -> (Singular, NetReliable, Exec, Native, Operator, Static, HasOptionalParms, Const, Public, Private, NetServer, HasDefaults, K2Call, K2Pure)
// Parameters:
//		float                                              TimeStamp                                                  (Parm)
//		struct FVector                                     InAccel                                                    (Parm)
//		struct FVector                                     ClientLoc                                                  (Parm)
//		unsigned char                                      MoveFlags                                                  (Parm)
//		unsigned char                                      ClientRoll                                                 (Parm)
//		int                                                View                                                       (Parm)
void APlayerController::STATIC_ServerMove(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerMove");

	APlayerController_ServerMove_Params params {};
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.MoveFlags = MoveFlags;
	params.ClientRoll = ClientRoll;
	params.View = View;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerMoveHandleClientError
//		Flags  -> (Net, NetReliable, Simulated, Exec, Event, Operator, HasOptionalParms, Const, Public, Private, NetServer, HasDefaults, K2Call, K2Pure)
// Parameters:
//		float                                              TimeStamp                                                  (Parm)
//		struct FVector                                     Accel                                                      (Parm)
//		struct FVector                                     ClientLoc                                                  (Parm)
void APlayerController::ServerMoveHandleClientError(float TimeStamp, const struct FVector& Accel, const struct FVector& ClientLoc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerMoveHandleClientError");

	APlayerController_ServerMoveHandleClientError_Params params {};
	params.TimeStamp = TimeStamp;
	params.Accel = Accel;
	params.ClientLoc = ClientLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetServerMoveDeltaTime
//		Flags  -> ()
// Parameters:
//		float                                              TimeStamp                                                  (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float APlayerController::GetServerMoveDeltaTime(float TimeStamp)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetServerMoveDeltaTime");

	APlayerController_GetServerMoveDeltaTime_Params params {};
	params.TimeStamp = TimeStamp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OldServerMove
//		Flags  -> (Singular, NetReliable, Exec, Static, HasOptionalParms, Const, Public, Private, NetServer, HasDefaults, K2Call, K2Pure)
// Parameters:
//		float                                              OldTimeStamp                                               (Parm)
//		unsigned char                                      OldAccelX                                                  (Parm)
//		unsigned char                                      OldAccelY                                                  (Parm)
//		unsigned char                                      OldAccelZ                                                  (Parm)
//		unsigned char                                      OldMoveFlags                                               (Parm)
void APlayerController::STATIC_OldServerMove(float OldTimeStamp, unsigned char OldAccelX, unsigned char OldAccelY, unsigned char OldAccelZ, unsigned char OldMoveFlags)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OldServerMove");

	APlayerController_OldServerMove_Params params {};
	params.OldTimeStamp = OldTimeStamp;
	params.OldAccelX = OldAccelX;
	params.OldAccelY = OldAccelY;
	params.OldAccelZ = OldAccelZ;
	params.OldMoveFlags = OldMoveFlags;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.DualServerMove
//		Flags  -> ()
// Parameters:
//		float                                              TimeStamp0                                                 (Parm)
//		struct FVector                                     InAccel0                                                   (Parm)
//		unsigned char                                      PendingFlags                                               (Parm)
//		int                                                View0                                                      (Parm)
//		float                                              TimeStamp                                                  (Parm)
//		struct FVector                                     InAccel                                                    (Parm)
//		struct FVector                                     ClientLoc                                                  (Parm)
//		unsigned char                                      NewFlags                                                   (Parm)
//		unsigned char                                      ClientRoll                                                 (Parm)
//		int                                                View                                                       (Parm)
void APlayerController::DualServerMove(float TimeStamp0, const struct FVector& InAccel0, unsigned char PendingFlags, int View0, float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, int View)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DualServerMove");

	APlayerController_DualServerMove_Params params {};
	params.TimeStamp0 = TimeStamp0;
	params.InAccel0 = InAccel0;
	params.PendingFlags = PendingFlags;
	params.View0 = View0;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.NewFlags = NewFlags;
	params.ClientRoll = ClientRoll;
	params.View = View;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ForceDeathUpdate
//		Flags  -> ()
void APlayerController::ForceDeathUpdate()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ForceDeathUpdate");

	APlayerController_ForceDeathUpdate_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.UsingFirstPersonCamera
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::UsingFirstPersonCamera()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UsingFirstPersonCamera");

	APlayerController_UsingFirstPersonCamera_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientSetCameraFade
//		Flags  -> ()
// Parameters:
//		bool                                               bEnableFading                                              (Parm)
//		struct FColor                                      FadeColor                                                  (OptionalParm, Parm)
//		struct FVector2D                                   FadeAlpha                                                  (OptionalParm, Parm)
//		float                                              FadeTime                                                   (OptionalParm, Parm)
//		bool                                               bFadeAudio                                                 (OptionalParm, Parm)
void APlayerController::ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCameraFade");

	APlayerController_ClientSetCameraFade_Params params {};
	params.bEnableFading = bEnableFading;
	params.FadeColor = FadeColor;
	params.FadeAlpha = FadeAlpha;
	params.FadeTime = FadeTime;
	params.bFadeAudio = bFadeAudio;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ResetCameraMode
//		Flags  -> ()
void APlayerController::ResetCameraMode()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetCameraMode");

	APlayerController_ResetCameraMode_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SetCameraMode
//		Flags  -> ()
// Parameters:
//		struct FName                                       NewCamMode                                                 (Parm)
void APlayerController::SetCameraMode(const struct FName& NewCamMode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetCameraMode");

	APlayerController_SetCameraMode_Params params {};
	params.NewCamMode = NewCamMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientSetCameraMode
//		Flags  -> ()
// Parameters:
//		struct FName                                       NewCamMode                                                 (Parm)
void APlayerController::ClientSetCameraMode(const struct FName& NewCamMode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCameraMode");

	APlayerController_ClientSetCameraMode_Params params {};
	params.NewCamMode = NewCamMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerCamera
//		Flags  -> ()
// Parameters:
//		struct FName                                       NewMode                                                    (Parm)
void APlayerController::ServerCamera(const struct FName& NewMode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerCamera");

	APlayerController_ServerCamera_Params params {};
	params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.Camera
//		Flags  -> ()
// Parameters:
//		struct FName                                       NewMode                                                    (Parm)
void APlayerController::Camera(const struct FName& NewMode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Camera");

	APlayerController_Camera_Params params {};
	params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.PreClientTravel
//		Flags  -> ()
// Parameters:
//		struct FString                                     PendingURL                                                 (Parm, NeedCtorLink)
//		TEnumAsByte<Engine_ETravelType>                    TravelType                                                 (Parm)
//		bool                                               bIsSeamlessTravel                                          (Parm)
void APlayerController::PreClientTravel(const struct FString& PendingURL, TEnumAsByte<Engine_ETravelType> TravelType, bool bIsSeamlessTravel)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PreClientTravel");

	APlayerController_PreClientTravel_Params params {};
	params.PendingURL = PendingURL;
	params.TravelType = TravelType;
	params.bIsSeamlessTravel = bIsSeamlessTravel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerTeamSay
//		Flags  -> ()
// Parameters:
//		struct FString                                     msg                                                        (Parm, NeedCtorLink)
void APlayerController::ServerTeamSay(const struct FString& msg)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerTeamSay");

	APlayerController_ServerTeamSay_Params params {};
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.TeamSay
//		Flags  -> ()
// Parameters:
//		struct FString                                     msg                                                        (Parm, NeedCtorLink)
void APlayerController::TeamSay(const struct FString& msg)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TeamSay");

	APlayerController_TeamSay_Params params {};
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientAdminMessage
//		Flags  -> ()
// Parameters:
//		struct FString                                     msg                                                        (Parm, NeedCtorLink)
void APlayerController::ClientAdminMessage(const struct FString& msg)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientAdminMessage");

	APlayerController_ClientAdminMessage_Params params {};
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerSay
//		Flags  -> ()
// Parameters:
//		struct FString                                     msg                                                        (Parm, NeedCtorLink)
void APlayerController::ServerSay(const struct FString& msg)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSay");

	APlayerController_ServerSay_Params params {};
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.Say
//		Flags  -> ()
// Parameters:
//		struct FString                                     msg                                                        (Parm, NeedCtorLink)
void APlayerController::Say(const struct FString& msg)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Say");

	APlayerController_Say_Params params {};
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.AllowTextMessage
//		Flags  -> ()
// Parameters:
//		struct FString                                     msg                                                        (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::AllowTextMessage(const struct FString& msg)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AllowTextMessage");

	APlayerController_AllowTextMessage_Params params {};
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerMutate
//		Flags  -> ()
// Parameters:
//		struct FString                                     MutateString                                               (Parm, NeedCtorLink)
void APlayerController::ServerMutate(const struct FString& MutateString)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerMutate");

	APlayerController_ServerMutate_Params params {};
	params.MutateString = MutateString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.Mutate
//		Flags  -> ()
// Parameters:
//		struct FString                                     MutateString                                               (Parm, NeedCtorLink)
void APlayerController::Mutate(const struct FString& MutateString)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Mutate");

	APlayerController_Mutate_Params params {};
	params.MutateString = MutateString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.FOV
//		Flags  -> ()
// Parameters:
//		float                                              F                                                          (Parm)
void APlayerController::FOV(float F)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FOV");

	APlayerController_FOV_Params params {};
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ResetFOV
//		Flags  -> ()
void APlayerController::ResetFOV()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetFOV");

	APlayerController_ResetFOV_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SetFOV
//		Flags  -> ()
// Parameters:
//		float                                              NewFOV                                                     (Parm)
void APlayerController::SetFOV(float NewFOV)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetFOV");

	APlayerController_SetFOV_Params params {};
	params.NewFOV = NewFOV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.FixFOV
//		Flags  -> ()
void APlayerController::FixFOV()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FixFOV");

	APlayerController_FixFOV_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.Destroyed
//		Flags  -> ()
// Parameters:
void APlayerController::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Destroyed");

	APlayerController_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.CleanupPawn
//		Flags  -> ()
// Parameters:
void APlayerController::CleanupPawn()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CleanupPawn");

	APlayerController_CleanupPawn_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClearOnlineDelegates
//		Flags  -> ()
void APlayerController::ClearOnlineDelegates()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClearOnlineDelegates");

	APlayerController_ClearOnlineDelegates_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnPartyMembersInfoChanged
//		Flags  -> ()
// Parameters:
//		struct FString                                     PlayerName                                                 (Parm, NeedCtorLink)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		int                                                CustomData1                                                (Parm)
//		int                                                CustomData2                                                (Parm)
//		int                                                CustomData3                                                (Parm)
//		int                                                CustomData4                                                (Parm)
void APlayerController::OnPartyMembersInfoChanged(const struct FString& PlayerName, const struct FUniqueNetId& PlayerID, int CustomData1, int CustomData2, int CustomData3, int CustomData4)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnPartyMembersInfoChanged");

	APlayerController_OnPartyMembersInfoChanged_Params params {};
	params.PlayerName = PlayerName;
	params.PlayerID = PlayerID;
	params.CustomData1 = CustomData1;
	params.CustomData2 = CustomData2;
	params.CustomData3 = CustomData3;
	params.CustomData4 = CustomData4;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnPartyMemberListChanged
//		Flags  -> ()
// Parameters:
//		bool                                               bJoinedOrLeft                                              (Parm)
//		struct FString                                     PlayerName                                                 (Parm, NeedCtorLink)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
void APlayerController::OnPartyMemberListChanged(bool bJoinedOrLeft, const struct FString& PlayerName, const struct FUniqueNetId& PlayerID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnPartyMemberListChanged");

	APlayerController_OnPartyMemberListChanged_Params params {};
	params.bJoinedOrLeft = bJoinedOrLeft;
	params.PlayerName = PlayerName;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.RegisterOnlineDelegates
//		Flags  -> ()
void APlayerController::RegisterOnlineDelegates()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RegisterOnlineDelegates");

	APlayerController_RegisterOnlineDelegates_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.PlayBeepSound
//		Flags  -> ()
void APlayerController::PlayBeepSound()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayBeepSound");

	APlayerController_PlayBeepSound_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.TeamMessage
//		Flags  -> ()
// Parameters:
//		class APlayerReplicationInfo*                      PRI                                                        (Parm)
//		struct FString                                     S                                                          (Parm, CoerceParm, NeedCtorLink)
//		struct FName                                       Type                                                       (Parm)
//		float                                              MsgLifeTime                                                (OptionalParm, Parm)
void APlayerController::TeamMessage(class APlayerReplicationInfo* PRI, const struct FString& S, const struct FName& Type, float MsgLifeTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TeamMessage");

	APlayerController_TeamMessage_Params params {};
	params.PRI = PRI;
	params.S = S;
	params.Type = Type;
	params.MsgLifeTime = MsgLifeTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SpeakTTS
//		Flags  -> ()
// Parameters:
//		struct FString                                     S                                                          (Parm, CoerceParm, NeedCtorLink)
//		class APlayerReplicationInfo*                      PRI                                                        (OptionalParm, Parm)
void APlayerController::SpeakTTS(const struct FString& S, class APlayerReplicationInfo* PRI)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SpeakTTS");

	APlayerController_SpeakTTS_Params params {};
	params.S = S;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.TeamTalk
//		Flags  -> ()
// Parameters:
void APlayerController::TeamTalk()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TeamTalk");

	APlayerController_TeamTalk_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.Talk
//		Flags  -> ()
// Parameters:
void APlayerController::Talk()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Talk");

	APlayerController_Talk_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.CreateTTSSoundCue
//		Flags  -> ()
// Parameters:
//		struct FString                                     StrToSpeak                                                 (Parm, NeedCtorLink)
//		class APlayerReplicationInfo*                      PRI                                                        (Parm)
//		class USoundCue*                                   ReturnValue                                                (Parm, OutParm, ReturnParm)
class USoundCue* APlayerController::CreateTTSSoundCue(const struct FString& StrToSpeak, class APlayerReplicationInfo* PRI)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CreateTTSSoundCue");

	APlayerController_CreateTTSSoundCue_Params params {};
	params.StrToSpeak = StrToSpeak;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.AllowTTSMessageFrom
//		Flags  -> ()
// Parameters:
//		class APlayerReplicationInfo*                      PRI                                                        (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::AllowTTSMessageFrom(class APlayerReplicationInfo* PRI)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AllowTTSMessageFrom");

	APlayerController_AllowTTSMessageFrom_Params params {};
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.CanCommunicate
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::CanCommunicate()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanCommunicate");

	APlayerController_CanCommunicate_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientMessage
//		Flags  -> ()
// Parameters:
//		struct FString                                     S                                                          (Parm, CoerceParm, NeedCtorLink)
//		struct FName                                       Type                                                       (OptionalParm, Parm)
//		float                                              MsgLifeTime                                                (OptionalParm, Parm)
void APlayerController::ClientMessage(const struct FString& S, const struct FName& Type, float MsgLifeTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientMessage");

	APlayerController_ClientMessage_Params params {};
	params.S = S;
	params.Type = Type;
	params.MsgLifeTime = MsgLifeTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientPlayActorFaceFXAnim
//		Flags  -> ()
// Parameters:
//		class AActor*                                      SourceActor                                                (Parm)
//		class UFaceFXAnimSet*                              AnimSet                                                    (Parm)
//		struct FString                                     GroupName                                                  (Parm, NeedCtorLink)
//		struct FString                                     SeqName                                                    (Parm, NeedCtorLink)
//		class USoundCue*                                   SoundCueToPlay                                             (Parm)
//		class UAkEvent*                                    AkEventToPlay                                              (Parm)
void APlayerController::ClientPlayActorFaceFXAnim(class AActor* SourceActor, class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayActorFaceFXAnim");

	APlayerController_ClientPlayActorFaceFXAnim_Params params {};
	params.SourceActor = SourceActor;
	params.AnimSet = AnimSet;
	params.GroupName = GroupName;
	params.SeqName = SeqName;
	params.SoundCueToPlay = SoundCueToPlay;
	params.AkEventToPlay = AkEventToPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.Kismet_ClientStopSound
//		Flags  -> ()
// Parameters:
//		class USoundCue*                                   ASound                                                     (Parm)
//		class AActor*                                      SourceActor                                                (Parm)
//		float                                              FadeOutTime                                                (Parm)
void APlayerController::Kismet_ClientStopSound(class USoundCue* ASound, class AActor* SourceActor, float FadeOutTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Kismet_ClientStopSound");

	APlayerController_Kismet_ClientStopSound_Params params {};
	params.ASound = ASound;
	params.SourceActor = SourceActor;
	params.FadeOutTime = FadeOutTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.Kismet_ClientPlaySound
//		Flags  -> ()
// Parameters:
//		class USoundCue*                                   ASound                                                     (Parm)
//		class AActor*                                      SourceActor                                                (Parm)
//		float                                              VolumeMultiplier                                           (Parm)
//		float                                              PitchMultiplier                                            (Parm)
//		float                                              FadeInTime                                                 (Parm)
//		bool                                               bSuppressSubtitles                                         (Parm)
//		bool                                               bSuppressSpatialization                                    (Parm)
void APlayerController::Kismet_ClientPlaySound(class USoundCue* ASound, class AActor* SourceActor, float VolumeMultiplier, float PitchMultiplier, float FadeInTime, bool bSuppressSubtitles, bool bSuppressSpatialization)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Kismet_ClientPlaySound");

	APlayerController_Kismet_ClientPlaySound_Params params {};
	params.ASound = ASound;
	params.SourceActor = SourceActor;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.FadeInTime = FadeInTime;
	params.bSuppressSubtitles = bSuppressSubtitles;
	params.bSuppressSpatialization = bSuppressSpatialization;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.IsClosestLocalPlayerToActor
//		Flags  -> ()
// Parameters:
//		class AActor*                                      TheActor                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::IsClosestLocalPlayerToActor(class AActor* TheActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsClosestLocalPlayerToActor");

	APlayerController_IsClosestLocalPlayerToActor_Params params {};
	params.TheActor = TheActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.WwiseClientHearSound
//		Flags  -> ()
// Parameters:
//		class UAkEvent*                                    ASound                                                     (Parm)
//		class AActor*                                      SourceActor                                                (Parm)
//		struct FVector                                     SourceLocation                                             (Parm)
//		bool                                               bStopWhenOwnerDestroyed                                    (Parm)
//		bool                                               bIsOccluded                                                (OptionalParm, Parm)
void APlayerController::WwiseClientHearSound(class UAkEvent* ASound, class AActor* SourceActor, const struct FVector& SourceLocation, bool bStopWhenOwnerDestroyed, bool bIsOccluded)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.WwiseClientHearSound");

	APlayerController_WwiseClientHearSound_Params params {};
	params.ASound = ASound;
	params.SourceActor = SourceActor;
	params.SourceLocation = SourceLocation;
	params.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	params.bIsOccluded = bIsOccluded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientHearSound
//		Flags  -> ()
// Parameters:
//		class USoundCue*                                   ASound                                                     (Parm)
//		class AActor*                                      SourceActor                                                (Parm)
//		struct FVector                                     SourceLocation                                             (Parm)
//		bool                                               bStopWhenOwnerDestroyed                                    (Parm)
//		bool                                               bIsOccluded                                                (OptionalParm, Parm)
void APlayerController::ClientHearSound(class USoundCue* ASound, class AActor* SourceActor, const struct FVector& SourceLocation, bool bStopWhenOwnerDestroyed, bool bIsOccluded)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientHearSound");

	APlayerController_ClientHearSound_Params params {};
	params.ASound = ASound;
	params.SourceActor = SourceActor;
	params.SourceLocation = SourceLocation;
	params.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	params.bIsOccluded = bIsOccluded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetPooledAudioComponent
//		Flags  -> ()
// Parameters:
//		class USoundCue*                                   ASound                                                     (Parm)
//		class AActor*                                      SourceActor                                                (Parm)
//		bool                                               bStopWhenOwnerDestroyed                                    (Parm)
//		bool                                               bUseLocation                                               (OptionalParm, Parm)
//		struct FVector                                     SourceLocation                                             (OptionalParm, Parm)
//		class UAudioComponent*                             ReturnValue                                                (Parm, OutParm, ReturnParm, EditInline)
class UAudioComponent* APlayerController::GetPooledAudioComponent(class USoundCue* ASound, class AActor* SourceActor, bool bStopWhenOwnerDestroyed, bool bUseLocation, const struct FVector& SourceLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPooledAudioComponent");

	APlayerController_GetPooledAudioComponent_Params params {};
	params.ASound = ASound;
	params.SourceActor = SourceActor;
	params.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	params.bUseLocation = bUseLocation;
	params.SourceLocation = SourceLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.HearSoundFinished
//		Flags  -> ()
// Parameters:
//		class UAudioComponent*                             AC                                                         (Parm, EditInline)
void APlayerController::HearSoundFinished(class UAudioComponent* AC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HearSoundFinished");

	APlayerController_HearSoundFinished_Params params {};
	params.AC = AC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientPlaySound
//		Flags  -> ()
// Parameters:
//		class USoundCue*                                   ASound                                                     (Parm)
void APlayerController::ClientPlaySound(class USoundCue* ASound)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlaySound");

	APlayerController_ClientPlaySound_Params params {};
	params.ASound = ASound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ReceiveLocalizedMessage
//		Flags  -> ()
// Parameters:
//		class UClass*                                      Message                                                    (Parm)
//		int                                                Switch                                                     (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_2                                               (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_3                                               (OptionalParm, Parm)
//		class UObject*                                     OptionalObject                                             (OptionalParm, Parm)
void APlayerController::ReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReceiveLocalizedMessage");

	APlayerController_ReceiveLocalizedMessage_Params params {};
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.CleanupPRI
//		Flags  -> ()
void APlayerController::CleanupPRI()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CleanupPRI");

	APlayerController_CleanupPRI_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.HandlePickup
//		Flags  -> ()
// Parameters:
//		class AInventory*                                  Inv                                                        (Parm)
void APlayerController::HandlePickup(class AInventory* Inv)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HandlePickup");

	APlayerController_HandlePickup_Params params {};
	params.Inv = Inv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientSetSecondaryHUD
//		Flags  -> ()
// Parameters:
//		class UClass*                                      newHUDType                                                 (Parm)
void APlayerController::ClientSetSecondaryHUD(class UClass* newHUDType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetSecondaryHUD");

	APlayerController_ClientSetSecondaryHUD_Params params {};
	params.newHUDType = newHUDType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientSetHUD
//		Flags  -> ()
// Parameters:
//		class UClass*                                      newHUDType                                                 (Parm)
void APlayerController::ClientSetHUD(class UClass* newHUDType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetHUD");

	APlayerController_ClientSetHUD_Params params {};
	params.newHUDType = newHUDType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.PawnDied
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
void APlayerController::PawnDied(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PawnDied");

	APlayerController_PawnDied_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.UnPossess
//		Flags  -> ()
void APlayerController::UnPossess()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UnPossess");

	APlayerController_UnPossess_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerAcknowledgePossession
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
void APlayerController::ServerAcknowledgePossession(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerAcknowledgePossession");

	APlayerController_ServerAcknowledgePossession_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.AcknowledgePossession
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
void APlayerController::AcknowledgePossession(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AcknowledgePossession");

	APlayerController_AcknowledgePossession_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.Possess
//		Flags  -> ()
// Parameters:
//		class APawn*                                       aPawn                                                      (Parm)
//		bool                                               bVehicleTransition                                         (Parm)
void APlayerController::Possess(class APawn* aPawn, bool bVehicleTransition)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Possess");

	APlayerController_Possess_Params params {};
	params.aPawn = aPawn;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GivePawn
//		Flags  -> ()
// Parameters:
//		class APawn*                                       NewPawn                                                    (Parm)
void APlayerController::GivePawn(class APawn* NewPawn)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GivePawn");

	APlayerController_GivePawn_Params params {};
	params.NewPawn = NewPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.AskForPawn
//		Flags  -> ()
void APlayerController::AskForPawn()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AskForPawn");

	APlayerController_AskForPawn_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientGotoState
//		Flags  -> ()
// Parameters:
//		struct FName                                       NewState                                                   (Parm)
//		struct FName                                       NewLabel                                                   (OptionalParm, Parm)
void APlayerController::ClientGotoState(const struct FName& NewState, const struct FName& NewLabel)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientGotoState");

	APlayerController_ClientGotoState_Params params {};
	params.NewState = NewState;
	params.NewLabel = NewLabel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SetTiltActive
//		Flags  -> ()
// Parameters:
//		bool                                               bActive                                                    (Parm)
void APlayerController::SetTiltActive(bool bActive)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetTiltActive");

	APlayerController_SetTiltActive_Params params {};
	params.bActive = bActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.IsMouseAvailable
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::IsMouseAvailable()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsMouseAvailable");

	APlayerController_IsMouseAvailable_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.IsKeyboardAvailable
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::IsKeyboardAvailable()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsKeyboardAvailable");

	APlayerController_IsKeyboardAvailable_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SetUseTiltForwardAndBack
//		Flags  -> ()
// Parameters:
//		bool                                               bActive                                                    (Parm)
void APlayerController::SetUseTiltForwardAndBack(bool bActive)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetUseTiltForwardAndBack");

	APlayerController_SetUseTiltForwardAndBack_Params params {};
	params.bActive = bActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SetOnlyUseControllerTiltInput
//		Flags  -> ()
// Parameters:
//		bool                                               bActive                                                    (Parm)
void APlayerController::SetOnlyUseControllerTiltInput(bool bActive)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetOnlyUseControllerTiltInput");

	APlayerController_SetOnlyUseControllerTiltInput_Params params {};
	params.bActive = bActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SetControllerTiltActive
//		Flags  -> ()
// Parameters:
//		bool                                               bActive                                                    (Parm)
void APlayerController::SetControllerTiltActive(bool bActive)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetControllerTiltActive");

	APlayerController_SetControllerTiltActive_Params params {};
	params.bActive = bActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.IsControllerTiltActive
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::IsControllerTiltActive()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsControllerTiltActive");

	APlayerController_IsControllerTiltActive_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SetRumbleScale
//		Flags  -> ()
// Parameters:
//		float                                              ScaleBy                                                    (Parm)
void APlayerController::SetRumbleScale(float ScaleBy)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetRumbleScale");

	APlayerController_SetRumbleScale_Params params {};
	params.ScaleBy = ScaleBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ReloadProfileSettings
//		Flags  -> ()
void APlayerController::ReloadProfileSettings()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReloadProfileSettings");

	APlayerController_ReloadProfileSettings_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.UnregisterStandardPlayerDataStores
//		Flags  -> ()
// Parameters:
void APlayerController::UnregisterStandardPlayerDataStores()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UnregisterStandardPlayerDataStores");

	APlayerController_UnregisterStandardPlayerDataStores_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.UnregisterPlayerDataStores
//		Flags  -> ()
// Parameters:
void APlayerController::UnregisterPlayerDataStores()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UnregisterPlayerDataStores");

	APlayerController_UnregisterPlayerDataStores_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.RegisterStandardPlayerDataStores
//		Flags  -> ()
// Parameters:
void APlayerController::RegisterStandardPlayerDataStores()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RegisterStandardPlayerDataStores");

	APlayerController_RegisterStandardPlayerDataStores_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.RegisterCustomPlayerDataStores
//		Flags  -> ()
// Parameters:
void APlayerController::RegisterCustomPlayerDataStores()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RegisterCustomPlayerDataStores");

	APlayerController_RegisterCustomPlayerDataStores_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.RegisterPlayerDataStores
//		Flags  -> ()
void APlayerController::RegisterPlayerDataStores()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RegisterPlayerDataStores");

	APlayerController_RegisterPlayerDataStores_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientInitializeDataStores
//		Flags  -> ()
void APlayerController::ClientInitializeDataStores()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientInitializeDataStores");

	APlayerController_ClientInitializeDataStores_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.InitInputSystem
//		Flags  -> ()
// Parameters:
void APlayerController::InitInputSystem()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.InitInputSystem");

	APlayerController_InitInputSystem_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetOnlineSubsystem
//		Flags  -> ()
// Parameters:
//		class UOnlineSubsystem*                            ReturnValue                                                (Parm, OutParm, ReturnParm)
class UOnlineSubsystem* APlayerController::GetOnlineSubsystem()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetOnlineSubsystem");

	APlayerController_GetOnlineSubsystem_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.PostControllerIdChange
//		Flags  -> (NetReliable, Simulated, Exec, Event, Static, Public, Private, NetServer, HasDefaults, K2Call, K2Pure)
// Parameters:
void APlayerController::STATIC_PostControllerIdChange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PostControllerIdChange");

	APlayerController_PostControllerIdChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.PreControllerIdChange
//		Flags  -> ()
void APlayerController::PreControllerIdChange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PreControllerIdChange");

	APlayerController_PreControllerIdChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.CleanOutSavedMoves
//		Flags  -> ()
void APlayerController::CleanOutSavedMoves()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CleanOutSavedMoves");

	APlayerController_CleanOutSavedMoves_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientReset
//		Flags  -> ()
void APlayerController::ClientReset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReset");

	APlayerController_ClientReset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.Reset
//		Flags  -> ()
void APlayerController::Reset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Reset");

	APlayerController_Reset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SpawnDefaultHUD
//		Flags  -> ()
void APlayerController::SpawnDefaultHUD()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SpawnDefaultHUD");

	APlayerController_SpawnDefaultHUD_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.EnableCheats
//		Flags  -> ()
void APlayerController::EnableCheats()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EnableCheats");

	APlayerController_EnableCheats_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.AddCheats
//		Flags  -> ()
// Parameters:
//		bool                                               bForce                                                     (OptionalParm, Parm)
void APlayerController::AddCheats(bool bForce)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddCheats");

	APlayerController_AddCheats_Params params {};
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.KickWarning
//		Flags  -> ()
void APlayerController::KickWarning()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.KickWarning");

	APlayerController_KickWarning_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerGivePawn
//		Flags  -> ()
void APlayerController::ServerGivePawn()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerGivePawn");

	APlayerController_ServerGivePawn_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerShortTimeout
//		Flags  -> ()
void APlayerController::ServerShortTimeout()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerShortTimeout");

	APlayerController_ServerShortTimeout_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ResetTimeMargin
//		Flags  -> ()
void APlayerController::ResetTimeMargin()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetTimeMargin");

	APlayerController_ResetTimeMargin_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.PreRender
//		Flags  -> ()
// Parameters:
//		class UCanvas*                                     Canvas                                                     (Parm)
void APlayerController::PreRender(class UCanvas* Canvas)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PreRender");

	APlayerController_PreRender_Params params {};
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnJoinMigratedGame
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void APlayerController::OnJoinMigratedGame(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnJoinMigratedGame");

	APlayerController_OnJoinMigratedGame_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.PeerDesignatedAsClient
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
void APlayerController::PeerDesignatedAsClient(const struct FName& SessionName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PeerDesignatedAsClient");

	APlayerController_PeerDesignatedAsClient_Params params {};
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnUnregisterPlayerCompleteForJoinMigrate
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void APlayerController::OnUnregisterPlayerCompleteForJoinMigrate(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnUnregisterPlayerCompleteForJoinMigrate");

	APlayerController_OnUnregisterPlayerCompleteForJoinMigrate_Params params {};
	params.SessionName = SessionName;
	params.PlayerID = PlayerID;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.PeerReceivedMigratedSession
//		Flags  -> (Net, Exec, Native, Operator, Public, Private, NetServer, HasDefaults, K2Call, K2Pure)
// Parameters:
//		struct FUniqueNetId                                FromPeerNetId                                              (Parm)
//		struct FName                                       SessionName                                                (Parm)
//		class UClass*                                      SearchClass                                                (Parm)
//		unsigned char*                                     PlatformSpecificInfo                                       (Parm)
void APlayerController::PeerReceivedMigratedSession(const struct FUniqueNetId& FromPeerNetId, const struct FName& SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PeerReceivedMigratedSession");

	APlayerController_PeerReceivedMigratedSession_Params params {};
	params.FromPeerNetId = FromPeerNetId;
	params.SessionName = SessionName;
	params.SearchClass = SearchClass;
	params.PlatformSpecificInfo = PlatformSpecificInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.TellPeerToTravelToSession
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                ToPeerNetId                                                (Parm)
//		struct FName                                       SessionName                                                (Parm)
//		class UClass*                                      SearchClass                                                (Parm)
//		unsigned char*                                     PlatformSpecificInfo                                       (Parm)
//		int                                                PlatformSpecificInfoSize                                   (Parm)
void APlayerController::TellPeerToTravelToSession(const struct FUniqueNetId& ToPeerNetId, const struct FName& SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo, int PlatformSpecificInfoSize)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TellPeerToTravelToSession");

	APlayerController_TellPeerToTravelToSession_Params params {};
	params.ToPeerNetId = ToPeerNetId;
	params.SessionName = SessionName;
	params.SearchClass = SearchClass;
	params.PlatformSpecificInfo = PlatformSpecificInfo;
	params.PlatformSpecificInfoSize = PlatformSpecificInfoSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.TellPeerToTravel
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                ToPeerNetId                                                (Parm)
void APlayerController::TellPeerToTravel(const struct FUniqueNetId& ToPeerNetId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TellPeerToTravel");

	APlayerController_TellPeerToTravel_Params params {};
	params.ToPeerNetId = ToPeerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.PeerTravelAsHost
//		Flags  -> ()
// Parameters:
//		float                                              TravelCountdownTimer                                       (Parm)
//		struct FString                                     URL                                                        (Parm, NeedCtorLink)
void APlayerController::PeerTravelAsHost(float TravelCountdownTimer, const struct FString& URL)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PeerTravelAsHost");

	APlayerController_PeerTravelAsHost_Params params {};
	params.TravelCountdownTimer = TravelCountdownTimer;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetNewPeerHostURL
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString APlayerController::GetNewPeerHostURL()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetNewPeerHostURL");

	APlayerController_GetNewPeerHostURL_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.PeerDesignatedAsHost
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
void APlayerController::PeerDesignatedAsHost(const struct FName& SessionName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PeerDesignatedAsHost");

	APlayerController_PeerDesignatedAsHost_Params params {};
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetCurrentSearchClass
//		Flags  -> ()
// Parameters:
//		class UClass*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class UClass* APlayerController::GetCurrentSearchClass()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetCurrentSearchClass");

	APlayerController_GetCurrentSearchClass_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnHostMigratedOnlineGame
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void APlayerController::OnHostMigratedOnlineGame(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnHostMigratedOnlineGame");

	APlayerController_OnHostMigratedOnlineGame_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnUnregisterPlayerCompleteForHostMigrate
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void APlayerController::OnUnregisterPlayerCompleteForHostMigrate(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnUnregisterPlayerCompleteForHostMigrate");

	APlayerController_OnUnregisterPlayerCompleteForHostMigrate_Params params {};
	params.SessionName = SessionName;
	params.PlayerID = PlayerID;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.RemoveMissingPeersFromSession
//		Flags  -> (Singular, Net, Event, Static, Public, Private, NetServer, HasDefaults, K2Call, K2Pure)
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		struct FScriptDelegate                             UnregisterDelegate                                         (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::STATIC_RemoveMissingPeersFromSession(const struct FName& SessionName, const struct FScriptDelegate& UnregisterDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RemoveMissingPeersFromSession");

	APlayerController_RemoveMissingPeersFromSession_Params params {};
	params.SessionName = SessionName;
	params.UnregisterDelegate = UnregisterDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetPRIFromNetId
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		class APlayerReplicationInfo*                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class APlayerReplicationInfo* APlayerController::GetPRIFromNetId(const struct FUniqueNetId& PlayerID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPRIFromNetId");

	APlayerController_GetPRIFromNetId_Params params {};
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnMissingPeersUnregistered
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void APlayerController::OnMissingPeersUnregistered(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnMissingPeersUnregistered");

	APlayerController_OnMissingPeersUnregistered_Params params {};
	params.SessionName = SessionName;
	params.PlayerID = PlayerID;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetRegisteredPlayersInSession
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		TArray<struct FUniqueNetId>                        OutRegisteredPlayers                                       (Parm, OutParm, NeedCtorLink)
void APlayerController::GetRegisteredPlayersInSession(const struct FName& SessionName, TArray<struct FUniqueNetId>* OutRegisteredPlayers)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetRegisteredPlayersInSession");

	APlayerController_GetRegisteredPlayersInSession_Params params {};
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutRegisteredPlayers != nullptr)
		*OutRegisteredPlayers = params.OutRegisteredPlayers;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.NotifyHostMigrationStarted
//		Flags  -> ()
void APlayerController::NotifyHostMigrationStarted()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyHostMigrationStarted");

	APlayerController_NotifyHostMigrationStarted_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.MigrateNewHost
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::MigrateNewHost()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.MigrateNewHost");

	APlayerController_MigrateNewHost_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.IsBestHostPeer
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PeerNetId                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::IsBestHostPeer(const struct FUniqueNetId& PeerNetId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsBestHostPeer");

	APlayerController_IsBestHostPeer_Params params {};
	params.PeerNetId = PeerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.NotifyPeerDisconnectHost
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PeerNetId                                                  (Parm)
void APlayerController::NotifyPeerDisconnectHost(const struct FUniqueNetId& PeerNetId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyPeerDisconnectHost");

	APlayerController_NotifyPeerDisconnectHost_Params params {};
	params.PeerNetId = PeerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientUpdateBestNextHosts
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId*                               SortedNextHosts                                            (Parm)
//		unsigned char                                      NumEntries                                                 (Parm)
void APlayerController::ClientUpdateBestNextHosts(struct FUniqueNetId* SortedNextHosts, unsigned char NumEntries)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUpdateBestNextHosts");

	APlayerController_ClientUpdateBestNextHosts_Params params {};
	params.SortedNextHosts = SortedNextHosts;
	params.NumEntries = NumEntries;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerRemovePeer
//		Flags  -> (Net, Simulated, Operator, Public, Private, NetServer, HasDefaults, K2Call, K2Pure)
// Parameters:
//		struct FUniqueNetId                                PeerNetId                                                  (Parm)
void APlayerController::ServerRemovePeer(const struct FUniqueNetId& PeerNetId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerRemovePeer");

	APlayerController_ServerRemovePeer_Params params {};
	params.PeerNetId = PeerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerAddPeer
//		Flags  -> (Singular, Net, Native, Operator, Public, Private, NetServer, HasDefaults, K2Call, K2Pure)
// Parameters:
//		struct FUniqueNetId                                PeerNetId                                                  (Parm)
//		TEnumAsByte<Engine_ENATType>                       NatType                                                    (Parm)
void APlayerController::ServerAddPeer(const struct FUniqueNetId& PeerNetId, TEnumAsByte<Engine_ENATType> NatType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerAddPeer");

	APlayerController_ServerAddPeer_Params params {};
	params.PeerNetId = PeerNetId;
	params.NatType = NatType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.RemovePeer
//		Flags  -> (Net, NetReliable, Simulated, Event, Operator, Static, HasOptionalParms, Const, Public, Protected, Delegate, HasDefaults, K2Call, K2Pure)
// Parameters:
//		struct FUniqueNetId                                PeerNetId                                                  (Parm)
void APlayerController::STATIC_RemovePeer(const struct FUniqueNetId& PeerNetId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RemovePeer");

	APlayerController_RemovePeer_Params params {};
	params.PeerNetId = PeerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.AddPeer
//		Flags  -> (NetReliable, Simulated, Native, Event, Operator, Static, HasOptionalParms, Const, Public, Protected, Delegate, HasDefaults, K2Call, K2Pure)
// Parameters:
//		struct FUniqueNetId                                PeerNetId                                                  (Parm)
//		TEnumAsByte<Engine_ENATType>                       NatType                                                    (Parm)
void APlayerController::STATIC_AddPeer(const struct FUniqueNetId& PeerNetId, TEnumAsByte<Engine_ENATType> NatType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddPeer");

	APlayerController_AddPeer_Params params {};
	params.PeerNetId = PeerNetId;
	params.NatType = NatType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.FindConnectedPeerIndex
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PeerNetId                                                  (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int APlayerController::FindConnectedPeerIndex(const struct FUniqueNetId& PeerNetId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FindConnectedPeerIndex");

	APlayerController_FindConnectedPeerIndex_Params params {};
	params.PeerNetId = PeerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ReceivedPlayer
//		Flags  -> ()
void APlayerController::ReceivedPlayer()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReceivedPlayer");

	APlayerController_ReceivedPlayer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.PostBeginPlay
//		Flags  -> ()
void APlayerController::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PostBeginPlay");

	APlayerController_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SpawnCoverReplicator
//		Flags  -> ()
// Parameters:
//		class ACoverReplicator*                            ReturnValue                                                (Parm, OutParm, ReturnParm)
class ACoverReplicator* APlayerController::SpawnCoverReplicator()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SpawnCoverReplicator");

	APlayerController_SpawnCoverReplicator_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.CanUnpauseControllerConnected
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::CanUnpauseControllerConnected()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanUnpauseControllerConnected");

	APlayerController_CanUnpauseControllerConnected_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnControllerChanged
//		Flags  -> ()
// Parameters:
//		int                                                ControllerId                                               (Parm)
//		bool                                               bIsConnected                                               (Parm)
void APlayerController::OnControllerChanged(int ControllerId, bool bIsConnected)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnControllerChanged");

	APlayerController_OnControllerChanged_Params params {};
	params.ControllerId = ControllerId;
	params.bIsConnected = bIsConnected;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.CanUnpauseExternalUI
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerController::CanUnpauseExternalUI()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanUnpauseExternalUI");

	APlayerController_CanUnpauseExternalUI_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.OnExternalUIChanged
//		Flags  -> ()
// Parameters:
//		bool                                               bIsOpening                                                 (Parm)
void APlayerController::OnExternalUIChanged(bool bIsOpening)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnExternalUIChanged");

	APlayerController_OnExternalUIChanged_Params params {};
	params.bIsOpening = bIsOpening;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ForceClearUnpauseDelegates
//		Flags  -> ()
void APlayerController::ForceClearUnpauseDelegates()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ForceClearUnpauseDelegates");

	APlayerController_ForceClearUnpauseDelegates_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.DisableActorHeadTracking
//		Flags  -> ()
// Parameters:
//		class AActor*                                      TargetActor                                                (Parm)
void APlayerController::DisableActorHeadTracking(class AActor* TargetActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DisableActorHeadTracking");

	APlayerController_DisableActorHeadTracking_Params params {};
	params.TargetActor = TargetActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.EnableActorHeadTracking
//		Flags  -> ()
// Parameters:
//		class AActor*                                      TargetActor                                                (Parm)
//		struct FName*                                      TrackControllerName                                        (Parm)
//		class UClass**                                     ActorClassesToLookAt                                       (Parm)
//		bool                                               bLookAtPawns                                               (Parm)
//		float                                              MinLookAtTime                                              (Parm)
//		float                                              MaxLookAtTime                                              (Parm)
//		float                                              MaxInterestTime                                            (Parm)
//		float                                              LookAtActorRadius                                          (Parm)
//		struct FName*                                      TargetBoneNames                                            (Parm)
void APlayerController::EnableActorHeadTracking(class AActor* TargetActor, struct FName* TrackControllerName, class UClass** ActorClassesToLookAt, bool bLookAtPawns, float MinLookAtTime, float MaxLookAtTime, float MaxInterestTime, float LookAtActorRadius, struct FName* TargetBoneNames)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EnableActorHeadTracking");

	APlayerController_EnableActorHeadTracking_Params params {};
	params.TargetActor = TargetActor;
	params.TrackControllerName = TrackControllerName;
	params.ActorClassesToLookAt = ActorClassesToLookAt;
	params.bLookAtPawns = bLookAtPawns;
	params.MinLookAtTime = MinLookAtTime;
	params.MaxLookAtTime = MaxLookAtTime;
	params.MaxInterestTime = MaxInterestTime;
	params.LookAtActorRadius = LookAtActorRadius;
	params.TargetBoneNames = TargetBoneNames;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.FellOutOfWorld
//		Flags  -> ()
// Parameters:
//		class UClass*                                      dmgType                                                    (Parm)
void APlayerController::FellOutOfWorld(class UClass* dmgType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FellOutOfWorld");

	APlayerController_FellOutOfWorld_Params params {};
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.CleanUpAudioComponents
//		Flags  -> ()
void APlayerController::CleanUpAudioComponents()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CleanUpAudioComponents");

	APlayerController_CleanUpAudioComponents_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.FindStairRotation
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int APlayerController::FindStairRotation(float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FindStairRotation");

	APlayerController_FindStairRotation_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ServerProcessConvolve
//		Flags  -> ()
// Parameters:
//		struct FString                                     C                                                          (Parm, NeedCtorLink)
//		int                                                H                                                          (Parm)
void APlayerController::ServerProcessConvolve(const struct FString& C, int H)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerProcessConvolve");

	APlayerController_ServerProcessConvolve_Params params {};
	params.C = C;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientConvolve
//		Flags  -> ()
// Parameters:
//		struct FString                                     C                                                          (Parm, NeedCtorLink)
//		int                                                H                                                          (Parm)
void APlayerController::ClientConvolve(const struct FString& C, int H)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientConvolve");

	APlayerController_ClientConvolve_Params params {};
	params.C = C;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SetAudioGroupVolume
//		Flags  -> ()
// Parameters:
//		struct FName                                       GroupName                                                  (Parm)
//		float                                              Volume                                                     (Parm)
void APlayerController::SetAudioGroupVolume(const struct FName& GroupName, float Volume)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetAudioGroupVolume");

	APlayerController_SetAudioGroupVolume_Params params {};
	params.GroupName = GroupName;
	params.Volume = Volume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SetAllowMatureLanguage
//		Flags  -> ()
// Parameters:
//		bool                                               bAllowMatureLanguge                                        (Parm)
void APlayerController::SetAllowMatureLanguage(bool bAllowMatureLanguge)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetAllowMatureLanguage");

	APlayerController_SetAllowMatureLanguage_Params params {};
	params.bAllowMatureLanguge = bAllowMatureLanguge;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.PasteFromClipboard
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString APlayerController::PasteFromClipboard()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PasteFromClipboard");

	APlayerController_PasteFromClipboard_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.CopyToClipboard
//		Flags  -> ()
// Parameters:
//		struct FString                                     Text                                                       (Parm, NeedCtorLink)
void APlayerController::CopyToClipboard(const struct FString& Text)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CopyToClipboard");

	APlayerController_CopyToClipboard_Params params {};
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetDefaultURL
//		Flags  -> ()
// Parameters:
//		struct FString                                     Option                                                     (Parm, NeedCtorLink)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString APlayerController::GetDefaultURL(const struct FString& Option)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetDefaultURL");

	APlayerController_GetDefaultURL_Params params {};
	params.Option = Option;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.UpdateURL
//		Flags  -> ()
// Parameters:
//		struct FString                                     NewOption                                                  (Parm, NeedCtorLink)
//		struct FString                                     NewValue                                                   (Parm, NeedCtorLink)
//		bool                                               bSave1Default                                              (Parm)
void APlayerController::UpdateURL(const struct FString& NewOption, const struct FString& NewValue, bool bSave1Default)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UpdateURL");

	APlayerController_UpdateURL_Params params {};
	params.NewOption = NewOption;
	params.NewValue = NewValue;
	params.bSave1Default = bSave1Default;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ClientTravel
//		Flags  -> ()
// Parameters:
//		struct FString                                     URL                                                        (Parm, NeedCtorLink)
//		TEnumAsByte<Engine_ETravelType>                    TravelType                                                 (Parm)
//		bool                                               bSeamless                                                  (OptionalParm, Parm)
//		struct FGuid                                       MapPackageGuid                                             (OptionalParm, Parm, AlwaysInit)
void APlayerController::ClientTravel(const struct FString& URL, TEnumAsByte<Engine_ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTravel");

	APlayerController_ClientTravel_Params params {};
	params.URL = URL;
	params.TravelType = TravelType;
	params.bSeamless = bSeamless;
	params.MapPackageGuid = MapPackageGuid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.ConsoleCommand
//		Flags  -> ()
// Parameters:
//		struct FString                                     Command                                                    (Parm, NeedCtorLink)
//		bool                                               bWriteToLog                                                (OptionalParm, Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString APlayerController::ConsoleCommand(const struct FString& Command, bool bWriteToLog)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ConsoleCommand");

	APlayerController_ConsoleCommand_Params params {};
	params.Command = Command;
	params.bWriteToLog = bWriteToLog;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetServerNetworkAddress
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString APlayerController::GetServerNetworkAddress()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetServerNetworkAddress");

	APlayerController_GetServerNetworkAddress_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.GetPlayerNetworkAddress
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString APlayerController::GetPlayerNetworkAddress()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPlayerNetworkAddress");

	APlayerController_GetPlayerNetworkAddress_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerController.SetNetSpeed
//		Flags  -> ()
// Parameters:
//		int                                                NewSpeed                                                   (Parm)
void APlayerController::SetNetSpeed(int NewSpeed)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetNetSpeed");

	APlayerController_SetNetSpeed_Params params {};
	params.NewSpeed = NewSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlatformInterfaceBase.ClearDelegate
//		Flags  -> ()
// Parameters:
//		int                                                DelegateType                                               (Parm)
//		struct FScriptDelegate                             InDelegate                                                 (Parm, NeedCtorLink)
void UPlatformInterfaceBase::ClearDelegate(int DelegateType, const struct FScriptDelegate& InDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.ClearDelegate");

	UPlatformInterfaceBase_ClearDelegate_Params params {};
	params.DelegateType = DelegateType;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlatformInterfaceBase.AddDelegate
//		Flags  -> ()
// Parameters:
//		int                                                DelegateType                                               (Parm)
//		struct FScriptDelegate                             InDelegate                                                 (Parm, NeedCtorLink)
void UPlatformInterfaceBase::AddDelegate(int DelegateType, const struct FScriptDelegate& InDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.AddDelegate");

	UPlatformInterfaceBase_AddDelegate_Params params {};
	params.DelegateType = DelegateType;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlatformInterfaceBase.GetGoogleIntegration
//		Flags  -> ()
// Parameters:
//		class UGoogleIntegration*                          ReturnValue                                                (Parm, OutParm, ReturnParm)
class UGoogleIntegration* UPlatformInterfaceBase::GetGoogleIntegration()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.GetGoogleIntegration");

	UPlatformInterfaceBase_GetGoogleIntegration_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlatformInterfaceBase.GetInAppMessageInterface
//		Flags  -> ()
// Parameters:
//		class UInAppMessageBase*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class UInAppMessageBase* UPlatformInterfaceBase::GetInAppMessageInterface()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.GetInAppMessageInterface");

	UPlatformInterfaceBase_GetInAppMessageInterface_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlatformInterfaceBase.GetAppNotificationsInterface
//		Flags  -> ()
// Parameters:
//		class UAppNotificationsBase*                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class UAppNotificationsBase* UPlatformInterfaceBase::GetAppNotificationsInterface()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.GetAppNotificationsInterface");

	UPlatformInterfaceBase_GetAppNotificationsInterface_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlatformInterfaceBase.GetTwitterIntegration
//		Flags  -> ()
// Parameters:
//		class UTwitterIntegrationBase*                     ReturnValue                                                (Parm, OutParm, ReturnParm)
class UTwitterIntegrationBase* UPlatformInterfaceBase::GetTwitterIntegration()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.GetTwitterIntegration");

	UPlatformInterfaceBase_GetTwitterIntegration_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlatformInterfaceBase.GetAnalyticEventsInterface
//		Flags  -> ()
// Parameters:
//		class UAnalyticEventsBase*                         ReturnValue                                                (Parm, OutParm, ReturnParm)
class UAnalyticEventsBase* UPlatformInterfaceBase::GetAnalyticEventsInterface()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.GetAnalyticEventsInterface");

	UPlatformInterfaceBase_GetAnalyticEventsInterface_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlatformInterfaceBase.GetMicroTransactionInterface
//		Flags  -> ()
// Parameters:
//		class UMicroTransactionBase*                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class UMicroTransactionBase* UPlatformInterfaceBase::GetMicroTransactionInterface()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.GetMicroTransactionInterface");

	UPlatformInterfaceBase_GetMicroTransactionInterface_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlatformInterfaceBase.GetInGameAdManager
//		Flags  -> ()
// Parameters:
//		class UInGameAdManager*                            ReturnValue                                                (Parm, OutParm, ReturnParm)
class UInGameAdManager* UPlatformInterfaceBase::GetInGameAdManager()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.GetInGameAdManager");

	UPlatformInterfaceBase_GetInGameAdManager_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlatformInterfaceBase.GetFacebookIntegration
//		Flags  -> ()
// Parameters:
//		class UFacebookIntegration*                        ReturnValue                                                (Parm, OutParm, ReturnParm)
class UFacebookIntegration* UPlatformInterfaceBase::GetFacebookIntegration()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.GetFacebookIntegration");

	UPlatformInterfaceBase_GetFacebookIntegration_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlatformInterfaceBase.GetLocalStorageInterface
//		Flags  -> ()
// Parameters:
//		class UCloudStorageBase*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class UCloudStorageBase* UPlatformInterfaceBase::GetLocalStorageInterface()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.GetLocalStorageInterface");

	UPlatformInterfaceBase_GetLocalStorageInterface_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlatformInterfaceBase.GetCloudStorageInterface
//		Flags  -> ()
// Parameters:
//		class UCloudStorageBase*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class UCloudStorageBase* UPlatformInterfaceBase::GetCloudStorageInterface()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.GetCloudStorageInterface");

	UPlatformInterfaceBase_GetCloudStorageInterface_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlatformInterfaceBase.CallDelegates
//		Flags  -> ()
// Parameters:
//		int                                                DelegateType                                               (Parm)
//		struct FPlatformInterfaceDelegateResult            DelegateResult                                             (Parm, OutParm, NeedCtorLink)
void UPlatformInterfaceBase::CallDelegates(int DelegateType, struct FPlatformInterfaceDelegateResult* DelegateResult)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.CallDelegates");

	UPlatformInterfaceBase_CallDelegates_Params params {};
	params.DelegateType = DelegateType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DelegateResult != nullptr)
		*DelegateResult = params.DelegateResult;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlatformInterfaceBase.PlatformInterfaceDelegate
//		Flags  -> ()
// Parameters:
//		struct FPlatformInterfaceDelegateResult            Result                                                     (Const, Parm, OutParm, NeedCtorLink)
void UPlatformInterfaceBase::PlatformInterfaceDelegate(struct FPlatformInterfaceDelegateResult* Result)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.PlatformInterfaceDelegate");

	UPlatformInterfaceBase_PlatformInterfaceDelegate_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AppNotificationsBase.DebugLogNotification
//		Flags  -> ()
// Parameters:
//		struct FNotificationInfo                           Notification                                               (Const, Parm, OutParm, NeedCtorLink)
void UAppNotificationsBase::DebugLogNotification(struct FNotificationInfo* Notification)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AppNotificationsBase.DebugLogNotification");

	UAppNotificationsBase_DebugLogNotification_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Notification != nullptr)
		*Notification = params.Notification;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AppNotificationsBase.OnApplicationWillEnterForeground
//		Flags  -> ()
void UAppNotificationsBase::OnApplicationWillEnterForeground()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AppNotificationsBase.OnApplicationWillEnterForeground");

	UAppNotificationsBase_OnApplicationWillEnterForeground_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AppNotificationsBase.AllowsRemoteNotificationsSounds
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UAppNotificationsBase::AllowsRemoteNotificationsSounds()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AppNotificationsBase.AllowsRemoteNotificationsSounds");

	UAppNotificationsBase_AllowsRemoteNotificationsSounds_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AppNotificationsBase.AllowsRemoteNotificationsBadegeIcons
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UAppNotificationsBase::AllowsRemoteNotificationsBadegeIcons()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AppNotificationsBase.AllowsRemoteNotificationsBadegeIcons");

	UAppNotificationsBase_AllowsRemoteNotificationsBadegeIcons_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AppNotificationsBase.AllowsRemoteNotificationsAlerts
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UAppNotificationsBase::AllowsRemoteNotificationsAlerts()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AppNotificationsBase.AllowsRemoteNotificationsAlerts");

	UAppNotificationsBase_AllowsRemoteNotificationsAlerts_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AppNotificationsBase.AreRemoteNotificationsEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UAppNotificationsBase::AreRemoteNotificationsEnabled()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AppNotificationsBase.AreRemoteNotificationsEnabled");

	UAppNotificationsBase_AreRemoteNotificationsEnabled_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AppNotificationsBase.OnRegisterForRemoteNotificationsComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bDidAccept                                                 (Parm)
//		struct FString                                     PushNotificationToken                                      (Parm, NeedCtorLink)
void UAppNotificationsBase::OnRegisterForRemoteNotificationsComplete(bool bDidAccept, const struct FString& PushNotificationToken)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AppNotificationsBase.OnRegisterForRemoteNotificationsComplete");

	UAppNotificationsBase_OnRegisterForRemoteNotificationsComplete_Params params {};
	params.bDidAccept = bDidAccept;
	params.PushNotificationToken = PushNotificationToken;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AppNotificationsBase.RegisterForRemoteNotifications
//		Flags  -> ()
// Parameters:
//		bool                                               bWantsAlerts                                               (OptionalParm, Parm)
//		bool                                               bWantsBadge                                                (OptionalParm, Parm)
//		bool                                               bWantsSound                                                (OptionalParm, Parm)
void UAppNotificationsBase::RegisterForRemoteNotifications(bool bWantsAlerts, bool bWantsBadge, bool bWantsSound)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AppNotificationsBase.RegisterForRemoteNotifications");

	UAppNotificationsBase_RegisterForRemoteNotifications_Params params {};
	params.bWantsAlerts = bWantsAlerts;
	params.bWantsBadge = bWantsBadge;
	params.bWantsSound = bWantsSound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AppNotificationsBase.OnReceivedRemoteNotification
//		Flags  -> ()
// Parameters:
//		struct FNotificationInfo                           Notification                                               (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               bWasAppActive                                              (Parm)
void UAppNotificationsBase::OnReceivedRemoteNotification(struct FNotificationInfo* Notification, bool bWasAppActive)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AppNotificationsBase.OnReceivedRemoteNotification");

	UAppNotificationsBase_OnReceivedRemoteNotification_Params params {};
	params.bWasAppActive = bWasAppActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Notification != nullptr)
		*Notification = params.Notification;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AppNotificationsBase.OnReceivedLocalNotification
//		Flags  -> ()
// Parameters:
//		struct FNotificationInfo                           Notification                                               (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               bWasAppActive                                              (Parm)
void UAppNotificationsBase::OnReceivedLocalNotification(struct FNotificationInfo* Notification, bool bWasAppActive)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AppNotificationsBase.OnReceivedLocalNotification");

	UAppNotificationsBase_OnReceivedLocalNotification_Params params {};
	params.bWasAppActive = bWasAppActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Notification != nullptr)
		*Notification = params.Notification;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AppNotificationsBase.CancelScheduledLocalNotification
//		Flags  -> ()
// Parameters:
//		struct FNotificationMessageInfo                    KeyValue                                                   (Const, Parm, OutParm, NeedCtorLink)
void UAppNotificationsBase::CancelScheduledLocalNotification(struct FNotificationMessageInfo* KeyValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AppNotificationsBase.CancelScheduledLocalNotification");

	UAppNotificationsBase_CancelScheduledLocalNotification_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (KeyValue != nullptr)
		*KeyValue = params.KeyValue;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AppNotificationsBase.CancelAllScheduledLocalNotifications
//		Flags  -> ()
void UAppNotificationsBase::CancelAllScheduledLocalNotifications()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AppNotificationsBase.CancelAllScheduledLocalNotifications");

	UAppNotificationsBase_CancelAllScheduledLocalNotifications_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AppNotificationsBase.ScheduleLocalNotification
//		Flags  -> ()
// Parameters:
//		struct FNotificationInfo                           Notification                                               (Const, Parm, OutParm, NeedCtorLink)
//		int                                                StartOffsetSeconds                                         (Parm)
void UAppNotificationsBase::ScheduleLocalNotification(struct FNotificationInfo* Notification, int StartOffsetSeconds)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AppNotificationsBase.ScheduleLocalNotification");

	UAppNotificationsBase_ScheduleLocalNotification_Params params {};
	params.StartOffsetSeconds = StartOffsetSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Notification != nullptr)
		*Notification = params.Notification;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AppNotificationsBase.WasLaunchedViaNotification
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UAppNotificationsBase::WasLaunchedViaNotification()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AppNotificationsBase.WasLaunchedViaNotification");

	UAppNotificationsBase_WasLaunchedViaNotification_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AppNotificationsBase.Init
//		Flags  -> ()
void UAppNotificationsBase::Init()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AppNotificationsBase.Init");

	UAppNotificationsBase_Init_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.OnGoogleSubscriptionAddComplete
//		Flags  -> ()
// Parameters:
//		struct FPlatformInterfaceDelegateResult            Result                                                     (Const, Parm, OutParm, NeedCtorLink)
void UCheatManager::OnGoogleSubscriptionAddComplete(struct FPlatformInterfaceDelegateResult* Result)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnGoogleSubscriptionAddComplete");

	UCheatManager_OnGoogleSubscriptionAddComplete_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.SubscribeToChairChannel
//		Flags  -> ()
void UCheatManager::SubscribeToChairChannel()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SubscribeToChairChannel");

	UCheatManager_SubscribeToChairChannel_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.OnGoogleSubscriptionsComplete
//		Flags  -> ()
// Parameters:
//		struct FPlatformInterfaceDelegateResult            Result                                                     (Const, Parm, OutParm, NeedCtorLink)
void UCheatManager::OnGoogleSubscriptionsComplete(struct FPlatformInterfaceDelegateResult* Result)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnGoogleSubscriptionsComplete");

	UCheatManager_OnGoogleSubscriptionsComplete_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.OnGoogleFriendsComplete
//		Flags  -> ()
// Parameters:
//		struct FPlatformInterfaceDelegateResult            Result                                                     (Const, Parm, OutParm, NeedCtorLink)
void UCheatManager::OnGoogleFriendsComplete(struct FPlatformInterfaceDelegateResult* Result)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnGoogleFriendsComplete");

	UCheatManager_OnGoogleFriendsComplete_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.GoogleRevoke
//		Flags  -> ()
void UCheatManager::GoogleRevoke()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.GoogleRevoke");

	UCheatManager_GoogleRevoke_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.OnGoogleAuthComplete
//		Flags  -> ()
// Parameters:
//		struct FPlatformInterfaceDelegateResult            Result                                                     (Const, Parm, OutParm, NeedCtorLink)
void UCheatManager::OnGoogleAuthComplete(struct FPlatformInterfaceDelegateResult* Result)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnGoogleAuthComplete");

	UCheatManager_OnGoogleAuthComplete_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.GoogleAuth
//		Flags  -> ()
void UCheatManager::GoogleAuth()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.GoogleAuth");

	UCheatManager_GoogleAuth_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.AnalyticsEndSession
//		Flags  -> ()
void UCheatManager::AnalyticsEndSession()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.AnalyticsEndSession");

	UCheatManager_AnalyticsEndSession_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.AnalyticsStartSession
//		Flags  -> ()
void UCheatManager::AnalyticsStartSession()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.AnalyticsStartSession");

	UCheatManager_AnalyticsStartSession_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.GetAnalyticsUserId
//		Flags  -> ()
void UCheatManager::GetAnalyticsUserId()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.GetAnalyticsUserId");

	UCheatManager_GetAnalyticsUserId_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.SetAnalyticsUserId
//		Flags  -> ()
// Parameters:
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
void UCheatManager::SetAnalyticsUserId(const struct FString& UserId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetAnalyticsUserId");

	UCheatManager_SetAnalyticsUserId_Params params {};
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.SendAnalyticsCachedEvents
//		Flags  -> ()
void UCheatManager::SendAnalyticsCachedEvents()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SendAnalyticsCachedEvents");

	UCheatManager_SendAnalyticsCachedEvents_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.SendAnalyticsCurrencyGivenEvent
//		Flags  -> ()
// Parameters:
//		struct FString                                     GameCurrencyType                                           (Parm, NeedCtorLink)
//		int                                                GameCurrencyAmount                                         (Parm)
void UCheatManager::SendAnalyticsCurrencyGivenEvent(const struct FString& GameCurrencyType, int GameCurrencyAmount)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SendAnalyticsCurrencyGivenEvent");

	UCheatManager_SendAnalyticsCurrencyGivenEvent_Params params {};
	params.GameCurrencyType = GameCurrencyType;
	params.GameCurrencyAmount = GameCurrencyAmount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.SendAnalyticsCurrencyPurchaseEvent
//		Flags  -> ()
// Parameters:
//		struct FString                                     GameCurrencyType                                           (Parm, NeedCtorLink)
//		int                                                GameCurrencyAmount                                         (Parm)
//		struct FString                                     RealCurrencyType                                           (Parm, NeedCtorLink)
//		float                                              RealMoneyCost                                              (Parm)
//		struct FString                                     PaymentProvider                                            (Parm, NeedCtorLink)
void UCheatManager::SendAnalyticsCurrencyPurchaseEvent(const struct FString& GameCurrencyType, int GameCurrencyAmount, const struct FString& RealCurrencyType, float RealMoneyCost, const struct FString& PaymentProvider)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SendAnalyticsCurrencyPurchaseEvent");

	UCheatManager_SendAnalyticsCurrencyPurchaseEvent_Params params {};
	params.GameCurrencyType = GameCurrencyType;
	params.GameCurrencyAmount = GameCurrencyAmount;
	params.RealCurrencyType = RealCurrencyType;
	params.RealMoneyCost = RealMoneyCost;
	params.PaymentProvider = PaymentProvider;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.SendAnalyticsItemPurchaseEvent
//		Flags  -> ()
// Parameters:
//		struct FString                                     ItemId                                                     (Parm, NeedCtorLink)
//		struct FString                                     Currency                                                   (Parm, NeedCtorLink)
//		int                                                PerItemCost                                                (Parm)
//		int                                                ItemQuantity                                               (Parm)
void UCheatManager::SendAnalyticsItemPurchaseEvent(const struct FString& ItemId, const struct FString& Currency, int PerItemCost, int ItemQuantity)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SendAnalyticsItemPurchaseEvent");

	UCheatManager_SendAnalyticsItemPurchaseEvent_Params params {};
	params.ItemId = ItemId;
	params.Currency = Currency;
	params.PerItemCost = PerItemCost;
	params.ItemQuantity = ItemQuantity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.SendAnalyticsUserAttributeEvent
//		Flags  -> ()
// Parameters:
//		struct FString                                     AttributeName                                              (Parm, NeedCtorLink)
//		struct FString                                     AttributeValue                                             (Parm, NeedCtorLink)
void UCheatManager::SendAnalyticsUserAttributeEvent(const struct FString& AttributeName, const struct FString& AttributeValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SendAnalyticsUserAttributeEvent");

	UCheatManager_SendAnalyticsUserAttributeEvent_Params params {};
	params.AttributeName = AttributeName;
	params.AttributeValue = AttributeValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.SendAnalyticsEvent
//		Flags  -> ()
// Parameters:
//		struct FString                                     EventName                                                  (Parm, NeedCtorLink)
//		struct FString                                     AttributeName                                              (OptionalParm, Parm, NeedCtorLink)
//		struct FString                                     AttributeValue                                             (OptionalParm, Parm, NeedCtorLink)
void UCheatManager::SendAnalyticsEvent(const struct FString& EventName, const struct FString& AttributeName, const struct FString& AttributeValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SendAnalyticsEvent");

	UCheatManager_SendAnalyticsEvent_Params params {};
	params.EventName = EventName;
	params.AttributeName = AttributeName;
	params.AttributeValue = AttributeValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.OnRequestComplete
//		Flags  -> ()
// Parameters:
//		class UHttpRequestInterface*                       OriginalRequest                                            (Parm)
//		class UHttpResponseInterface*                      Response                                                   (Parm)
//		bool                                               bDidSucceed                                                (Parm)
void UCheatManager::OnRequestComplete(class UHttpRequestInterface* OriginalRequest, class UHttpResponseInterface* Response, bool bDidSucceed)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnRequestComplete");

	UCheatManager_OnRequestComplete_Params params {};
	params.OriginalRequest = OriginalRequest;
	params.Response = Response;
	params.bDidSucceed = bDidSucceed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.TestHttp
//		Flags  -> ()
// Parameters:
//		struct FString                                     Verb                                                       (Parm, NeedCtorLink)
//		struct FString                                     Payload                                                    (Parm, NeedCtorLink)
//		struct FString                                     URL                                                        (Parm, NeedCtorLink)
//		bool                                               bSendParallelRequest                                       (OptionalParm, Parm)
void UCheatManager::TestHttp(const struct FString& Verb, const struct FString& Payload, const struct FString& URL, bool bSendParallelRequest)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.TestHttp");

	UCheatManager_TestHttp_Params params {};
	params.Verb = Verb;
	params.Payload = Payload;
	params.URL = URL;
	params.bSendParallelRequest = bSendParallelRequest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.OnDeleteUserFileComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UCheatManager::OnDeleteUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnDeleteUserFileComplete");

	UCheatManager_OnDeleteUserFileComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.DebugDeleteUserFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UCheatManager::DebugDeleteUserFile(const struct FString& UserId, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugDeleteUserFile");

	UCheatManager_DebugDeleteUserFile_Params params {};
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.OnReadUserFileComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UCheatManager::OnReadUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnReadUserFileComplete");

	UCheatManager_OnReadUserFileComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.DebugReadUserFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UCheatManager::DebugReadUserFile(const struct FString& UserId, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugReadUserFile");

	UCheatManager_DebugReadUserFile_Params params {};
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.OnWriteUserFileComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UCheatManager::OnWriteUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnWriteUserFileComplete");

	UCheatManager_OnWriteUserFileComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.DebugWriteUserFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UCheatManager::DebugWriteUserFile(const struct FString& UserId, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugWriteUserFile");

	UCheatManager_DebugWriteUserFile_Params params {};
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.OnEnumerateUserFilesComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
void UCheatManager::OnEnumerateUserFilesComplete(bool bWasSuccessful, const struct FString& UserId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnEnumerateUserFilesComplete");

	UCheatManager_OnEnumerateUserFilesComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.DebugQueryUserFiles
//		Flags  -> ()
// Parameters:
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
void UCheatManager::DebugQueryUserFiles(const struct FString& UserId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugQueryUserFiles");

	UCheatManager_DebugQueryUserFiles_Params params {};
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.OnReceivedLocalNotificationDebug
//		Flags  -> ()
// Parameters:
//		struct FNotificationInfo                           Notification                                               (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               bWasAppActive                                              (Parm)
void UCheatManager::OnReceivedLocalNotificationDebug(struct FNotificationInfo* Notification, bool bWasAppActive)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnReceivedLocalNotificationDebug");

	UCheatManager_OnReceivedLocalNotificationDebug_Params params {};
	params.bWasAppActive = bWasAppActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Notification != nullptr)
		*Notification = params.Notification;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.DebugNotification
//		Flags  -> (Singular, Net, NetReliable, Simulated, Exec, Native, Private, Protected, Delegate, HasDefaults, K2Call, K2Pure)
// Parameters:
//		struct FString                                     MessageBody                                                (Parm, NeedCtorLink)
//		int                                                SecondsFromNow                                             (Parm)
void UCheatManager::DebugNotification(const struct FString& MessageBody, int SecondsFromNow)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugNotification");

	UCheatManager_DebugNotification_Params params {};
	params.MessageBody = MessageBody;
	params.SecondsFromNow = SecondsFromNow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.DrawLocationXYZ
//		Flags  -> (Simulated, Exec, Event, Private, Protected, Delegate, HasDefaults, K2Call, K2Pure)
// Parameters:
//		float                                              X                                                          (Parm)
//		float                                              Y                                                          (Parm)
//		float                                              Z                                                          (Parm)
void UCheatManager::DrawLocationXYZ(float X, float Y, float Z)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DrawLocationXYZ");

	UCheatManager_DrawLocationXYZ_Params params {};
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.DrawLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Loc                                                        (Parm)
void UCheatManager::DrawLocation(const struct FVector& Loc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DrawLocation");

	UCheatManager_DrawLocation_Params params {};
	params.Loc = Loc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.DumpCoverStats
//		Flags  -> ()
void UCheatManager::DumpCoverStats()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DumpCoverStats");

	UCheatManager_DumpCoverStats_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.DebugEmsDownload
//		Flags  -> ()
void UCheatManager::DebugEmsDownload()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugEmsDownload");

	UCheatManager_DebugEmsDownload_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.DebugDeleteTitleFiles
//		Flags  -> ()
void UCheatManager::DebugDeleteTitleFiles()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugDeleteTitleFiles");

	UCheatManager_DebugDeleteTitleFiles_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.OnSaveComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UCheatManager::OnSaveComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnSaveComplete");

	UCheatManager_OnSaveComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.DebugSaveTitleFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UCheatManager::DebugSaveTitleFile(const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugSaveTitleFile");

	UCheatManager_DebugSaveTitleFile_Params params {};
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.OnLoadComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UCheatManager::OnLoadComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnLoadComplete");

	UCheatManager_OnLoadComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.OnDownloadComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UCheatManager::OnDownloadComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnDownloadComplete");

	UCheatManager_OnDownloadComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.DebugDownloadTitleFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		bool                                               bFromCache                                                 (OptionalParm, Parm)
void UCheatManager::DebugDownloadTitleFile(const struct FString& Filename, bool bFromCache)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugDownloadTitleFile");

	UCheatManager_DebugDownloadTitleFile_Params params {};
	params.Filename = Filename;
	params.bFromCache = bFromCache;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.DebugIniLocPatcher
//		Flags  -> ()
void UCheatManager::DebugIniLocPatcher()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugIniLocPatcher");

	UCheatManager_DebugIniLocPatcher_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.ToggleAILogging
//		Flags  -> ()
void UCheatManager::ToggleAILogging()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ToggleAILogging");

	UCheatManager_ToggleAILogging_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.VerifyNavMeshCoverRefs
//		Flags  -> ()
void UCheatManager::VerifyNavMeshCoverRefs()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.VerifyNavMeshCoverRefs");

	UCheatManager_VerifyNavMeshCoverRefs_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.PrintNavMeshObstacles
//		Flags  -> ()
void UCheatManager::PrintNavMeshObstacles()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.PrintNavMeshObstacles");

	UCheatManager_PrintNavMeshObstacles_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.PrintAllPathObjectEdges
//		Flags  -> ()
void UCheatManager::PrintAllPathObjectEdges()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.PrintAllPathObjectEdges");

	UCheatManager_PrintAllPathObjectEdges_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.NavMeshVerification
//		Flags  -> ()
// Parameters:
//		float                                              interval                                                   (OptionalParm, Parm)
void UCheatManager::NavMeshVerification(float interval)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.NavMeshVerification");

	UCheatManager_NavMeshVerification_Params params {};
	params.interval = interval;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.DrawUnsupportingEdges
//		Flags  -> ()
// Parameters:
//		struct FString                                     PawnClassName                                              (Parm, CoerceParm, NeedCtorLink)
void UCheatManager::DrawUnsupportingEdges(const struct FString& PawnClassName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DrawUnsupportingEdges");

	UCheatManager_DrawUnsupportingEdges_Params params {};
	params.PawnClassName = PawnClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.VerifyNavMeshObjects
//		Flags  -> ()
void UCheatManager::VerifyNavMeshObjects()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.VerifyNavMeshObjects");

	UCheatManager_VerifyNavMeshObjects_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.LogParticleActivateSystemCalls
//		Flags  -> ()
// Parameters:
//		bool                                               bShouldLog                                                 (Parm)
void UCheatManager::LogParticleActivateSystemCalls(bool bShouldLog)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.LogParticleActivateSystemCalls");

	UCheatManager_LogParticleActivateSystemCalls_Params params {};
	params.bShouldLog = bShouldLog;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.LogPlaySoundCalls
//		Flags  -> ()
// Parameters:
//		bool                                               bShouldLog                                                 (Parm)
void UCheatManager::LogPlaySoundCalls(bool bShouldLog)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.LogPlaySoundCalls");

	UCheatManager_LogPlaySoundCalls_Params params {};
	params.bShouldLog = bShouldLog;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.InitCheatManager
//		Flags  -> ()
void UCheatManager::InitCheatManager()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.InitCheatManager");

	UCheatManager_InitCheatManager_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.VerbosePathDebug
//		Flags  -> (NetReliable, Simulated, Native, Event, Operator, Static, HasOptionalParms, Const, Public, Private, HasOutParms, K2Call, K2Pure)
// Parameters:
void UCheatManager::STATIC_VerbosePathDebug()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.VerbosePathDebug");

	UCheatManager_VerbosePathDebug_Params params {};

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.TestPylonConnectivity
//		Flags  -> ()
void UCheatManager::TestPylonConnectivity()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.TestPylonConnectivity");

	UCheatManager_TestPylonConnectivity_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.TestNavMeshPath
//		Flags  -> (Net, Event, Static, HasOptionalParms, Const, Public, Private, HasOutParms, K2Call, K2Pure)
// Parameters:
//		bool                                               bDrawPath                                                  (OptionalParm, Parm)
void UCheatManager::STATIC_TestNavMeshPath(bool bDrawPath)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.TestNavMeshPath");

	UCheatManager_TestNavMeshPath_Params params {};
	params.bDrawPath = bDrawPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.SetOnlineDebugLevel
//		Flags  -> ()
// Parameters:
//		int                                                DebugLevel                                                 (Parm)
void UCheatManager::SetOnlineDebugLevel(int DebugLevel)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetOnlineDebugLevel");

	UCheatManager_SetOnlineDebugLevel_Params params {};
	params.DebugLevel = DebugLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.TestLevel
//		Flags  -> ()
// Parameters:
void UCheatManager::TestLevel()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.TestLevel");

	UCheatManager_TestLevel_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.StreamLevelOut
//		Flags  -> ()
// Parameters:
//		struct FName                                       PackageName                                                (Parm)
void UCheatManager::StreamLevelOut(const struct FName& PackageName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.StreamLevelOut");

	UCheatManager_StreamLevelOut_Params params {};
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.OnlyLoadLevel
//		Flags  -> ()
// Parameters:
//		struct FName                                       PackageName                                                (Parm)
void UCheatManager::OnlyLoadLevel(const struct FName& PackageName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnlyLoadLevel");

	UCheatManager_OnlyLoadLevel_Params params {};
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.StreamLevelIn
//		Flags  -> ()
// Parameters:
//		struct FName                                       PackageName                                                (Parm)
void UCheatManager::StreamLevelIn(const struct FName& PackageName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.StreamLevelIn");

	UCheatManager_StreamLevelIn_Params params {};
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.SetLevelStreamingStatus
//		Flags  -> ()
// Parameters:
//		struct FName                                       PackageName                                                (Parm)
//		bool                                               bShouldBeLoaded                                            (Parm)
//		bool                                               bShouldBeVisible                                           (Parm)
void UCheatManager::SetLevelStreamingStatus(const struct FName& PackageName, bool bShouldBeLoaded, bool bShouldBeVisible)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetLevelStreamingStatus");

	UCheatManager_SetLevelStreamingStatus_Params params {};
	params.PackageName = PackageName;
	params.bShouldBeLoaded = bShouldBeLoaded;
	params.bShouldBeVisible = bShouldBeVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.AllWeapons
//		Flags  -> ()
void UCheatManager::AllWeapons()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.AllWeapons");

	UCheatManager_AllWeapons_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.Loaded
//		Flags  -> ()
void UCheatManager::Loaded()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Loaded");

	UCheatManager_Loaded_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.ViewClass
//		Flags  -> ()
// Parameters:
//		class UClass*                                      aClass                                                     (Parm)
void UCheatManager::ViewClass(class UClass* aClass)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewClass");

	UCheatManager_ViewClass_Params params {};
	params.aClass = aClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.ViewBot
//		Flags  -> ()
// Parameters:
void UCheatManager::ViewBot()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewBot");

	UCheatManager_ViewBot_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.ViewActor
//		Flags  -> ()
// Parameters:
//		struct FName                                       actorName                                                  (Parm)
void UCheatManager::ViewActor(const struct FName& actorName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewActor");

	UCheatManager_ViewActor_Params params {};
	params.actorName = actorName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.ViewPlayer
//		Flags  -> ()
// Parameters:
//		struct FString                                     S                                                          (Parm, NeedCtorLink)
void UCheatManager::ViewPlayer(const struct FString& S)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewPlayer");

	UCheatManager_ViewPlayer_Params params {};
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.ViewSelf
//		Flags  -> ()
// Parameters:
//		bool                                               bQuiet                                                     (OptionalParm, Parm)
void UCheatManager::ViewSelf(bool bQuiet)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewSelf");

	UCheatManager_ViewSelf_Params params {};
	params.bQuiet = bQuiet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.RememberSpot
//		Flags  -> ()
void UCheatManager::RememberSpot()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.RememberSpot");

	UCheatManager_RememberSpot_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.FractureAllMeshesToMaximizeMemoryUsage
//		Flags  -> ()
void UCheatManager::FractureAllMeshesToMaximizeMemoryUsage()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FractureAllMeshesToMaximizeMemoryUsage");

	UCheatManager_FractureAllMeshesToMaximizeMemoryUsage_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.FractureAllMeshes
//		Flags  -> ()
void UCheatManager::FractureAllMeshes()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FractureAllMeshes");

	UCheatManager_FractureAllMeshes_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.DestroyFractures
//		Flags  -> ()
// Parameters:
//		float                                              Radius                                                     (OptionalParm, Parm)
void UCheatManager::DestroyFractures(float Radius)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DestroyFractures");

	UCheatManager_DestroyFractures_Params params {};
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.SuspendAI
//		Flags  -> ()
void UCheatManager::SuspendAI()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SuspendAI");

	UCheatManager_SuspendAI_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.PlayersOnly
//		Flags  -> ()
void UCheatManager::PlayersOnly()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.PlayersOnly");

	UCheatManager_PlayersOnly_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.GiveWeapon
//		Flags  -> ()
// Parameters:
//		struct FString                                     WeaponClassStr                                             (Parm, NeedCtorLink)
//		class AWeapon*                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
class AWeapon* UCheatManager::GiveWeapon(const struct FString& WeaponClassStr)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.GiveWeapon");

	UCheatManager_GiveWeapon_Params params {};
	params.WeaponClassStr = WeaponClassStr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.Summon
//		Flags  -> (Singular, Net, NetReliable, Simulated, Event, Operator, HasOptionalParms, Const, Public, Private, HasOutParms, K2Call, K2Pure)
// Parameters:
//		struct FString                                     ClassName                                                  (Parm, NeedCtorLink)
void UCheatManager::Summon(const struct FString& ClassName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Summon");

	UCheatManager_Summon_Params params {};
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.Avatar
//		Flags  -> ()
// Parameters:
//		struct FName                                       ClassName                                                  (Parm)
void UCheatManager::Avatar(const struct FName& ClassName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Avatar");

	UCheatManager_Avatar_Params params {};
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.KillPawns
//		Flags  -> ()
void UCheatManager::KillPawns()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.KillPawns");

	UCheatManager_KillPawns_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.KillAllPawns
//		Flags  -> ()
// Parameters:
//		class UClass*                                      aClass                                                     (Parm)
void UCheatManager::KillAllPawns(class UClass* aClass)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.KillAllPawns");

	UCheatManager_KillAllPawns_Params params {};
	params.aClass = aClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.KillAll
//		Flags  -> ()
// Parameters:
//		class UClass*                                      aClass                                                     (Parm)
void UCheatManager::KillAll(class UClass* aClass)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.KillAll");

	UCheatManager_KillAll_Params params {};
	params.aClass = aClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.SetSpeed
//		Flags  -> ()
// Parameters:
//		float                                              F                                                          (Parm)
void UCheatManager::SetSpeed(float F)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetSpeed");

	UCheatManager_SetSpeed_Params params {};
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.SetGravity
//		Flags  -> ()
// Parameters:
//		float                                              F                                                          (Parm)
void UCheatManager::SetGravity(float F)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetGravity");

	UCheatManager_SetGravity_Params params {};
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.SetJumpZ
//		Flags  -> ()
// Parameters:
//		float                                              F                                                          (Parm)
void UCheatManager::SetJumpZ(float F)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetJumpZ");

	UCheatManager_SetJumpZ_Params params {};
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.Slomo
//		Flags  -> ()
// Parameters:
//		float                                              T                                                          (Parm)
void UCheatManager::Slomo(float T)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Slomo");

	UCheatManager_Slomo_Params params {};
	params.T = T;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.God
//		Flags  -> ()
void UCheatManager::God()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.God");

	UCheatManager_God_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.AllAmmo
//		Flags  -> ()
void UCheatManager::AllAmmo()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.AllAmmo");

	UCheatManager_AllAmmo_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.Ghost
//		Flags  -> ()
void UCheatManager::Ghost()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Ghost");

	UCheatManager_Ghost_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.Walk
//		Flags  -> ()
void UCheatManager::Walk()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Walk");

	UCheatManager_Walk_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.Fly
//		Flags  -> ()
void UCheatManager::Fly()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Fly");

	UCheatManager_Fly_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.Amphibious
//		Flags  -> ()
void UCheatManager::Amphibious()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Amphibious");

	UCheatManager_Amphibious_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.EndPath
//		Flags  -> ()
void UCheatManager::EndPath()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.EndPath");

	UCheatManager_EndPath_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.ChangeSize
//		Flags  -> ()
// Parameters:
//		float                                              F                                                          (Parm)
void UCheatManager::ChangeSize(float F)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ChangeSize");

	UCheatManager_ChangeSize_Params params {};
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.Teleport
//		Flags  -> (Singular, Net, Exec, Native, Event, Operator, Static, Const, Public, Private, HasOutParms, K2Call, K2Pure)
// Parameters:
void UCheatManager::STATIC_Teleport()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Teleport");

	UCheatManager_Teleport_Params params {};

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.KillViewedActor
//		Flags  -> ()
void UCheatManager::KillViewedActor()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.KillViewedActor");

	UCheatManager_KillViewedActor_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.WriteToLog
//		Flags  -> ()
// Parameters:
//		struct FString                                     Param                                                      (Parm, NeedCtorLink)
void UCheatManager::WriteToLog(const struct FString& Param)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.WriteToLog");

	UCheatManager_WriteToLog_Params params {};
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.FreezeFrame
//		Flags  -> ()
// Parameters:
//		float                                              Delay                                                      (Parm)
void UCheatManager::FreezeFrame(float Delay)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FreezeFrame");

	UCheatManager_FreezeFrame_Params params {};
	params.Delay = Delay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.ListDynamicActors
//		Flags  -> ()
void UCheatManager::ListDynamicActors()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ListDynamicActors");

	UCheatManager_ListDynamicActors_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.DebugPause
//		Flags  -> ()
void UCheatManager::DebugPause()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugPause");

	UCheatManager_DebugPause_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.EditAIByTrace
//		Flags  -> (Net, NetReliable, Exec, HasOptionalParms, Const, Public, Private, HasOutParms, K2Call, K2Pure)
// Parameters:
void UCheatManager::EditAIByTrace()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.EditAIByTrace");

	UCheatManager_EditAIByTrace_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.DebugAI
//		Flags  -> ()
// Parameters:
//		struct FName                                       Category                                                   (OptionalParm, Parm, CoerceParm)
void UCheatManager::DebugAI(const struct FName& Category)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugAI");

	UCheatManager_DebugAI_Params params {};
	params.Category = Category;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.FXStop
//		Flags  -> ()
// Parameters:
//		class UClass*                                      aClass                                                     (Parm)
void UCheatManager::FXStop(class UClass* aClass)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FXStop");

	UCheatManager_FXStop_Params params {};
	params.aClass = aClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CheatManager.FXPlay
//		Flags  -> ()
// Parameters:
//		class UClass*                                      aClass                                                     (Parm)
//		struct FString                                     FXAnimPath                                                 (Parm, NeedCtorLink)
void UCheatManager::FXPlay(class UClass* aClass, const struct FString& FXAnimPath)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FXPlay");

	UCheatManager_FXPlay_Params params {};
	params.aClass = aClass;
	params.FXAnimPath = FXAnimPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystem.GetKeyValue
//		Flags  -> ()
// Parameters:
//		int                                                SaveSlot                                                   (Parm)
//		struct FString                                     KeyName                                                    (Parm, NeedCtorLink)
//		TEnumAsByte<Engine_EPlatformInterfaceDataType>     Type                                                       (Parm)
//		struct FPlatformInterfaceDelegateResult            Value                                                      (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudSaveSystem::GetKeyValue(int SaveSlot, const struct FString& KeyName, TEnumAsByte<Engine_EPlatformInterfaceDataType> Type, struct FPlatformInterfaceDelegateResult* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.GetKeyValue");

	UCloudSaveSystem_GetKeyValue_Params params {};
	params.SaveSlot = SaveSlot;
	params.KeyName = KeyName;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystem.GetDataStoreIDAndBlobNameForSaveSlot
//		Flags  -> (Singular, Net, Simulated, Exec, Event, Operator, Const, Private, Protected, Delegate, HasDefaults, K2Call, K2Pure)
// Parameters:
//		int                                                SaveSlot                                                   (Parm)
//		struct FString                                     DataStoreID                                                (Parm, OutParm, NeedCtorLink)
//		struct FString                                     DataBlobName                                               (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudSaveSystem::GetDataStoreIDAndBlobNameForSaveSlot(int SaveSlot, struct FString* DataStoreID, struct FString* DataBlobName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.GetDataStoreIDAndBlobNameForSaveSlot");

	UCloudSaveSystem_GetDataStoreIDAndBlobNameForSaveSlot_Params params {};
	params.SaveSlot = SaveSlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DataStoreID != nullptr)
		*DataStoreID = params.DataStoreID;
	if (DataBlobName != nullptr)
		*DataBlobName = params.DataBlobName;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystem.SetKeyValue
//		Flags  -> ()
// Parameters:
//		int                                                SaveSlot                                                   (Parm)
//		struct FString                                     KeyName                                                    (Parm, NeedCtorLink)
//		struct FPlatformInterfaceData                      Value                                                      (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudSaveSystem::SetKeyValue(int SaveSlot, const struct FString& KeyName, struct FPlatformInterfaceData* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.SetKeyValue");

	UCloudSaveSystem_SetKeyValue_Params params {};
	params.SaveSlot = SaveSlot;
	params.KeyName = KeyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystem.InternalSetSaveSlotKeyValues
//		Flags  -> (Singular, NetReliable, Simulated, Static, Const, Private, Protected, Delegate, HasDefaults, K2Call, K2Pure)
// Parameters:
//		int                                                SaveSlot                                                   (Parm)
//		struct FString                                     DataStoreID                                                (Parm, NeedCtorLink)
//		struct FString                                     SaveDataBlobName                                           (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudSaveSystem::STATIC_InternalSetSaveSlotKeyValues(int SaveSlot, const struct FString& DataStoreID, const struct FString& SaveDataBlobName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.InternalSetSaveSlotKeyValues");

	UCloudSaveSystem_InternalSetSaveSlotKeyValues_Params params {};
	params.SaveSlot = SaveSlot;
	params.DataStoreID = DataStoreID;
	params.SaveDataBlobName = SaveDataBlobName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystem.SetSaveSlotKeyValues
//		Flags  -> ()
// Parameters:
//		struct FString                                     DataStoreID                                                (Parm, NeedCtorLink)
//		struct FString                                     SaveDataBlobName                                           (Parm, NeedCtorLink)
//		int                                                SaveSlot                                                   (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudSaveSystem::SetSaveSlotKeyValues(const struct FString& DataStoreID, const struct FString& SaveDataBlobName, int* SaveSlot)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.SetSaveSlotKeyValues");

	UCloudSaveSystem_SetSaveSlotKeyValues_Params params {};
	params.DataStoreID = DataStoreID;
	params.SaveDataBlobName = SaveDataBlobName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SaveSlot != nullptr)
		*SaveSlot = params.SaveSlot;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystem.OnDeleteSaveDataComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSucessfull                                             (Parm)
//		struct FString                                     StorageID                                                  (Parm, NeedCtorLink)
//		struct FString                                     BlobName                                                   (Parm, NeedCtorLink)
//		struct FString                                     Error                                                      (Parm, NeedCtorLink)
void UCloudSaveSystem::OnDeleteSaveDataComplete(bool bWasSucessfull, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.OnDeleteSaveDataComplete");

	UCloudSaveSystem_OnDeleteSaveDataComplete_Params params {};
	params.bWasSucessfull = bWasSucessfull;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystem.DeleteSaveData
//		Flags  -> (Net, Simulated, Event, Const, Private, Protected, Delegate, HasDefaults, K2Call, K2Pure)
// Parameters:
//		int                                                SaveSlot                                                   (Parm)
//		struct FScriptDelegate                             InDeleteSaveDataCallback                                   (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudSaveSystem::DeleteSaveData(int SaveSlot, const struct FScriptDelegate& InDeleteSaveDataCallback)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.DeleteSaveData");

	UCloudSaveSystem_DeleteSaveData_Params params {};
	params.SaveSlot = SaveSlot;
	params.InDeleteSaveDataCallback = InDeleteSaveDataCallback;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystem.OnSetSaveDataComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSucessfull                                             (Parm)
//		struct FString                                     StorageID                                                  (Parm, NeedCtorLink)
//		struct FString                                     BlobName                                                   (Parm, NeedCtorLink)
//		struct FString                                     Error                                                      (Parm, NeedCtorLink)
void UCloudSaveSystem::OnSetSaveDataComplete(bool bWasSucessfull, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.OnSetSaveDataComplete");

	UCloudSaveSystem_OnSetSaveDataComplete_Params params {};
	params.bWasSucessfull = bWasSucessfull;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystem.SetSaveData
//		Flags  -> (Net, NetReliable, Event, Static, HasOptionalParms, Private, Protected, Delegate, HasDefaults, K2Call, K2Pure)
// Parameters:
//		int                                                SaveSlot                                                   (Parm)
//		struct FScriptDelegate                             InSetSaveDataCallback                                      (Parm, NeedCtorLink)
//		TArray<unsigned char>                              SaveDataBlob                                               (Const, Parm, OutParm, NeedCtorLink)
void UCloudSaveSystem::STATIC_SetSaveData(int SaveSlot, const struct FScriptDelegate& InSetSaveDataCallback, TArray<unsigned char>* SaveDataBlob)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.SetSaveData");

	UCloudSaveSystem_SetSaveData_Params params {};
	params.SaveSlot = SaveSlot;
	params.InSetSaveDataCallback = InSetSaveDataCallback;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SaveDataBlob != nullptr)
		*SaveDataBlob = params.SaveDataBlob;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystem.OnGetSaveDataComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     StorageID                                                  (Parm, NeedCtorLink)
//		struct FString                                     BlobName                                                   (Parm, NeedCtorLink)
//		TArray<unsigned char>                              DataBlob                                                   (Parm, OutParm, NeedCtorLink)
//		struct FString                                     Error                                                      (Parm, NeedCtorLink)
void UCloudSaveSystem::OnGetSaveDataComplete(bool bWasSuccessful, const struct FString& StorageID, const struct FString& BlobName, TArray<unsigned char>* DataBlob, const struct FString& Error)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.OnGetSaveDataComplete");

	UCloudSaveSystem_OnGetSaveDataComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DataBlob != nullptr)
		*DataBlob = params.DataBlob;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystem.GetSaveData
//		Flags  -> (Singular, Simulated, Exec, Native, Operator, Static, HasOptionalParms, Private, Protected, Delegate, HasDefaults, K2Call, K2Pure)
// Parameters:
//		int                                                SaveSlot                                                   (Parm)
//		struct FScriptDelegate                             OnGetSaveDataCallback                                      (Parm, NeedCtorLink)
void UCloudSaveSystem::STATIC_GetSaveData(int SaveSlot, const struct FScriptDelegate& OnGetSaveDataCallback)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.GetSaveData");

	UCloudSaveSystem_GetSaveData_Params params {};
	params.SaveSlot = SaveSlot;
	params.OnGetSaveDataCallback = OnGetSaveDataCallback;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystem.Init
//		Flags  -> (Singular, Native, Operator, HasOptionalParms, Private, Protected, Delegate, HasDefaults, K2Call, K2Pure)
// Parameters:
//		int                                                VersionNumber                                              (Parm)
void UCloudSaveSystem::Init(int VersionNumber)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.Init");

	UCloudSaveSystem_Init_Params params {};
	params.VersionNumber = VersionNumber;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystem.DeserializeObject
//		Flags  -> ()
// Parameters:
//		class UClass*                                      ObjectClass                                                (Parm)
//		TArray<unsigned char>                              Data                                                       (Parm, OutParm, NeedCtorLink)
//		TEnumAsByte<Engine_ESaveDataVersionSupport>        VersionSupport                                             (Parm)
//		int                                                DataVersion                                                (Parm)
//		class UObject*                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
class UObject* UCloudSaveSystem::DeserializeObject(class UClass* ObjectClass, TArray<unsigned char>* Data, TEnumAsByte<Engine_ESaveDataVersionSupport> VersionSupport, int DataVersion)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.DeserializeObject");

	UCloudSaveSystem_DeserializeObject_Params params {};
	params.ObjectClass = ObjectClass;
	params.VersionSupport = VersionSupport;
	params.DataVersion = DataVersion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystem.SerializeObject
//		Flags  -> ()
// Parameters:
//		class UObject*                                     ObjectToSerialize                                          (Parm)
//		TArray<unsigned char>                              Data                                                       (Parm, OutParm, NeedCtorLink)
//		int                                                DataVersion                                                (Parm)
void UCloudSaveSystem::SerializeObject(class UObject* ObjectToSerialize, TArray<unsigned char>* Data, int DataVersion)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.SerializeObject");

	UCloudSaveSystem_SerializeObject_Params params {};
	params.ObjectToSerialize = ObjectToSerialize;
	params.DataVersion = DataVersion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystem.AreAnySlotOperationsActive
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudSaveSystem::AreAnySlotOperationsActive()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.AreAnySlotOperationsActive");

	UCloudSaveSystem_AreAnySlotOperationsActive_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystem.IsDeleteOperationActive
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudSaveSystem::IsDeleteOperationActive()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.IsDeleteOperationActive");

	UCloudSaveSystem_IsDeleteOperationActive_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystem.IsOperationActiveForSlot
//		Flags  -> ()
// Parameters:
//		int                                                SlotIndex                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudSaveSystem::IsOperationActiveForSlot(int SlotIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.IsOperationActiveForSlot");

	UCloudSaveSystem_IsOperationActiveForSlot_Params params {};
	params.SlotIndex = SlotIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystem.WriteNumSaveSlots
//		Flags  -> (NetReliable, Exec, Static, HasOptionalParms, Private, Protected, Delegate, HasDefaults, K2Call, K2Pure)
// Parameters:
//		int                                                NumSaveSlots                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudSaveSystem::STATIC_WriteNumSaveSlots(int NumSaveSlots)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.WriteNumSaveSlots");

	UCloudSaveSystem_WriteNumSaveSlots_Params params {};
	params.NumSaveSlots = NumSaveSlots;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystem.DoesSaveSlotKeyValueDataAlreadyExist
//		Flags  -> ()
// Parameters:
//		struct FString                                     DataStoreID                                                (Parm, NeedCtorLink)
//		struct FString                                     DataBlobName                                               (Parm, NeedCtorLink)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UCloudSaveSystem::DoesSaveSlotKeyValueDataAlreadyExist(const struct FString& DataStoreID, const struct FString& DataBlobName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.DoesSaveSlotKeyValueDataAlreadyExist");

	UCloudSaveSystem_DoesSaveSlotKeyValueDataAlreadyExist_Params params {};
	params.DataStoreID = DataStoreID;
	params.DataBlobName = DataBlobName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystem.GetNumberOfSaveSlots
//		Flags  -> (Exec, HasOptionalParms, Private, Protected, Delegate, HasDefaults, K2Call, K2Pure)
// Parameters:
//		int                                                NumSaveSlots                                               (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudSaveSystem::GetNumberOfSaveSlots(int* NumSaveSlots)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.GetNumberOfSaveSlots");

	UCloudSaveSystem_GetNumberOfSaveSlots_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (NumSaveSlots != nullptr)
		*NumSaveSlots = params.NumSaveSlots;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystem.SaveSystemCallback
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		int                                                SaveSlot                                                   (Parm)
//		struct FString                                     Error                                                      (Parm, NeedCtorLink)
void UCloudSaveSystem::SaveSystemCallback(bool bWasSuccessful, int SaveSlot, const struct FString& Error)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.SaveSystemCallback");

	UCloudSaveSystem_SaveSystemCallback_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.SaveSlot = SaveSlot;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystem.OnGetSaveDataCallback
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		int                                                SaveSlot                                                   (Parm)
//		TArray<unsigned char>                              DataBlob                                                   (Parm, OutParm, NeedCtorLink)
//		struct FString                                     Error                                                      (Parm, NeedCtorLink)
void UCloudSaveSystem::OnGetSaveDataCallback(bool bWasSuccessful, int SaveSlot, TArray<unsigned char>* DataBlob, const struct FString& Error)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.OnGetSaveDataCallback");

	UCloudSaveSystem_OnGetSaveDataCallback_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.SaveSlot = SaveSlot;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DataBlob != nullptr)
		*DataBlob = params.DataBlob;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DamageType.VehicleDamageScalingFor
//		Flags  -> ()
// Parameters:
//		class AVehicle*                                    V                                                          (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UDamageType::VehicleDamageScalingFor(class AVehicle* V)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DamageType.VehicleDamageScalingFor");

	UDamageType_VehicleDamageScalingFor_Params params {};
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystem.GetMaxLifespan
//		Flags  -> ()
// Parameters:
//		float                                              InComponentDelay                                           (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UParticleSystem::GetMaxLifespan(float InComponentDelay)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.GetMaxLifespan");

	UParticleSystem_GetMaxLifespan_Params params {};
	params.InComponentDelay = InComponentDelay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystem.SetLODDistance
//		Flags  -> ()
// Parameters:
//		int                                                LODLevelIndex                                              (Parm)
//		float                                              InDistance                                                 (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UParticleSystem::SetLODDistance(int LODLevelIndex, float InDistance)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.SetLODDistance");

	UParticleSystem_SetLODDistance_Params params {};
	params.LODLevelIndex = LODLevelIndex;
	params.InDistance = InDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystem.SetCurrentLODMethod
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_EParticleSystemLODMethod>       InMethod                                                   (Parm)
void UParticleSystem::SetCurrentLODMethod(TEnumAsByte<Engine_EParticleSystemLODMethod> InMethod)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.SetCurrentLODMethod");

	UParticleSystem_SetCurrentLODMethod_Params params {};
	params.InMethod = InMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystem.GetLODDistance
//		Flags  -> ()
// Parameters:
//		int                                                LODLevelIndex                                              (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UParticleSystem::GetLODDistance(int LODLevelIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.GetLODDistance");

	UParticleSystem_GetLODDistance_Params params {};
	params.LODLevelIndex = LODLevelIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystem.GetLODLevelCount
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UParticleSystem::GetLODLevelCount()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.GetLODLevelCount");

	UParticleSystem_GetLODLevelCount_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystem.GetCurrentLODMethod
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_EParticleSystemLODMethod>       ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_EParticleSystemLODMethod> UParticleSystem::GetCurrentLODMethod()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.GetCurrentLODMethod");

	UParticleSystem_GetCurrentLODMethod_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Texture2D.CreateListOfTexturesToUnload
//		Flags  -> ()
// Parameters:
//		int                                                TotalBytesNeeded                                           (Parm)
//		TArray<class UTexture*>                            ListOfTexturesToUnload                                     (Parm, OutParm, NeedCtorLink)
//		TArray<class UTexture*>                            ListOfTexturesToAvoid                                      (OptionalParm, Parm, OutParm, NeedCtorLink)
//		TArray<TEnumAsByte<Engine_ETextureGroup>>          OnlyUseTheseTextureGroups                                  (Const, OptionalParm, Parm, OutParm, NeedCtorLink)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UTexture2D::CreateListOfTexturesToUnload(int TotalBytesNeeded, TArray<class UTexture*>* ListOfTexturesToUnload, TArray<class UTexture*>* ListOfTexturesToAvoid, TArray<TEnumAsByte<Engine_ETextureGroup>>* OnlyUseTheseTextureGroups)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Texture2D.CreateListOfTexturesToUnload");

	UTexture2D_CreateListOfTexturesToUnload_Params params {};
	params.TotalBytesNeeded = TotalBytesNeeded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ListOfTexturesToUnload != nullptr)
		*ListOfTexturesToUnload = params.ListOfTexturesToUnload;
	if (ListOfTexturesToAvoid != nullptr)
		*ListOfTexturesToAvoid = params.ListOfTexturesToAvoid;
	if (OnlyUseTheseTextureGroups != nullptr)
		*OnlyUseTheseTextureGroups = params.OnlyUseTheseTextureGroups;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Texture2D.GetBytesUsedForTextureResources
//		Flags  -> ()
// Parameters:
//		TArray<class UTexture*>                            ListOfTextures                                             (Const, Parm, OutParm, NeedCtorLink)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UTexture2D::GetBytesUsedForTextureResources(TArray<class UTexture*>* ListOfTextures)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Texture2D.GetBytesUsedForTextureResources");

	UTexture2D_GetBytesUsedForTextureResources_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ListOfTextures != nullptr)
		*ListOfTextures = params.ListOfTextures;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Texture2D.UnloadTextureResources
//		Flags  -> ()
// Parameters:
//		TArray<class UTexture*>                            ListOfTexturesToUnload                                     (Const, Parm, OutParm, NeedCtorLink)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UTexture2D::UnloadTextureResources(TArray<class UTexture*>* ListOfTexturesToUnload)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Texture2D.UnloadTextureResources");

	UTexture2D_UnloadTextureResources_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ListOfTexturesToUnload != nullptr)
		*ListOfTexturesToUnload = params.ListOfTexturesToUnload;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Texture2D.LoadTextureResources
//		Flags  -> ()
// Parameters:
//		TArray<class UTexture*>                            ListOfTexturesToLoad                                       (Const, Parm, OutParm, NeedCtorLink)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UTexture2D::LoadTextureResources(TArray<class UTexture*>* ListOfTexturesToLoad)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Texture2D.LoadTextureResources");

	UTexture2D_LoadTextureResources_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ListOfTexturesToLoad != nullptr)
		*ListOfTexturesToLoad = params.ListOfTexturesToLoad;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Texture2D.Create
//		Flags  -> ()
// Parameters:
//		int                                                InSizeX                                                    (Parm)
//		int                                                InSizeY                                                    (Parm)
//		TEnumAsByte<Engine_EPixelFormat>                   InFormat                                                   (OptionalParm, Parm)
//		class UTexture2D*                                  ReturnValue                                                (Parm, OutParm, ReturnParm)
class UTexture2D* UTexture2D::Create(int InSizeX, int InSizeY, TEnumAsByte<Engine_EPixelFormat> InFormat)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Texture2D.Create");

	UTexture2D_Create_Params params {};
	params.InSizeX = InSizeX;
	params.InSizeY = InSizeY;
	params.InFormat = InFormat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Texture2D.SetForceMipLevelsToBeResident
//		Flags  -> ()
// Parameters:
//		float                                              Seconds                                                    (Parm)
//		int                                                CinematicTextureGroups                                     (OptionalParm, Parm)
void UTexture2D::SetForceMipLevelsToBeResident(float Seconds, int CinematicTextureGroups)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Texture2D.SetForceMipLevelsToBeResident");

	UTexture2D_SetForceMipLevelsToBeResident_Params params {};
	params.Seconds = Seconds;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TranslationContext.RegisterTranslatorTag
//		Flags  -> ()
// Parameters:
//		class UTranslatorTag*                              InTagHandler                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UTranslationContext::RegisterTranslatorTag(class UTranslatorTag* InTagHandler)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TranslationContext.RegisterTranslatorTag");

	UTranslationContext_RegisterTranslatorTag_Params params {};
	params.InTagHandler = InTagHandler;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TranslatorTag.Translate
//		Flags  -> ()
// Parameters:
//		struct FString                                     InArgument                                                 (Parm, NeedCtorLink)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UTranslatorTag::Translate(const struct FString& InArgument)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TranslatorTag.Translate");

	UTranslatorTag_Translate_Params params {};
	params.InArgument = InArgument;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.StringsTag.Translate
//		Flags  -> ()
// Parameters:
//		struct FString                                     InArgument                                                 (Parm, NeedCtorLink)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UStringsTag::Translate(const struct FString& InArgument)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.StringsTag.Translate");

	UStringsTag_Translate_Params params {};
	params.InArgument = InArgument;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Interaction.NotifyPlayerRemoved
//		Flags  -> ()
// Parameters:
//		int                                                PlayerIndex                                                (Parm)
//		class ULocalPlayer*                                RemovedPlayer                                              (Parm)
void UInteraction::NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Interaction.NotifyPlayerRemoved");

	UInteraction_NotifyPlayerRemoved_Params params {};
	params.PlayerIndex = PlayerIndex;
	params.RemovedPlayer = RemovedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Interaction.NotifyPlayerAdded
//		Flags  -> ()
// Parameters:
//		int                                                PlayerIndex                                                (Parm)
//		class ULocalPlayer*                                AddedPlayer                                                (Parm)
void UInteraction::NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Interaction.NotifyPlayerAdded");

	UInteraction_NotifyPlayerAdded_Params params {};
	params.PlayerIndex = PlayerIndex;
	params.AddedPlayer = AddedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Interaction.NotifyGameSessionEnded
//		Flags  -> ()
void UInteraction::NotifyGameSessionEnded()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Interaction.NotifyGameSessionEnded");

	UInteraction_NotifyGameSessionEnded_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Interaction.Initialized
//		Flags  -> ()
void UInteraction::Initialized()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Interaction.Initialized");

	UInteraction_Initialized_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Interaction.OnInitialize
//		Flags  -> ()
void UInteraction::OnInitialize()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Interaction.OnInitialize");

	UInteraction_OnInitialize_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Interaction.Init
//		Flags  -> ()
void UInteraction::Init()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Interaction.Init");

	UInteraction_Init_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Interaction.PostRender
//		Flags  -> ()
// Parameters:
//		class UCanvas*                                     Canvas                                                     (Parm)
void UInteraction::PostRender(class UCanvas* Canvas)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Interaction.PostRender");

	UInteraction_PostRender_Params params {};
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Interaction.Tick
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
void UInteraction::Tick(float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Interaction.Tick");

	UInteraction_Tick_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Interaction.OnReceivedNativeInputChar
//		Flags  -> ()
// Parameters:
//		int                                                ControllerId                                               (Parm)
//		struct FString                                     Unicode                                                    (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UInteraction::OnReceivedNativeInputChar(int ControllerId, const struct FString& Unicode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Interaction.OnReceivedNativeInputChar");

	UInteraction_OnReceivedNativeInputChar_Params params {};
	params.ControllerId = ControllerId;
	params.Unicode = Unicode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Interaction.OnReceivedNativeInputAxis
//		Flags  -> ()
// Parameters:
//		int                                                ControllerId                                               (Parm)
//		struct FName                                       Key                                                        (Parm)
//		float                                              Delta                                                      (Parm)
//		float                                              DeltaTime                                                  (Parm)
//		bool                                               bGamepad                                                   (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UInteraction::OnReceivedNativeInputAxis(int ControllerId, const struct FName& Key, float Delta, float DeltaTime, bool bGamepad)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Interaction.OnReceivedNativeInputAxis");

	UInteraction_OnReceivedNativeInputAxis_Params params {};
	params.ControllerId = ControllerId;
	params.Key = Key;
	params.Delta = Delta;
	params.DeltaTime = DeltaTime;
	params.bGamepad = bGamepad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Interaction.OnReceivedNativeInputKey
//		Flags  -> ()
// Parameters:
//		int                                                ControllerId                                               (Parm)
//		struct FName                                       Key                                                        (Parm)
//		TEnumAsByte<Core_EInputEvent>                      EventType                                                  (Parm)
//		float                                              AmountDepressed                                            (OptionalParm, Parm)
//		bool                                               bGamepad                                                   (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UInteraction::OnReceivedNativeInputKey(int ControllerId, const struct FName& Key, TEnumAsByte<Core_EInputEvent> EventType, float AmountDepressed, bool bGamepad)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Interaction.OnReceivedNativeInputKey");

	UInteraction_OnReceivedNativeInputKey_Params params {};
	params.ControllerId = ControllerId;
	params.Key = Key;
	params.EventType = EventType;
	params.AmountDepressed = AmountDepressed;
	params.bGamepad = bGamepad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameSearch.SortSearchResults
//		Flags  -> ()
void UOnlineGameSearch::SortSearchResults()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameSearch.SortSearchResults");

	UOnlineGameSearch_SortSearchResults_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameSearch.SetSkillOverride
//		Flags  -> ()
// Parameters:
//		int                                                LeaderboardId                                              (Parm)
//		TArray<struct FUniqueNetId>                        Players                                                    (Const, Parm, OutParm, NeedCtorLink)
void UOnlineGameSearch::SetSkillOverride(int LeaderboardId, TArray<struct FUniqueNetId>* Players)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameSearch.SetSkillOverride");

	UOnlineGameSearch_SetSkillOverride_Params params {};
	params.LeaderboardId = LeaderboardId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.IsPendingAuth
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PlayerUID                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AAccessControl::IsPendingAuth(const struct FUniqueNetId& PlayerUID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.IsPendingAuth");

	AAccessControl_IsPendingAuth_Params params {};
	params.PlayerUID = PlayerUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.Cleanup
//		Flags  -> ()
// Parameters:
//		bool                                               bExit                                                      (OptionalParm, Parm)
void AAccessControl::Cleanup(bool bExit)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.Cleanup");

	AAccessControl_Cleanup_Params params {};
	params.bExit = bExit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.NotifyExit
//		Flags  -> ()
void AAccessControl::NotifyExit()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.NotifyExit");

	AAccessControl_NotifyExit_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.NotifyGameEnding
//		Flags  -> ()
void AAccessControl::NotifyGameEnding()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.NotifyGameEnding");

	AAccessControl_NotifyGameEnding_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.NotifyServerTravel
//		Flags  -> ()
// Parameters:
//		bool                                               bSeamless                                                  (Parm)
void AAccessControl::NotifyServerTravel(bool bSeamless)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.NotifyServerTravel");

	AAccessControl_NotifyServerTravel_Params params {};
	params.bSeamless = bSeamless;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.OnDestroyOnlineGameComplete
//		Flags  -> (Net, Simulated, Exec, HasOptionalParms, Public, Private, Delegate, NetServer, HasOutParms, HasDefaults, NetClient, DLLImport, K2Pure)
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void AAccessControl::OnDestroyOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.OnDestroyOnlineGameComplete");

	AAccessControl_OnDestroyOnlineGameComplete_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.StaticOnClientConnectionClose
//		Flags  -> (Singular, Net, NetReliable, Event, HasOptionalParms, Public, Private, Delegate, NetServer, HasOutParms, HasDefaults, NetClient, DLLImport, K2Pure)
// Parameters:
//		class UPlayer*                                     ClientConnection                                           (Parm)
void AAccessControl::StaticOnClientConnectionClose(class UPlayer* ClientConnection)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.StaticOnClientConnectionClose");

	AAccessControl_StaticOnClientConnectionClose_Params params {};
	params.ClientConnection = ClientConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.OnClientConnectionClose
//		Flags  -> ()
// Parameters:
//		class UPlayer*                                     ClientConnection                                           (Parm)
void AAccessControl::OnClientConnectionClose(class UPlayer* ClientConnection)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.OnClientConnectionClose");

	AAccessControl_OnClientConnectionClose_Params params {};
	params.ClientConnection = ClientConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.ListenHostAuthTimeout
//		Flags  -> (Singular, Net, Simulated, Exec, Event, HasOptionalParms, Public, Private, Delegate, NetServer, HasOutParms, HasDefaults, NetClient, DLLImport, K2Pure)
void AAccessControl::ListenHostAuthTimeout()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ListenHostAuthTimeout");

	AAccessControl_ListenHostAuthTimeout_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.EndListenHostAuth
//		Flags  -> (Singular, NetReliable, Native, Event, HasOptionalParms, Public, Private, Delegate, NetServer, HasOutParms, HasDefaults, NetClient, DLLImport, K2Pure)
// Parameters:
void AAccessControl::EndListenHostAuth()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.EndListenHostAuth");

	AAccessControl_EndListenHostAuth_Params params {};

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.ContinueListenHostAuth
//		Flags  -> (Net, NetReliable, Simulated, Exec, Native, Event, HasOptionalParms, Public, Private, Delegate, NetServer, HasOutParms, HasDefaults, NetClient, DLLImport, K2Pure)
// Parameters:
void AAccessControl::ContinueListenHostAuth()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ContinueListenHostAuth");

	AAccessControl_ContinueListenHostAuth_Params params {};

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.BeginListenHostAuth
//		Flags  -> (NetReliable, Simulated, Exec, Event, Static, Public, Private, Delegate, NetServer, HasOutParms, HasDefaults, NetClient, DLLImport, K2Pure)
// Parameters:
//		bool                                               bRetry                                                     (OptionalParm, Parm)
void AAccessControl::STATIC_BeginListenHostAuth(bool bRetry)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.BeginListenHostAuth");

	AAccessControl_BeginListenHostAuth_Params params {};
	params.bRetry = bRetry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.ProcessServerAuthRetryRequest
//		Flags  -> (NetReliable, Simulated, Native, Operator, Static, Public, Private, Delegate, NetServer, HasOutParms, HasDefaults, NetClient, DLLImport, K2Pure)
// Parameters:
//		class UPlayer*                                     ClientConnection                                           (Parm)
void AAccessControl::STATIC_ProcessServerAuthRetryRequest(class UPlayer* ClientConnection)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ProcessServerAuthRetryRequest");

	AAccessControl_ProcessServerAuthRetryRequest_Params params {};
	params.ClientConnection = ClientConnection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.ProcessServerAuthRequest
//		Flags  -> (Singular, Net, Native, Event, Operator, Static, Public, Private, Delegate, NetServer, HasOutParms, HasDefaults, NetClient, DLLImport, K2Pure)
// Parameters:
//		class UPlayer*                                     ClientConnection                                           (Parm)
//		struct FUniqueNetId                                ClientUID                                                  (Parm)
//		int                                                ClientIP                                                   (Parm)
//		int                                                ClientPort                                                 (Parm)
void AAccessControl::STATIC_ProcessServerAuthRequest(class UPlayer* ClientConnection, const struct FUniqueNetId& ClientUID, int ClientIP, int ClientPort)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ProcessServerAuthRequest");

	AAccessControl_ProcessServerAuthRequest_Params params {};
	params.ClientConnection = ClientConnection;
	params.ClientUID = ClientUID;
	params.ClientIP = ClientIP;
	params.ClientPort = ClientPort;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.OnClientAuthComplete
//		Flags  -> (Singular, Net, NetReliable, Exec, Native, Operator, Public, Private, Delegate, NetServer, HasOutParms, HasDefaults, NetClient, DLLImport, K2Pure)
// Parameters:
//		bool                                               bSuccess                                                   (Parm)
//		struct FUniqueNetId                                ClientUID                                                  (Parm)
//		class UPlayer*                                     ClientConnection                                           (Parm)
//		struct FString                                     ExtraInfo                                                  (Parm, NeedCtorLink)
void AAccessControl::OnClientAuthComplete(bool bSuccess, const struct FUniqueNetId& ClientUID, class UPlayer* ClientConnection, const struct FString& ExtraInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.OnClientAuthComplete");

	AAccessControl_OnClientAuthComplete_Params params {};
	params.bSuccess = bSuccess;
	params.ClientUID = ClientUID;
	params.ClientConnection = ClientConnection;
	params.ExtraInfo = ExtraInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.ProcessClientAuthResponse
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                ClientUID                                                  (Parm)
//		int                                                ClientIP                                                   (Parm)
//		int                                                AuthTicketUID                                              (Parm)
void AAccessControl::ProcessClientAuthResponse(const struct FUniqueNetId& ClientUID, int ClientIP, int AuthTicketUID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ProcessClientAuthResponse");

	AAccessControl_ProcessClientAuthResponse_Params params {};
	params.ClientUID = ClientUID;
	params.ClientIP = ClientIP;
	params.AuthTicketUID = AuthTicketUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.OnAuthReady
//		Flags  -> ()
// Parameters:
void AAccessControl::OnAuthReady()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.OnAuthReady");

	AAccessControl_OnAuthReady_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.PendingAuthTimer
//		Flags  -> (Net, Simulated, Native, Static, Public, Private, Delegate, NetServer, HasOutParms, HasDefaults, NetClient, DLLImport, K2Pure)
// Parameters:
void AAccessControl::STATIC_PendingAuthTimer()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.PendingAuthTimer");

	AAccessControl_PendingAuthTimer_Params params {};

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.PostLogin
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           NewPlayer                                                  (Parm)
void AAccessControl::PostLogin(class APlayerController* NewPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.PostLogin");

	AAccessControl_PostLogin_Params params {};
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.PreLogin
//		Flags  -> (Simulated, Exec, Event, Public, Private, Delegate, NetServer, HasOutParms, HasDefaults, NetClient, DLLImport, K2Pure)
// Parameters:
//		struct FString                                     Options                                                    (Parm, NeedCtorLink)
//		struct FString                                     Address                                                    (Parm, NeedCtorLink)
//		struct FUniqueNetId                                UniqueId                                                   (Const, Parm)
//		bool                                               bSupportsAuth                                              (Parm)
//		struct FString                                     OutError                                                   (Parm, OutParm, NeedCtorLink)
//		bool                                               bSpectator                                                 (Parm)
void AAccessControl::PreLogin(const struct FString& Options, const struct FString& Address, const struct FUniqueNetId& UniqueId, bool bSupportsAuth, struct FString* OutError, bool bSpectator)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.PreLogin");

	AAccessControl_PreLogin_Params params {};
	params.Options = Options;
	params.Address = Address;
	params.UniqueId = UniqueId;
	params.bSupportsAuth = bSupportsAuth;
	params.bSpectator = bSpectator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutError != nullptr)
		*OutError = params.OutError;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.ClearAuthDelegates
//		Flags  -> ()
// Parameters:
//		bool                                               bExiting                                                   (Parm)
void AAccessControl::ClearAuthDelegates(bool bExiting)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ClearAuthDelegates");

	AAccessControl_ClearAuthDelegates_Params params {};
	params.bExiting = bExiting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.RegisterAuthDelegates
//		Flags  -> ()
void AAccessControl::RegisterAuthDelegates()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.RegisterAuthDelegates");

	AAccessControl_RegisterAuthDelegates_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.InitAuthHooks
//		Flags  -> ()
// Parameters:
void AAccessControl::InitAuthHooks()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.InitAuthHooks");

	AAccessControl_InitAuthHooks_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.IsIDBanned
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                NetId                                                      (Const, Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AAccessControl::IsIDBanned(struct FUniqueNetId* NetId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.IsIDBanned");

	AAccessControl_IsIDBanned_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (NetId != nullptr)
		*NetId = params.NetId;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.CheckIPPolicy
//		Flags  -> ()
// Parameters:
//		struct FString                                     Address                                                    (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AAccessControl::CheckIPPolicy(const struct FString& Address)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.CheckIPPolicy");

	AAccessControl_CheckIPPolicy_Params params {};
	params.Address = Address;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.ValidLogin
//		Flags  -> ()
// Parameters:
//		struct FString                                     UserName                                                   (Parm, NeedCtorLink)
//		struct FString                                     Password                                                   (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AAccessControl::ValidLogin(const struct FString& UserName, const struct FString& Password)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ValidLogin");

	AAccessControl_ValidLogin_Params params {};
	params.UserName = UserName;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.ParseAdminOptions
//		Flags  -> ()
// Parameters:
//		struct FString                                     Options                                                    (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AAccessControl::ParseAdminOptions(const struct FString& Options)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ParseAdminOptions");

	AAccessControl_ParseAdminOptions_Params params {};
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.AdminExited
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           P                                                          (Parm)
void AAccessControl::AdminExited(class APlayerController* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.AdminExited");

	AAccessControl_AdminExited_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.AdminEntered
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           P                                                          (Parm)
void AAccessControl::AdminEntered(class APlayerController* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.AdminEntered");

	AAccessControl_AdminEntered_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.AdminLogout
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           P                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AAccessControl::AdminLogout(class APlayerController* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.AdminLogout");

	AAccessControl_AdminLogout_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.AdminLogin
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           P                                                          (Parm)
//		struct FString                                     Password                                                   (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AAccessControl::AdminLogin(class APlayerController* P, const struct FString& Password)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.AdminLogin");

	AAccessControl_AdminLogin_Params params {};
	params.P = P;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.KickPlayer
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           C                                                          (Parm)
//		struct FString                                     KickReason                                                 (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AAccessControl::KickPlayer(class APlayerController* C, const struct FString& KickReason)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.KickPlayer");

	AAccessControl_KickPlayer_Params params {};
	params.C = C;
	params.KickReason = KickReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.ForceKickPlayer
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           C                                                          (Parm)
//		struct FString                                     KickReason                                                 (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AAccessControl::ForceKickPlayer(class APlayerController* C, const struct FString& KickReason)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ForceKickPlayer");

	AAccessControl_ForceKickPlayer_Params params {};
	params.C = C;
	params.KickReason = KickReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.KickBan
//		Flags  -> ()
// Parameters:
//		struct FString                                     Target                                                     (Parm, NeedCtorLink)
void AAccessControl::KickBan(const struct FString& Target)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.KickBan");

	AAccessControl_KickBan_Params params {};
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.Kick
//		Flags  -> ()
// Parameters:
//		struct FString                                     Target                                                     (Parm, NeedCtorLink)
void AAccessControl::Kick(const struct FString& Target)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.Kick");

	AAccessControl_Kick_Params params {};
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.GetControllerFromString
//		Flags  -> ()
// Parameters:
//		struct FString                                     Target                                                     (Parm, NeedCtorLink)
//		class AController*                                 ReturnValue                                                (Parm, OutParm, ReturnParm)
class AController* AAccessControl::GetControllerFromString(const struct FString& Target)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.GetControllerFromString");

	AAccessControl_GetControllerFromString_Params params {};
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.RequiresPassword
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AAccessControl::RequiresPassword()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.RequiresPassword");

	AAccessControl_RequiresPassword_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.SetGamePassword
//		Flags  -> ()
// Parameters:
//		struct FString                                     P                                                          (Parm, NeedCtorLink)
void AAccessControl::SetGamePassword(const struct FString& P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.SetGamePassword");

	AAccessControl_SetGamePassword_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.SetAdminPassword
//		Flags  -> ()
// Parameters:
//		struct FString                                     P                                                          (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AAccessControl::SetAdminPassword(const struct FString& P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.SetAdminPassword");

	AAccessControl_SetAdminPassword_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.IsAdmin
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           P                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AAccessControl::IsAdmin(class APlayerController* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.IsAdmin");

	AAccessControl_IsAdmin_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.Destroyed
//		Flags  -> ()
void AAccessControl::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.Destroyed");

	AAccessControl_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AccessControl.PostBeginPlay
//		Flags  -> ()
void AAccessControl::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.PostBeginPlay");

	AAccessControl_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Admin.ServerSwitch
//		Flags  -> ()
// Parameters:
//		struct FString                                     URL                                                        (Parm, NeedCtorLink)
void AAdmin::ServerSwitch(const struct FString& URL)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Admin.ServerSwitch");

	AAdmin_ServerSwitch_Params params {};
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Admin.Switch
//		Flags  -> ()
// Parameters:
//		struct FString                                     URL                                                        (Parm, NeedCtorLink)
void AAdmin::Switch(const struct FString& URL)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Admin.Switch");

	AAdmin_Switch_Params params {};
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Admin.ServerRestartMap
//		Flags  -> ()
void AAdmin::ServerRestartMap()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Admin.ServerRestartMap");

	AAdmin_ServerRestartMap_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Admin.RestartMap
//		Flags  -> ()
void AAdmin::RestartMap()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Admin.RestartMap");

	AAdmin_RestartMap_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Admin.PlayerList
//		Flags  -> ()
void AAdmin::PlayerList()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Admin.PlayerList");

	AAdmin_PlayerList_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Admin.ServerKick
//		Flags  -> ()
// Parameters:
//		struct FString                                     S                                                          (Parm, NeedCtorLink)
void AAdmin::ServerKick(const struct FString& S)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Admin.ServerKick");

	AAdmin_ServerKick_Params params {};
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Admin.Kick
//		Flags  -> ()
// Parameters:
//		struct FString                                     S                                                          (Parm, NeedCtorLink)
void AAdmin::Kick(const struct FString& S)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Admin.Kick");

	AAdmin_Kick_Params params {};
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Admin.ServerKickBan
//		Flags  -> ()
// Parameters:
//		struct FString                                     S                                                          (Parm, NeedCtorLink)
void AAdmin::ServerKickBan(const struct FString& S)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Admin.ServerKickBan");

	AAdmin_ServerKickBan_Params params {};
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Admin.KickBan
//		Flags  -> ()
// Parameters:
//		struct FString                                     S                                                          (Parm, NeedCtorLink)
void AAdmin::KickBan(const struct FString& S)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Admin.KickBan");

	AAdmin_KickBan_Params params {};
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Admin.ServerAdmin
//		Flags  -> ()
// Parameters:
//		struct FString                                     CommandLine                                                (Parm, NeedCtorLink)
void AAdmin::ServerAdmin(const struct FString& CommandLine)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Admin.ServerAdmin");

	AAdmin_ServerAdmin_Params params {};
	params.CommandLine = CommandLine;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Admin.Admin
//		Flags  -> ()
// Parameters:
//		struct FString                                     CommandLine                                                (Parm, NeedCtorLink)
void AAdmin::Admin(const struct FString& CommandLine)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Admin.Admin");

	AAdmin_Admin_Params params {};
	params.CommandLine = CommandLine;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Admin.PostBeginPlay
//		Flags  -> ()
void AAdmin::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Admin.PostBeginPlay");

	AAdmin_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.EmitterSpawnable.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void AEmitterSpawnable::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.EmitterSpawnable.ReplicatedEvent");

	AEmitterSpawnable_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.EmitterSpawnable.SetTemplate
//		Flags  -> ()
// Parameters:
//		class UParticleSystem*                             NewTemplate                                                (Parm)
//		bool                                               bDestroyOnFinish                                           (OptionalParm, Parm)
void AEmitterSpawnable::SetTemplate(class UParticleSystem* NewTemplate, bool bDestroyOnFinish)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.EmitterSpawnable.SetTemplate");

	AEmitterSpawnable_SetTemplate_Params params {};
	params.NewTemplate = NewTemplate;
	params.bDestroyOnFinish = bDestroyOnFinish;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KAsset.DoKismetAttachment
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Attachment                                                 (Parm)
//		class USeqAct_AttachToActor*                       Action                                                     (Parm)
void AKAsset::DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KAsset.DoKismetAttachment");

	AKAsset_DoKismetAttachment_Params params {};
	params.Attachment = Attachment;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KAsset.OnTeleport
//		Flags  -> ()
// Parameters:
//		class USeqAct_Teleport*                            inAction                                                   (Parm)
void AKAsset::OnTeleport(class USeqAct_Teleport* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KAsset.OnTeleport");

	AKAsset_OnTeleport_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KAsset.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void AKAsset::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KAsset.OnToggle");

	AKAsset_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KAsset.TakeRadiusDamage
//		Flags  -> ()
// Parameters:
//		class AController*                                 InstigatedBy                                               (Parm)
//		float                                              BaseDamage                                                 (Parm)
//		float                                              DamageRadius                                               (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		float                                              Momentum                                                   (Parm)
//		struct FVector                                     HurtOrigin                                                 (Parm)
//		bool                                               bFullDamage                                                (Parm)
//		class AActor*                                      DamageCauser                                               (Parm)
//		float                                              DamageFalloffExponent                                      (OptionalParm, Parm)
void AKAsset::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KAsset.TakeRadiusDamage");

	AKAsset_TakeRadiusDamage_Params params {};
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KAsset.TakeDamage
//		Flags  -> (Simulated, Operator, Static, HasOptionalParms, Const, Public, Protected, DLLImport, K2Override, K2Pure)
// Parameters:
//		int                                                Damage                                                     (Parm)
//		class AController*                                 EventInstigator                                            (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     Momentum                                                   (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (OptionalParm, Parm)
//		class AActor*                                      DamageCauser                                               (OptionalParm, Parm)
void AKAsset::STATIC_TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KAsset.TakeDamage");

	AKAsset_TakeDamage_Params params {};
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KAsset.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void AKAsset::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KAsset.ReplicatedEvent");

	AKAsset_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KAsset.SetMeshAndPhysAsset
//		Flags  -> ()
// Parameters:
//		class USkeletalMesh*                               NewMesh                                                    (Parm)
//		class UPhysicsAsset*                               NewPhysAsset                                               (Parm)
void AKAsset::SetMeshAndPhysAsset(class USkeletalMesh* NewMesh, class UPhysicsAsset* NewPhysAsset)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KAsset.SetMeshAndPhysAsset");

	AKAsset_SetMeshAndPhysAsset_Params params {};
	params.NewMesh = NewMesh;
	params.NewPhysAsset = NewPhysAsset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KAsset.PostBeginPlay
//		Flags  -> ()
void AKAsset::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KAsset.PostBeginPlay");

	AKAsset_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_ControlMovieTexture.Activated
//		Flags  -> ()
// Parameters:
void USeqAct_ControlMovieTexture::Activated()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ControlMovieTexture.Activated");

	USeqAct_ControlMovieTexture_Activated_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FaceFXAsset.UnmountFaceFXAnimSet
//		Flags  -> ()
// Parameters:
//		class UFaceFXAnimSet*                              AnimSet                                                    (Parm)
void UFaceFXAsset::UnmountFaceFXAnimSet(class UFaceFXAnimSet* AnimSet)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FaceFXAsset.UnmountFaceFXAnimSet");

	UFaceFXAsset_UnmountFaceFXAnimSet_Params params {};
	params.AnimSet = AnimSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FaceFXAsset.MountFaceFXAnimSet
//		Flags  -> ()
// Parameters:
//		class UFaceFXAnimSet*                              AnimSet                                                    (Parm)
void UFaceFXAsset::MountFaceFXAnimSet(class UFaceFXAnimSet* AnimSet)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FaceFXAsset.MountFaceFXAnimSet");

	UFaceFXAsset_MountFaceFXAnimSet_Params params {};
	params.AnimSet = AnimSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Font.GetStringHeightAndWidth
//		Flags  -> ()
// Parameters:
//		struct FString                                     InString                                                   (Const, Parm, OutParm, NeedCtorLink)
//		int                                                Height                                                     (Parm, OutParm)
//		int                                                Width                                                      (Parm, OutParm)
void UFont::GetStringHeightAndWidth(struct FString* InString, int* Height, int* Width)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Font.GetStringHeightAndWidth");

	UFont_GetStringHeightAndWidth_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InString != nullptr)
		*InString = params.InString;
	if (Height != nullptr)
		*Height = params.Height;
	if (Width != nullptr)
		*Width = params.Width;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Font.GetMaxCharHeight
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UFont::GetMaxCharHeight()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Font.GetMaxCharHeight");

	UFont_GetMaxCharHeight_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Font.GetAuthoredViewportHeight
//		Flags  -> ()
// Parameters:
//		float                                              ViewportHeight                                             (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UFont::GetAuthoredViewportHeight(float ViewportHeight)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Font.GetAuthoredViewportHeight");

	UFont_GetAuthoredViewportHeight_Params params {};
	params.ViewportHeight = ViewportHeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Font.GetScalingFactor
//		Flags  -> ()
// Parameters:
//		float                                              HeightTest                                                 (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UFont::GetScalingFactor(float HeightTest)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Font.GetScalingFactor");

	UFont_GetScalingFactor_Params params {};
	params.HeightTest = HeightTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Font.GetResolutionPageIndex
//		Flags  -> ()
// Parameters:
//		float                                              HeightTest                                                 (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UFont::GetResolutionPageIndex(float HeightTest)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Font.GetResolutionPageIndex");

	UFont_GetResolutionPageIndex_Params params {};
	params.HeightTest = HeightTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MultiFont.GetResolutionTestTableIndex
//		Flags  -> ()
// Parameters:
//		float                                              HeightTest                                                 (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UMultiFont::GetResolutionTestTableIndex(float HeightTest)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MultiFont.GetResolutionTestTableIndex");

	UMultiFont_GetResolutionTestTableIndex_Params params {};
	params.HeightTest = HeightTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFeedbackManager.PauseWaveform
//		Flags  -> ()
// Parameters:
//		bool                                               bPause                                                     (OptionalParm, Parm)
void UForceFeedbackManager::PauseWaveform(bool bPause)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackManager.PauseWaveform");

	UForceFeedbackManager_PauseWaveform_Params params {};
	params.bPause = bPause;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFeedbackManager.StopForceFeedbackWaveform
//		Flags  -> ()
// Parameters:
//		class UForceFeedbackWaveform*                      WaveForm                                                   (OptionalParm, Parm)
void UForceFeedbackManager::StopForceFeedbackWaveform(class UForceFeedbackWaveform* WaveForm)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackManager.StopForceFeedbackWaveform");

	UForceFeedbackManager_StopForceFeedbackWaveform_Params params {};
	params.WaveForm = WaveForm;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFeedbackManager.PlayForceFeedbackWaveform
//		Flags  -> ()
// Parameters:
//		class UForceFeedbackWaveform*                      WaveForm                                                   (Parm)
//		class AActor*                                      WaveInstigator                                             (Parm)
void UForceFeedbackManager::PlayForceFeedbackWaveform(class UForceFeedbackWaveform* WaveForm, class AActor* WaveInstigator)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackManager.PlayForceFeedbackWaveform");

	UForceFeedbackManager_PlayForceFeedbackWaveform_Params params {};
	params.WaveForm = WaveForm;
	params.WaveInstigator = WaveInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEvents.GetFilename
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UGameplayEvents::GetFilename()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEvents.GetFilename");

	UGameplayEvents_GetFilename_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEvents.CloseStatsFile
//		Flags  -> ()
void UGameplayEvents::CloseStatsFile()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEvents.CloseStatsFile");

	UGameplayEvents_CloseStatsFile_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEvents.OpenStatsFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameplayEvents::OpenStatsFile(const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEvents.OpenStatsFile");

	UGameplayEvents_OpenStatsFile_Params params {};
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsReader.GetSessionDuration
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UGameplayEventsReader::GetSessionDuration()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.GetSessionDuration");

	UGameplayEventsReader_GetSessionDuration_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsReader.GetSessionEnd
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UGameplayEventsReader::GetSessionEnd()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.GetSessionEnd");

	UGameplayEventsReader_GetSessionEnd_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsReader.GetSessionStart
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UGameplayEventsReader::GetSessionStart()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.GetSessionStart");

	UGameplayEventsReader_GetSessionStart_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsReader.GetSessionTimestamp
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UGameplayEventsReader::GetSessionTimestamp()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.GetSessionTimestamp");

	UGameplayEventsReader_GetSessionTimestamp_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsReader.GetPlatform
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UGameplayEventsReader::GetPlatform()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.GetPlatform");

	UGameplayEventsReader_GetPlatform_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsReader.GetTitleID
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UGameplayEventsReader::GetTitleID()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.GetTitleID");

	UGameplayEventsReader_GetTitleID_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsReader.GetSessionID
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UGameplayEventsReader::GetSessionID()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.GetSessionID");

	UGameplayEventsReader_GetSessionID_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsReader.ProcessStreamEnd
//		Flags  -> ()
void UGameplayEventsReader::ProcessStreamEnd()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.ProcessStreamEnd");

	UGameplayEventsReader_ProcessStreamEnd_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsReader.ProcessStream
//		Flags  -> ()
void UGameplayEventsReader::ProcessStream()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.ProcessStream");

	UGameplayEventsReader_ProcessStream_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsReader.ProcessStreamStart
//		Flags  -> ()
void UGameplayEventsReader::ProcessStreamStart()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.ProcessStreamStart");

	UGameplayEventsReader_ProcessStreamStart_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsReader.UnregisterHandler
//		Flags  -> ()
// Parameters:
//		class UGameplayEventsHandler*                      ExistingHandler                                            (Parm)
void UGameplayEventsReader::UnregisterHandler(class UGameplayEventsHandler* ExistingHandler)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.UnregisterHandler");

	UGameplayEventsReader_UnregisterHandler_Params params {};
	params.ExistingHandler = ExistingHandler;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsReader.RegisterHandler
//		Flags  -> ()
// Parameters:
//		class UGameplayEventsHandler*                      NewHandler                                                 (Parm)
void UGameplayEventsReader::RegisterHandler(class UGameplayEventsHandler* NewHandler)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.RegisterHandler");

	UGameplayEventsReader_RegisterHandler_Params params {};
	params.NewHandler = NewHandler;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsReader.SerializeHeader
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameplayEventsReader::SerializeHeader()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.SerializeHeader");

	UGameplayEventsReader_SerializeHeader_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsReader.CloseStatsFile
//		Flags  -> ()
void UGameplayEventsReader::CloseStatsFile()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.CloseStatsFile");

	UGameplayEventsReader_CloseStatsFile_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsReader.OpenStatsFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameplayEventsReader::OpenStatsFile(const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.OpenStatsFile");

	UGameplayEventsReader_OpenStatsFile_Params params {};
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.RecordCoverLinkFireLinks
//		Flags  -> ()
// Parameters:
//		class ACoverLink*                                  Link                                                       (Parm)
//		class AController*                                 Player                                                     (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UGameplayEventsWriterBase::RecordCoverLinkFireLinks(class ACoverLink* Link, class AController* Player)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.RecordCoverLinkFireLinks");

	UGameplayEventsWriterBase_RecordCoverLinkFireLinks_Params params {};
	params.Link = Link;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.RecordAIPathFail
//		Flags  -> ()
// Parameters:
//		class AController*                                 AI                                                         (Parm)
//		struct FString                                     Reason                                                     (Parm, CoerceParm, NeedCtorLink)
//		struct FVector                                     Dest                                                       (Parm)
void UGameplayEventsWriterBase::RecordAIPathFail(class AController* AI, const struct FString& Reason, const struct FVector& Dest)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.RecordAIPathFail");

	UGameplayEventsWriterBase_RecordAIPathFail_Params params {};
	params.AI = AI;
	params.Reason = Reason;
	params.Dest = Dest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.LogSystemPollEvents
//		Flags  -> ()
void UGameplayEventsWriterBase::LogSystemPollEvents()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogSystemPollEvents");

	UGameplayEventsWriterBase_LogSystemPollEvents_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.LogProjectileIntEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		class UClass*                                      Proj                                                       (Parm)
//		int                                                Value                                                      (Parm)
void UGameplayEventsWriterBase::LogProjectileIntEvent(int EventID, class AController* Player, class UClass* Proj, int Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogProjectileIntEvent");

	UGameplayEventsWriterBase_LogProjectileIntEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.Proj = Proj;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.LogDamageEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		class UClass*                                      dmgType                                                    (Parm)
//		class AController*                                 Target                                                     (Parm)
//		int                                                Amount                                                     (Parm)
void UGameplayEventsWriterBase::LogDamageEvent(int EventID, class AController* Player, class UClass* dmgType, class AController* Target, int Amount)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogDamageEvent");

	UGameplayEventsWriterBase_LogDamageEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.dmgType = dmgType;
	params.Target = Target;
	params.Amount = Amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.LogWeaponIntEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		class UClass*                                      WeaponClass                                                (Parm)
//		int                                                Value                                                      (Parm)
void UGameplayEventsWriterBase::LogWeaponIntEvent(int EventID, class AController* Player, class UClass* WeaponClass, int Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogWeaponIntEvent");

	UGameplayEventsWriterBase_LogWeaponIntEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.WeaponClass = WeaponClass;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.LogPlayerPlayerEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		class AController*                                 Target                                                     (Parm)
void UGameplayEventsWriterBase::LogPlayerPlayerEvent(int EventID, class AController* Player, class AController* Target)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogPlayerPlayerEvent");

	UGameplayEventsWriterBase_LogPlayerPlayerEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.LogPlayerKillDeath
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		int                                                KillType                                                   (Parm)
//		class AController*                                 Killer                                                     (Parm)
//		class UClass*                                      dmgType                                                    (Parm)
//		class AController*                                 Dead                                                       (Parm)
void UGameplayEventsWriterBase::LogPlayerKillDeath(int EventID, int KillType, class AController* Killer, class UClass* dmgType, class AController* Dead)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogPlayerKillDeath");

	UGameplayEventsWriterBase_LogPlayerKillDeath_Params params {};
	params.EventID = EventID;
	params.KillType = KillType;
	params.Killer = Killer;
	params.dmgType = dmgType;
	params.Dead = Dead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.LogAllPlayerPositionsEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
void UGameplayEventsWriterBase::LogAllPlayerPositionsEvent(int EventID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogAllPlayerPositionsEvent");

	UGameplayEventsWriterBase_LogAllPlayerPositionsEvent_Params params {};
	params.EventID = EventID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.LogPlayerLoginChange
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		struct FString                                     PlayerName                                                 (Parm, NeedCtorLink)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		bool                                               bSplitScreen                                               (Parm)
void UGameplayEventsWriterBase::LogPlayerLoginChange(int EventID, class AController* Player, const struct FString& PlayerName, const struct FUniqueNetId& PlayerID, bool bSplitScreen)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogPlayerLoginChange");

	UGameplayEventsWriterBase_LogPlayerLoginChange_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.PlayerName = PlayerName;
	params.PlayerID = PlayerID;
	params.bSplitScreen = bSplitScreen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.LogPlayerSpawnEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		class UClass*                                      PawnClass                                                  (Parm)
//		int                                                TeamID                                                     (Parm)
void UGameplayEventsWriterBase::LogPlayerSpawnEvent(int EventID, class AController* Player, class UClass* PawnClass, int TeamID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogPlayerSpawnEvent");

	UGameplayEventsWriterBase_LogPlayerSpawnEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.PawnClass = PawnClass;
	params.TeamID = TeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.LogPlayerStringEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		struct FString                                     EventString                                                (Parm, NeedCtorLink)
void UGameplayEventsWriterBase::LogPlayerStringEvent(int EventID, class AController* Player, const struct FString& EventString)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogPlayerStringEvent");

	UGameplayEventsWriterBase_LogPlayerStringEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.EventString = EventString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.LogPlayerFloatEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		float                                              Value                                                      (Parm)
void UGameplayEventsWriterBase::LogPlayerFloatEvent(int EventID, class AController* Player, float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogPlayerFloatEvent");

	UGameplayEventsWriterBase_LogPlayerFloatEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.LogPlayerIntEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		int                                                Value                                                      (Parm)
void UGameplayEventsWriterBase::LogPlayerIntEvent(int EventID, class AController* Player, int Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogPlayerIntEvent");

	UGameplayEventsWriterBase_LogPlayerIntEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.LogTeamStringEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class ATeamInfo*                                   Team                                                       (Parm)
//		struct FString                                     Value                                                      (Parm, NeedCtorLink)
void UGameplayEventsWriterBase::LogTeamStringEvent(int EventID, class ATeamInfo* Team, const struct FString& Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogTeamStringEvent");

	UGameplayEventsWriterBase_LogTeamStringEvent_Params params {};
	params.EventID = EventID;
	params.Team = Team;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.LogTeamFloatEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class ATeamInfo*                                   Team                                                       (Parm)
//		float                                              Value                                                      (Parm)
void UGameplayEventsWriterBase::LogTeamFloatEvent(int EventID, class ATeamInfo* Team, float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogTeamFloatEvent");

	UGameplayEventsWriterBase_LogTeamFloatEvent_Params params {};
	params.EventID = EventID;
	params.Team = Team;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.LogTeamIntEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class ATeamInfo*                                   Team                                                       (Parm)
//		int                                                Value                                                      (Parm)
void UGameplayEventsWriterBase::LogTeamIntEvent(int EventID, class ATeamInfo* Team, int Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogTeamIntEvent");

	UGameplayEventsWriterBase_LogTeamIntEvent_Params params {};
	params.EventID = EventID;
	params.Team = Team;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.LogGamePositionEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		struct FVector                                     Position                                                   (Const, Parm, OutParm)
//		float                                              Value                                                      (Parm)
void UGameplayEventsWriterBase::LogGamePositionEvent(int EventID, struct FVector* Position, float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogGamePositionEvent");

	UGameplayEventsWriterBase_LogGamePositionEvent_Params params {};
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Position != nullptr)
		*Position = params.Position;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.LogGameFloatEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		float                                              Value                                                      (Parm)
void UGameplayEventsWriterBase::LogGameFloatEvent(int EventID, float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogGameFloatEvent");

	UGameplayEventsWriterBase_LogGameFloatEvent_Params params {};
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.LogGameStringEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		struct FString                                     Value                                                      (Parm, NeedCtorLink)
void UGameplayEventsWriterBase::LogGameStringEvent(int EventID, const struct FString& Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogGameStringEvent");

	UGameplayEventsWriterBase_LogGameStringEvent_Params params {};
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.LogGameIntEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		int                                                Value                                                      (Parm)
void UGameplayEventsWriterBase::LogGameIntEvent(int EventID, int Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogGameIntEvent");

	UGameplayEventsWriterBase_LogGameIntEvent_Params params {};
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.EndLogging
//		Flags  -> ()
void UGameplayEventsWriterBase::EndLogging()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.EndLogging");

	UGameplayEventsWriterBase_EndLogging_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.ResetLogging
//		Flags  -> ()
// Parameters:
//		float                                              HeartbeatDelta                                             (OptionalParm, Parm)
void UGameplayEventsWriterBase::ResetLogging(float HeartbeatDelta)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.ResetLogging");

	UGameplayEventsWriterBase_ResetLogging_Params params {};
	params.HeartbeatDelta = HeartbeatDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.StartLogging
//		Flags  -> ()
// Parameters:
//		float                                              HeartbeatDelta                                             (OptionalParm, Parm)
void UGameplayEventsWriterBase::StartLogging(float HeartbeatDelta)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.StartLogging");

	UGameplayEventsWriterBase_StartLogging_Params params {};
	params.HeartbeatDelta = HeartbeatDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.GetPlaylistId
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UGameplayEventsWriterBase::GetPlaylistId()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.GetPlaylistId");

	UGameplayEventsWriterBase_GetPlaylistId_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.GetGameTypeId
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UGameplayEventsWriterBase::GetGameTypeId()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.GetGameTypeId");

	UGameplayEventsWriterBase_GetGameTypeId_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.Poll
//		Flags  -> ()
void UGameplayEventsWriterBase::Poll()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.Poll");

	UGameplayEventsWriterBase_Poll_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.StopPolling
//		Flags  -> ()
void UGameplayEventsWriterBase::StopPolling()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.StopPolling");

	UGameplayEventsWriterBase_StopPolling_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.StartPolling
//		Flags  -> ()
// Parameters:
//		float                                              HearbeatDelta                                              (Parm)
void UGameplayEventsWriterBase::StartPolling(float HearbeatDelta)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.StartPolling");

	UGameplayEventsWriterBase_StartPolling_Params params {};
	params.HearbeatDelta = HearbeatDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriterBase.IsSessionInProgress
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameplayEventsWriterBase::IsSessionInProgress()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.IsSessionInProgress");

	UGameplayEventsWriterBase_IsSessionInProgress_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.RecordCoverLinkFireLinks
//		Flags  -> ()
// Parameters:
//		class ACoverLink*                                  Link                                                       (Parm)
//		class AController*                                 Player                                                     (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UGameplayEventsUploadAnalytics::RecordCoverLinkFireLinks(class ACoverLink* Link, class AController* Player)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.RecordCoverLinkFireLinks");

	UGameplayEventsUploadAnalytics_RecordCoverLinkFireLinks_Params params {};
	params.Link = Link;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.RecordAIPathFail
//		Flags  -> ()
// Parameters:
//		class AController*                                 AI                                                         (Parm)
//		struct FString                                     Reason                                                     (Parm, CoerceParm, NeedCtorLink)
//		struct FVector                                     Dest                                                       (Parm)
void UGameplayEventsUploadAnalytics::RecordAIPathFail(class AController* AI, const struct FString& Reason, const struct FVector& Dest)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.RecordAIPathFail");

	UGameplayEventsUploadAnalytics_RecordAIPathFail_Params params {};
	params.AI = AI;
	params.Reason = Reason;
	params.Dest = Dest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.GetGenericParamListEntry
//		Flags  -> ()
// Parameters:
//		class UGenericParamListStatEntry*                  ReturnValue                                                (Parm, OutParm, ReturnParm)
class UGenericParamListStatEntry* UGameplayEventsUploadAnalytics::GetGenericParamListEntry()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.GetGenericParamListEntry");

	UGameplayEventsUploadAnalytics_GetGenericParamListEntry_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.LogProjectileIntEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		class UClass*                                      Proj                                                       (Parm)
//		int                                                Value                                                      (Parm)
void UGameplayEventsUploadAnalytics::LogProjectileIntEvent(int EventID, class AController* Player, class UClass* Proj, int Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogProjectileIntEvent");

	UGameplayEventsUploadAnalytics_LogProjectileIntEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.Proj = Proj;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.LogDamageEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		class UClass*                                      dmgType                                                    (Parm)
//		class AController*                                 Target                                                     (Parm)
//		int                                                Amount                                                     (Parm)
void UGameplayEventsUploadAnalytics::LogDamageEvent(int EventID, class AController* Player, class UClass* dmgType, class AController* Target, int Amount)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogDamageEvent");

	UGameplayEventsUploadAnalytics_LogDamageEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.dmgType = dmgType;
	params.Target = Target;
	params.Amount = Amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.LogWeaponIntEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		class UClass*                                      WeaponClass                                                (Parm)
//		int                                                Value                                                      (Parm)
void UGameplayEventsUploadAnalytics::LogWeaponIntEvent(int EventID, class AController* Player, class UClass* WeaponClass, int Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogWeaponIntEvent");

	UGameplayEventsUploadAnalytics_LogWeaponIntEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.WeaponClass = WeaponClass;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.LogPlayerPlayerEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		class AController*                                 Target                                                     (Parm)
void UGameplayEventsUploadAnalytics::LogPlayerPlayerEvent(int EventID, class AController* Player, class AController* Target)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogPlayerPlayerEvent");

	UGameplayEventsUploadAnalytics_LogPlayerPlayerEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.LogPlayerKillDeath
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		int                                                KillType                                                   (Parm)
//		class AController*                                 Killer                                                     (Parm)
//		class UClass*                                      dmgType                                                    (Parm)
//		class AController*                                 Dead                                                       (Parm)
void UGameplayEventsUploadAnalytics::LogPlayerKillDeath(int EventID, int KillType, class AController* Killer, class UClass* dmgType, class AController* Dead)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogPlayerKillDeath");

	UGameplayEventsUploadAnalytics_LogPlayerKillDeath_Params params {};
	params.EventID = EventID;
	params.KillType = KillType;
	params.Killer = Killer;
	params.dmgType = dmgType;
	params.Dead = Dead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.LogAllPlayerPositionsEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
void UGameplayEventsUploadAnalytics::LogAllPlayerPositionsEvent(int EventID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogAllPlayerPositionsEvent");

	UGameplayEventsUploadAnalytics_LogAllPlayerPositionsEvent_Params params {};
	params.EventID = EventID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.LogPlayerLoginChange
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		struct FString                                     PlayerName                                                 (Parm, NeedCtorLink)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		bool                                               bSplitScreen                                               (Parm)
void UGameplayEventsUploadAnalytics::LogPlayerLoginChange(int EventID, class AController* Player, const struct FString& PlayerName, const struct FUniqueNetId& PlayerID, bool bSplitScreen)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogPlayerLoginChange");

	UGameplayEventsUploadAnalytics_LogPlayerLoginChange_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.PlayerName = PlayerName;
	params.PlayerID = PlayerID;
	params.bSplitScreen = bSplitScreen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.LogPlayerSpawnEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		class UClass*                                      PawnClass                                                  (Parm)
//		int                                                TeamID                                                     (Parm)
void UGameplayEventsUploadAnalytics::LogPlayerSpawnEvent(int EventID, class AController* Player, class UClass* PawnClass, int TeamID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogPlayerSpawnEvent");

	UGameplayEventsUploadAnalytics_LogPlayerSpawnEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.PawnClass = PawnClass;
	params.TeamID = TeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.LogPlayerStringEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		struct FString                                     EventString                                                (Parm, NeedCtorLink)
void UGameplayEventsUploadAnalytics::LogPlayerStringEvent(int EventID, class AController* Player, const struct FString& EventString)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogPlayerStringEvent");

	UGameplayEventsUploadAnalytics_LogPlayerStringEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.EventString = EventString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.LogPlayerFloatEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		float                                              Value                                                      (Parm)
void UGameplayEventsUploadAnalytics::LogPlayerFloatEvent(int EventID, class AController* Player, float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogPlayerFloatEvent");

	UGameplayEventsUploadAnalytics_LogPlayerFloatEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.LogPlayerIntEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		int                                                Value                                                      (Parm)
void UGameplayEventsUploadAnalytics::LogPlayerIntEvent(int EventID, class AController* Player, int Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogPlayerIntEvent");

	UGameplayEventsUploadAnalytics_LogPlayerIntEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.LogTeamStringEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class ATeamInfo*                                   Team                                                       (Parm)
//		struct FString                                     Value                                                      (Parm, NeedCtorLink)
void UGameplayEventsUploadAnalytics::LogTeamStringEvent(int EventID, class ATeamInfo* Team, const struct FString& Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogTeamStringEvent");

	UGameplayEventsUploadAnalytics_LogTeamStringEvent_Params params {};
	params.EventID = EventID;
	params.Team = Team;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.LogTeamFloatEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class ATeamInfo*                                   Team                                                       (Parm)
//		float                                              Value                                                      (Parm)
void UGameplayEventsUploadAnalytics::LogTeamFloatEvent(int EventID, class ATeamInfo* Team, float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogTeamFloatEvent");

	UGameplayEventsUploadAnalytics_LogTeamFloatEvent_Params params {};
	params.EventID = EventID;
	params.Team = Team;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.LogTeamIntEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class ATeamInfo*                                   Team                                                       (Parm)
//		int                                                Value                                                      (Parm)
void UGameplayEventsUploadAnalytics::LogTeamIntEvent(int EventID, class ATeamInfo* Team, int Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogTeamIntEvent");

	UGameplayEventsUploadAnalytics_LogTeamIntEvent_Params params {};
	params.EventID = EventID;
	params.Team = Team;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.LogGamePositionEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		struct FVector                                     Position                                                   (Const, Parm, OutParm)
//		float                                              Value                                                      (Parm)
void UGameplayEventsUploadAnalytics::LogGamePositionEvent(int EventID, struct FVector* Position, float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogGamePositionEvent");

	UGameplayEventsUploadAnalytics_LogGamePositionEvent_Params params {};
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Position != nullptr)
		*Position = params.Position;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.LogGameFloatEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		float                                              Value                                                      (Parm)
void UGameplayEventsUploadAnalytics::LogGameFloatEvent(int EventID, float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogGameFloatEvent");

	UGameplayEventsUploadAnalytics_LogGameFloatEvent_Params params {};
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.LogGameStringEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		struct FString                                     Value                                                      (Parm, NeedCtorLink)
void UGameplayEventsUploadAnalytics::LogGameStringEvent(int EventID, const struct FString& Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogGameStringEvent");

	UGameplayEventsUploadAnalytics_LogGameStringEvent_Params params {};
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.LogGameIntEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		int                                                Value                                                      (Parm)
void UGameplayEventsUploadAnalytics::LogGameIntEvent(int EventID, int Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogGameIntEvent");

	UGameplayEventsUploadAnalytics_LogGameIntEvent_Params params {};
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.EndLogging
//		Flags  -> ()
void UGameplayEventsUploadAnalytics::EndLogging()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.EndLogging");

	UGameplayEventsUploadAnalytics_EndLogging_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.ResetLogging
//		Flags  -> ()
// Parameters:
//		float                                              HeartbeatDelta                                             (OptionalParm, Parm)
void UGameplayEventsUploadAnalytics::ResetLogging(float HeartbeatDelta)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.ResetLogging");

	UGameplayEventsUploadAnalytics_ResetLogging_Params params {};
	params.HeartbeatDelta = HeartbeatDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsUploadAnalytics.StartLogging
//		Flags  -> ()
// Parameters:
//		float                                              HeartbeatDelta                                             (OptionalParm, Parm)
void UGameplayEventsUploadAnalytics::StartLogging(float HeartbeatDelta)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.StartLogging");

	UGameplayEventsUploadAnalytics_StartLogging_Params params {};
	params.HeartbeatDelta = HeartbeatDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.RecordCoverLinkFireLinks
//		Flags  -> ()
// Parameters:
//		class ACoverLink*                                  Link                                                       (Parm)
//		class AController*                                 Player                                                     (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UGameplayEventsWriter::RecordCoverLinkFireLinks(class ACoverLink* Link, class AController* Player)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.RecordCoverLinkFireLinks");

	UGameplayEventsWriter_RecordCoverLinkFireLinks_Params params {};
	params.Link = Link;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.RecordAIPathFail
//		Flags  -> ()
// Parameters:
//		class AController*                                 AI                                                         (Parm)
//		struct FString                                     Reason                                                     (Parm, CoerceParm, NeedCtorLink)
//		struct FVector                                     Dest                                                       (Parm)
void UGameplayEventsWriter::RecordAIPathFail(class AController* AI, const struct FString& Reason, const struct FVector& Dest)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.RecordAIPathFail");

	UGameplayEventsWriter_RecordAIPathFail_Params params {};
	params.AI = AI;
	params.Reason = Reason;
	params.Dest = Dest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.GetGenericParamListEntry
//		Flags  -> ()
// Parameters:
//		class UGenericParamListStatEntry*                  ReturnValue                                                (Parm, OutParm, ReturnParm)
class UGenericParamListStatEntry* UGameplayEventsWriter::GetGenericParamListEntry()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.GetGenericParamListEntry");

	UGameplayEventsWriter_GetGenericParamListEntry_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.LogSystemPollEvents
//		Flags  -> ()
void UGameplayEventsWriter::LogSystemPollEvents()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogSystemPollEvents");

	UGameplayEventsWriter_LogSystemPollEvents_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.LogProjectileIntEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		class UClass*                                      Proj                                                       (Parm)
//		int                                                Value                                                      (Parm)
void UGameplayEventsWriter::LogProjectileIntEvent(int EventID, class AController* Player, class UClass* Proj, int Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogProjectileIntEvent");

	UGameplayEventsWriter_LogProjectileIntEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.Proj = Proj;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.LogDamageEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		class UClass*                                      dmgType                                                    (Parm)
//		class AController*                                 Target                                                     (Parm)
//		int                                                Amount                                                     (Parm)
void UGameplayEventsWriter::LogDamageEvent(int EventID, class AController* Player, class UClass* dmgType, class AController* Target, int Amount)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogDamageEvent");

	UGameplayEventsWriter_LogDamageEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.dmgType = dmgType;
	params.Target = Target;
	params.Amount = Amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.LogWeaponIntEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		class UClass*                                      WeaponClass                                                (Parm)
//		int                                                Value                                                      (Parm)
void UGameplayEventsWriter::LogWeaponIntEvent(int EventID, class AController* Player, class UClass* WeaponClass, int Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogWeaponIntEvent");

	UGameplayEventsWriter_LogWeaponIntEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.WeaponClass = WeaponClass;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.LogPlayerPlayerEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		class AController*                                 Target                                                     (Parm)
void UGameplayEventsWriter::LogPlayerPlayerEvent(int EventID, class AController* Player, class AController* Target)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogPlayerPlayerEvent");

	UGameplayEventsWriter_LogPlayerPlayerEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.LogPlayerKillDeath
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		int                                                KillType                                                   (Parm)
//		class AController*                                 Killer                                                     (Parm)
//		class UClass*                                      dmgType                                                    (Parm)
//		class AController*                                 Dead                                                       (Parm)
void UGameplayEventsWriter::LogPlayerKillDeath(int EventID, int KillType, class AController* Killer, class UClass* dmgType, class AController* Dead)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogPlayerKillDeath");

	UGameplayEventsWriter_LogPlayerKillDeath_Params params {};
	params.EventID = EventID;
	params.KillType = KillType;
	params.Killer = Killer;
	params.dmgType = dmgType;
	params.Dead = Dead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.LogAllPlayerPositionsEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
void UGameplayEventsWriter::LogAllPlayerPositionsEvent(int EventID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogAllPlayerPositionsEvent");

	UGameplayEventsWriter_LogAllPlayerPositionsEvent_Params params {};
	params.EventID = EventID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.LogPlayerLoginChange
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		struct FString                                     PlayerName                                                 (Parm, NeedCtorLink)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		bool                                               bSplitScreen                                               (Parm)
void UGameplayEventsWriter::LogPlayerLoginChange(int EventID, class AController* Player, const struct FString& PlayerName, const struct FUniqueNetId& PlayerID, bool bSplitScreen)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogPlayerLoginChange");

	UGameplayEventsWriter_LogPlayerLoginChange_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.PlayerName = PlayerName;
	params.PlayerID = PlayerID;
	params.bSplitScreen = bSplitScreen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.LogPlayerSpawnEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		class UClass*                                      PawnClass                                                  (Parm)
//		int                                                TeamID                                                     (Parm)
void UGameplayEventsWriter::LogPlayerSpawnEvent(int EventID, class AController* Player, class UClass* PawnClass, int TeamID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogPlayerSpawnEvent");

	UGameplayEventsWriter_LogPlayerSpawnEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.PawnClass = PawnClass;
	params.TeamID = TeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.LogPlayerStringEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		struct FString                                     EventString                                                (Parm, NeedCtorLink)
void UGameplayEventsWriter::LogPlayerStringEvent(int EventID, class AController* Player, const struct FString& EventString)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogPlayerStringEvent");

	UGameplayEventsWriter_LogPlayerStringEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.EventString = EventString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.LogPlayerFloatEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		float                                              Value                                                      (Parm)
void UGameplayEventsWriter::LogPlayerFloatEvent(int EventID, class AController* Player, float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogPlayerFloatEvent");

	UGameplayEventsWriter_LogPlayerFloatEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.LogPlayerIntEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class AController*                                 Player                                                     (Parm)
//		int                                                Value                                                      (Parm)
void UGameplayEventsWriter::LogPlayerIntEvent(int EventID, class AController* Player, int Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogPlayerIntEvent");

	UGameplayEventsWriter_LogPlayerIntEvent_Params params {};
	params.EventID = EventID;
	params.Player = Player;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.LogTeamStringEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class ATeamInfo*                                   Team                                                       (Parm)
//		struct FString                                     Value                                                      (Parm, NeedCtorLink)
void UGameplayEventsWriter::LogTeamStringEvent(int EventID, class ATeamInfo* Team, const struct FString& Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogTeamStringEvent");

	UGameplayEventsWriter_LogTeamStringEvent_Params params {};
	params.EventID = EventID;
	params.Team = Team;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.LogTeamFloatEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class ATeamInfo*                                   Team                                                       (Parm)
//		float                                              Value                                                      (Parm)
void UGameplayEventsWriter::LogTeamFloatEvent(int EventID, class ATeamInfo* Team, float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogTeamFloatEvent");

	UGameplayEventsWriter_LogTeamFloatEvent_Params params {};
	params.EventID = EventID;
	params.Team = Team;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.LogTeamIntEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		class ATeamInfo*                                   Team                                                       (Parm)
//		int                                                Value                                                      (Parm)
void UGameplayEventsWriter::LogTeamIntEvent(int EventID, class ATeamInfo* Team, int Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogTeamIntEvent");

	UGameplayEventsWriter_LogTeamIntEvent_Params params {};
	params.EventID = EventID;
	params.Team = Team;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.LogGamePositionEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		struct FVector                                     Position                                                   (Const, Parm, OutParm)
//		float                                              Value                                                      (Parm)
void UGameplayEventsWriter::LogGamePositionEvent(int EventID, struct FVector* Position, float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogGamePositionEvent");

	UGameplayEventsWriter_LogGamePositionEvent_Params params {};
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Position != nullptr)
		*Position = params.Position;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.LogGameFloatEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		float                                              Value                                                      (Parm)
void UGameplayEventsWriter::LogGameFloatEvent(int EventID, float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogGameFloatEvent");

	UGameplayEventsWriter_LogGameFloatEvent_Params params {};
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.LogGameStringEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		struct FString                                     Value                                                      (Parm, NeedCtorLink)
void UGameplayEventsWriter::LogGameStringEvent(int EventID, const struct FString& Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogGameStringEvent");

	UGameplayEventsWriter_LogGameStringEvent_Params params {};
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.LogGameIntEvent
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
//		int                                                Value                                                      (Parm)
void UGameplayEventsWriter::LogGameIntEvent(int EventID, int Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogGameIntEvent");

	UGameplayEventsWriter_LogGameIntEvent_Params params {};
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.EndLogging
//		Flags  -> ()
void UGameplayEventsWriter::EndLogging()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.EndLogging");

	UGameplayEventsWriter_EndLogging_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.ResetLogging
//		Flags  -> ()
// Parameters:
//		float                                              HeartbeatDelta                                             (OptionalParm, Parm)
void UGameplayEventsWriter::ResetLogging(float HeartbeatDelta)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.ResetLogging");

	UGameplayEventsWriter_ResetLogging_Params params {};
	params.HeartbeatDelta = HeartbeatDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.StartLogging
//		Flags  -> ()
// Parameters:
//		float                                              HeartbeatDelta                                             (OptionalParm, Parm)
void UGameplayEventsWriter::StartLogging(float HeartbeatDelta)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.StartLogging");

	UGameplayEventsWriter_StartLogging_Params params {};
	params.HeartbeatDelta = HeartbeatDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.SerializeFooter
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameplayEventsWriter::SerializeFooter()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.SerializeFooter");

	UGameplayEventsWriter_SerializeFooter_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.SerializeHeader
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameplayEventsWriter::SerializeHeader()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.SerializeHeader");

	UGameplayEventsWriter_SerializeHeader_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.CloseStatsFile
//		Flags  -> ()
void UGameplayEventsWriter::CloseStatsFile()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.CloseStatsFile");

	UGameplayEventsWriter_CloseStatsFile_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.OpenStatsFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameplayEventsWriter::OpenStatsFile(const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.OpenStatsFile");

	UGameplayEventsWriter_OpenStatsFile_Params params {};
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsWriter.ResolvePlayerIndex
//		Flags  -> ()
// Parameters:
//		class AController*                                 Player                                                     (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UGameplayEventsWriter::ResolvePlayerIndex(class AController* Player)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.ResolvePlayerIndex");

	UGameplayEventsWriter_ResolvePlayerIndex_Params params {};
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsHandler.RemoveFilter
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
void UGameplayEventsHandler::RemoveFilter(int EventID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsHandler.RemoveFilter");

	UGameplayEventsHandler_RemoveFilter_Params params {};
	params.EventID = EventID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsHandler.AddFilter
//		Flags  -> ()
// Parameters:
//		int                                                EventID                                                    (Parm)
void UGameplayEventsHandler::AddFilter(int EventID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsHandler.AddFilter");

	UGameplayEventsHandler_AddFilter_Params params {};
	params.EventID = EventID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsHandler.ResolveGroupFilters
//		Flags  -> ()
// Parameters:
void UGameplayEventsHandler::ResolveGroupFilters()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsHandler.ResolveGroupFilters");

	UGameplayEventsHandler_ResolveGroupFilters_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsHandler.PostProcessStream
//		Flags  -> ()
void UGameplayEventsHandler::PostProcessStream()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsHandler.PostProcessStream");

	UGameplayEventsHandler_PostProcessStream_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsHandler.PreProcessStream
//		Flags  -> ()
void UGameplayEventsHandler::PreProcessStream()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsHandler.PreProcessStream");

	UGameplayEventsHandler_PreProcessStream_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameplayEventsHandler.SetReader
//		Flags  -> ()
// Parameters:
//		class UGameplayEventsReader*                       NewReader                                                  (Parm)
void UGameplayEventsHandler::SetReader(class UGameplayEventsReader* NewReader)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsHandler.SetReader");

	UGameplayEventsHandler_SetReader_Params params {};
	params.NewReader = NewReader;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GenericParamListStatEntry.CommitToDisk
//		Flags  -> ()
void UGenericParamListStatEntry::CommitToDisk()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.CommitToDisk");

	UGenericParamListStatEntry_CommitToDisk_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GenericParamListStatEntry.GetString
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParamName                                                  (Parm)
//		struct FString                                     out_string                                                 (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGenericParamListStatEntry::GetString(const struct FName& ParamName, struct FString* out_string)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.GetString");

	UGenericParamListStatEntry_GetString_Params params {};
	params.ParamName = ParamName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_string != nullptr)
		*out_string = params.out_string;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GenericParamListStatEntry.GetVector
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParamName                                                  (Parm)
//		struct FVector                                     out_vector                                                 (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGenericParamListStatEntry::GetVector(const struct FName& ParamName, struct FVector* out_vector)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.GetVector");

	UGenericParamListStatEntry_GetVector_Params params {};
	params.ParamName = ParamName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_vector != nullptr)
		*out_vector = params.out_vector;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GenericParamListStatEntry.GetInt
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParamName                                                  (Parm)
//		int                                                out_int                                                    (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGenericParamListStatEntry::GetInt(const struct FName& ParamName, int* out_int)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.GetInt");

	UGenericParamListStatEntry_GetInt_Params params {};
	params.ParamName = ParamName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_int != nullptr)
		*out_int = params.out_int;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GenericParamListStatEntry.GetFloat
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParamName                                                  (Parm)
//		float                                              out_Float                                                  (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGenericParamListStatEntry::GetFloat(const struct FName& ParamName, float* out_Float)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.GetFloat");

	UGenericParamListStatEntry_GetFloat_Params params {};
	params.ParamName = ParamName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Float != nullptr)
		*out_Float = params.out_Float;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GenericParamListStatEntry.AddString
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParamName                                                  (Parm)
//		struct FString                                     Value                                                      (Parm, CoerceParm, NeedCtorLink)
void UGenericParamListStatEntry::AddString(const struct FName& ParamName, const struct FString& Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.AddString");

	UGenericParamListStatEntry_AddString_Params params {};
	params.ParamName = ParamName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GenericParamListStatEntry.AddVector
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParamName                                                  (Parm)
//		struct FVector                                     Value                                                      (Parm)
void UGenericParamListStatEntry::AddVector(const struct FName& ParamName, const struct FVector& Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.AddVector");

	UGenericParamListStatEntry_AddVector_Params params {};
	params.ParamName = ParamName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GenericParamListStatEntry.AddInt
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParamName                                                  (Parm)
//		int                                                Value                                                      (Parm)
void UGenericParamListStatEntry::AddInt(const struct FName& ParamName, int Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.AddInt");

	UGenericParamListStatEntry_AddInt_Params params {};
	params.ParamName = ParamName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GenericParamListStatEntry.AddFloat
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParamName                                                  (Parm)
//		float                                              Value                                                      (Parm)
void UGenericParamListStatEntry::AddFloat(const struct FName& ParamName, float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.AddFloat");

	UGenericParamListStatEntry_AddFloat_Params params {};
	params.ParamName = ParamName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HttpBaseInterface.GetContent
//		Flags  -> ()
// Parameters:
//		TArray<unsigned char>                              Content                                                    (Parm, OutParm, NeedCtorLink)
void UHttpBaseInterface::GetContent(TArray<unsigned char>* Content)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HttpBaseInterface.GetContent");

	UHttpBaseInterface_GetContent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Content != nullptr)
		*Content = params.Content;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HttpBaseInterface.GetURL
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UHttpBaseInterface::GetURL()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HttpBaseInterface.GetURL");

	UHttpBaseInterface_GetURL_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HttpBaseInterface.GetContentLength
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UHttpBaseInterface::GetContentLength()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HttpBaseInterface.GetContentLength");

	UHttpBaseInterface_GetContentLength_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HttpBaseInterface.GetContentType
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UHttpBaseInterface::GetContentType()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HttpBaseInterface.GetContentType");

	UHttpBaseInterface_GetContentType_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HttpBaseInterface.GetURLParameter
//		Flags  -> ()
// Parameters:
//		struct FString                                     ParameterName                                              (Parm, NeedCtorLink)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UHttpBaseInterface::GetURLParameter(const struct FString& ParameterName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HttpBaseInterface.GetURLParameter");

	UHttpBaseInterface_GetURLParameter_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HttpBaseInterface.GetHeaders
//		Flags  -> ()
// Parameters:
//		TArray<struct FString>                             ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
TArray<struct FString> UHttpBaseInterface::GetHeaders()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HttpBaseInterface.GetHeaders");

	UHttpBaseInterface_GetHeaders_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HttpBaseInterface.GetHeader
//		Flags  -> ()
// Parameters:
//		struct FString                                     HeaderName                                                 (Parm, NeedCtorLink)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UHttpBaseInterface::GetHeader(const struct FString& HeaderName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HttpBaseInterface.GetHeader");

	UHttpBaseInterface_GetHeader_Params params {};
	params.HeaderName = HeaderName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HttpRequestInterface.SetProcessRequestCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ProcessRequestCompleteDelegate                             (Parm, NeedCtorLink)
//		class UHttpRequestInterface*                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class UHttpRequestInterface* UHttpRequestInterface::SetProcessRequestCompleteDelegate(const struct FScriptDelegate& ProcessRequestCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HttpRequestInterface.SetProcessRequestCompleteDelegate");

	UHttpRequestInterface_SetProcessRequestCompleteDelegate_Params params {};
	params.ProcessRequestCompleteDelegate = ProcessRequestCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HttpRequestInterface.OnProcessRequestComplete
//		Flags  -> ()
// Parameters:
//		class UHttpRequestInterface*                       OriginalRequest                                            (Parm)
//		class UHttpResponseInterface*                      InHttpResponse                                             (Parm)
//		bool                                               bDidSucceed                                                (Parm)
void UHttpRequestInterface::OnProcessRequestComplete(class UHttpRequestInterface* OriginalRequest, class UHttpResponseInterface* InHttpResponse, bool bDidSucceed)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HttpRequestInterface.OnProcessRequestComplete");

	UHttpRequestInterface_OnProcessRequestComplete_Params params {};
	params.OriginalRequest = OriginalRequest;
	params.InHttpResponse = InHttpResponse;
	params.bDidSucceed = bDidSucceed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HttpRequestInterface.ProcessRequest
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UHttpRequestInterface::ProcessRequest()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HttpRequestInterface.ProcessRequest");

	UHttpRequestInterface_ProcessRequest_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HttpRequestInterface.SetHeader
//		Flags  -> ()
// Parameters:
//		struct FString                                     HeaderName                                                 (Parm, NeedCtorLink)
//		struct FString                                     HeaderValue                                                (Parm, NeedCtorLink)
//		class UHttpRequestInterface*                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class UHttpRequestInterface* UHttpRequestInterface::SetHeader(const struct FString& HeaderName, const struct FString& HeaderValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HttpRequestInterface.SetHeader");

	UHttpRequestInterface_SetHeader_Params params {};
	params.HeaderName = HeaderName;
	params.HeaderValue = HeaderValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HttpRequestInterface.SetContentAsString
//		Flags  -> ()
// Parameters:
//		struct FString                                     ContentString                                              (Parm, NeedCtorLink)
//		class UHttpRequestInterface*                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class UHttpRequestInterface* UHttpRequestInterface::SetContentAsString(const struct FString& ContentString)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HttpRequestInterface.SetContentAsString");

	UHttpRequestInterface_SetContentAsString_Params params {};
	params.ContentString = ContentString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HttpRequestInterface.SetContent
//		Flags  -> ()
// Parameters:
//		TArray<unsigned char>                              ContentPayload                                             (Const, Parm, OutParm, NeedCtorLink)
//		class UHttpRequestInterface*                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class UHttpRequestInterface* UHttpRequestInterface::SetContent(TArray<unsigned char>* ContentPayload)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HttpRequestInterface.SetContent");

	UHttpRequestInterface_SetContent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ContentPayload != nullptr)
		*ContentPayload = params.ContentPayload;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HttpRequestInterface.SetURL
//		Flags  -> ()
// Parameters:
//		struct FString                                     URL                                                        (Parm, NeedCtorLink)
//		class UHttpRequestInterface*                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class UHttpRequestInterface* UHttpRequestInterface::SetURL(const struct FString& URL)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HttpRequestInterface.SetURL");

	UHttpRequestInterface_SetURL_Params params {};
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HttpRequestInterface.SetVerb
//		Flags  -> ()
// Parameters:
//		struct FString                                     Verb                                                       (Parm, NeedCtorLink)
//		class UHttpRequestInterface*                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class UHttpRequestInterface* UHttpRequestInterface::SetVerb(const struct FString& Verb)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HttpRequestInterface.SetVerb");

	UHttpRequestInterface_SetVerb_Params params {};
	params.Verb = Verb;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HttpRequestInterface.GetVerb
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UHttpRequestInterface::GetVerb()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HttpRequestInterface.GetVerb");

	UHttpRequestInterface_GetVerb_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HttpResponseInterface.GetContentAsString
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UHttpResponseInterface::GetContentAsString()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HttpResponseInterface.GetContentAsString");

	UHttpResponseInterface_GetContentAsString_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HttpResponseInterface.GetResponseCode
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UHttpResponseInterface::GetResponseCode()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HttpResponseInterface.GetResponseCode");

	UHttpResponseInterface_GetResponseCode_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.IniLocPatcher.UpdateLocFileName
//		Flags  -> ()
// Parameters:
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UIniLocPatcher::UpdateLocFileName(const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.UpdateLocFileName");

	UIniLocPatcher_UpdateLocFileName_Params params {};
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.IniLocPatcher.ClearCachedFiles
//		Flags  -> ()
void UIniLocPatcher::ClearCachedFiles()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.ClearCachedFiles");

	UIniLocPatcher_ClearCachedFiles_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.IniLocPatcher.ClearReadFileDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ReadTitleFileCompleteDelegate                              (Parm, NeedCtorLink)
void UIniLocPatcher::ClearReadFileDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.ClearReadFileDelegate");

	UIniLocPatcher_ClearReadFileDelegate_Params params {};
	params.ReadTitleFileCompleteDelegate = ReadTitleFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.IniLocPatcher.AddReadFileDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ReadTitleFileCompleteDelegate                              (Parm, NeedCtorLink)
void UIniLocPatcher::AddReadFileDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.AddReadFileDelegate");

	UIniLocPatcher_AddReadFileDelegate_Params params {};
	params.ReadTitleFileCompleteDelegate = ReadTitleFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.IniLocPatcher.AddFileToDownload
//		Flags  -> ()
// Parameters:
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UIniLocPatcher::AddFileToDownload(const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.AddFileToDownload");

	UIniLocPatcher_AddFileToDownload_Params params {};
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.IniLocPatcher.ProcessIniLocFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		bool                                               bIsUnicode                                                 (Parm)
//		TArray<unsigned char>                              FileData                                                   (Const, Parm, OutParm, NeedCtorLink)
void UIniLocPatcher::ProcessIniLocFile(const struct FString& Filename, bool bIsUnicode, TArray<unsigned char>* FileData)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.ProcessIniLocFile");

	UIniLocPatcher_ProcessIniLocFile_Params params {};
	params.Filename = Filename;
	params.bIsUnicode = bIsUnicode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (FileData != nullptr)
		*FileData = params.FileData;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.IniLocPatcher.CheckForAllFilesComplete
//		Flags  -> ()
// Parameters:
void UIniLocPatcher::CheckForAllFilesComplete()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.CheckForAllFilesComplete");

	UIniLocPatcher_CheckForAllFilesComplete_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.IniLocPatcher.TriggerDownloadCompleteDelegates
//		Flags  -> ()
// Parameters:
//		bool                                               bSuccess                                                   (Parm)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UIniLocPatcher::TriggerDownloadCompleteDelegates(bool bSuccess, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.TriggerDownloadCompleteDelegates");

	UIniLocPatcher_TriggerDownloadCompleteDelegates_Params params {};
	params.bSuccess = bSuccess;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.IniLocPatcher.OnFileCacheSaveComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UIniLocPatcher::OnFileCacheSaveComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.OnFileCacheSaveComplete");

	UIniLocPatcher_OnFileCacheSaveComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.IniLocPatcher.OnFileCacheLoadComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UIniLocPatcher::OnFileCacheLoadComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.OnFileCacheLoadComplete");

	UIniLocPatcher_OnFileCacheLoadComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.IniLocPatcher.OnDownloadFileComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UIniLocPatcher::OnDownloadFileComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.OnDownloadFileComplete");

	UIniLocPatcher_OnDownloadFileComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.IniLocPatcher.StartLoadingFiles
//		Flags  -> ()
void UIniLocPatcher::StartLoadingFiles()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.StartLoadingFiles");

	UIniLocPatcher_StartLoadingFiles_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.IniLocPatcher.OnRequestTitleFileListComplete
//		Flags  -> (Singular, NetReliable, Operator, Static, Const, Private, Delegate, NetServer, HasDefaults, NetClient, K2Override, K2Pure)
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     ResultStr                                                  (Parm, NeedCtorLink)
void UIniLocPatcher::STATIC_OnRequestTitleFileListComplete(bool bWasSuccessful, const struct FString& ResultStr)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.OnRequestTitleFileListComplete");

	UIniLocPatcher_OnRequestTitleFileListComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.ResultStr = ResultStr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.IniLocPatcher.DownloadFiles
//		Flags  -> ()
void UIniLocPatcher::DownloadFiles()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.DownloadFiles");

	UIniLocPatcher_DownloadFiles_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.IniLocPatcher.Init
//		Flags  -> ()
// Parameters:
void UIniLocPatcher::Init()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.Init");

	UIniLocPatcher_Init_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.IniLocPatcher.OnAllTitleFilesCompleted
//		Flags  -> ()
void UIniLocPatcher::OnAllTitleFilesCompleted()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.OnAllTitleFilesCompleted");

	UIniLocPatcher_OnAllTitleFilesCompleted_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.IniLocPatcher.OnReadTitleFileComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UIniLocPatcher::OnReadTitleFileComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.OnReadTitleFileComplete");

	UIniLocPatcher_OnReadTitleFileComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Interface_NavigationHandle.NotifyPathChanged
//		Flags  -> ()
void UInterface_NavigationHandle::NotifyPathChanged()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Interface_NavigationHandle.NotifyPathChanged");

	UInterface_NavigationHandle_NotifyPathChanged_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Interface_Speaker.Speak
//		Flags  -> ()
// Parameters:
//		class USoundCue*                                   Cue                                                        (Parm)
void UInterface_Speaker::Speak(class USoundCue* Cue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Interface_Speaker.Speak");

	UInterface_Speaker_Speak_Params params {};
	params.Cue = Cue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.JsonObject.DecodeJson
//		Flags  -> ()
// Parameters:
//		struct FString                                     Str                                                        (Const, Parm, NeedCtorLink)
//		class UJsonObject*                                 ReturnValue                                                (Parm, OutParm, ReturnParm)
class UJsonObject* UJsonObject::DecodeJson(const struct FString& Str)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.DecodeJson");

	UJsonObject_DecodeJson_Params params {};
	params.Str = Str;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.JsonObject.EncodeJson
//		Flags  -> ()
// Parameters:
//		class UJsonObject*                                 Root                                                       (Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UJsonObject::EncodeJson(class UJsonObject* Root)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.EncodeJson");

	UJsonObject_EncodeJson_Params params {};
	params.Root = Root;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.JsonObject.SetBoolValue
//		Flags  -> ()
// Parameters:
//		struct FString                                     Key                                                        (Const, Parm, NeedCtorLink)
//		bool                                               Value                                                      (Parm)
void UJsonObject::SetBoolValue(const struct FString& Key, bool Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.SetBoolValue");

	UJsonObject_SetBoolValue_Params params {};
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.JsonObject.SetFloatValue
//		Flags  -> ()
// Parameters:
//		struct FString                                     Key                                                        (Const, Parm, NeedCtorLink)
//		float                                              Value                                                      (Parm)
void UJsonObject::SetFloatValue(const struct FString& Key, float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.SetFloatValue");

	UJsonObject_SetFloatValue_Params params {};
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.JsonObject.SetIntValue
//		Flags  -> ()
// Parameters:
//		struct FString                                     Key                                                        (Const, Parm, NeedCtorLink)
//		int                                                Value                                                      (Parm)
void UJsonObject::SetIntValue(const struct FString& Key, int Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.SetIntValue");

	UJsonObject_SetIntValue_Params params {};
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.JsonObject.SetStringValue
//		Flags  -> ()
// Parameters:
//		struct FString                                     Key                                                        (Const, Parm, NeedCtorLink)
//		struct FString                                     Value                                                      (Const, Parm, NeedCtorLink)
void UJsonObject::SetStringValue(const struct FString& Key, const struct FString& Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.SetStringValue");

	UJsonObject_SetStringValue_Params params {};
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.JsonObject.SetObject
//		Flags  -> ()
// Parameters:
//		struct FString                                     Key                                                        (Const, Parm, NeedCtorLink)
//		class UJsonObject*                                 Object                                                     (Parm)
void UJsonObject::SetObject(const struct FString& Key, class UJsonObject* Object)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.SetObject");

	UJsonObject_SetObject_Params params {};
	params.Key = Key;
	params.Object = Object;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.JsonObject.GetBoolValue
//		Flags  -> ()
// Parameters:
//		struct FString                                     Key                                                        (Const, Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UJsonObject::GetBoolValue(const struct FString& Key)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.GetBoolValue");

	UJsonObject_GetBoolValue_Params params {};
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.JsonObject.GetFloatValue
//		Flags  -> ()
// Parameters:
//		struct FString                                     Key                                                        (Const, Parm, NeedCtorLink)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UJsonObject::GetFloatValue(const struct FString& Key)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.GetFloatValue");

	UJsonObject_GetFloatValue_Params params {};
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.JsonObject.GetIntValue
//		Flags  -> ()
// Parameters:
//		struct FString                                     Key                                                        (Const, Parm, NeedCtorLink)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UJsonObject::GetIntValue(const struct FString& Key)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.GetIntValue");

	UJsonObject_GetIntValue_Params params {};
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.JsonObject.HasKey
//		Flags  -> ()
// Parameters:
//		struct FString                                     Key                                                        (Const, Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UJsonObject::HasKey(const struct FString& Key)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.HasKey");

	UJsonObject_HasKey_Params params {};
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.JsonObject.GetStringValue
//		Flags  -> ()
// Parameters:
//		struct FString                                     Key                                                        (Const, Parm, NeedCtorLink)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UJsonObject::GetStringValue(const struct FString& Key)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.GetStringValue");

	UJsonObject_GetStringValue_Params params {};
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.JsonObject.GetObject
//		Flags  -> ()
// Parameters:
//		struct FString                                     Key                                                        (Const, Parm, NeedCtorLink)
//		class UJsonObject*                                 ReturnValue                                                (Parm, OutParm, ReturnParm)
class UJsonObject* UJsonObject::GetObject(const struct FString& Key)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.GetObject");

	UJsonObject_GetObject_Params params {};
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoalFilter_PolyEncompassesAI.MakeSureAIFits
//		Flags  -> ()
// Parameters:
//		class UNavMeshGoal_GenericFilterContainer*         FilterContainer                                            (Parm)
//		struct FVector                                     InOverrideExtentToCheck                                    (Const, OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavMeshGoalFilter_PolyEncompassesAI::MakeSureAIFits(class UNavMeshGoal_GenericFilterContainer* FilterContainer, const struct FVector& InOverrideExtentToCheck)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoalFilter_PolyEncompassesAI.MakeSureAIFits");

	UNavMeshGoalFilter_PolyEncompassesAI_MakeSureAIFits_Params params {};
	params.FilterContainer = FilterContainer;
	params.InOverrideExtentToCheck = InOverrideExtentToCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshPathConstraint.GetDumpString
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UNavMeshPathConstraint::GetDumpString()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPathConstraint.GetDumpString");

	UNavMeshPathConstraint_GetDumpString_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshPathConstraint.Recycle
//		Flags  -> ()
void UNavMeshPathConstraint::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPathConstraint.Recycle");

	UNavMeshPathConstraint_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UISoundTheme.ProcessSoundEvent
//		Flags  -> (Singular, Native, Operator, HasOptionalParms, Public, Protected, HasDefaults, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		struct FName                                       SoundEventName                                             (Parm)
//		class APlayerController*                           SoundOwner                                                 (OptionalParm, Parm)
void UUISoundTheme::ProcessSoundEvent(const struct FName& SoundEventName, class APlayerController* SoundOwner)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UISoundTheme.ProcessSoundEvent");

	UUISoundTheme_ProcessSoundEvent_Params params {};
	params.SoundEventName = SoundEventName;
	params.SoundOwner = SoundOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStoreSubscriber.ClearBoundDataStores
//		Flags  -> ()
void UUIDataStoreSubscriber::ClearBoundDataStores()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.ClearBoundDataStores");

	UUIDataStoreSubscriber_ClearBoundDataStores_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStoreSubscriber.GetBoundDataStores
//		Flags  -> ()
// Parameters:
//		TArray<class UUIDataStore*>                        out_BoundDataStores                                        (Parm, OutParm, NeedCtorLink)
void UUIDataStoreSubscriber::GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.GetBoundDataStores");

	UUIDataStoreSubscriber_GetBoundDataStores_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStoreSubscriber.NotifyDataStoreValueUpdated
//		Flags  -> ()
// Parameters:
//		class UUIDataStore*                                SourceDataStore                                            (Parm)
//		bool                                               bValuesInvalidated                                         (Parm)
//		struct FName                                       PropertyTag                                                (Parm)
//		class UUIDataProvider*                             SourceProvider                                             (Parm)
//		int                                                ArrayIndex                                                 (Parm)
void UUIDataStoreSubscriber::NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.NotifyDataStoreValueUpdated");

	UUIDataStoreSubscriber_NotifyDataStoreValueUpdated_Params params {};
	params.SourceDataStore = SourceDataStore;
	params.bValuesInvalidated = bValuesInvalidated;
	params.PropertyTag = PropertyTag;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStoreSubscriber.RefreshSubscriberValue
//		Flags  -> ()
// Parameters:
//		int                                                BindingIndex                                               (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataStoreSubscriber::RefreshSubscriberValue(int BindingIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.RefreshSubscriberValue");

	UUIDataStoreSubscriber_RefreshSubscriberValue_Params params {};
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStoreSubscriber.GetDataStoreBinding
//		Flags  -> ()
// Parameters:
//		int                                                BindingIndex                                               (OptionalParm, Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UUIDataStoreSubscriber::GetDataStoreBinding(int BindingIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.GetDataStoreBinding");

	UUIDataStoreSubscriber_GetDataStoreBinding_Params params {};
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStoreSubscriber.SetDataStoreBinding
//		Flags  -> ()
// Parameters:
//		struct FString                                     MarkupText                                                 (Parm, NeedCtorLink)
//		int                                                BindingIndex                                               (OptionalParm, Parm)
void UUIDataStoreSubscriber::SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.SetDataStoreBinding");

	UUIDataStoreSubscriber_SetDataStoreBinding_Params params {};
	params.MarkupText = MarkupText;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStorePublisher.SaveSubscriberValue
//		Flags  -> ()
// Parameters:
//		TArray<class UUIDataStore*>                        out_BoundDataStores                                        (Parm, OutParm, NeedCtorLink)
//		int                                                BindingIndex                                               (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataStorePublisher::SaveSubscriberValue(TArray<class UUIDataStore*>* out_BoundDataStores, int BindingIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStorePublisher.SaveSubscriberValue");

	UUIDataStorePublisher_SaveSubscriberValue_Params params {};
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlinePlayerDataBase.OnUnregister
//		Flags  -> ()
void UUIDataProvider_OnlinePlayerDataBase::OnUnregister()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerDataBase.OnUnregister");

	UUIDataProvider_OnlinePlayerDataBase_OnUnregister_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlinePlayerDataBase.OnRegister
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                InPlayer                                                   (Parm)
void UUIDataProvider_OnlinePlayerDataBase::OnRegister(class ULocalPlayer* InPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerDataBase.OnRegister");

	UUIDataProvider_OnlinePlayerDataBase_OnRegister_Params params {};
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlineFriendMessages.OnGameInviteReceived
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FString                                     InviterName                                                (Parm, NeedCtorLink)
void UUIDataProvider_OnlineFriendMessages::OnGameInviteReceived(unsigned char LocalUserNum, const struct FString& InviterName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnGameInviteReceived");

	UUIDataProvider_OnlineFriendMessages_OnGameInviteReceived_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.InviterName = InviterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlineFriendMessages.OnLoginChange
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
void UUIDataProvider_OnlineFriendMessages::OnLoginChange(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnLoginChange");

	UUIDataProvider_OnlineFriendMessages_OnLoginChange_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendMessageReceived
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FUniqueNetId                                SendingPlayer                                              (Parm)
//		struct FString                                     SendingNick                                                (Parm, NeedCtorLink)
//		struct FString                                     Message                                                    (Parm, NeedCtorLink)
void UUIDataProvider_OnlineFriendMessages::OnFriendMessageReceived(unsigned char LocalUserNum, const struct FUniqueNetId& SendingPlayer, const struct FString& SendingNick, const struct FString& Message)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendMessageReceived");

	UUIDataProvider_OnlineFriendMessages_OnFriendMessageReceived_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.SendingPlayer = SendingPlayer;
	params.SendingNick = SendingNick;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendInviteReceived
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FUniqueNetId                                RequestingPlayer                                           (Parm)
//		struct FString                                     RequestingNick                                             (Parm, NeedCtorLink)
//		struct FString                                     Message                                                    (Parm, NeedCtorLink)
void UUIDataProvider_OnlineFriendMessages::OnFriendInviteReceived(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer, const struct FString& RequestingNick, const struct FString& Message)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendInviteReceived");

	UUIDataProvider_OnlineFriendMessages_OnFriendInviteReceived_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.RequestingPlayer = RequestingPlayer;
	params.RequestingNick = RequestingNick;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlineFriendMessages.ReadMessages
//		Flags  -> ()
// Parameters:
void UUIDataProvider_OnlineFriendMessages::ReadMessages()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.ReadMessages");

	UUIDataProvider_OnlineFriendMessages_ReadMessages_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlineFriendMessages.OnUnregister
//		Flags  -> ()
// Parameters:
void UUIDataProvider_OnlineFriendMessages::OnUnregister()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnUnregister");

	UUIDataProvider_OnlineFriendMessages_OnUnregister_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlineFriendMessages.OnRegister
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                InPlayer                                                   (Parm)
void UUIDataProvider_OnlineFriendMessages::OnRegister(class ULocalPlayer* InPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnRegister");

	UUIDataProvider_OnlineFriendMessages_OnRegister_Params params {};
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlineFriends.RefreshFriendsList
//		Flags  -> ()
// Parameters:
void UUIDataProvider_OnlineFriends::RefreshFriendsList()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriends.RefreshFriendsList");

	UUIDataProvider_OnlineFriends_RefreshFriendsList_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlineFriends.OnLoginChange
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
void UUIDataProvider_OnlineFriends::OnLoginChange(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriends.OnLoginChange");

	UUIDataProvider_OnlineFriends_OnLoginChange_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlineFriends.OnFriendsReadComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UUIDataProvider_OnlineFriends::OnFriendsReadComplete(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriends.OnFriendsReadComplete");

	UUIDataProvider_OnlineFriends_OnFriendsReadComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlineFriends.OnUnregister
//		Flags  -> ()
// Parameters:
void UUIDataProvider_OnlineFriends::OnUnregister()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriends.OnUnregister");

	UUIDataProvider_OnlineFriends_OnUnregister_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlineFriends.OnRegister
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                InPlayer                                                   (Parm)
void UUIDataProvider_OnlineFriends::OnRegister(class ULocalPlayer* InPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriends.OnRegister");

	UUIDataProvider_OnlineFriends_OnRegister_Params params {};
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlinePartyChatList.RefreshMembersList
//		Flags  -> ()
// Parameters:
void UUIDataProvider_OnlinePartyChatList::RefreshMembersList()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePartyChatList.RefreshMembersList");

	UUIDataProvider_OnlinePartyChatList_RefreshMembersList_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlinePartyChatList.OnLoginChange
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
void UUIDataProvider_OnlinePartyChatList::OnLoginChange(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePartyChatList.OnLoginChange");

	UUIDataProvider_OnlinePartyChatList_OnLoginChange_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlinePartyChatList.OnUnregister
//		Flags  -> ()
// Parameters:
void UUIDataProvider_OnlinePartyChatList::OnUnregister()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePartyChatList.OnUnregister");

	UUIDataProvider_OnlinePartyChatList_OnUnregister_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlinePartyChatList.OnRegister
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                InPlayer                                                   (Parm)
void UUIDataProvider_OnlinePartyChatList::OnRegister(class ULocalPlayer* InPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePartyChatList.OnRegister");

	UUIDataProvider_OnlinePartyChatList_OnRegister_Params params {};
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlinePlayerStorage.OnExternalUIChange
//		Flags  -> ()
// Parameters:
//		bool                                               bIsOpening                                                 (Parm)
void UUIDataProvider_OnlinePlayerStorage::OnExternalUIChange(bool bIsOpening)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.OnExternalUIChange");

	UUIDataProvider_OnlinePlayerStorage_OnExternalUIChange_Params params {};
	params.bIsOpening = bIsOpening;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlinePlayerStorage.OnStorageDeviceChange
//		Flags  -> ()
void UUIDataProvider_OnlinePlayerStorage::OnStorageDeviceChange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.OnStorageDeviceChange");

	UUIDataProvider_OnlinePlayerStorage_OnStorageDeviceChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlinePlayerStorage.OnDeviceSelectionComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UUIDataProvider_OnlinePlayerStorage::OnDeviceSelectionComplete(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.OnDeviceSelectionComplete");

	UUIDataProvider_OnlinePlayerStorage_OnDeviceSelectionComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlinePlayerStorage.ShowDeviceSelection
//		Flags  -> ()
void UUIDataProvider_OnlinePlayerStorage::ShowDeviceSelection()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.ShowDeviceSelection");

	UUIDataProvider_OnlinePlayerStorage_ShowDeviceSelection_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlinePlayerStorage.RefreshStorageData
//		Flags  -> ()
// Parameters:
void UUIDataProvider_OnlinePlayerStorage::RefreshStorageData()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.RefreshStorageData");

	UUIDataProvider_OnlinePlayerStorage_RefreshStorageData_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlinePlayerStorage.OnLoginChange
//		Flags  -> (Singular, NetReliable, Exec, Native, Event, Static, Public, HasDefaults, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
void UUIDataProvider_OnlinePlayerStorage::STATIC_OnLoginChange(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.OnLoginChange");

	UUIDataProvider_OnlinePlayerStorage_OnLoginChange_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlinePlayerStorage.OnReadStorageComplete
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void UUIDataProvider_OnlinePlayerStorage::OnReadStorageComplete(unsigned char LocalUserNum, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.OnReadStorageComplete");

	UUIDataProvider_OnlinePlayerStorage_OnReadStorageComplete_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlinePlayerStorage.OnUnregister
//		Flags  -> ()
// Parameters:
void UUIDataProvider_OnlinePlayerStorage::OnUnregister()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.OnUnregister");

	UUIDataProvider_OnlinePlayerStorage_OnUnregister_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlinePlayerStorage.OnRegister
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                InPlayer                                                   (Parm)
void UUIDataProvider_OnlinePlayerStorage::OnRegister(class ULocalPlayer* InPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.OnRegister");

	UUIDataProvider_OnlinePlayerStorage_OnRegister_Params params {};
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlinePlayerStorage.ClearReadCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
void UUIDataProvider_OnlinePlayerStorage::ClearReadCompleteDelegate(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.ClearReadCompleteDelegate");

	UUIDataProvider_OnlinePlayerStorage_ClearReadCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlinePlayerStorage.AddReadCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
void UUIDataProvider_OnlinePlayerStorage::AddReadCompleteDelegate(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.AddReadCompleteDelegate");

	UUIDataProvider_OnlinePlayerStorage_AddReadCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlinePlayerStorage.GetData
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataProvider_OnlinePlayerStorage::GetData(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.GetData");

	UUIDataProvider_OnlinePlayerStorage_GetData_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlinePlayerStorage.WriteData
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                DeviceID                                                   (Parm)
//		class UOnlinePlayerStorage*                        PlayerStorage                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataProvider_OnlinePlayerStorage::WriteData(unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.WriteData");

	UUIDataProvider_OnlinePlayerStorage_WriteData_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.PlayerStorage = PlayerStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlinePlayerStorage.ReadData
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                DeviceID                                                   (Parm)
//		class UOnlinePlayerStorage*                        PlayerStorage                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataProvider_OnlinePlayerStorage::ReadData(unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.ReadData");

	UUIDataProvider_OnlinePlayerStorage_ReadData_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.PlayerStorage = PlayerStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlineProfileSettings.OnStorageDeviceChange
//		Flags  -> ()
void UUIDataProvider_OnlineProfileSettings::OnStorageDeviceChange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.OnStorageDeviceChange");

	UUIDataProvider_OnlineProfileSettings_OnStorageDeviceChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlineProfileSettings.RefreshStorageData
//		Flags  -> ()
// Parameters:
void UUIDataProvider_OnlineProfileSettings::RefreshStorageData()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.RefreshStorageData");

	UUIDataProvider_OnlineProfileSettings_RefreshStorageData_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlineProfileSettings.ClearReadCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
void UUIDataProvider_OnlineProfileSettings::ClearReadCompleteDelegate(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.ClearReadCompleteDelegate");

	UUIDataProvider_OnlineProfileSettings_ClearReadCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlineProfileSettings.AddReadCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
void UUIDataProvider_OnlineProfileSettings::AddReadCompleteDelegate(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.AddReadCompleteDelegate");

	UUIDataProvider_OnlineProfileSettings_AddReadCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlineProfileSettings.GetData
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataProvider_OnlineProfileSettings::GetData(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.GetData");

	UUIDataProvider_OnlineProfileSettings_GetData_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlineProfileSettings.WriteData
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                DeviceID                                                   (Parm)
//		class UOnlinePlayerStorage*                        PlayerStorage                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataProvider_OnlineProfileSettings::WriteData(unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.WriteData");

	UUIDataProvider_OnlineProfileSettings_WriteData_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.PlayerStorage = PlayerStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_OnlineProfileSettings.ReadData
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                DeviceID                                                   (Parm)
//		class UOnlinePlayerStorage*                        PlayerStorage                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataProvider_OnlineProfileSettings::ReadData(unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.ReadData");

	UUIDataProvider_OnlineProfileSettings_ReadData_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.PlayerStorage = PlayerStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_PlayerAchievements.UpdateAchievements
//		Flags  -> ()
void UUIDataProvider_PlayerAchievements::UpdateAchievements()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.UpdateAchievements");

	UUIDataProvider_PlayerAchievements_UpdateAchievements_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_PlayerAchievements.OnLoginChange
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
void UUIDataProvider_PlayerAchievements::OnLoginChange(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.OnLoginChange");

	UUIDataProvider_PlayerAchievements_OnLoginChange_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_PlayerAchievements.OnUnregister
//		Flags  -> ()
void UUIDataProvider_PlayerAchievements::OnUnregister()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.OnUnregister");

	UUIDataProvider_PlayerAchievements_OnUnregister_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_PlayerAchievements.OnRegister
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                InPlayer                                                   (Parm)
void UUIDataProvider_PlayerAchievements::OnRegister(class ULocalPlayer* InPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.OnRegister");

	UUIDataProvider_PlayerAchievements_OnRegister_Params params {};
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_PlayerAchievements.OnPlayerAchievementUnlocked
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UUIDataProvider_PlayerAchievements::OnPlayerAchievementUnlocked(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.OnPlayerAchievementUnlocked");

	UUIDataProvider_PlayerAchievements_OnPlayerAchievementUnlocked_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_PlayerAchievements.OnPlayerAchievementsChanged
//		Flags  -> ()
// Parameters:
//		int                                                TitleId                                                    (Parm)
void UUIDataProvider_PlayerAchievements::OnPlayerAchievementsChanged(int TitleId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.OnPlayerAchievementsChanged");

	UUIDataProvider_PlayerAchievements_OnPlayerAchievementsChanged_Params params {};
	params.TitleId = TitleId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_PlayerAchievements.GetAchievementDetails
//		Flags  -> ()
// Parameters:
//		int                                                AchievementId                                              (Const, Parm)
//		struct FAchievementDetails                         OutAchievementDetails                                      (Parm, OutParm, NeedCtorLink)
void UUIDataProvider_PlayerAchievements::GetAchievementDetails(int AchievementId, struct FAchievementDetails* OutAchievementDetails)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.GetAchievementDetails");

	UUIDataProvider_PlayerAchievements_GetAchievementDetails_Params params {};
	params.AchievementId = AchievementId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutAchievementDetails != nullptr)
		*OutAchievementDetails = params.OutAchievementDetails;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_PlayerAchievements.GetAchievementIconPathName
//		Flags  -> ()
// Parameters:
//		int                                                AchievementId                                              (Parm)
//		bool                                               bReturnLockedIcon                                          (OptionalParm, Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UUIDataProvider_PlayerAchievements::GetAchievementIconPathName(int AchievementId, bool bReturnLockedIcon)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.GetAchievementIconPathName");

	UUIDataProvider_PlayerAchievements_GetAchievementIconPathName_Params params {};
	params.AchievementId = AchievementId;
	params.bReturnLockedIcon = bReturnLockedIcon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_PlayerAchievements.PopulateAchievementIcons
//		Flags  -> ()
void UUIDataProvider_PlayerAchievements::PopulateAchievementIcons()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.PopulateAchievementIcons");

	UUIDataProvider_PlayerAchievements_PopulateAchievementIcons_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_PlayerAchievements.GetMaxTotalGamerScore
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UUIDataProvider_PlayerAchievements::GetMaxTotalGamerScore()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.GetMaxTotalGamerScore");

	UUIDataProvider_PlayerAchievements_GetMaxTotalGamerScore_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataProvider_PlayerAchievements.GetTotalGamerScore
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UUIDataProvider_PlayerAchievements::GetTotalGamerScore()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.GetTotalGamerScore");

	UUIDataProvider_PlayerAchievements_GetTotalGamerScore_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.GetServerAddr
//		Flags  -> ()
// Parameters:
//		int                                                OutServerIP                                                (Parm, OutParm)
//		int                                                OutServerPort                                              (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineAuthInterface::GetServerAddr(int* OutServerIP, int* OutServerPort)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.GetServerAddr");

	UOnlineAuthInterface_GetServerAddr_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutServerIP != nullptr)
		*OutServerIP = params.OutServerIP;
	if (OutServerPort != nullptr)
		*OutServerPort = params.OutServerPort;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.GetServerUniqueId
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                OutServerUID                                               (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineAuthInterface::GetServerUniqueId(struct FUniqueNetId* OutServerUID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.GetServerUniqueId");

	UOnlineAuthInterface_GetServerUniqueId_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutServerUID != nullptr)
		*OutServerUID = params.OutServerUID;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.FindLocalServerAuthSession
//		Flags  -> ()
// Parameters:
//		class UPlayer*                                     ClientConnection                                           (Parm)
//		struct FLocalAuthSession                           OutSessionInfo                                             (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineAuthInterface::FindLocalServerAuthSession(class UPlayer* ClientConnection, struct FLocalAuthSession* OutSessionInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.FindLocalServerAuthSession");

	UOnlineAuthInterface_FindLocalServerAuthSession_Params params {};
	params.ClientConnection = ClientConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutSessionInfo != nullptr)
		*OutSessionInfo = params.OutSessionInfo;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.FindServerAuthSession
//		Flags  -> ()
// Parameters:
//		class UPlayer*                                     ServerConnection                                           (Parm)
//		struct FAuthSession                                OutSessionInfo                                             (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineAuthInterface::FindServerAuthSession(class UPlayer* ServerConnection, struct FAuthSession* OutSessionInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.FindServerAuthSession");

	UOnlineAuthInterface_FindServerAuthSession_Params params {};
	params.ServerConnection = ServerConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutSessionInfo != nullptr)
		*OutSessionInfo = params.OutSessionInfo;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.FindLocalClientAuthSession
//		Flags  -> ()
// Parameters:
//		class UPlayer*                                     ServerConnection                                           (Parm)
//		struct FLocalAuthSession                           OutSessionInfo                                             (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineAuthInterface::FindLocalClientAuthSession(class UPlayer* ServerConnection, struct FLocalAuthSession* OutSessionInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.FindLocalClientAuthSession");

	UOnlineAuthInterface_FindLocalClientAuthSession_Params params {};
	params.ServerConnection = ServerConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutSessionInfo != nullptr)
		*OutSessionInfo = params.OutSessionInfo;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.FindClientAuthSession
//		Flags  -> ()
// Parameters:
//		class UPlayer*                                     ClientConnection                                           (Parm)
//		struct FAuthSession                                OutSessionInfo                                             (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineAuthInterface::FindClientAuthSession(class UPlayer* ClientConnection, struct FAuthSession* OutSessionInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.FindClientAuthSession");

	UOnlineAuthInterface_FindClientAuthSession_Params params {};
	params.ClientConnection = ClientConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutSessionInfo != nullptr)
		*OutSessionInfo = params.OutSessionInfo;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.AllLocalServerAuthSessions
//		Flags  -> ()
// Parameters:
//		struct FLocalAuthSession                           OutSessionInfo                                             (Parm, OutParm)
void UOnlineAuthInterface::AllLocalServerAuthSessions(struct FLocalAuthSession* OutSessionInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AllLocalServerAuthSessions");

	UOnlineAuthInterface_AllLocalServerAuthSessions_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutSessionInfo != nullptr)
		*OutSessionInfo = params.OutSessionInfo;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.AllServerAuthSessions
//		Flags  -> ()
// Parameters:
//		struct FAuthSession                                OutSessionInfo                                             (Parm, OutParm)
void UOnlineAuthInterface::AllServerAuthSessions(struct FAuthSession* OutSessionInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AllServerAuthSessions");

	UOnlineAuthInterface_AllServerAuthSessions_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutSessionInfo != nullptr)
		*OutSessionInfo = params.OutSessionInfo;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.AllLocalClientAuthSessions
//		Flags  -> ()
// Parameters:
//		struct FLocalAuthSession                           OutSessionInfo                                             (Parm, OutParm)
void UOnlineAuthInterface::AllLocalClientAuthSessions(struct FLocalAuthSession* OutSessionInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AllLocalClientAuthSessions");

	UOnlineAuthInterface_AllLocalClientAuthSessions_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutSessionInfo != nullptr)
		*OutSessionInfo = params.OutSessionInfo;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.AllClientAuthSessions
//		Flags  -> ()
// Parameters:
//		struct FAuthSession                                OutSessionInfo                                             (Parm, OutParm)
void UOnlineAuthInterface::AllClientAuthSessions(struct FAuthSession* OutSessionInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AllClientAuthSessions");

	UOnlineAuthInterface_AllClientAuthSessions_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutSessionInfo != nullptr)
		*OutSessionInfo = params.OutSessionInfo;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.EndAllRemoteServerAuthSessions
//		Flags  -> ()
void UOnlineAuthInterface::EndAllRemoteServerAuthSessions()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.EndAllRemoteServerAuthSessions");

	UOnlineAuthInterface_EndAllRemoteServerAuthSessions_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.EndAllLocalServerAuthSessions
//		Flags  -> ()
void UOnlineAuthInterface::EndAllLocalServerAuthSessions()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.EndAllLocalServerAuthSessions");

	UOnlineAuthInterface_EndAllLocalServerAuthSessions_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.EndRemoteServerAuthSession
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                ServerUID                                                  (Parm)
//		int                                                ServerIP                                                   (Parm)
void UOnlineAuthInterface::EndRemoteServerAuthSession(const struct FUniqueNetId& ServerUID, int ServerIP)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.EndRemoteServerAuthSession");

	UOnlineAuthInterface_EndRemoteServerAuthSession_Params params {};
	params.ServerUID = ServerUID;
	params.ServerIP = ServerIP;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.EndLocalServerAuthSession
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                ClientUID                                                  (Parm)
//		int                                                ClientIP                                                   (Parm)
void UOnlineAuthInterface::EndLocalServerAuthSession(const struct FUniqueNetId& ClientUID, int ClientIP)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.EndLocalServerAuthSession");

	UOnlineAuthInterface_EndLocalServerAuthSession_Params params {};
	params.ClientUID = ClientUID;
	params.ClientIP = ClientIP;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.VerifyServerAuthSession
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                ServerUID                                                  (Parm)
//		int                                                ServerIP                                                   (Parm)
//		int                                                AuthTicketUID                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineAuthInterface::VerifyServerAuthSession(const struct FUniqueNetId& ServerUID, int ServerIP, int AuthTicketUID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.VerifyServerAuthSession");

	UOnlineAuthInterface_VerifyServerAuthSession_Params params {};
	params.ServerUID = ServerUID;
	params.ServerIP = ServerIP;
	params.AuthTicketUID = AuthTicketUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.CreateServerAuthSession
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                ClientUID                                                  (Parm)
//		int                                                ClientIP                                                   (Parm)
//		int                                                ClientPort                                                 (Parm)
//		int                                                OutAuthTicketUID                                           (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineAuthInterface::CreateServerAuthSession(const struct FUniqueNetId& ClientUID, int ClientIP, int ClientPort, int* OutAuthTicketUID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.CreateServerAuthSession");

	UOnlineAuthInterface_CreateServerAuthSession_Params params {};
	params.ClientUID = ClientUID;
	params.ClientIP = ClientIP;
	params.ClientPort = ClientPort;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutAuthTicketUID != nullptr)
		*OutAuthTicketUID = params.OutAuthTicketUID;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.EndAllRemoteClientAuthSessions
//		Flags  -> ()
void UOnlineAuthInterface::EndAllRemoteClientAuthSessions()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.EndAllRemoteClientAuthSessions");

	UOnlineAuthInterface_EndAllRemoteClientAuthSessions_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.EndAllLocalClientAuthSessions
//		Flags  -> ()
void UOnlineAuthInterface::EndAllLocalClientAuthSessions()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.EndAllLocalClientAuthSessions");

	UOnlineAuthInterface_EndAllLocalClientAuthSessions_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.EndRemoteClientAuthSession
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                ClientUID                                                  (Parm)
//		int                                                ClientIP                                                   (Parm)
void UOnlineAuthInterface::EndRemoteClientAuthSession(const struct FUniqueNetId& ClientUID, int ClientIP)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.EndRemoteClientAuthSession");

	UOnlineAuthInterface_EndRemoteClientAuthSession_Params params {};
	params.ClientUID = ClientUID;
	params.ClientIP = ClientIP;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.EndLocalClientAuthSession
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                ServerUID                                                  (Parm)
//		int                                                ServerIP                                                   (Parm)
//		int                                                ServerPort                                                 (Parm)
void UOnlineAuthInterface::EndLocalClientAuthSession(const struct FUniqueNetId& ServerUID, int ServerIP, int ServerPort)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.EndLocalClientAuthSession");

	UOnlineAuthInterface_EndLocalClientAuthSession_Params params {};
	params.ServerUID = ServerUID;
	params.ServerIP = ServerIP;
	params.ServerPort = ServerPort;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.VerifyClientAuthSession
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                ClientUID                                                  (Parm)
//		int                                                ClientIP                                                   (Parm)
//		int                                                ClientPort                                                 (Parm)
//		int                                                AuthTicketUID                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineAuthInterface::VerifyClientAuthSession(const struct FUniqueNetId& ClientUID, int ClientIP, int ClientPort, int AuthTicketUID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.VerifyClientAuthSession");

	UOnlineAuthInterface_VerifyClientAuthSession_Params params {};
	params.ClientUID = ClientUID;
	params.ClientIP = ClientIP;
	params.ClientPort = ClientPort;
	params.AuthTicketUID = AuthTicketUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.CreateClientAuthSession
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                ServerUID                                                  (Parm)
//		int                                                ServerIP                                                   (Parm)
//		int                                                ServerPort                                                 (Parm)
//		bool                                               bSecure                                                    (Parm)
//		int                                                OutAuthTicketUID                                           (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineAuthInterface::CreateClientAuthSession(const struct FUniqueNetId& ServerUID, int ServerIP, int ServerPort, bool bSecure, int* OutAuthTicketUID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.CreateClientAuthSession");

	UOnlineAuthInterface_CreateClientAuthSession_Params params {};
	params.ServerUID = ServerUID;
	params.ServerIP = ServerIP;
	params.ServerPort = ServerPort;
	params.bSecure = bSecure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutAuthTicketUID != nullptr)
		*OutAuthTicketUID = params.OutAuthTicketUID;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.SendServerAuthRetryRequest
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineAuthInterface::SendServerAuthRetryRequest()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.SendServerAuthRetryRequest");

	UOnlineAuthInterface_SendServerAuthRetryRequest_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.SendClientAuthEndSessionRequest
//		Flags  -> ()
// Parameters:
//		class UPlayer*                                     ClientConnection                                           (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineAuthInterface::SendClientAuthEndSessionRequest(class UPlayer* ClientConnection)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.SendClientAuthEndSessionRequest");

	UOnlineAuthInterface_SendClientAuthEndSessionRequest_Params params {};
	params.ClientConnection = ClientConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.SendServerAuthResponse
//		Flags  -> ()
// Parameters:
//		class UPlayer*                                     ClientConnection                                           (Parm)
//		int                                                AuthTicketUID                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineAuthInterface::SendServerAuthResponse(class UPlayer* ClientConnection, int AuthTicketUID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.SendServerAuthResponse");

	UOnlineAuthInterface_SendServerAuthResponse_Params params {};
	params.ClientConnection = ClientConnection;
	params.AuthTicketUID = AuthTicketUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.SendClientAuthResponse
//		Flags  -> ()
// Parameters:
//		int                                                AuthTicketUID                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineAuthInterface::SendClientAuthResponse(int AuthTicketUID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.SendClientAuthResponse");

	UOnlineAuthInterface_SendClientAuthResponse_Params params {};
	params.AuthTicketUID = AuthTicketUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.SendServerAuthRequest
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                ServerUID                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineAuthInterface::SendServerAuthRequest(const struct FUniqueNetId& ServerUID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.SendServerAuthRequest");

	UOnlineAuthInterface_SendServerAuthRequest_Params params {};
	params.ServerUID = ServerUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.SendClientAuthRequest
//		Flags  -> ()
// Parameters:
//		class UPlayer*                                     ClientConnection                                           (Parm)
//		struct FUniqueNetId                                ClientUID                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineAuthInterface::SendClientAuthRequest(class UPlayer* ClientConnection, const struct FUniqueNetId& ClientUID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.SendClientAuthRequest");

	UOnlineAuthInterface_SendClientAuthRequest_Params params {};
	params.ClientConnection = ClientConnection;
	params.ClientUID = ClientUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.ClearServerConnectionCloseDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ServerConnectionCloseDelegate                              (Parm, NeedCtorLink)
void UOnlineAuthInterface::ClearServerConnectionCloseDelegate(const struct FScriptDelegate& ServerConnectionCloseDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.ClearServerConnectionCloseDelegate");

	UOnlineAuthInterface_ClearServerConnectionCloseDelegate_Params params {};
	params.ServerConnectionCloseDelegate = ServerConnectionCloseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.AddServerConnectionCloseDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ServerConnectionCloseDelegate                              (Parm, NeedCtorLink)
void UOnlineAuthInterface::AddServerConnectionCloseDelegate(const struct FScriptDelegate& ServerConnectionCloseDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AddServerConnectionCloseDelegate");

	UOnlineAuthInterface_AddServerConnectionCloseDelegate_Params params {};
	params.ServerConnectionCloseDelegate = ServerConnectionCloseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.OnServerConnectionClose
//		Flags  -> ()
// Parameters:
//		class UPlayer*                                     ServerConnection                                           (Parm)
void UOnlineAuthInterface::OnServerConnectionClose(class UPlayer* ServerConnection)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnServerConnectionClose");

	UOnlineAuthInterface_OnServerConnectionClose_Params params {};
	params.ServerConnection = ServerConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.ClearClientConnectionCloseDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ClientConnectionCloseDelegate                              (Parm, NeedCtorLink)
void UOnlineAuthInterface::ClearClientConnectionCloseDelegate(const struct FScriptDelegate& ClientConnectionCloseDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.ClearClientConnectionCloseDelegate");

	UOnlineAuthInterface_ClearClientConnectionCloseDelegate_Params params {};
	params.ClientConnectionCloseDelegate = ClientConnectionCloseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.AddClientConnectionCloseDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ClientConnectionCloseDelegate                              (Parm, NeedCtorLink)
void UOnlineAuthInterface::AddClientConnectionCloseDelegate(const struct FScriptDelegate& ClientConnectionCloseDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AddClientConnectionCloseDelegate");

	UOnlineAuthInterface_AddClientConnectionCloseDelegate_Params params {};
	params.ClientConnectionCloseDelegate = ClientConnectionCloseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.OnClientConnectionClose
//		Flags  -> ()
// Parameters:
//		class UPlayer*                                     ClientConnection                                           (Parm)
void UOnlineAuthInterface::OnClientConnectionClose(class UPlayer* ClientConnection)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnClientConnectionClose");

	UOnlineAuthInterface_OnClientConnectionClose_Params params {};
	params.ClientConnection = ClientConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.ClearServerAuthRetryRequestDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ServerAuthRetryRequestDelegate                             (Parm, NeedCtorLink)
void UOnlineAuthInterface::ClearServerAuthRetryRequestDelegate(const struct FScriptDelegate& ServerAuthRetryRequestDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.ClearServerAuthRetryRequestDelegate");

	UOnlineAuthInterface_ClearServerAuthRetryRequestDelegate_Params params {};
	params.ServerAuthRetryRequestDelegate = ServerAuthRetryRequestDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.AddServerAuthRetryRequestDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ServerAuthRetryRequestDelegate                             (Parm, NeedCtorLink)
void UOnlineAuthInterface::AddServerAuthRetryRequestDelegate(const struct FScriptDelegate& ServerAuthRetryRequestDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AddServerAuthRetryRequestDelegate");

	UOnlineAuthInterface_AddServerAuthRetryRequestDelegate_Params params {};
	params.ServerAuthRetryRequestDelegate = ServerAuthRetryRequestDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.OnServerAuthRetryRequest
//		Flags  -> ()
// Parameters:
//		class UPlayer*                                     ClientConnection                                           (Parm)
void UOnlineAuthInterface::OnServerAuthRetryRequest(class UPlayer* ClientConnection)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnServerAuthRetryRequest");

	UOnlineAuthInterface_OnServerAuthRetryRequest_Params params {};
	params.ClientConnection = ClientConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.ClearClientAuthEndSessionRequestDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ClientAuthEndSessionRequestDelegate                        (Parm, NeedCtorLink)
void UOnlineAuthInterface::ClearClientAuthEndSessionRequestDelegate(const struct FScriptDelegate& ClientAuthEndSessionRequestDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.ClearClientAuthEndSessionRequestDelegate");

	UOnlineAuthInterface_ClearClientAuthEndSessionRequestDelegate_Params params {};
	params.ClientAuthEndSessionRequestDelegate = ClientAuthEndSessionRequestDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.AddClientAuthEndSessionRequestDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ClientAuthEndSessionRequestDelegate                        (Parm, NeedCtorLink)
void UOnlineAuthInterface::AddClientAuthEndSessionRequestDelegate(const struct FScriptDelegate& ClientAuthEndSessionRequestDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AddClientAuthEndSessionRequestDelegate");

	UOnlineAuthInterface_AddClientAuthEndSessionRequestDelegate_Params params {};
	params.ClientAuthEndSessionRequestDelegate = ClientAuthEndSessionRequestDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.OnClientAuthEndSessionRequest
//		Flags  -> ()
// Parameters:
//		class UPlayer*                                     ServerConnection                                           (Parm)
void UOnlineAuthInterface::OnClientAuthEndSessionRequest(class UPlayer* ServerConnection)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnClientAuthEndSessionRequest");

	UOnlineAuthInterface_OnClientAuthEndSessionRequest_Params params {};
	params.ServerConnection = ServerConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.ClearServerAuthCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ServerAuthCompleteDelegate                                 (Parm, NeedCtorLink)
void UOnlineAuthInterface::ClearServerAuthCompleteDelegate(const struct FScriptDelegate& ServerAuthCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.ClearServerAuthCompleteDelegate");

	UOnlineAuthInterface_ClearServerAuthCompleteDelegate_Params params {};
	params.ServerAuthCompleteDelegate = ServerAuthCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.AddServerAuthCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ServerAuthCompleteDelegate                                 (Parm, NeedCtorLink)
void UOnlineAuthInterface::AddServerAuthCompleteDelegate(const struct FScriptDelegate& ServerAuthCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AddServerAuthCompleteDelegate");

	UOnlineAuthInterface_AddServerAuthCompleteDelegate_Params params {};
	params.ServerAuthCompleteDelegate = ServerAuthCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.OnServerAuthComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bSuccess                                                   (Parm)
//		struct FUniqueNetId                                ServerUID                                                  (Parm)
//		class UPlayer*                                     ServerConnection                                           (Parm)
//		struct FString                                     ExtraInfo                                                  (Parm, NeedCtorLink)
void UOnlineAuthInterface::OnServerAuthComplete(bool bSuccess, const struct FUniqueNetId& ServerUID, class UPlayer* ServerConnection, const struct FString& ExtraInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnServerAuthComplete");

	UOnlineAuthInterface_OnServerAuthComplete_Params params {};
	params.bSuccess = bSuccess;
	params.ServerUID = ServerUID;
	params.ServerConnection = ServerConnection;
	params.ExtraInfo = ExtraInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.ClearClientAuthCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ClientAuthCompleteDelegate                                 (Parm, NeedCtorLink)
void UOnlineAuthInterface::ClearClientAuthCompleteDelegate(const struct FScriptDelegate& ClientAuthCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.ClearClientAuthCompleteDelegate");

	UOnlineAuthInterface_ClearClientAuthCompleteDelegate_Params params {};
	params.ClientAuthCompleteDelegate = ClientAuthCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.AddClientAuthCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ClientAuthCompleteDelegate                                 (Parm, NeedCtorLink)
void UOnlineAuthInterface::AddClientAuthCompleteDelegate(const struct FScriptDelegate& ClientAuthCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AddClientAuthCompleteDelegate");

	UOnlineAuthInterface_AddClientAuthCompleteDelegate_Params params {};
	params.ClientAuthCompleteDelegate = ClientAuthCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.OnClientAuthComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bSuccess                                                   (Parm)
//		struct FUniqueNetId                                ClientUID                                                  (Parm)
//		class UPlayer*                                     ClientConnection                                           (Parm)
//		struct FString                                     ExtraInfo                                                  (Parm, NeedCtorLink)
void UOnlineAuthInterface::OnClientAuthComplete(bool bSuccess, const struct FUniqueNetId& ClientUID, class UPlayer* ClientConnection, const struct FString& ExtraInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnClientAuthComplete");

	UOnlineAuthInterface_OnClientAuthComplete_Params params {};
	params.bSuccess = bSuccess;
	params.ClientUID = ClientUID;
	params.ClientConnection = ClientConnection;
	params.ExtraInfo = ExtraInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.ClearServerAuthResponseDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ServerAuthResponseDelegate                                 (Parm, NeedCtorLink)
void UOnlineAuthInterface::ClearServerAuthResponseDelegate(const struct FScriptDelegate& ServerAuthResponseDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.ClearServerAuthResponseDelegate");

	UOnlineAuthInterface_ClearServerAuthResponseDelegate_Params params {};
	params.ServerAuthResponseDelegate = ServerAuthResponseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.AddServerAuthResponseDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ServerAuthResponseDelegate                                 (Parm, NeedCtorLink)
void UOnlineAuthInterface::AddServerAuthResponseDelegate(const struct FScriptDelegate& ServerAuthResponseDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AddServerAuthResponseDelegate");

	UOnlineAuthInterface_AddServerAuthResponseDelegate_Params params {};
	params.ServerAuthResponseDelegate = ServerAuthResponseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.OnServerAuthResponse
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                ServerUID                                                  (Parm)
//		int                                                ServerIP                                                   (Parm)
//		int                                                AuthTicketUID                                              (Parm)
void UOnlineAuthInterface::OnServerAuthResponse(const struct FUniqueNetId& ServerUID, int ServerIP, int AuthTicketUID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnServerAuthResponse");

	UOnlineAuthInterface_OnServerAuthResponse_Params params {};
	params.ServerUID = ServerUID;
	params.ServerIP = ServerIP;
	params.AuthTicketUID = AuthTicketUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.ClearClientAuthResponseDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ClientAuthResponseDelegate                                 (Parm, NeedCtorLink)
void UOnlineAuthInterface::ClearClientAuthResponseDelegate(const struct FScriptDelegate& ClientAuthResponseDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.ClearClientAuthResponseDelegate");

	UOnlineAuthInterface_ClearClientAuthResponseDelegate_Params params {};
	params.ClientAuthResponseDelegate = ClientAuthResponseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.AddClientAuthResponseDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ClientAuthResponseDelegate                                 (Parm, NeedCtorLink)
void UOnlineAuthInterface::AddClientAuthResponseDelegate(const struct FScriptDelegate& ClientAuthResponseDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AddClientAuthResponseDelegate");

	UOnlineAuthInterface_AddClientAuthResponseDelegate_Params params {};
	params.ClientAuthResponseDelegate = ClientAuthResponseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.OnClientAuthResponse
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                ClientUID                                                  (Parm)
//		int                                                ClientIP                                                   (Parm)
//		int                                                AuthTicketUID                                              (Parm)
void UOnlineAuthInterface::OnClientAuthResponse(const struct FUniqueNetId& ClientUID, int ClientIP, int AuthTicketUID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnClientAuthResponse");

	UOnlineAuthInterface_OnClientAuthResponse_Params params {};
	params.ClientUID = ClientUID;
	params.ClientIP = ClientIP;
	params.AuthTicketUID = AuthTicketUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.ClearServerAuthRequestDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ServerAuthRequestDelegate                                  (Parm, NeedCtorLink)
void UOnlineAuthInterface::ClearServerAuthRequestDelegate(const struct FScriptDelegate& ServerAuthRequestDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.ClearServerAuthRequestDelegate");

	UOnlineAuthInterface_ClearServerAuthRequestDelegate_Params params {};
	params.ServerAuthRequestDelegate = ServerAuthRequestDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.AddServerAuthRequestDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ServerAuthRequestDelegate                                  (Parm, NeedCtorLink)
void UOnlineAuthInterface::AddServerAuthRequestDelegate(const struct FScriptDelegate& ServerAuthRequestDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AddServerAuthRequestDelegate");

	UOnlineAuthInterface_AddServerAuthRequestDelegate_Params params {};
	params.ServerAuthRequestDelegate = ServerAuthRequestDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.OnServerAuthRequest
//		Flags  -> ()
// Parameters:
//		class UPlayer*                                     ClientConnection                                           (Parm)
//		struct FUniqueNetId                                ClientUID                                                  (Parm)
//		int                                                ClientIP                                                   (Parm)
//		int                                                ClientPort                                                 (Parm)
void UOnlineAuthInterface::OnServerAuthRequest(class UPlayer* ClientConnection, const struct FUniqueNetId& ClientUID, int ClientIP, int ClientPort)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnServerAuthRequest");

	UOnlineAuthInterface_OnServerAuthRequest_Params params {};
	params.ClientConnection = ClientConnection;
	params.ClientUID = ClientUID;
	params.ClientIP = ClientIP;
	params.ClientPort = ClientPort;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.ClearClientAuthRequestDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ClientAuthRequestDelegate                                  (Parm, NeedCtorLink)
void UOnlineAuthInterface::ClearClientAuthRequestDelegate(const struct FScriptDelegate& ClientAuthRequestDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.ClearClientAuthRequestDelegate");

	UOnlineAuthInterface_ClearClientAuthRequestDelegate_Params params {};
	params.ClientAuthRequestDelegate = ClientAuthRequestDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.AddClientAuthRequestDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ClientAuthRequestDelegate                                  (Parm, NeedCtorLink)
void UOnlineAuthInterface::AddClientAuthRequestDelegate(const struct FScriptDelegate& ClientAuthRequestDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AddClientAuthRequestDelegate");

	UOnlineAuthInterface_AddClientAuthRequestDelegate_Params params {};
	params.ClientAuthRequestDelegate = ClientAuthRequestDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.OnClientAuthRequest
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                ServerUID                                                  (Parm)
//		int                                                ServerIP                                                   (Parm)
//		int                                                ServerPort                                                 (Parm)
//		bool                                               bSecure                                                    (Parm)
void UOnlineAuthInterface::OnClientAuthRequest(const struct FUniqueNetId& ServerUID, int ServerIP, int ServerPort, bool bSecure)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnClientAuthRequest");

	UOnlineAuthInterface_OnClientAuthRequest_Params params {};
	params.ServerUID = ServerUID;
	params.ServerIP = ServerIP;
	params.ServerPort = ServerPort;
	params.bSecure = bSecure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.ClearAuthReadyDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             AuthReadyDelegate                                          (Parm, NeedCtorLink)
void UOnlineAuthInterface::ClearAuthReadyDelegate(const struct FScriptDelegate& AuthReadyDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.ClearAuthReadyDelegate");

	UOnlineAuthInterface_ClearAuthReadyDelegate_Params params {};
	params.AuthReadyDelegate = AuthReadyDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.AddAuthReadyDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             AuthReadyDelegate                                          (Parm, NeedCtorLink)
void UOnlineAuthInterface::AddAuthReadyDelegate(const struct FScriptDelegate& AuthReadyDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AddAuthReadyDelegate");

	UOnlineAuthInterface_AddAuthReadyDelegate_Params params {};
	params.AuthReadyDelegate = AuthReadyDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.OnAuthReady
//		Flags  -> ()
void UOnlineAuthInterface::OnAuthReady()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnAuthReady");

	UOnlineAuthInterface_OnAuthReady_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAuthInterface.IsReady
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineAuthInterface::IsReady()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.IsReady");

	UOnlineAuthInterface_IsReady_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceTimeVarying.CheckForVectorParameterConflicts
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMaterialInstanceTimeVarying::CheckForVectorParameterConflicts(const struct FName& ParameterName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.CheckForVectorParameterConflicts");

	UMaterialInstanceTimeVarying_CheckForVectorParameterConflicts_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceTimeVarying.GetMaxDurationFromAllParameters
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UMaterialInstanceTimeVarying::GetMaxDurationFromAllParameters()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.GetMaxDurationFromAllParameters");

	UMaterialInstanceTimeVarying_GetMaxDurationFromAllParameters_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceTimeVarying.ClearParameterValues
//		Flags  -> ()
// Parameters:
//		bool                                               bOnlyClearTextures                                         (OptionalParm, Parm)
void UMaterialInstanceTimeVarying::ClearParameterValues(bool bOnlyClearTextures)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.ClearParameterValues");

	UMaterialInstanceTimeVarying_ClearParameterValues_Params params {};
	params.bOnlyClearTextures = bOnlyClearTextures;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceTimeVarying.SetFontParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		class UFont*                                       FontValue                                                  (Parm)
//		int                                                FontPage                                                   (Parm)
void UMaterialInstanceTimeVarying::SetFontParameterValue(const struct FName& ParameterName, class UFont* FontValue, int FontPage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetFontParameterValue");

	UMaterialInstanceTimeVarying_SetFontParameterValue_Params params {};
	params.ParameterName = ParameterName;
	params.FontValue = FontValue;
	params.FontPage = FontPage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceTimeVarying.SetVectorStartTime
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		float                                              Value                                                      (Parm)
void UMaterialInstanceTimeVarying::SetVectorStartTime(const struct FName& ParameterName, float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetVectorStartTime");

	UMaterialInstanceTimeVarying_SetVectorStartTime_Params params {};
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceTimeVarying.SetLinearColorCurveParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FInterpCurveLinearColor                     Value                                                      (Const, Parm, OutParm, NeedCtorLink)
void UMaterialInstanceTimeVarying::SetLinearColorCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveLinearColor* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetLinearColorCurveParameterValue");

	UMaterialInstanceTimeVarying_SetLinearColorCurveParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceTimeVarying.SetLinearColorParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FLinearColor                                Value                                                      (Const, Parm, OutParm)
void UMaterialInstanceTimeVarying::SetLinearColorParameterValue(const struct FName& ParameterName, struct FLinearColor* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetLinearColorParameterValue");

	UMaterialInstanceTimeVarying_SetLinearColorParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceTimeVarying.SetVectorCurveParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FInterpCurveVector                          Value                                                      (Const, Parm, OutParm, NeedCtorLink)
void UMaterialInstanceTimeVarying::SetVectorCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveVector* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetVectorCurveParameterValue");

	UMaterialInstanceTimeVarying_SetVectorCurveParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceTimeVarying.SetVectorParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FLinearColor                                Value                                                      (Const, Parm, OutParm)
void UMaterialInstanceTimeVarying::SetVectorParameterValue(const struct FName& ParameterName, struct FLinearColor* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetVectorParameterValue");

	UMaterialInstanceTimeVarying_SetVectorParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceTimeVarying.SetTextureParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		class UTexture*                                    Value                                                      (Parm)
void UMaterialInstanceTimeVarying::SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetTextureParameterValue");

	UMaterialInstanceTimeVarying_SetTextureParameterValue_Params params {};
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceTimeVarying.SetDuration
//		Flags  -> ()
// Parameters:
//		float                                              Value                                                      (Parm)
void UMaterialInstanceTimeVarying::SetDuration(float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetDuration");

	UMaterialInstanceTimeVarying_SetDuration_Params params {};
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceTimeVarying.SetScalarStartTime
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		float                                              Value                                                      (Parm)
void UMaterialInstanceTimeVarying::SetScalarStartTime(const struct FName& ParameterName, float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetScalarStartTime");

	UMaterialInstanceTimeVarying_SetScalarStartTime_Params params {};
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceTimeVarying.SetScalarCurveParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FInterpCurveFloat                           Value                                                      (Const, Parm, OutParm, NeedCtorLink)
void UMaterialInstanceTimeVarying::SetScalarCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveFloat* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetScalarCurveParameterValue");

	UMaterialInstanceTimeVarying_SetScalarCurveParameterValue_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceTimeVarying.SetScalarParameterValue
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		float                                              Value                                                      (Parm)
void UMaterialInstanceTimeVarying::SetScalarParameterValue(const struct FName& ParameterName, float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetScalarParameterValue");

	UMaterialInstanceTimeVarying_SetScalarParameterValue_Params params {};
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MaterialInstanceTimeVarying.SetParent
//		Flags  -> ()
// Parameters:
//		class UMaterialInterface*                          NewParent                                                  (Parm)
void UMaterialInstanceTimeVarying::SetParent(class UMaterialInterface* NewParent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetParent");

	UMaterialInstanceTimeVarying_SetParent_Params params {};
	params.NewParent = NewParent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.EmitterCameraLensEffectBase.UpdateLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     CamLoc                                                     (Const, Parm, OutParm)
//		struct FRotator                                    CamRot                                                     (Const, Parm, OutParm)
//		float                                              CamFOVDeg                                                  (Parm)
void AEmitterCameraLensEffectBase::UpdateLocation(struct FVector* CamLoc, struct FRotator* CamRot, float CamFOVDeg)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.EmitterCameraLensEffectBase.UpdateLocation");

	AEmitterCameraLensEffectBase_UpdateLocation_Params params {};
	params.CamFOVDeg = CamFOVDeg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (CamLoc != nullptr)
		*CamLoc = params.CamLoc;
	if (CamRot != nullptr)
		*CamRot = params.CamRot;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.EmitterCameraLensEffectBase.ActivateLensEffect
//		Flags  -> ()
void AEmitterCameraLensEffectBase::ActivateLensEffect()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.EmitterCameraLensEffectBase.ActivateLensEffect");

	AEmitterCameraLensEffectBase_ActivateLensEffect_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.EmitterCameraLensEffectBase.PostBeginPlay
//		Flags  -> ()
void AEmitterCameraLensEffectBase::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.EmitterCameraLensEffectBase.PostBeginPlay");

	AEmitterCameraLensEffectBase_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.EmitterCameraLensEffectBase.NotifyRetriggered
//		Flags  -> ()
void AEmitterCameraLensEffectBase::NotifyRetriggered()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.EmitterCameraLensEffectBase.NotifyRetriggered");

	AEmitterCameraLensEffectBase_NotifyRetriggered_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.EmitterCameraLensEffectBase.RegisterCamera
//		Flags  -> ()
// Parameters:
//		class ACamera*                                     C                                                          (Parm)
void AEmitterCameraLensEffectBase::RegisterCamera(class ACamera* C)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.EmitterCameraLensEffectBase.RegisterCamera");

	AEmitterCameraLensEffectBase_RegisterCamera_Params params {};
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.EmitterCameraLensEffectBase.Destroyed
//		Flags  -> ()
void AEmitterCameraLensEffectBase::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.EmitterCameraLensEffectBase.Destroyed");

	AEmitterCameraLensEffectBase_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleEventManager.HandleParticleModuleEventSendToGame
//		Flags  -> ()
// Parameters:
//		class UParticleModuleEventSendToGame*              InEvent                                                    (Parm)
//		struct FVector                                     InCollideDirection                                         (Const, Parm, OutParm)
//		struct FVector                                     InHitLocation                                              (Const, Parm, OutParm)
//		struct FVector                                     InHitNormal                                                (Const, Parm, OutParm)
//		struct FName                                       InBoneName                                                 (Const, Parm, OutParm)
void AParticleEventManager::HandleParticleModuleEventSendToGame(class UParticleModuleEventSendToGame* InEvent, struct FVector* InCollideDirection, struct FVector* InHitLocation, struct FVector* InHitNormal, struct FName* InBoneName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleEventManager.HandleParticleModuleEventSendToGame");

	AParticleEventManager_HandleParticleModuleEventSendToGame_Params params {};
	params.InEvent = InEvent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InCollideDirection != nullptr)
		*InCollideDirection = params.InCollideDirection;
	if (InHitLocation != nullptr)
		*InHitLocation = params.InHitLocation;
	if (InHitNormal != nullptr)
		*InHitNormal = params.InHitNormal;
	if (InBoneName != nullptr)
		*InBoneName = params.InBoneName;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.ActivateParticleSystemSound
//		Flags  -> ()
void UParticleSystemComponent::ActivateParticleSystemSound()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.ActivateParticleSystemSound");

	UParticleSystemComponent_ActivateParticleSystemSound_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.TickPlaySound
//		Flags  -> ()
void UParticleSystemComponent::TickPlaySound()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.TickPlaySound");

	UParticleSystemComponent_TickPlaySound_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetStopSpawning
//		Flags  -> ()
// Parameters:
//		int                                                InEmitterIndex                                             (Parm)
//		bool                                               bInStopSpawning                                            (Parm)
void UParticleSystemComponent::SetStopSpawning(int InEmitterIndex, bool bInStopSpawning)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetStopSpawning");

	UParticleSystemComponent_SetStopSpawning_Params params {};
	params.InEmitterIndex = InEmitterIndex;
	params.bInStopSpawning = bInStopSpawning;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.ResetToDefaults
//		Flags  -> ()
void UParticleSystemComponent::ResetToDefaults()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.ResetToDefaults");

	UParticleSystemComponent_ResetToDefaults_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetActive
//		Flags  -> ()
// Parameters:
//		bool                                               bNowActive                                                 (Parm)
//		bool                                               bFlagAsJustAttached                                        (OptionalParm, Parm)
void UParticleSystemComponent::SetActive(bool bNowActive, bool bFlagAsJustAttached)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetActive");

	UParticleSystemComponent_SetActive_Params params {};
	params.bNowActive = bNowActive;
	params.bFlagAsJustAttached = bFlagAsJustAttached;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.ClearParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		TEnumAsByte<Engine_EParticleSysParamType>          ParameterType                                              (OptionalParm, Parm)
void UParticleSystemComponent::ClearParameter(const struct FName& ParameterName, TEnumAsByte<Engine_EParticleSysParamType> ParameterType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.ClearParameter");

	UParticleSystemComponent_ClearParameter_Params params {};
	params.ParameterName = ParameterName;
	params.ParameterType = ParameterType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.GetComponentParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       InName                                                     (Const, Parm)
//		class UComponent*                                  OutComponent                                               (Parm, OutParm, EditInline)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UParticleSystemComponent::GetComponentParameter(const struct FName& InName, class UComponent** OutComponent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetComponentParameter");

	UParticleSystemComponent_GetComponentParameter_Params params {};
	params.InName = InName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutComponent != nullptr)
		*OutComponent = params.OutComponent;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.GetMaterialParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       InName                                                     (Const, Parm)
//		class UMaterialInterface*                          OutMaterial                                                (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UParticleSystemComponent::GetMaterialParameter(const struct FName& InName, class UMaterialInterface** OutMaterial)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetMaterialParameter");

	UParticleSystemComponent_GetMaterialParameter_Params params {};
	params.InName = InName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutMaterial != nullptr)
		*OutMaterial = params.OutMaterial;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.GetActorParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       InName                                                     (Const, Parm)
//		class AActor*                                      OutActor                                                   (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UParticleSystemComponent::GetActorParameter(const struct FName& InName, class AActor** OutActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetActorParameter");

	UParticleSystemComponent_GetActorParameter_Params params {};
	params.InName = InName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutActor != nullptr)
		*OutActor = params.OutActor;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.GetColorParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       InName                                                     (Const, Parm)
//		struct FColor                                      OutColor                                                   (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UParticleSystemComponent::GetColorParameter(const struct FName& InName, struct FColor* OutColor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetColorParameter");

	UParticleSystemComponent_GetColorParameter_Params params {};
	params.InName = InName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutColor != nullptr)
		*OutColor = params.OutColor;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.GetVectorParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       InName                                                     (Const, Parm)
//		struct FVector                                     OutVector                                                  (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UParticleSystemComponent::GetVectorParameter(const struct FName& InName, struct FVector* OutVector)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetVectorParameter");

	UParticleSystemComponent_GetVectorParameter_Params params {};
	params.InName = InName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutVector != nullptr)
		*OutVector = params.OutVector;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.GetFloatParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       InName                                                     (Const, Parm)
//		float                                              OutFloat                                                   (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UParticleSystemComponent::GetFloatParameter(const struct FName& InName, float* OutFloat)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetFloatParameter");

	UParticleSystemComponent_GetFloatParameter_Params params {};
	params.InName = InName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutFloat != nullptr)
		*OutFloat = params.OutFloat;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetSocketParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FName                                       Param                                                      (Parm)
//		bool                                               ParamUseBone                                               (Parm)
void UParticleSystemComponent::SetSocketParameter(const struct FName& ParameterName, const struct FName& Param, bool ParamUseBone)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetSocketParameter");

	UParticleSystemComponent_SetSocketParameter_Params params {};
	params.ParameterName = ParameterName;
	params.Param = Param;
	params.ParamUseBone = ParamUseBone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetComponentParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		class UComponent*                                  Param                                                      (Parm, EditInline)
void UParticleSystemComponent::SetComponentParameter(const struct FName& ParameterName, class UComponent* Param)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetComponentParameter");

	UParticleSystemComponent_SetComponentParameter_Params params {};
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetMaterialParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		class UMaterialInterface*                          Param                                                      (Parm)
void UParticleSystemComponent::SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetMaterialParameter");

	UParticleSystemComponent_SetMaterialParameter_Params params {};
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetActorParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		class AActor*                                      Param                                                      (Parm)
void UParticleSystemComponent::SetActorParameter(const struct FName& ParameterName, class AActor* Param)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetActorParameter");

	UParticleSystemComponent_SetActorParameter_Params params {};
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetColorParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FColor                                      Param                                                      (Parm)
void UParticleSystemComponent::SetColorParameter(const struct FName& ParameterName, const struct FColor& Param)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetColorParameter");

	UParticleSystemComponent_SetColorParameter_Params params {};
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetVectorRandParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FVector                                     Param                                                      (Const, Parm, OutParm)
//		struct FVector                                     ParamLow                                                   (Const, Parm, OutParm)
void UParticleSystemComponent::SetVectorRandParameter(const struct FName& ParameterName, struct FVector* Param, struct FVector* ParamLow)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetVectorRandParameter");

	UParticleSystemComponent_SetVectorRandParameter_Params params {};
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Param != nullptr)
		*Param = params.Param;
	if (ParamLow != nullptr)
		*ParamLow = params.ParamLow;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetVectorParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		struct FVector                                     Param                                                      (Parm)
void UParticleSystemComponent::SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetVectorParameter");

	UParticleSystemComponent_SetVectorParameter_Params params {};
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetFloatRandParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		float                                              Param                                                      (Parm)
//		float                                              ParamLow                                                   (Parm)
void UParticleSystemComponent::SetFloatRandParameter(const struct FName& ParameterName, float Param, float ParamLow)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetFloatRandParameter");

	UParticleSystemComponent_SetFloatRandParameter_Params params {};
	params.ParameterName = ParameterName;
	params.Param = Param;
	params.ParamLow = ParamLow;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetFloatParameter
//		Flags  -> ()
// Parameters:
//		struct FName                                       ParameterName                                              (Parm)
//		float                                              Param                                                      (Parm)
void UParticleSystemComponent::SetFloatParameter(const struct FName& ParameterName, float Param)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetFloatParameter");

	UParticleSystemComponent_SetFloatParameter_Params params {};
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.GetEditorLODLevel
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UParticleSystemComponent::GetEditorLODLevel()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetEditorLODLevel");

	UParticleSystemComponent_GetEditorLODLevel_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.GetLODLevel
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UParticleSystemComponent::GetLODLevel()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetLODLevel");

	UParticleSystemComponent_GetLODLevel_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetEditorLODLevel
//		Flags  -> ()
// Parameters:
//		int                                                InLODLevel                                                 (Parm)
void UParticleSystemComponent::SetEditorLODLevel(int InLODLevel)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetEditorLODLevel");

	UParticleSystemComponent_SetEditorLODLevel_Params params {};
	params.InLODLevel = InLODLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetLODLevel
//		Flags  -> ()
// Parameters:
//		int                                                InLODLevel                                                 (Parm)
void UParticleSystemComponent::SetLODLevel(int InLODLevel)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetLODLevel");

	UParticleSystemComponent_SetLODLevel_Params params {};
	params.InLODLevel = InLODLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SystemHasCompleted
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UParticleSystemComponent::SystemHasCompleted()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SystemHasCompleted");

	UParticleSystemComponent_SystemHasCompleted_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.GetMaxLifespan
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UParticleSystemComponent::GetMaxLifespan()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetMaxLifespan");

	UParticleSystemComponent_GetMaxLifespan_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.DetermineLODLevelForLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     EffectLocation                                             (Const, Parm, OutParm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UParticleSystemComponent::DetermineLODLevelForLocation(struct FVector* EffectLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.DetermineLODLevelForLocation");

	UParticleSystemComponent_DetermineLODLevelForLocation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (EffectLocation != nullptr)
		*EffectLocation = params.EffectLocation;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetBeamTargetStrength
//		Flags  -> ()
// Parameters:
//		int                                                EmitterIndex                                               (Parm)
//		float                                              NewTargetStrength                                          (Parm)
//		int                                                TargetIndex                                                (Parm)
void UParticleSystemComponent::SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetStrength");

	UParticleSystemComponent_SetBeamTargetStrength_Params params {};
	params.EmitterIndex = EmitterIndex;
	params.NewTargetStrength = NewTargetStrength;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetBeamTargetTangent
//		Flags  -> ()
// Parameters:
//		int                                                EmitterIndex                                               (Parm)
//		struct FVector                                     NewTangentPoint                                            (Parm)
//		int                                                TargetIndex                                                (Parm)
void UParticleSystemComponent::SetBeamTargetTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int TargetIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetTangent");

	UParticleSystemComponent_SetBeamTargetTangent_Params params {};
	params.EmitterIndex = EmitterIndex;
	params.NewTangentPoint = NewTangentPoint;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetBeamTargetPoint
//		Flags  -> ()
// Parameters:
//		int                                                EmitterIndex                                               (Parm)
//		struct FVector                                     NewTargetPoint                                             (Parm)
//		int                                                TargetIndex                                                (Parm)
void UParticleSystemComponent::SetBeamTargetPoint(int EmitterIndex, const struct FVector& NewTargetPoint, int TargetIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetPoint");

	UParticleSystemComponent_SetBeamTargetPoint_Params params {};
	params.EmitterIndex = EmitterIndex;
	params.NewTargetPoint = NewTargetPoint;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetBeamSourceStrength
//		Flags  -> ()
// Parameters:
//		int                                                EmitterIndex                                               (Parm)
//		float                                              NewSourceStrength                                          (Parm)
//		int                                                SourceIndex                                                (Parm)
void UParticleSystemComponent::SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourceStrength");

	UParticleSystemComponent_SetBeamSourceStrength_Params params {};
	params.EmitterIndex = EmitterIndex;
	params.NewSourceStrength = NewSourceStrength;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetBeamSourceTangent
//		Flags  -> ()
// Parameters:
//		int                                                EmitterIndex                                               (Parm)
//		struct FVector                                     NewTangentPoint                                            (Parm)
//		int                                                SourceIndex                                                (Parm)
void UParticleSystemComponent::SetBeamSourceTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int SourceIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourceTangent");

	UParticleSystemComponent_SetBeamSourceTangent_Params params {};
	params.EmitterIndex = EmitterIndex;
	params.NewTangentPoint = NewTangentPoint;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetBeamSourcePoint
//		Flags  -> ()
// Parameters:
//		int                                                EmitterIndex                                               (Parm)
//		struct FVector                                     NewSourcePoint                                             (Parm)
//		int                                                SourceIndex                                                (Parm)
void UParticleSystemComponent::SetBeamSourcePoint(int EmitterIndex, const struct FVector& NewSourcePoint, int SourceIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourcePoint");

	UParticleSystemComponent_SetBeamSourcePoint_Params params {};
	params.EmitterIndex = EmitterIndex;
	params.NewSourcePoint = NewSourcePoint;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetBeamDistance
//		Flags  -> ()
// Parameters:
//		int                                                EmitterIndex                                               (Parm)
//		float                                              Distance                                                   (Parm)
void UParticleSystemComponent::SetBeamDistance(int EmitterIndex, float Distance)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamDistance");

	UParticleSystemComponent_SetBeamDistance_Params params {};
	params.EmitterIndex = EmitterIndex;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetBeamEndPoint
//		Flags  -> ()
// Parameters:
//		int                                                EmitterIndex                                               (Parm)
//		struct FVector                                     NewEndPoint                                                (Parm)
void UParticleSystemComponent::SetBeamEndPoint(int EmitterIndex, const struct FVector& NewEndPoint)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamEndPoint");

	UParticleSystemComponent_SetBeamEndPoint_Params params {};
	params.EmitterIndex = EmitterIndex;
	params.NewEndPoint = NewEndPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetBeamTessellationFactor
//		Flags  -> ()
// Parameters:
//		int                                                EmitterIndex                                               (Parm)
//		float                                              NewFactor                                                  (Parm)
void UParticleSystemComponent::SetBeamTessellationFactor(int EmitterIndex, float NewFactor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTessellationFactor");

	UParticleSystemComponent_SetBeamTessellationFactor_Params params {};
	params.EmitterIndex = EmitterIndex;
	params.NewFactor = NewFactor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetBeamType
//		Flags  -> ()
// Parameters:
//		int                                                EmitterIndex                                               (Parm)
//		int                                                NewMethod                                                  (Parm)
void UParticleSystemComponent::SetBeamType(int EmitterIndex, int NewMethod)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamType");

	UParticleSystemComponent_SetBeamType_Params params {};
	params.EmitterIndex = EmitterIndex;
	params.NewMethod = NewMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.RewindEmitterInstances
//		Flags  -> ()
void UParticleSystemComponent::RewindEmitterInstances()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.RewindEmitterInstances");

	UParticleSystemComponent_RewindEmitterInstances_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.RewindEmitterInstance
//		Flags  -> ()
// Parameters:
//		int                                                EmitterIndex                                               (Parm)
void UParticleSystemComponent::RewindEmitterInstance(int EmitterIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.RewindEmitterInstance");

	UParticleSystemComponent_RewindEmitterInstance_Params params {};
	params.EmitterIndex = EmitterIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetKillOnCompleted
//		Flags  -> ()
// Parameters:
//		int                                                EmitterIndex                                               (Parm)
//		bool                                               bKill                                                      (Parm)
void UParticleSystemComponent::SetKillOnCompleted(int EmitterIndex, bool bKill)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetKillOnCompleted");

	UParticleSystemComponent_SetKillOnCompleted_Params params {};
	params.EmitterIndex = EmitterIndex;
	params.bKill = bKill;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetKillOnDeactivate
//		Flags  -> ()
// Parameters:
//		int                                                EmitterIndex                                               (Parm)
//		bool                                               bKill                                                      (Parm)
void UParticleSystemComponent::SetKillOnDeactivate(int EmitterIndex, bool bKill)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetKillOnDeactivate");

	UParticleSystemComponent_SetKillOnDeactivate_Params params {};
	params.EmitterIndex = EmitterIndex;
	params.bKill = bKill;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.GetSkipBoundsUpdate
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UParticleSystemComponent::GetSkipBoundsUpdate()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetSkipBoundsUpdate");

	UParticleSystemComponent_GetSkipBoundsUpdate_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetSkipBoundsUpdate
//		Flags  -> ()
// Parameters:
//		bool                                               bInSkipBoundsUpdate                                        (Parm)
void UParticleSystemComponent::SetSkipBoundsUpdate(bool bInSkipBoundsUpdate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetSkipBoundsUpdate");

	UParticleSystemComponent_SetSkipBoundsUpdate_Params params {};
	params.bInSkipBoundsUpdate = bInSkipBoundsUpdate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.GetSkipUpdateDynamicDataDuringTick
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UParticleSystemComponent::GetSkipUpdateDynamicDataDuringTick()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetSkipUpdateDynamicDataDuringTick");

	UParticleSystemComponent_GetSkipUpdateDynamicDataDuringTick_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetSkipUpdateDynamicDataDuringTick
//		Flags  -> ()
// Parameters:
//		bool                                               bInSkipUpdateDynamicDataDuringTick                         (Parm)
void UParticleSystemComponent::SetSkipUpdateDynamicDataDuringTick(bool bInSkipUpdateDynamicDataDuringTick)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetSkipUpdateDynamicDataDuringTick");

	UParticleSystemComponent_SetSkipUpdateDynamicDataDuringTick_Params params {};
	params.bInSkipUpdateDynamicDataDuringTick = bInSkipUpdateDynamicDataDuringTick;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.KillParticlesInEmitter
//		Flags  -> ()
// Parameters:
//		struct FName                                       InEmitterName                                              (Parm)
void UParticleSystemComponent::KillParticlesInEmitter(const struct FName& InEmitterName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.KillParticlesInEmitter");

	UParticleSystemComponent_KillParticlesInEmitter_Params params {};
	params.InEmitterName = InEmitterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.KillParticlesForced
//		Flags  -> ()
void UParticleSystemComponent::KillParticlesForced()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.KillParticlesForced");

	UParticleSystemComponent_KillParticlesForced_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.DeactivateSystem
//		Flags  -> ()
void UParticleSystemComponent::DeactivateSystem()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.DeactivateSystem");

	UParticleSystemComponent_DeactivateSystem_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.ActivateSystem
//		Flags  -> ()
// Parameters:
//		bool                                               bFlagAsJustAttached                                        (OptionalParm, Parm)
void UParticleSystemComponent::ActivateSystem(bool bFlagAsJustAttached)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.ActivateSystem");

	UParticleSystemComponent_ActivateSystem_Params params {};
	params.bFlagAsJustAttached = bFlagAsJustAttached;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.SetTemplate
//		Flags  -> ()
// Parameters:
//		class UParticleSystem*                             NewTemplate                                                (Parm)
void UParticleSystemComponent::SetTemplate(class UParticleSystem* NewTemplate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetTemplate");

	UParticleSystemComponent_SetTemplate_Params params {};
	params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleSystemComponent.OnSystemFinished
//		Flags  -> ()
// Parameters:
//		class UParticleSystemComponent*                    PSystem                                                    (Parm, EditInline)
void UParticleSystemComponent::OnSystemFinished(class UParticleSystemComponent* PSystem)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.OnSystemFinished");

	UParticleSystemComponent_OnSystemFinished_Params params {};
	params.PSystem = PSystem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleEmitter.GetMaxLifespan
//		Flags  -> ()
// Parameters:
//		float                                              InComponentDelay                                           (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UParticleEmitter::GetMaxLifespan(float InComponentDelay)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleEmitter.GetMaxLifespan");

	UParticleEmitter_GetMaxLifespan_Params params {};
	params.InComponentDelay = InComponentDelay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PBRuleNodeMesh.PickRandomBuildingMesh
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UPBRuleNodeMesh::PickRandomBuildingMesh()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PBRuleNodeMesh.PickRandomBuildingMesh");

	UPBRuleNodeMesh_PickRandomBuildingMesh_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraShake.GetLocOscillationMagnitude
//		Flags  -> (Singular, NetReliable, Simulated, Static, Const, Private, HasDefaults, K2Call, K2Pure)
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UCameraShake::STATIC_GetLocOscillationMagnitude()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.GetLocOscillationMagnitude");

	UCameraShake_GetLocOscillationMagnitude_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraShake.GetRotOscillationMagnitude
//		Flags  -> (Net, Simulated, Native, Event, Operator, Const, Private, HasDefaults, K2Call, K2Pure)
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UCameraShake::GetRotOscillationMagnitude()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.GetRotOscillationMagnitude");

	UCameraShake_GetRotOscillationMagnitude_Params params {};

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraModifier.UpdateAlpha
//		Flags  -> ()
// Parameters:
//		class ACamera*                                     Camera                                                     (Parm)
//		float                                              DeltaTime                                                  (Parm)
void UCameraModifier::UpdateAlpha(class ACamera* Camera, float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.UpdateAlpha");

	UCameraModifier_UpdateAlpha_Params params {};
	params.Camera = Camera;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraModifier.ProcessViewRotation
//		Flags  -> ()
// Parameters:
//		class AActor*                                      ViewTarget                                                 (Parm)
//		float                                              DeltaTime                                                  (Parm)
//		struct FRotator                                    out_ViewRotation                                           (Parm, OutParm)
//		struct FRotator                                    out_DeltaRot                                               (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCameraModifier::ProcessViewRotation(class AActor* ViewTarget, float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.ProcessViewRotation");

	UCameraModifier_ProcessViewRotation_Params params {};
	params.ViewTarget = ViewTarget;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_ViewRotation != nullptr)
		*out_ViewRotation = params.out_ViewRotation;
	if (out_DeltaRot != nullptr)
		*out_DeltaRot = params.out_DeltaRot;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraModifier.ToggleModifier
//		Flags  -> ()
void UCameraModifier::ToggleModifier()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.ToggleModifier");

	UCameraModifier_ToggleModifier_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraModifier.EnableModifier
//		Flags  -> ()
void UCameraModifier::EnableModifier()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.EnableModifier");

	UCameraModifier_EnableModifier_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraModifier.DisableModifier
//		Flags  -> ()
// Parameters:
//		bool                                               bImmediate                                                 (OptionalParm, Parm)
void UCameraModifier::DisableModifier(bool bImmediate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.DisableModifier");

	UCameraModifier_DisableModifier_Params params {};
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraModifier.RemoveCameraModifier
//		Flags  -> ()
// Parameters:
//		class ACamera*                                     Camera                                                     (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCameraModifier::RemoveCameraModifier(class ACamera* Camera)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.RemoveCameraModifier");

	UCameraModifier_RemoveCameraModifier_Params params {};
	params.Camera = Camera;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraModifier.AddCameraModifier
//		Flags  -> ()
// Parameters:
//		class ACamera*                                     Camera                                                     (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCameraModifier::AddCameraModifier(class ACamera* Camera)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.AddCameraModifier");

	UCameraModifier_AddCameraModifier_Params params {};
	params.Camera = Camera;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraModifier.IsDisabled
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCameraModifier::IsDisabled()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.IsDisabled");

	UCameraModifier_IsDisabled_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraModifier.ModifyCamera
//		Flags  -> ()
// Parameters:
//		class ACamera*                                     Camera                                                     (Parm)
//		float                                              DeltaTime                                                  (Parm)
//		struct FTPOV                                       OutPOV                                                     (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCameraModifier::ModifyCamera(class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.ModifyCamera");

	UCameraModifier_ModifyCamera_Params params {};
	params.Camera = Camera;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPOV != nullptr)
		*OutPOV = params.OutPOV;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraModifier.Init
//		Flags  -> ()
void UCameraModifier::Init()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.Init");

	UCameraModifier_Init_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraModifier_CameraShake.ModifyCamera
//		Flags  -> ()
// Parameters:
//		class ACamera*                                     Camera                                                     (Parm)
//		float                                              DeltaTime                                                  (Parm)
//		struct FTPOV                                       OutPOV                                                     (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCameraModifier_CameraShake::ModifyCamera(class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.ModifyCamera");

	UCameraModifier_CameraShake_ModifyCamera_Params params {};
	params.Camera = Camera;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPOV != nullptr)
		*OutPOV = params.OutPOV;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraModifier_CameraShake.UpdateCameraShake
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
//		struct FCameraShakeInstance                        Shake                                                      (Parm, OutParm)
//		struct FTPOV                                       OutPOV                                                     (Parm, OutParm)
void UCameraModifier_CameraShake::UpdateCameraShake(float DeltaTime, struct FCameraShakeInstance* Shake, struct FTPOV* OutPOV)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.UpdateCameraShake");

	UCameraModifier_CameraShake_UpdateCameraShake_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Shake != nullptr)
		*Shake = params.Shake;
	if (OutPOV != nullptr)
		*OutPOV = params.OutPOV;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraModifier_CameraShake.RemoveAllCameraShakes
//		Flags  -> ()
// Parameters:
void UCameraModifier_CameraShake::RemoveAllCameraShakes()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.RemoveAllCameraShakes");

	UCameraModifier_CameraShake_RemoveAllCameraShakes_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraModifier_CameraShake.RemoveCameraShake
//		Flags  -> ()
// Parameters:
//		class UCameraShake*                                Shake                                                      (Parm)
void UCameraModifier_CameraShake::RemoveCameraShake(class UCameraShake* Shake)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.RemoveCameraShake");

	UCameraModifier_CameraShake_RemoveCameraShake_Params params {};
	params.Shake = Shake;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraModifier_CameraShake.AddCameraShake
//		Flags  -> ()
// Parameters:
//		class UCameraShake*                                NewShake                                                   (Parm)
//		float                                              Scale                                                      (Parm)
//		TEnumAsByte<Engine_ECameraAnimPlaySpace>           PlaySpace                                                  (OptionalParm, Parm)
//		struct FRotator                                    UserPlaySpaceRot                                           (OptionalParm, Parm)
void UCameraModifier_CameraShake::AddCameraShake(class UCameraShake* NewShake, float Scale, TEnumAsByte<Engine_ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.AddCameraShake");

	UCameraModifier_CameraShake_AddCameraShake_Params params {};
	params.NewShake = NewShake;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraModifier_CameraShake.InitializeShake
//		Flags  -> (Net, Simulated, Exec, Native, Static, Const, Private, HasDefaults, K2Call, K2Pure)
// Parameters:
//		class UCameraShake*                                NewShake                                                   (Parm)
//		float                                              Scale                                                      (Parm)
//		TEnumAsByte<Engine_ECameraAnimPlaySpace>           PlaySpace                                                  (Parm)
//		struct FRotator                                    UserPlaySpaceRot                                           (OptionalParm, Parm)
//		struct FCameraShakeInstance                        ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FCameraShakeInstance UCameraModifier_CameraShake::STATIC_InitializeShake(class UCameraShake* NewShake, float Scale, TEnumAsByte<Engine_ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.InitializeShake");

	UCameraModifier_CameraShake_InitializeShake_Params params {};
	params.NewShake = NewShake;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraModifier_CameraShake.ReinitShake
//		Flags  -> ()
// Parameters:
//		int                                                ActiveShakeIdx                                             (Parm)
//		float                                              Scale                                                      (Parm)
void UCameraModifier_CameraShake::ReinitShake(int ActiveShakeIdx, float Scale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.ReinitShake");

	UCameraModifier_CameraShake_ReinitShake_Params params {};
	params.ActiveShakeIdx = ActiveShakeIdx;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraModifier_CameraShake.InitializeOffset
//		Flags  -> ()
// Parameters:
//		struct FFOscillator                                Param                                                      (Const, Parm, OutParm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UCameraModifier_CameraShake::InitializeOffset(struct FFOscillator* Param)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.InitializeOffset");

	UCameraModifier_CameraShake_InitializeOffset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Param != nullptr)
		*Param = params.Param;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageUpgradeHelper.GetCloudUpgradeKeys
//		Flags  -> ()
// Parameters:
//		TArray<struct FString>                             CloudKeys                                                  (Parm, OutParm, NeedCtorLink)
void UCloudStorageUpgradeHelper::GetCloudUpgradeKeys(TArray<struct FString>* CloudKeys)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageUpgradeHelper.GetCloudUpgradeKeys");

	UCloudStorageUpgradeHelper_GetCloudUpgradeKeys_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (CloudKeys != nullptr)
		*CloudKeys = params.CloudKeys;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageUpgradeHelper.HandleLocalKeyValue
//		Flags  -> ()
// Parameters:
//		struct FString                                     CloudKeyName                                               (Parm, OutParm, NeedCtorLink)
//		struct FPlatformInterfaceData                      CloudValue                                                 (Parm, OutParm, NeedCtorLink)
//		int                                                bShouldMoveToCloud                                         (Parm, OutParm)
//		int                                                bShouldDeleteLocalKey                                      (Parm, OutParm)
void UCloudStorageUpgradeHelper::HandleLocalKeyValue(struct FString* CloudKeyName, struct FPlatformInterfaceData* CloudValue, int* bShouldMoveToCloud, int* bShouldDeleteLocalKey)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageUpgradeHelper.HandleLocalKeyValue");

	UCloudStorageUpgradeHelper_HandleLocalKeyValue_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (CloudKeyName != nullptr)
		*CloudKeyName = params.CloudKeyName;
	if (CloudValue != nullptr)
		*CloudValue = params.CloudValue;
	if (bShouldMoveToCloud != nullptr)
		*bShouldMoveToCloud = params.bShouldMoveToCloud;
	if (bShouldDeleteLocalKey != nullptr)
		*bShouldDeleteLocalKey = params.bShouldDeleteLocalKey;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageUpgradeHelper.HandleLocalDocument
//		Flags  -> ()
// Parameters:
//		struct FString                                     DocName                                                    (Parm, OutParm, NeedCtorLink)
//		int                                                bShouldMoveToCloud                                         (Parm, OutParm)
//		int                                                bShouldDeleteLocalFile                                     (Parm, OutParm)
void UCloudStorageUpgradeHelper::HandleLocalDocument(struct FString* DocName, int* bShouldMoveToCloud, int* bShouldDeleteLocalFile)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageUpgradeHelper.HandleLocalDocument");

	UCloudStorageUpgradeHelper_HandleLocalDocument_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DocName != nullptr)
		*DocName = params.DocName;
	if (bShouldMoveToCloud != nullptr)
		*bShouldMoveToCloud = params.bShouldMoveToCloud;
	if (bShouldDeleteLocalFile != nullptr)
		*bShouldDeleteLocalFile = params.bShouldDeleteLocalFile;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnalyticEventsBase.SendCachedEvents
//		Flags  -> ()
void UAnalyticEventsBase::SendCachedEvents()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.SendCachedEvents");

	UAnalyticEventsBase_SendCachedEvents_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnalyticEventsBase.LogCurrencyGivenEvent
//		Flags  -> ()
// Parameters:
//		struct FString                                     GameCurrencyType                                           (Parm, NeedCtorLink)
//		int                                                GameCurrencyAmount                                         (Parm)
void UAnalyticEventsBase::LogCurrencyGivenEvent(const struct FString& GameCurrencyType, int GameCurrencyAmount)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.LogCurrencyGivenEvent");

	UAnalyticEventsBase_LogCurrencyGivenEvent_Params params {};
	params.GameCurrencyType = GameCurrencyType;
	params.GameCurrencyAmount = GameCurrencyAmount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnalyticEventsBase.LogCurrencyPurchaseEvent
//		Flags  -> ()
// Parameters:
//		struct FString                                     GameCurrencyType                                           (Parm, NeedCtorLink)
//		int                                                GameCurrencyAmount                                         (Parm)
//		struct FString                                     RealCurrencyType                                           (Parm, NeedCtorLink)
//		float                                              RealMoneyCost                                              (Parm)
//		struct FString                                     PaymentProvider                                            (Parm, NeedCtorLink)
void UAnalyticEventsBase::LogCurrencyPurchaseEvent(const struct FString& GameCurrencyType, int GameCurrencyAmount, const struct FString& RealCurrencyType, float RealMoneyCost, const struct FString& PaymentProvider)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.LogCurrencyPurchaseEvent");

	UAnalyticEventsBase_LogCurrencyPurchaseEvent_Params params {};
	params.GameCurrencyType = GameCurrencyType;
	params.GameCurrencyAmount = GameCurrencyAmount;
	params.RealCurrencyType = RealCurrencyType;
	params.RealMoneyCost = RealMoneyCost;
	params.PaymentProvider = PaymentProvider;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnalyticEventsBase.LogItemPurchaseEvent
//		Flags  -> ()
// Parameters:
//		struct FString                                     ItemId                                                     (Parm, NeedCtorLink)
//		struct FString                                     Currency                                                   (Parm, NeedCtorLink)
//		int                                                PerItemCost                                                (Parm)
//		int                                                ItemQuantity                                               (Parm)
void UAnalyticEventsBase::LogItemPurchaseEvent(const struct FString& ItemId, const struct FString& Currency, int PerItemCost, int ItemQuantity)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.LogItemPurchaseEvent");

	UAnalyticEventsBase_LogItemPurchaseEvent_Params params {};
	params.ItemId = ItemId;
	params.Currency = Currency;
	params.PerItemCost = PerItemCost;
	params.ItemQuantity = ItemQuantity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnalyticEventsBase.LogUserAttributeUpdateArray
//		Flags  -> ()
// Parameters:
//		TArray<struct FEventStringParam>                   AttributeArray                                             (Parm, NeedCtorLink)
void UAnalyticEventsBase::LogUserAttributeUpdateArray(TArray<struct FEventStringParam> AttributeArray)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.LogUserAttributeUpdateArray");

	UAnalyticEventsBase_LogUserAttributeUpdateArray_Params params {};
	params.AttributeArray = AttributeArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnalyticEventsBase.LogUserAttributeUpdate
//		Flags  -> ()
// Parameters:
//		struct FString                                     AttributeName                                              (Parm, NeedCtorLink)
//		struct FString                                     AttributeValue                                             (Parm, NeedCtorLink)
void UAnalyticEventsBase::LogUserAttributeUpdate(const struct FString& AttributeName, const struct FString& AttributeValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.LogUserAttributeUpdate");

	UAnalyticEventsBase_LogUserAttributeUpdate_Params params {};
	params.AttributeName = AttributeName;
	params.AttributeValue = AttributeValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnalyticEventsBase.LogErrorMessage
//		Flags  -> ()
// Parameters:
//		struct FString                                     ErrorName                                                  (Parm, NeedCtorLink)
//		struct FString                                     ErrorMessage                                               (Parm, NeedCtorLink)
void UAnalyticEventsBase::LogErrorMessage(const struct FString& ErrorName, const struct FString& ErrorMessage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.LogErrorMessage");

	UAnalyticEventsBase_LogErrorMessage_Params params {};
	params.ErrorName = ErrorName;
	params.ErrorMessage = ErrorMessage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnalyticEventsBase.EndStringEventParamArray
//		Flags  -> ()
// Parameters:
//		struct FString                                     EventName                                                  (Parm, NeedCtorLink)
//		TArray<struct FEventStringParam>                   ParamArray                                                 (Parm, NeedCtorLink)
void UAnalyticEventsBase::EndStringEventParamArray(const struct FString& EventName, TArray<struct FEventStringParam> ParamArray)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.EndStringEventParamArray");

	UAnalyticEventsBase_EndStringEventParamArray_Params params {};
	params.EventName = EventName;
	params.ParamArray = ParamArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnalyticEventsBase.LogStringEventParamArray
//		Flags  -> ()
// Parameters:
//		struct FString                                     EventName                                                  (Parm, NeedCtorLink)
//		TArray<struct FEventStringParam>                   ParamArray                                                 (Parm, NeedCtorLink)
//		bool                                               bTimed                                                     (Parm)
void UAnalyticEventsBase::LogStringEventParamArray(const struct FString& EventName, TArray<struct FEventStringParam> ParamArray, bool bTimed)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.LogStringEventParamArray");

	UAnalyticEventsBase_LogStringEventParamArray_Params params {};
	params.EventName = EventName;
	params.ParamArray = ParamArray;
	params.bTimed = bTimed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnalyticEventsBase.EndStringEventParam
//		Flags  -> ()
// Parameters:
//		struct FString                                     EventName                                                  (Parm, NeedCtorLink)
//		struct FString                                     ParamName                                                  (Parm, NeedCtorLink)
//		struct FString                                     ParamValue                                                 (Parm, NeedCtorLink)
void UAnalyticEventsBase::EndStringEventParam(const struct FString& EventName, const struct FString& ParamName, const struct FString& ParamValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.EndStringEventParam");

	UAnalyticEventsBase_EndStringEventParam_Params params {};
	params.EventName = EventName;
	params.ParamName = ParamName;
	params.ParamValue = ParamValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnalyticEventsBase.LogStringEventParam
//		Flags  -> ()
// Parameters:
//		struct FString                                     EventName                                                  (Parm, NeedCtorLink)
//		struct FString                                     ParamName                                                  (Parm, NeedCtorLink)
//		struct FString                                     ParamValue                                                 (Parm, NeedCtorLink)
//		bool                                               bTimed                                                     (Parm)
void UAnalyticEventsBase::LogStringEventParam(const struct FString& EventName, const struct FString& ParamName, const struct FString& ParamValue, bool bTimed)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.LogStringEventParam");

	UAnalyticEventsBase_LogStringEventParam_Params params {};
	params.EventName = EventName;
	params.ParamName = ParamName;
	params.ParamValue = ParamValue;
	params.bTimed = bTimed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnalyticEventsBase.EndStringEvent
//		Flags  -> ()
// Parameters:
//		struct FString                                     EventName                                                  (Parm, NeedCtorLink)
void UAnalyticEventsBase::EndStringEvent(const struct FString& EventName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.EndStringEvent");

	UAnalyticEventsBase_EndStringEvent_Params params {};
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnalyticEventsBase.LogStringEvent
//		Flags  -> ()
// Parameters:
//		struct FString                                     EventName                                                  (Parm, NeedCtorLink)
//		bool                                               bTimed                                                     (Parm)
void UAnalyticEventsBase::LogStringEvent(const struct FString& EventName, bool bTimed)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.LogStringEvent");

	UAnalyticEventsBase_LogStringEvent_Params params {};
	params.EventName = EventName;
	params.bTimed = bTimed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnalyticEventsBase.EndSession
//		Flags  -> ()
void UAnalyticEventsBase::EndSession()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.EndSession");

	UAnalyticEventsBase_EndSession_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnalyticEventsBase.StartSession
//		Flags  -> ()
void UAnalyticEventsBase::StartSession()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.StartSession");

	UAnalyticEventsBase_StartSession_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnalyticEventsBase.SetUserId
//		Flags  -> ()
// Parameters:
//		struct FString                                     NewUserId                                                  (Parm, NeedCtorLink)
void UAnalyticEventsBase::SetUserId(const struct FString& NewUserId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.SetUserId");

	UAnalyticEventsBase_SetUserId_Params params {};
	params.NewUserId = NewUserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnalyticEventsBase.Init
//		Flags  -> ()
void UAnalyticEventsBase::Init()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.Init");

	UAnalyticEventsBase_Init_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnalyticEventsBase.IsSessionInProgress
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UAnalyticEventsBase::IsSessionInProgress()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.IsSessionInProgress");

	UAnalyticEventsBase_IsSessionInProgress_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MultiProviderAnalytics.SendCachedEvents
//		Flags  -> ()
void UMultiProviderAnalytics::SendCachedEvents()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.SendCachedEvents");

	UMultiProviderAnalytics_SendCachedEvents_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MultiProviderAnalytics.LogCurrencyGivenEvent
//		Flags  -> ()
// Parameters:
//		struct FString                                     GameCurrencyType                                           (Parm, NeedCtorLink)
//		int                                                GameCurrencyAmount                                         (Parm)
void UMultiProviderAnalytics::LogCurrencyGivenEvent(const struct FString& GameCurrencyType, int GameCurrencyAmount)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.LogCurrencyGivenEvent");

	UMultiProviderAnalytics_LogCurrencyGivenEvent_Params params {};
	params.GameCurrencyType = GameCurrencyType;
	params.GameCurrencyAmount = GameCurrencyAmount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MultiProviderAnalytics.LogCurrencyPurchaseEvent
//		Flags  -> ()
// Parameters:
//		struct FString                                     GameCurrencyType                                           (Parm, NeedCtorLink)
//		int                                                GameCurrencyAmount                                         (Parm)
//		struct FString                                     RealCurrencyType                                           (Parm, NeedCtorLink)
//		float                                              RealMoneyCost                                              (Parm)
//		struct FString                                     PaymentProvider                                            (Parm, NeedCtorLink)
void UMultiProviderAnalytics::LogCurrencyPurchaseEvent(const struct FString& GameCurrencyType, int GameCurrencyAmount, const struct FString& RealCurrencyType, float RealMoneyCost, const struct FString& PaymentProvider)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.LogCurrencyPurchaseEvent");

	UMultiProviderAnalytics_LogCurrencyPurchaseEvent_Params params {};
	params.GameCurrencyType = GameCurrencyType;
	params.GameCurrencyAmount = GameCurrencyAmount;
	params.RealCurrencyType = RealCurrencyType;
	params.RealMoneyCost = RealMoneyCost;
	params.PaymentProvider = PaymentProvider;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MultiProviderAnalytics.LogItemPurchaseEvent
//		Flags  -> ()
// Parameters:
//		struct FString                                     ItemId                                                     (Parm, NeedCtorLink)
//		struct FString                                     Currency                                                   (Parm, NeedCtorLink)
//		int                                                PerItemCost                                                (Parm)
//		int                                                ItemQuantity                                               (Parm)
void UMultiProviderAnalytics::LogItemPurchaseEvent(const struct FString& ItemId, const struct FString& Currency, int PerItemCost, int ItemQuantity)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.LogItemPurchaseEvent");

	UMultiProviderAnalytics_LogItemPurchaseEvent_Params params {};
	params.ItemId = ItemId;
	params.Currency = Currency;
	params.PerItemCost = PerItemCost;
	params.ItemQuantity = ItemQuantity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MultiProviderAnalytics.LogUserAttributeUpdateArray
//		Flags  -> ()
// Parameters:
//		TArray<struct FEventStringParam>                   AttributeArray                                             (Parm, NeedCtorLink)
void UMultiProviderAnalytics::LogUserAttributeUpdateArray(TArray<struct FEventStringParam> AttributeArray)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.LogUserAttributeUpdateArray");

	UMultiProviderAnalytics_LogUserAttributeUpdateArray_Params params {};
	params.AttributeArray = AttributeArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MultiProviderAnalytics.LogUserAttributeUpdate
//		Flags  -> ()
// Parameters:
//		struct FString                                     AttributeName                                              (Parm, NeedCtorLink)
//		struct FString                                     AttributeValue                                             (Parm, NeedCtorLink)
void UMultiProviderAnalytics::LogUserAttributeUpdate(const struct FString& AttributeName, const struct FString& AttributeValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.LogUserAttributeUpdate");

	UMultiProviderAnalytics_LogUserAttributeUpdate_Params params {};
	params.AttributeName = AttributeName;
	params.AttributeValue = AttributeValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MultiProviderAnalytics.LogErrorMessage
//		Flags  -> ()
// Parameters:
//		struct FString                                     ErrorName                                                  (Parm, NeedCtorLink)
//		struct FString                                     ErrorMessage                                               (Parm, NeedCtorLink)
void UMultiProviderAnalytics::LogErrorMessage(const struct FString& ErrorName, const struct FString& ErrorMessage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.LogErrorMessage");

	UMultiProviderAnalytics_LogErrorMessage_Params params {};
	params.ErrorName = ErrorName;
	params.ErrorMessage = ErrorMessage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MultiProviderAnalytics.EndStringEventParamArray
//		Flags  -> ()
// Parameters:
//		struct FString                                     EventName                                                  (Parm, NeedCtorLink)
//		TArray<struct FEventStringParam>                   ParamArray                                                 (Parm, NeedCtorLink)
void UMultiProviderAnalytics::EndStringEventParamArray(const struct FString& EventName, TArray<struct FEventStringParam> ParamArray)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.EndStringEventParamArray");

	UMultiProviderAnalytics_EndStringEventParamArray_Params params {};
	params.EventName = EventName;
	params.ParamArray = ParamArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MultiProviderAnalytics.LogStringEventParamArray
//		Flags  -> ()
// Parameters:
//		struct FString                                     EventName                                                  (Parm, NeedCtorLink)
//		TArray<struct FEventStringParam>                   ParamArray                                                 (Parm, NeedCtorLink)
//		bool                                               bTimed                                                     (Parm)
void UMultiProviderAnalytics::LogStringEventParamArray(const struct FString& EventName, TArray<struct FEventStringParam> ParamArray, bool bTimed)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.LogStringEventParamArray");

	UMultiProviderAnalytics_LogStringEventParamArray_Params params {};
	params.EventName = EventName;
	params.ParamArray = ParamArray;
	params.bTimed = bTimed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MultiProviderAnalytics.EndStringEventParam
//		Flags  -> ()
// Parameters:
//		struct FString                                     EventName                                                  (Parm, NeedCtorLink)
//		struct FString                                     ParamName                                                  (Parm, NeedCtorLink)
//		struct FString                                     ParamValue                                                 (Parm, NeedCtorLink)
void UMultiProviderAnalytics::EndStringEventParam(const struct FString& EventName, const struct FString& ParamName, const struct FString& ParamValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.EndStringEventParam");

	UMultiProviderAnalytics_EndStringEventParam_Params params {};
	params.EventName = EventName;
	params.ParamName = ParamName;
	params.ParamValue = ParamValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MultiProviderAnalytics.LogStringEventParam
//		Flags  -> ()
// Parameters:
//		struct FString                                     EventName                                                  (Parm, NeedCtorLink)
//		struct FString                                     ParamName                                                  (Parm, NeedCtorLink)
//		struct FString                                     ParamValue                                                 (Parm, NeedCtorLink)
//		bool                                               bTimed                                                     (Parm)
void UMultiProviderAnalytics::LogStringEventParam(const struct FString& EventName, const struct FString& ParamName, const struct FString& ParamValue, bool bTimed)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.LogStringEventParam");

	UMultiProviderAnalytics_LogStringEventParam_Params params {};
	params.EventName = EventName;
	params.ParamName = ParamName;
	params.ParamValue = ParamValue;
	params.bTimed = bTimed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MultiProviderAnalytics.EndStringEvent
//		Flags  -> ()
// Parameters:
//		struct FString                                     EventName                                                  (Parm, NeedCtorLink)
void UMultiProviderAnalytics::EndStringEvent(const struct FString& EventName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.EndStringEvent");

	UMultiProviderAnalytics_EndStringEvent_Params params {};
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MultiProviderAnalytics.LogStringEvent
//		Flags  -> ()
// Parameters:
//		struct FString                                     EventName                                                  (Parm, NeedCtorLink)
//		bool                                               bTimed                                                     (Parm)
void UMultiProviderAnalytics::LogStringEvent(const struct FString& EventName, bool bTimed)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.LogStringEvent");

	UMultiProviderAnalytics_LogStringEvent_Params params {};
	params.EventName = EventName;
	params.bTimed = bTimed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MultiProviderAnalytics.EndSession
//		Flags  -> ()
void UMultiProviderAnalytics::EndSession()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.EndSession");

	UMultiProviderAnalytics_EndSession_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MultiProviderAnalytics.StartSession
//		Flags  -> ()
void UMultiProviderAnalytics::StartSession()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.StartSession");

	UMultiProviderAnalytics_StartSession_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MultiProviderAnalytics.SetUserId
//		Flags  -> ()
// Parameters:
//		struct FString                                     NewUserId                                                  (Parm, NeedCtorLink)
void UMultiProviderAnalytics::SetUserId(const struct FString& NewUserId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.SetUserId");

	UMultiProviderAnalytics_SetUserId_Params params {};
	params.NewUserId = NewUserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MultiProviderAnalytics.Init
//		Flags  -> ()
// Parameters:
void UMultiProviderAnalytics::Init()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.Init");

	UMultiProviderAnalytics_Init_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.UpgradeLocalStorageToCloud
//		Flags  -> ()
// Parameters:
//		bool                                               bForceSearchAgain                                          (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudStorageBase::UpgradeLocalStorageToCloud(bool bForceSearchAgain)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.UpgradeLocalStorageToCloud");

	UCloudStorageBase_UpgradeLocalStorageToCloud_Params params {};
	params.bForceSearchAgain = bForceSearchAgain;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.ResolveConflictWithVersionIndex
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudStorageBase::ResolveConflictWithVersionIndex(int Index)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.ResolveConflictWithVersionIndex");

	UCloudStorageBase_ResolveConflictWithVersionIndex_Params params {};
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.ResolveConflictWithNewestDocument
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudStorageBase::ResolveConflictWithNewestDocument()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.ResolveConflictWithNewestDocument");

	UCloudStorageBase_ResolveConflictWithNewestDocument_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.WaitForWritesToFinish
//		Flags  -> ()
// Parameters:
//		float                                              MaxTimeSeconds                                             (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudStorageBase::WaitForWritesToFinish(float MaxTimeSeconds)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.WaitForWritesToFinish");

	UCloudStorageBase_WaitForWritesToFinish_Params params {};
	params.MaxTimeSeconds = MaxTimeSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.IsStillWritingFiles
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudStorageBase::IsStillWritingFiles()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.IsStillWritingFiles");

	UCloudStorageBase_IsStillWritingFiles_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.SaveDocumentWithObject
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
//		class UObject*                                     ObjectData                                                 (Parm)
//		int                                                SaveVersion                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudStorageBase::SaveDocumentWithObject(int Index, class UObject* ObjectData, int SaveVersion)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.SaveDocumentWithObject");

	UCloudStorageBase_SaveDocumentWithObject_Params params {};
	params.Index = Index;
	params.ObjectData = ObjectData;
	params.SaveVersion = SaveVersion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.SaveDocumentWithBytes
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
//		TArray<unsigned char>                              ByteData                                                   (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudStorageBase::SaveDocumentWithBytes(int Index, TArray<unsigned char> ByteData)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.SaveDocumentWithBytes");

	UCloudStorageBase_SaveDocumentWithBytes_Params params {};
	params.Index = Index;
	params.ByteData = ByteData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.SaveDocumentWithString
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
//		struct FString                                     StringData                                                 (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudStorageBase::SaveDocumentWithString(int Index, const struct FString& StringData)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.SaveDocumentWithString");

	UCloudStorageBase_SaveDocumentWithString_Params params {};
	params.Index = Index;
	params.StringData = StringData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.WriteCloudDocument
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudStorageBase::WriteCloudDocument(int Index)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.WriteCloudDocument");

	UCloudStorageBase_WriteCloudDocument_Params params {};
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.ParseDocumentAsObject
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
//		class UClass*                                      ObjectClass                                                (Parm)
//		int                                                ExpectedVersion                                            (Parm)
//		bool                                               bIsForConflict                                             (OptionalParm, Parm)
//		class UObject*                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
class UObject* UCloudStorageBase::ParseDocumentAsObject(int Index, class UClass* ObjectClass, int ExpectedVersion, bool bIsForConflict)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.ParseDocumentAsObject");

	UCloudStorageBase_ParseDocumentAsObject_Params params {};
	params.Index = Index;
	params.ObjectClass = ObjectClass;
	params.ExpectedVersion = ExpectedVersion;
	params.bIsForConflict = bIsForConflict;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.ParseDocumentAsBytes
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
//		TArray<unsigned char>                              ByteData                                                   (Parm, OutParm, NeedCtorLink)
//		bool                                               bIsForConflict                                             (OptionalParm, Parm)
void UCloudStorageBase::ParseDocumentAsBytes(int Index, TArray<unsigned char>* ByteData, bool bIsForConflict)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.ParseDocumentAsBytes");

	UCloudStorageBase_ParseDocumentAsBytes_Params params {};
	params.Index = Index;
	params.bIsForConflict = bIsForConflict;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ByteData != nullptr)
		*ByteData = params.ByteData;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.ParseDocumentAsString
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
//		bool                                               bIsForConflict                                             (OptionalParm, Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UCloudStorageBase::ParseDocumentAsString(int Index, bool bIsForConflict)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.ParseDocumentAsString");

	UCloudStorageBase_ParseDocumentAsString_Params params {};
	params.Index = Index;
	params.bIsForConflict = bIsForConflict;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.ReadCloudDocument
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
//		bool                                               bIsForConflict                                             (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudStorageBase::ReadCloudDocument(int Index, bool bIsForConflict)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.ReadCloudDocument");

	UCloudStorageBase_ReadCloudDocument_Params params {};
	params.Index = Index;
	params.bIsForConflict = bIsForConflict;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.DeleteAllCloudDocuments
//		Flags  -> ()
void UCloudStorageBase::DeleteAllCloudDocuments()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.DeleteAllCloudDocuments");

	UCloudStorageBase_DeleteAllCloudDocuments_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.CreateCloudDocument
//		Flags  -> ()
// Parameters:
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UCloudStorageBase::CreateCloudDocument(const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.CreateCloudDocument");

	UCloudStorageBase_CreateCloudDocument_Params params {};
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.GetCloudDocumentName
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UCloudStorageBase::GetCloudDocumentName(int Index)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.GetCloudDocumentName");

	UCloudStorageBase_GetCloudDocumentName_Params params {};
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.GetNumCloudDocuments
//		Flags  -> ()
// Parameters:
//		bool                                               bIsForConflict                                             (OptionalParm, Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UCloudStorageBase::GetNumCloudDocuments(bool bIsForConflict)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.GetNumCloudDocuments");

	UCloudStorageBase_GetNumCloudDocuments_Params params {};
	params.bIsForConflict = bIsForConflict;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.QueryForCloudDocuments
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudStorageBase::QueryForCloudDocuments()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.QueryForCloudDocuments");

	UCloudStorageBase_QueryForCloudDocuments_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.WriteKeyValue
//		Flags  -> ()
// Parameters:
//		struct FString                                     KeyName                                                    (Parm, NeedCtorLink)
//		struct FPlatformInterfaceData                      Value                                                      (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudStorageBase::WriteKeyValue(const struct FString& KeyName, struct FPlatformInterfaceData* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.WriteKeyValue");

	UCloudStorageBase_WriteKeyValue_Params params {};
	params.KeyName = KeyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.ReadKeyValueFromLocalStore
//		Flags  -> ()
// Parameters:
//		struct FString                                     KeyName                                                    (Parm, NeedCtorLink)
//		TEnumAsByte<Engine_EPlatformInterfaceDataType>     Type                                                       (Parm)
//		struct FPlatformInterfaceDelegateResult            Value                                                      (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudStorageBase::ReadKeyValueFromLocalStore(const struct FString& KeyName, TEnumAsByte<Engine_EPlatformInterfaceDataType> Type, struct FPlatformInterfaceDelegateResult* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.ReadKeyValueFromLocalStore");

	UCloudStorageBase_ReadKeyValueFromLocalStore_Params params {};
	params.KeyName = KeyName;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.ReadKeyValue
//		Flags  -> ()
// Parameters:
//		struct FString                                     KeyName                                                    (Parm, NeedCtorLink)
//		TEnumAsByte<Engine_EPlatformInterfaceDataType>     Type                                                       (Parm)
//		struct FPlatformInterfaceDelegateResult            Value                                                      (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudStorageBase::ReadKeyValue(const struct FString& KeyName, TEnumAsByte<Engine_EPlatformInterfaceDataType> Type, struct FPlatformInterfaceDelegateResult* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.ReadKeyValue");

	UCloudStorageBase_ReadKeyValue_Params params {};
	params.KeyName = KeyName;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.IsUsingLocalStorage
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudStorageBase::IsUsingLocalStorage()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.IsUsingLocalStorage");

	UCloudStorageBase_IsUsingLocalStorage_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBase.Init
//		Flags  -> ()
void UCloudStorageBase::Init()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.Init");

	UCloudStorageBase_Init_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FacebookIntegration.Disconnect
//		Flags  -> ()
void UFacebookIntegration::Disconnect()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.Disconnect");

	UFacebookIntegration_Disconnect_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FacebookIntegration.FacebookDialog
//		Flags  -> ()
// Parameters:
//		struct FString                                     Action                                                     (Parm, NeedCtorLink)
//		TArray<struct FString>                             ParamKeysAndValues                                         (Parm, NeedCtorLink)
void UFacebookIntegration::FacebookDialog(const struct FString& Action, TArray<struct FString> ParamKeysAndValues)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.FacebookDialog");

	UFacebookIntegration_FacebookDialog_Params params {};
	params.Action = Action;
	params.ParamKeysAndValues = ParamKeysAndValues;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FacebookIntegration.FacebookRequest
//		Flags  -> ()
// Parameters:
//		struct FString                                     GraphRequest                                               (Parm, NeedCtorLink)
void UFacebookIntegration::FacebookRequest(const struct FString& GraphRequest)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.FacebookRequest");

	UFacebookIntegration_FacebookRequest_Params params {};
	params.GraphRequest = GraphRequest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FacebookIntegration.IsAuthorized
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UFacebookIntegration::IsAuthorized()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.IsAuthorized");

	UFacebookIntegration_IsAuthorized_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FacebookIntegration.Authorize
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UFacebookIntegration::Authorize()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.Authorize");

	UFacebookIntegration_Authorize_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FacebookIntegration.Init
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UFacebookIntegration::Init()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.Init");

	UFacebookIntegration_Init_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GoogleIntegration.SubscribeToYouTubeChannel
//		Flags  -> ()
// Parameters:
//		struct FString                                     ChannelId                                                  (Parm, NeedCtorLink)
void UGoogleIntegration::SubscribeToYouTubeChannel(const struct FString& ChannelId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GoogleIntegration.SubscribeToYouTubeChannel");

	UGoogleIntegration_SubscribeToYouTubeChannel_Params params {};
	params.ChannelId = ChannelId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GoogleIntegration.RevokeAuthorization
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGoogleIntegration::RevokeAuthorization()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GoogleIntegration.RevokeAuthorization");

	UGoogleIntegration_RevokeAuthorization_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GoogleIntegration.IsAuthorized
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGoogleIntegration::IsAuthorized()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GoogleIntegration.IsAuthorized");

	UGoogleIntegration_IsAuthorized_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GoogleIntegration.Authorize
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGoogleIntegration::Authorize()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GoogleIntegration.Authorize");

	UGoogleIntegration_Authorize_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GoogleIntegration.Init
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGoogleIntegration::Init()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GoogleIntegration.Init");

	UGoogleIntegration_Init_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InAppMessageBase.ShowInAppEmailUI
//		Flags  -> ()
// Parameters:
//		struct FString                                     InitialSubject                                             (OptionalParm, Parm, NeedCtorLink)
//		struct FString                                     InitialMessage                                             (OptionalParm, Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UInAppMessageBase::ShowInAppEmailUI(const struct FString& InitialSubject, const struct FString& InitialMessage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InAppMessageBase.ShowInAppEmailUI");

	UInAppMessageBase_ShowInAppEmailUI_Params params {};
	params.InitialSubject = InitialSubject;
	params.InitialMessage = InitialMessage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InAppMessageBase.ShowInAppSMSUI
//		Flags  -> ()
// Parameters:
//		struct FString                                     InitialMessage                                             (OptionalParm, Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UInAppMessageBase::ShowInAppSMSUI(const struct FString& InitialMessage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InAppMessageBase.ShowInAppSMSUI");

	UInAppMessageBase_ShowInAppSMSUI_Params params {};
	params.InitialMessage = InitialMessage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InAppMessageBase.Init
//		Flags  -> ()
void UInAppMessageBase::Init()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InAppMessageBase.Init");

	UInAppMessageBase_Init_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InGameAdManager.SetPauseWhileAdOpen
//		Flags  -> ()
// Parameters:
//		bool                                               bShouldPause                                               (Parm)
void UInGameAdManager::SetPauseWhileAdOpen(bool bShouldPause)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.SetPauseWhileAdOpen");

	UInGameAdManager_SetPauseWhileAdOpen_Params params {};
	params.bShouldPause = bShouldPause;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InGameAdManager.ForceCloseAd
//		Flags  -> ()
void UInGameAdManager::ForceCloseAd()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.ForceCloseAd");

	UInGameAdManager_ForceCloseAd_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InGameAdManager.HideBanner
//		Flags  -> ()
void UInGameAdManager::HideBanner()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.HideBanner");

	UInGameAdManager_HideBanner_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InGameAdManager.ShowBanner
//		Flags  -> ()
// Parameters:
//		bool                                               bShowBottomOfScreen                                        (Parm)
void UInGameAdManager::ShowBanner(bool bShowBottomOfScreen)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.ShowBanner");

	UInGameAdManager_ShowBanner_Params params {};
	params.bShowBottomOfScreen = bShowBottomOfScreen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.InGameAdManager.Init
//		Flags  -> ()
void UInGameAdManager::Init()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.Init");

	UInGameAdManager_Init_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TwitterIntegrationBase.TwitterRequest
//		Flags  -> ()
// Parameters:
//		struct FString                                     URL                                                        (Parm, NeedCtorLink)
//		TArray<struct FString>                             ParamKeysAndValues                                         (Parm, NeedCtorLink)
//		TEnumAsByte<Engine_ETwitterRequestMethod>          RequestMethod                                              (Parm)
//		int                                                AccountIndex                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UTwitterIntegrationBase::TwitterRequest(const struct FString& URL, TArray<struct FString> ParamKeysAndValues, TEnumAsByte<Engine_ETwitterRequestMethod> RequestMethod, int AccountIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.TwitterRequest");

	UTwitterIntegrationBase_TwitterRequest_Params params {};
	params.URL = URL;
	params.ParamKeysAndValues = ParamKeysAndValues;
	params.RequestMethod = RequestMethod;
	params.AccountIndex = AccountIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TwitterIntegrationBase.GetAccountId
//		Flags  -> ()
// Parameters:
//		int                                                AccountIndex                                               (Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UTwitterIntegrationBase::GetAccountId(int AccountIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.GetAccountId");

	UTwitterIntegrationBase_GetAccountId_Params params {};
	params.AccountIndex = AccountIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TwitterIntegrationBase.GetAccountName
//		Flags  -> ()
// Parameters:
//		int                                                AccountIndex                                               (Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UTwitterIntegrationBase::GetAccountName(int AccountIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.GetAccountName");

	UTwitterIntegrationBase_GetAccountName_Params params {};
	params.AccountIndex = AccountIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TwitterIntegrationBase.GetNumAccounts
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UTwitterIntegrationBase::GetNumAccounts()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.GetNumAccounts");

	UTwitterIntegrationBase_GetNumAccounts_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TwitterIntegrationBase.AuthorizeAccounts
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UTwitterIntegrationBase::AuthorizeAccounts()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.AuthorizeAccounts");

	UTwitterIntegrationBase_AuthorizeAccounts_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TwitterIntegrationBase.ShowTweetUI
//		Flags  -> ()
// Parameters:
//		struct FString                                     InitialMessage                                             (OptionalParm, Parm, NeedCtorLink)
//		struct FString                                     URL                                                        (OptionalParm, Parm, NeedCtorLink)
//		struct FString                                     Picture                                                    (OptionalParm, Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UTwitterIntegrationBase::ShowTweetUI(const struct FString& InitialMessage, const struct FString& URL, const struct FString& Picture)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.ShowTweetUI");

	UTwitterIntegrationBase_ShowTweetUI_Params params {};
	params.InitialMessage = InitialMessage;
	params.URL = URL;
	params.Picture = Picture;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TwitterIntegrationBase.CanShowTweetUI
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UTwitterIntegrationBase::CanShowTweetUI()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.CanShowTweetUI");

	UTwitterIntegrationBase_CanShowTweetUI_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TwitterIntegrationBase.Init
//		Flags  -> ()
void UTwitterIntegrationBase::Init()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.Init");

	UTwitterIntegrationBase_Init_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlatformInterfaceWebResponse.GetHeaderValue
//		Flags  -> ()
// Parameters:
//		struct FString                                     HeaderName                                                 (Parm, NeedCtorLink)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UPlatformInterfaceWebResponse::GetHeaderValue(const struct FString& HeaderName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceWebResponse.GetHeaderValue");

	UPlatformInterfaceWebResponse_GetHeaderValue_Params params {};
	params.HeaderName = HeaderName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlatformInterfaceWebResponse.GetHeader
//		Flags  -> ()
// Parameters:
//		int                                                HeaderIndex                                                (Parm)
//		struct FString                                     Header                                                     (Parm, OutParm, NeedCtorLink)
//		struct FString                                     Value                                                      (Parm, OutParm, NeedCtorLink)
void UPlatformInterfaceWebResponse::GetHeader(int HeaderIndex, struct FString* Header, struct FString* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceWebResponse.GetHeader");

	UPlatformInterfaceWebResponse_GetHeader_Params params {};
	params.HeaderIndex = HeaderIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Header != nullptr)
		*Header = params.Header;
	if (Value != nullptr)
		*Value = params.Value;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlatformInterfaceWebResponse.GetNumHeaders
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UPlatformInterfaceWebResponse::GetNumHeaders()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceWebResponse.GetNumHeaders");

	UPlatformInterfaceWebResponse_GetNumHeaders_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStats.GetViewName
//		Flags  -> ()
// Parameters:
//		int                                                ViewId                                                     (Parm)
//		struct FName                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FName UOnlineStats::GetViewName(int ViewId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStats.GetViewName");

	UOnlineStats_GetViewName_Params params {};
	params.ViewId = ViewId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStats.GetViewId
//		Flags  -> ()
// Parameters:
//		struct FName                                       ViewName                                                   (Parm)
//		int                                                ViewId                                                     (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineStats::GetViewId(const struct FName& ViewName, int* ViewId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStats.GetViewId");

	UOnlineStats_GetViewId_Params params {};
	params.ViewName = ViewName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ViewId != nullptr)
		*ViewId = params.ViewId;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsRead.GetRankForPlayer
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UOnlineStatsRead::GetRankForPlayer(const struct FUniqueNetId& PlayerID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.GetRankForPlayer");

	UOnlineStatsRead_GetRankForPlayer_Params params {};
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsRead.AddPlayer
//		Flags  -> ()
// Parameters:
//		struct FString                                     PlayerName                                                 (Parm, NeedCtorLink)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
void UOnlineStatsRead::AddPlayer(const struct FString& PlayerName, const struct FUniqueNetId& PlayerID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.AddPlayer");

	UOnlineStatsRead_AddPlayer_Params params {};
	params.PlayerName = PlayerName;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsRead.IsStatZero
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		int                                                StatColumnNo                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineStatsRead::IsStatZero(const struct FUniqueNetId& PlayerID, int StatColumnNo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.IsStatZero");

	UOnlineStatsRead_IsStatZero_Params params {};
	params.PlayerID = PlayerID;
	params.StatColumnNo = StatColumnNo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsRead.GetStatValueForPlayerAsString
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		int                                                StatColumnNo                                               (Parm)
//		struct FString                                     StatValue                                                  (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineStatsRead::GetStatValueForPlayerAsString(const struct FUniqueNetId& PlayerID, int StatColumnNo, struct FString* StatValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.GetStatValueForPlayerAsString");

	UOnlineStatsRead_GetStatValueForPlayerAsString_Params params {};
	params.PlayerID = PlayerID;
	params.StatColumnNo = StatColumnNo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (StatValue != nullptr)
		*StatValue = params.StatValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsRead.SetFloatStatValueForPlayer
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		int                                                StatColumnNo                                               (Parm)
//		float                                              StatValue                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineStatsRead::SetFloatStatValueForPlayer(const struct FUniqueNetId& PlayerID, int StatColumnNo, float StatValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.SetFloatStatValueForPlayer");

	UOnlineStatsRead_SetFloatStatValueForPlayer_Params params {};
	params.PlayerID = PlayerID;
	params.StatColumnNo = StatColumnNo;
	params.StatValue = StatValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsRead.GetFloatStatValueForPlayer
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		int                                                StatColumnNo                                               (Parm)
//		float                                              StatValue                                                  (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineStatsRead::GetFloatStatValueForPlayer(const struct FUniqueNetId& PlayerID, int StatColumnNo, float* StatValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.GetFloatStatValueForPlayer");

	UOnlineStatsRead_GetFloatStatValueForPlayer_Params params {};
	params.PlayerID = PlayerID;
	params.StatColumnNo = StatColumnNo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (StatValue != nullptr)
		*StatValue = params.StatValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsRead.SetIntStatValueForPlayer
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		int                                                StatColumnNo                                               (Parm)
//		int                                                StatValue                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineStatsRead::SetIntStatValueForPlayer(const struct FUniqueNetId& PlayerID, int StatColumnNo, int StatValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.SetIntStatValueForPlayer");

	UOnlineStatsRead_SetIntStatValueForPlayer_Params params {};
	params.PlayerID = PlayerID;
	params.StatColumnNo = StatColumnNo;
	params.StatValue = StatValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsRead.GetIntStatValueForPlayer
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		int                                                StatColumnNo                                               (Parm)
//		int                                                StatValue                                                  (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineStatsRead::GetIntStatValueForPlayer(const struct FUniqueNetId& PlayerID, int StatColumnNo, int* StatValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.GetIntStatValueForPlayer");

	UOnlineStatsRead_GetIntStatValueForPlayer_Params params {};
	params.PlayerID = PlayerID;
	params.StatColumnNo = StatColumnNo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (StatValue != nullptr)
		*StatValue = params.StatValue;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsRead.OnReadComplete
//		Flags  -> ()
void UOnlineStatsRead::OnReadComplete()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.OnReadComplete");

	UOnlineStatsRead_OnReadComplete_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsWrite.DecrementIntStat
//		Flags  -> ()
// Parameters:
//		int                                                StatId                                                     (Parm)
//		int                                                DecBy                                                      (OptionalParm, Parm)
void UOnlineStatsWrite::DecrementIntStat(int StatId, int DecBy)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.DecrementIntStat");

	UOnlineStatsWrite_DecrementIntStat_Params params {};
	params.StatId = StatId;
	params.DecBy = DecBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsWrite.DecrementFloatStat
//		Flags  -> ()
// Parameters:
//		int                                                StatId                                                     (Parm)
//		float                                              DecBy                                                      (OptionalParm, Parm)
void UOnlineStatsWrite::DecrementFloatStat(int StatId, float DecBy)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.DecrementFloatStat");

	UOnlineStatsWrite_DecrementFloatStat_Params params {};
	params.StatId = StatId;
	params.DecBy = DecBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsWrite.IncrementIntStat
//		Flags  -> ()
// Parameters:
//		int                                                StatId                                                     (Parm)
//		int                                                IncBy                                                      (OptionalParm, Parm)
void UOnlineStatsWrite::IncrementIntStat(int StatId, int IncBy)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.IncrementIntStat");

	UOnlineStatsWrite_IncrementIntStat_Params params {};
	params.StatId = StatId;
	params.IncBy = IncBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsWrite.IncrementFloatStat
//		Flags  -> ()
// Parameters:
//		int                                                StatId                                                     (Parm)
//		float                                              IncBy                                                      (OptionalParm, Parm)
void UOnlineStatsWrite::IncrementFloatStat(int StatId, float IncBy)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.IncrementFloatStat");

	UOnlineStatsWrite_IncrementFloatStat_Params params {};
	params.StatId = StatId;
	params.IncBy = IncBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsWrite.SetIntStat
//		Flags  -> ()
// Parameters:
//		int                                                StatId                                                     (Parm)
//		int                                                Value                                                      (Parm)
void UOnlineStatsWrite::SetIntStat(int StatId, int Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.SetIntStat");

	UOnlineStatsWrite_SetIntStat_Params params {};
	params.StatId = StatId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsWrite.SetFloatStat
//		Flags  -> ()
// Parameters:
//		int                                                StatId                                                     (Parm)
//		float                                              Value                                                      (Parm)
void UOnlineStatsWrite::SetFloatStat(int StatId, float Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.SetFloatStat");

	UOnlineStatsWrite_SetFloatStat_Params params {};
	params.StatId = StatId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsWrite.GetStatName
//		Flags  -> ()
// Parameters:
//		int                                                StatId                                                     (Parm)
//		struct FName                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FName UOnlineStatsWrite::GetStatName(int StatId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.GetStatName");

	UOnlineStatsWrite_GetStatName_Params params {};
	params.StatId = StatId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsWrite.GetStatId
//		Flags  -> ()
// Parameters:
//		struct FName                                       StatName                                                   (Parm)
//		int                                                StatId                                                     (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineStatsWrite::GetStatId(const struct FName& StatName, int* StatId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.GetStatId");

	UOnlineStatsWrite_GetStatId_Params params {};
	params.StatName = StatName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (StatId != nullptr)
		*StatId = params.StatId;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsWrite.OnStatsWriteComplete
//		Flags  -> ()
void UOnlineStatsWrite::OnStatsWriteComplete()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.OnStatsWriteComplete");

	UOnlineStatsWrite_OnStatsWriteComplete_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MicroTransactionBase.GetProductIndex
//		Flags  -> ()
// Parameters:
//		struct FString                                     Identifier                                                 (Parm, NeedCtorLink)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UMicroTransactionBase::GetProductIndex(const struct FString& Identifier)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MicroTransactionBase.GetProductIndex");

	UMicroTransactionBase_GetProductIndex_Params params {};
	params.Identifier = Identifier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MicroTransactionBase.BeginPurchase
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMicroTransactionBase::BeginPurchase(int Index)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MicroTransactionBase.BeginPurchase");

	UMicroTransactionBase_BeginPurchase_Params params {};
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MicroTransactionBase.IsAllowedToMakePurchases
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMicroTransactionBase::IsAllowedToMakePurchases()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MicroTransactionBase.IsAllowedToMakePurchases");

	UMicroTransactionBase_IsAllowedToMakePurchases_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MicroTransactionBase.QueryForAvailablePurchases
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMicroTransactionBase::QueryForAvailablePurchases()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MicroTransactionBase.QueryForAvailablePurchases");

	UMicroTransactionBase_QueryForAvailablePurchases_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MicroTransactionBase.Init
//		Flags  -> ()
void UMicroTransactionBase::Init()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MicroTransactionBase.Init");

	UMicroTransactionBase_Init_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Player.SwitchController
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           PC                                                         (Parm)
void UPlayer::SwitchController(class APlayerController* PC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Player.SwitchController");

	UPlayer_SwitchController_Params params {};
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ParticleModuleEventSendToGame.DoEvent
//		Flags  -> ()
// Parameters:
//		struct FVector                                     InCollideDirection                                         (Const, Parm, OutParm)
//		struct FVector                                     InHitLocation                                              (Const, Parm, OutParm)
//		struct FVector                                     InHitNormal                                                (Const, Parm, OutParm)
//		struct FName                                       InBoneName                                                 (Const, Parm, OutParm)
void UParticleModuleEventSendToGame::DoEvent(struct FVector* InCollideDirection, struct FVector* InHitLocation, struct FVector* InHitNormal, struct FName* InBoneName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ParticleModuleEventSendToGame.DoEvent");

	UParticleModuleEventSendToGame_DoEvent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InCollideDirection != nullptr)
		*InCollideDirection = params.InCollideDirection;
	if (InHitLocation != nullptr)
		*InHitLocation = params.InHitLocation;
	if (InHitNormal != nullptr)
		*InHitNormal = params.InHitNormal;
	if (InBoneName != nullptr)
		*InBoneName = params.InBoneName;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActor.Reset
//		Flags  -> ()
void AKActor::Reset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActor.Reset");

	AKActor_Reset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActor.OnTeleport
//		Flags  -> ()
// Parameters:
//		class USeqAct_Teleport*                            inAction                                                   (Parm)
void AKActor::OnTeleport(class USeqAct_Teleport* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActor.OnTeleport");

	AKActor_OnTeleport_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActor.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void AKActor::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActor.OnToggle");

	AKActor_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActor.TakeRadiusDamage
//		Flags  -> ()
// Parameters:
//		class AController*                                 InstigatedBy                                               (Parm)
//		float                                              BaseDamage                                                 (Parm)
//		float                                              DamageRadius                                               (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		float                                              Momentum                                                   (Parm)
//		struct FVector                                     HurtOrigin                                                 (Parm)
//		bool                                               bFullDamage                                                (Parm)
//		class AActor*                                      DamageCauser                                               (Parm)
//		float                                              DamageFalloffExponent                                      (OptionalParm, Parm)
void AKActor::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActor.TakeRadiusDamage");

	AKActor_TakeRadiusDamage_Params params {};
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActor.TakeDamage
//		Flags  -> ()
// Parameters:
//		int                                                Damage                                                     (Parm)
//		class AController*                                 EventInstigator                                            (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     Momentum                                                   (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (OptionalParm, Parm)
//		class AActor*                                      DamageCauser                                               (OptionalParm, Parm)
void AKActor::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActor.TakeDamage");

	AKActor_TakeDamage_Params params {};
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActor.ApplyImpulse
//		Flags  -> (Singular, Net, Simulated, Native, Static, Const, Public, Protected, DLLImport, K2Override, K2Pure)
// Parameters:
//		struct FVector                                     ImpulseDir                                                 (Parm)
//		float                                              ImpulseMag                                                 (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (OptionalParm, Parm)
//		class UClass*                                      DamageType                                                 (OptionalParm, Parm)
void AKActor::STATIC_ApplyImpulse(const struct FVector& ImpulseDir, float ImpulseMag, const struct FVector& HitLocation, const struct FTraceHitInfo& HitInfo, class UClass* DamageType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActor.ApplyImpulse");

	AKActor_ApplyImpulse_Params params {};
	params.ImpulseDir = ImpulseDir;
	params.ImpulseMag = ImpulseMag;
	params.HitLocation = HitLocation;
	params.HitInfo = HitInfo;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActor.ReplicatedEvent
//		Flags  -> (Singular, NetReliable, Exec, Native, Static, Const, Public, Protected, DLLImport, K2Override, K2Pure)
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void AKActor::STATIC_ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActor.ReplicatedEvent");

	AKActor_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActor.SpawnedByKismet
//		Flags  -> ()
void AKActor::SpawnedByKismet()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActor.SpawnedByKismet");

	AKActor_SpawnedByKismet_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActor.SetPhysicalCollisionProperties
//		Flags  -> ()
void AKActor::SetPhysicalCollisionProperties()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActor.SetPhysicalCollisionProperties");

	AKActor_SetPhysicalCollisionProperties_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActor.Destroyed
//		Flags  -> ()
void AKActor::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActor.Destroyed");

	AKActor_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActor.FellOutOfWorld
//		Flags  -> ()
// Parameters:
//		class UClass*                                      dmgType                                                    (Parm)
void AKActor::FellOutOfWorld(class UClass* dmgType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActor.FellOutOfWorld");

	AKActor_FellOutOfWorld_Params params {};
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActor.PostBeginPlay
//		Flags  -> ()
void AKActor::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActor.PostBeginPlay");

	AKActor_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActor.ResolveRBState
//		Flags  -> ()
void AKActor::ResolveRBState()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActor.ResolveRBState");

	AKActor_ResolveRBState_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActor.GetKActorPhysMaterial
//		Flags  -> ()
// Parameters:
//		class UPhysicalMaterial*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class UPhysicalMaterial* AKActor::GetKActorPhysMaterial()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActor.GetKActorPhysMaterial");

	AKActor_GetKActorPhysMaterial_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActorFromStatic.TakeRadiusDamage
//		Flags  -> ()
// Parameters:
//		class AController*                                 InstigatedBy                                               (Parm)
//		float                                              BaseDamage                                                 (Parm)
//		float                                              DamageRadius                                               (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		float                                              Momentum                                                   (Parm)
//		struct FVector                                     HurtOrigin                                                 (Parm)
//		bool                                               bFullDamage                                                (Parm)
//		class AActor*                                      DamageCauser                                               (Parm)
//		float                                              DamageFalloffExponent                                      (OptionalParm, Parm)
void AKActorFromStatic::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.TakeRadiusDamage");

	AKActorFromStatic_TakeRadiusDamage_Params params {};
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActorFromStatic.Touch
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		class UPrimitiveComponent*                         OtherComp                                                  (Parm, EditInline)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     HitNormal                                                  (Parm)
void AKActorFromStatic::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.Touch");

	AKActorFromStatic_Touch_Params params {};
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActorFromStatic.Bump
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		class UPrimitiveComponent*                         OtherComp                                                  (Parm, EditInline)
//		struct FVector                                     HitNormal                                                  (Parm)
void AKActorFromStatic::Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.Bump");

	AKActorFromStatic_Bump_Params params {};
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActorFromStatic.ReceiveImpulse
//		Flags  -> (Singular, NetReliable, Simulated, Native, Event, Operator, HasOptionalParms, Const, Public, Protected, DLLImport, K2Override, K2Pure)
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     HitNormal                                                  (Parm)
void AKActorFromStatic::ReceiveImpulse(class APawn* Other, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.ReceiveImpulse");

	AKActorFromStatic_ReceiveImpulse_Params params {};
	params.Other = Other;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActorFromStatic.ApplyImpulse
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ImpulseDir                                                 (Parm)
//		float                                              ImpulseMag                                                 (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (OptionalParm, Parm)
//		class UClass*                                      DamageType                                                 (OptionalParm, Parm)
void AKActorFromStatic::ApplyImpulse(const struct FVector& ImpulseDir, float ImpulseMag, const struct FVector& HitLocation, const struct FTraceHitInfo& HitInfo, class UClass* DamageType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.ApplyImpulse");

	AKActorFromStatic_ApplyImpulse_Params params {};
	params.ImpulseDir = ImpulseDir;
	params.ImpulseMag = ImpulseMag;
	params.HitLocation = HitLocation;
	params.HitInfo = HitInfo;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActorFromStatic.MakeDynamic
//		Flags  -> ()
// Parameters:
//		class UStaticMeshComponent*                        MovableMesh                                                (Parm, EditInline)
//		class AKActorFromStatic*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class AKActorFromStatic* AKActorFromStatic::MakeDynamic(class UStaticMeshComponent* MovableMesh)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.MakeDynamic");

	AKActorFromStatic_MakeDynamic_Params params {};
	params.MovableMesh = MovableMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActorFromStatic.MakeStatic
//		Flags  -> ()
void AKActorFromStatic::MakeStatic()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.MakeStatic");

	AKActorFromStatic_MakeStatic_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActorFromStatic.BecomeStatic
//		Flags  -> ()
void AKActorFromStatic::BecomeStatic()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.BecomeStatic");

	AKActorFromStatic_BecomeStatic_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActorFromStatic.OnWakeRBPhysics
//		Flags  -> ()
void AKActorFromStatic::OnWakeRBPhysics()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.OnWakeRBPhysics");

	AKActorFromStatic_OnWakeRBPhysics_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActorFromStatic.OnSleepRBPhysics
//		Flags  -> ()
void AKActorFromStatic::OnSleepRBPhysics()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.OnSleepRBPhysics");

	AKActorFromStatic_OnSleepRBPhysics_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActorFromStatic.DisablePrecomputedLighting
//		Flags  -> ()
void AKActorFromStatic::DisablePrecomputedLighting()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.DisablePrecomputedLighting");

	AKActorFromStatic_DisablePrecomputedLighting_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActorSpawnable.ResetComponents
//		Flags  -> ()
void AKActorSpawnable::ResetComponents()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActorSpawnable.ResetComponents");

	AKActorSpawnable_ResetComponents_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActorSpawnable.RecycleInternal
//		Flags  -> ()
void AKActorSpawnable::RecycleInternal()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActorSpawnable.RecycleInternal");

	AKActorSpawnable_RecycleInternal_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActorSpawnable.Recycle
//		Flags  -> ()
void AKActorSpawnable::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActorSpawnable.Recycle");

	AKActorSpawnable_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.KActorSpawnable.Initialize
//		Flags  -> ()
void AKActorSpawnable::Initialize()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.KActorSpawnable.Initialize");

	AKActorSpawnable_Initialize_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.OnSetVelocity
//		Flags  -> ()
// Parameters:
//		class USeqAct_SetVelocity*                         Action                                                     (Parm)
void APawn::OnSetVelocity(class USeqAct_SetVelocity* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnSetVelocity");

	APawn_OnSetVelocity_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.Speak
//		Flags  -> ()
// Parameters:
//		class USoundCue*                                   Cue                                                        (Parm)
void APawn::Speak(class USoundCue* Cue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Speak");

	APawn_Speak_Params params {};
	params.Cue = Cue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SetScalarParameterInterp
//		Flags  -> ()
// Parameters:
//		struct FScalarParameterInterpStruct                ScalarParameterInterp                                      (Const, Parm, OutParm)
void APawn::SetScalarParameterInterp(struct FScalarParameterInterpStruct* ScalarParameterInterp)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetScalarParameterInterp");

	APawn_SetScalarParameterInterp_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ScalarParameterInterp != nullptr)
		*ScalarParameterInterp = params.ScalarParameterInterp;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SetRootMotionInterpCurrentTime
//		Flags  -> ()
// Parameters:
//		float                                              inTime                                                     (Parm)
//		float                                              DeltaTime                                                  (OptionalParm, Parm)
//		bool                                               bUpdateSkelPose                                            (OptionalParm, Parm)
void APawn::SetRootMotionInterpCurrentTime(float inTime, float DeltaTime, bool bUpdateSkelPose)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetRootMotionInterpCurrentTime");

	APawn_SetRootMotionInterpCurrentTime_Params params {};
	params.inTime = inTime;
	params.DeltaTime = DeltaTime;
	params.bUpdateSkelPose = bUpdateSkelPose;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SetCinematicMode
//		Flags  -> ()
// Parameters:
//		bool                                               bInCinematicMode                                           (Parm)
void APawn::SetCinematicMode(bool bInCinematicMode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetCinematicMode");

	APawn_SetCinematicMode_Params params {};
	params.bInCinematicMode = bInCinematicMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.ZeroMovementVariables
//		Flags  -> ()
void APawn::ZeroMovementVariables()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ZeroMovementVariables");

	APawn_ZeroMovementVariables_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.ClearPathStep
//		Flags  -> ()
void APawn::ClearPathStep()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClearPathStep");

	APawn_ClearPathStep_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.DrawPathStep
//		Flags  -> ()
// Parameters:
//		class UCanvas*                                     C                                                          (Parm)
void APawn::DrawPathStep(class UCanvas* C)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DrawPathStep");

	APawn_DrawPathStep_Params params {};
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.IncrementPathChild
//		Flags  -> ()
// Parameters:
//		int                                                Cnt                                                        (Parm)
//		class UCanvas*                                     C                                                          (Parm)
void APawn::IncrementPathChild(int Cnt, class UCanvas* C)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IncrementPathChild");

	APawn_IncrementPathChild_Params params {};
	params.Cnt = Cnt;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.IncrementPathStep
//		Flags  -> ()
// Parameters:
//		int                                                Cnt                                                        (Parm)
//		class UCanvas*                                     C                                                          (Parm)
void APawn::IncrementPathStep(int Cnt, class UCanvas* C)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IncrementPathStep");

	APawn_IncrementPathStep_Params params {};
	params.Cnt = Cnt;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.CreatePathGoalEvaluator
//		Flags  -> ()
// Parameters:
//		class UClass*                                      GoalEvalClass                                              (Parm)
//		class UPathGoalEvaluator*                          ReturnValue                                                (Parm, OutParm, ReturnParm)
class UPathGoalEvaluator* APawn::CreatePathGoalEvaluator(class UClass* GoalEvalClass)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CreatePathGoalEvaluator");

	APawn_CreatePathGoalEvaluator_Params params {};
	params.GoalEvalClass = GoalEvalClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.CreatePathConstraint
//		Flags  -> ()
// Parameters:
//		class UClass*                                      ConstraintClass                                            (Parm)
//		class UPathConstraint*                             ReturnValue                                                (Parm, OutParm, ReturnParm)
class UPathConstraint* APawn::CreatePathConstraint(class UClass* ConstraintClass)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CreatePathConstraint");

	APawn_CreatePathConstraint_Params params {};
	params.ConstraintClass = ConstraintClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.AddGoalEvaluator
//		Flags  -> ()
// Parameters:
//		class UPathGoalEvaluator*                          Evaluator                                                  (Parm)
void APawn::AddGoalEvaluator(class UPathGoalEvaluator* Evaluator)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddGoalEvaluator");

	APawn_AddGoalEvaluator_Params params {};
	params.Evaluator = Evaluator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.AddPathConstraint
//		Flags  -> ()
// Parameters:
//		class UPathConstraint*                             Constraint                                                 (Parm)
void APawn::AddPathConstraint(class UPathConstraint* Constraint)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddPathConstraint");

	APawn_AddPathConstraint_Params params {};
	params.Constraint = Constraint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.ClearConstraints
//		Flags  -> ()
void APawn::ClearConstraints()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClearConstraints");

	APawn_ClearConstraints_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SoakPause
//		Flags  -> ()
void APawn::SoakPause()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SoakPause");

	APawn_SoakPause_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.BecomeViewTarget
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           PC                                                         (Parm)
void APawn::BecomeViewTarget(class APlayerController* PC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BecomeViewTarget");

	APawn_BecomeViewTarget_Params params {};
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.MessagePlayer
//		Flags  -> ()
// Parameters:
//		struct FString                                     msg                                                        (Parm, CoerceParm, NeedCtorLink)
void APawn::MessagePlayer(const struct FString& msg)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MessagePlayer");

	APawn_MessagePlayer_Params params {};
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.HandleTeleport
//		Flags  -> (NetReliable, Exec, Static, HasOptionalParms, Public, Protected, Delegate, DLLImport, K2Override, K2Pure)
// Parameters:
//		TArray<class UObject*>                             DestList                                                   (Parm, NeedCtorLink)
//		bool                                               bUpdateRotation                                            (Parm)
//		bool                                               bCheckOverlap                                              (Parm)
//		float                                              TeleportDistance                                           (OptionalParm, Parm)
//		TArray<class AVolume*>                             TeleportVolumes                                            (OptionalParm, Parm, NeedCtorLink)
//		int                                                PreferredDestIndex                                         (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::STATIC_HandleTeleport(TArray<class UObject*> DestList, bool bUpdateRotation, bool bCheckOverlap, float TeleportDistance, TArray<class AVolume*> TeleportVolumes, int PreferredDestIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HandleTeleport");

	APawn_HandleTeleport_Params params {};
	params.DestList = DestList;
	params.bUpdateRotation = bUpdateRotation;
	params.bCheckOverlap = bCheckOverlap;
	params.TeleportDistance = TeleportDistance;
	params.TeleportVolumes = TeleportVolumes;
	params.PreferredDestIndex = PreferredDestIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.OnTeleport
//		Flags  -> ()
// Parameters:
//		class USeqAct_Teleport*                            Action                                                     (Parm)
void APawn::OnTeleport(class USeqAct_Teleport* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnTeleport");

	APawn_OnTeleport_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.OnSetMaterial
//		Flags  -> ()
// Parameters:
//		class USeqAct_SetMaterial*                         Action                                                     (Parm)
void APawn::OnSetMaterial(class USeqAct_SetMaterial* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnSetMaterial");

	APawn_OnSetMaterial_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.GetDamageScaling
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float APawn::GetDamageScaling()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetDamageScaling");

	APawn_GetDamageScaling_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.DoKismetAttachment
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Attachment                                                 (Parm)
//		class USeqAct_AttachToActor*                       Action                                                     (Parm)
void APawn::DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DoKismetAttachment");

	APawn_DoKismetAttachment_Params params {};
	params.Attachment = Attachment;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SpawnedByKismet
//		Flags  -> ()
void APawn::SpawnedByKismet()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpawnedByKismet");

	APawn_SpawnedByKismet_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.IsStationary
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::IsStationary()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsStationary");

	APawn_IsStationary_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.GetCollisionExtent
//		Flags  -> (Singular, Net, NetReliable, Simulated, Exec, HasOptionalParms, Public, Protected, Delegate, DLLImport, K2Override, K2Pure)
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector APawn::GetCollisionExtent()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetCollisionExtent");

	APawn_GetCollisionExtent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.GetCollisionHeight
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float APawn::GetCollisionHeight()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetCollisionHeight");

	APawn_GetCollisionHeight_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.GetCollisionRadius
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float APawn::GetCollisionRadius()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetCollisionRadius");

	APawn_GetCollisionRadius_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.CheatFly
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::CheatFly()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheatFly");

	APawn_CheatFly_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.CheatGhost
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::CheatGhost()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheatGhost");

	APawn_CheatGhost_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.CheatWalk
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::CheatWalk()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheatWalk");

	APawn_CheatWalk_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.PlayWeaponSwitch
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     OldWeapon                                                  (Parm)
//		class AWeapon*                                     NewWeapon                                                  (Parm)
void APawn::PlayWeaponSwitch(class AWeapon* OldWeapon, class AWeapon* NewWeapon)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayWeaponSwitch");

	APawn_PlayWeaponSwitch_Params params {};
	params.OldWeapon = OldWeapon;
	params.NewWeapon = NewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SetActiveWeapon
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     NewWeapon                                                  (Parm)
void APawn::SetActiveWeapon(class AWeapon* NewWeapon)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetActiveWeapon");

	APawn_SetActiveWeapon_Params params {};
	params.NewWeapon = NewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.TossInventory
//		Flags  -> (Net, Event, HasOptionalParms, Public, Protected, Delegate, DLLImport, K2Override, K2Pure)
// Parameters:
//		class AInventory*                                  Inv                                                        (Parm)
//		struct FVector                                     ForceVelocity                                              (OptionalParm, Parm)
void APawn::TossInventory(class AInventory* Inv, const struct FVector& ForceVelocity)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TossInventory");

	APawn_TossInventory_Params params {};
	params.Inv = Inv;
	params.ForceVelocity = ForceVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.ThrowActiveWeapon
//		Flags  -> ()
// Parameters:
//		bool                                               bDestroyWeap                                               (OptionalParm, Parm)
void APawn::ThrowActiveWeapon(bool bDestroyWeap)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ThrowActiveWeapon");

	APawn_ThrowActiveWeapon_Params params {};
	params.bDestroyWeap = bDestroyWeap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.DrawHUD
//		Flags  -> ()
// Parameters:
//		class AHUD*                                        H                                                          (Parm)
void APawn::DrawHUD(class AHUD* H)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DrawHUD");

	APawn_DrawHUD_Params params {};
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.FindInventoryType
//		Flags  -> ()
// Parameters:
//		class UClass*                                      DesiredClass                                               (Parm)
//		bool                                               bAllowSubclass                                             (OptionalParm, Parm)
//		class AInventory*                                  ReturnValue                                                (Parm, OutParm, ReturnParm)
class AInventory* APawn::FindInventoryType(class UClass* DesiredClass, bool bAllowSubclass)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FindInventoryType");

	APawn_FindInventoryType_Params params {};
	params.DesiredClass = DesiredClass;
	params.bAllowSubclass = bAllowSubclass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.CreateInventory
//		Flags  -> ()
// Parameters:
//		class UClass*                                      NewInvClass                                                (Parm)
//		bool                                               bDoNotActivate                                             (OptionalParm, Parm)
//		class AInventory*                                  ReturnValue                                                (Parm, OutParm, ReturnParm)
class AInventory* APawn::CreateInventory(class UClass* NewInvClass, bool bDoNotActivate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CreateInventory");

	APawn_CreateInventory_Params params {};
	params.NewInvClass = NewInvClass;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.AddDefaultInventory
//		Flags  -> ()
void APawn::AddDefaultInventory()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddDefaultInventory");

	APawn_AddDefaultInventory_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.StopDriving
//		Flags  -> ()
// Parameters:
//		class AVehicle*                                    V                                                          (Parm)
void APawn::StopDriving(class AVehicle* V)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StopDriving");

	APawn_StopDriving_Params params {};
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.StartDriving
//		Flags  -> ()
// Parameters:
//		class AVehicle*                                    V                                                          (Parm)
void APawn::StartDriving(class AVehicle* V)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StartDriving");

	APawn_StartDriving_Params params {};
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.CanThrowWeapon
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::CanThrowWeapon()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanThrowWeapon");

	APawn_CanThrowWeapon_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.Suicide
//		Flags  -> ()
void APawn::Suicide()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Suicide");

	APawn_Suicide_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.GetVehicleBase
//		Flags  -> ()
// Parameters:
//		class AVehicle*                                    ReturnValue                                                (Parm, OutParm, ReturnParm)
class AVehicle* APawn::GetVehicleBase()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetVehicleBase");

	APawn_GetVehicleBase_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.PlayLanded
//		Flags  -> ()
// Parameters:
//		float                                              ImpactVel                                                  (Parm)
void APawn::PlayLanded(float ImpactVel)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayLanded");

	APawn_PlayLanded_Params params {};
	params.ImpactVel = ImpactVel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.CannotJumpNow
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::CannotJumpNow()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CannotJumpNow");

	APawn_CannotJumpNow_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.PlayFootStepSound
//		Flags  -> ()
// Parameters:
//		int                                                FootDown                                                   (Parm)
void APawn::PlayFootStepSound(int FootDown)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayFootStepSound");

	APawn_PlayFootStepSound_Params params {};
	params.FootDown = FootDown;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.TornOff
//		Flags  -> ()
void APawn::TornOff()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TornOff");

	APawn_TornOff_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.PlayDying
//		Flags  -> ()
// Parameters:
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FVector                                     HitLoc                                                     (Parm)
void APawn::PlayDying(class UClass* DamageType, const struct FVector& HitLoc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayDying");

	APawn_PlayDying_Params params {};
	params.DamageType = DamageType;
	params.HitLoc = HitLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SetDyingPhysics
//		Flags  -> ()
void APawn::SetDyingPhysics()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetDyingPhysics");

	APawn_SetDyingPhysics_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.TurnOff
//		Flags  -> ()
void APawn::TurnOff()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TurnOff");

	APawn_TurnOff_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.PlayHit
//		Flags  -> ()
// Parameters:
//		float                                              Damage                                                     (Parm)
//		class AController*                                 InstigatedBy                                               (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FVector                                     Momentum                                                   (Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (Parm)
void APawn::PlayHit(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayHit");

	APawn_PlayHit_Params params {};
	params.Damage = Damage;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HitInfo = HitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.PlayDyingSound
//		Flags  -> ()
void APawn::PlayDyingSound()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayDyingSound");

	APawn_PlayDyingSound_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.DoJump
//		Flags  -> ()
// Parameters:
//		bool                                               bUpdating                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::DoJump(bool bUpdating)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DoJump");

	APawn_DoJump_Params params {};
	params.bUpdating = bUpdating;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.CheckWaterJump
//		Flags  -> (Net, Simulated, Exec, Event, Operator, Public, Protected, Delegate, DLLImport, K2Override, K2Pure)
// Parameters:
//		struct FVector                                     WallNormal                                                 (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::CheckWaterJump(struct FVector* WallNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheckWaterJump");

	APawn_CheckWaterJump_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (WallNormal != nullptr)
		*WallNormal = params.WallNormal;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.TakeDrowningDamage
//		Flags  -> ()
void APawn::TakeDrowningDamage()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TakeDrowningDamage");

	APawn_TakeDrowningDamage_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.BreathTimer
//		Flags  -> ()
void APawn::BreathTimer()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BreathTimer");

	APawn_BreathTimer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.TouchingWaterVolume
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::TouchingWaterVolume()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TouchingWaterVolume");

	APawn_TouchingWaterVolume_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.HeadVolumeChange
//		Flags  -> ()
// Parameters:
//		class APhysicsVolume*                              newHeadVolume                                              (Parm)
void APawn::HeadVolumeChange(class APhysicsVolume* newHeadVolume)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HeadVolumeChange");

	APawn_HeadVolumeChange_Params params {};
	params.newHeadVolume = newHeadVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.TickSpecial
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
void APawn::TickSpecial(float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TickSpecial");

	APawn_TickSpecial_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.Landed
//		Flags  -> ()
// Parameters:
//		struct FVector                                     HitNormal                                                  (Parm)
//		class AActor*                                      FloorActor                                                 (Parm)
void APawn::Landed(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Landed");

	APawn_Landed_Params params {};
	params.HitNormal = HitNormal;
	params.FloorActor = FloorActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.Falling
//		Flags  -> ()
void APawn::Falling()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Falling");

	APawn_Falling_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.DelayTriggerDeath
//		Flags  -> ()
void APawn::DelayTriggerDeath()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DelayTriggerDeath");

	APawn_DelayTriggerDeath_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.Died
//		Flags  -> ()
// Parameters:
//		class AController*                                 Killer                                                     (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Died");

	APawn_Died_Params params {};
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.ThrowWeaponOnDeath
//		Flags  -> ()
void APawn::ThrowWeaponOnDeath()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ThrowWeaponOnDeath");

	APawn_ThrowWeaponOnDeath_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.IsSameTeam
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::IsSameTeam(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsSameTeam");

	APawn_IsSameTeam_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.GetTeam
//		Flags  -> ()
// Parameters:
//		class ATeamInfo*                                   ReturnValue                                                (Parm, OutParm, ReturnParm)
class ATeamInfo* APawn::GetTeam()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetTeam");

	APawn_GetTeam_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.GetTeamNum
//		Flags  -> ()
// Parameters:
//		unsigned char                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
unsigned char APawn::GetTeamNum()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetTeamNum");

	APawn_GetTeamNum_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.TakeDamage
//		Flags  -> ()
// Parameters:
//		int                                                Damage                                                     (Parm)
//		class AController*                                 InstigatedBy                                               (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     Momentum                                                   (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (OptionalParm, Parm)
//		class AActor*                                      DamageCauser                                               (OptionalParm, Parm)
void APawn::TakeDamage(int Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TakeDamage");

	APawn_TakeDamage_Params params {};
	params.Damage = Damage;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SetKillInstigator
//		Flags  -> ()
// Parameters:
//		class AController*                                 InstigatedBy                                               (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		class AController*                                 ReturnValue                                                (Parm, OutParm, ReturnParm)
class AController* APawn::SetKillInstigator(class AController* InstigatedBy, class UClass* DamageType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetKillInstigator");

	APawn_SetKillInstigator_Params params {};
	params.InstigatedBy = InstigatedBy;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.NotifyTakeHit
//		Flags  -> ()
// Parameters:
//		class AController*                                 InstigatedBy                                               (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		int                                                Damage                                                     (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FVector                                     Momentum                                                   (Parm)
//		class AActor*                                      DamageCauser                                               (Parm)
void APawn::NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, class AActor* DamageCauser)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.NotifyTakeHit");

	APawn_NotifyTakeHit_Params params {};
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.TakeRadiusDamageOnBones
//		Flags  -> (Singular, NetReliable, Operator, Public, Protected, Delegate, DLLImport, K2Override, K2Pure)
// Parameters:
//		class AController*                                 InstigatedBy                                               (Parm)
//		float                                              BaseDamage                                                 (Parm)
//		float                                              DamageRadius                                               (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		float                                              Momentum                                                   (Parm)
//		struct FVector                                     HurtOrigin                                                 (Parm)
//		bool                                               bFullDamage                                                (Parm)
//		class AActor*                                      DamageCauser                                               (Parm)
//		TArray<struct FName>                               Bones                                                      (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::TakeRadiusDamageOnBones(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, TArray<struct FName> Bones)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TakeRadiusDamageOnBones");

	APawn_TakeRadiusDamageOnBones_Params params {};
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.Bones = Bones;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.PruneDamagedBoneList
//		Flags  -> ()
// Parameters:
//		TArray<struct FName>                               Bones                                                      (Parm, OutParm, NeedCtorLink)
void APawn::PruneDamagedBoneList(TArray<struct FName>* Bones)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PruneDamagedBoneList");

	APawn_PruneDamagedBoneList_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Bones != nullptr)
		*Bones = params.Bones;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.HealDamage
//		Flags  -> ()
// Parameters:
//		int                                                Amount                                                     (Parm)
//		class AController*                                 Healer                                                     (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::HealDamage(int Amount, class AController* Healer, class UClass* DamageType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HealDamage");

	APawn_HealDamage_Params params {};
	params.Amount = Amount;
	params.Healer = Healer;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.AdjustDamage
//		Flags  -> ()
// Parameters:
//		int                                                InDamage                                                   (Parm, OutParm)
//		struct FVector                                     Momentum                                                   (Parm, OutParm)
//		class AController*                                 InstigatedBy                                               (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (Parm)
//		class AActor*                                      DamageCauser                                               (Parm)
void APawn::AdjustDamage(int* InDamage, struct FVector* Momentum, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AdjustDamage");

	APawn_AdjustDamage_Params params {};
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InDamage != nullptr)
		*InDamage = params.InDamage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SetMovementPhysics
//		Flags  -> ()
void APawn::SetMovementPhysics()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetMovementPhysics");

	APawn_SetMovementPhysics_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.Gasp
//		Flags  -> ()
void APawn::Gasp()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Gasp");

	APawn_Gasp_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.OnGiveInventory
//		Flags  -> ()
// Parameters:
//		class USeqAct_GiveInventory*                       inAction                                                   (Parm)
void APawn::OnGiveInventory(class USeqAct_GiveInventory* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnGiveInventory");

	APawn_OnGiveInventory_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.OnAssignController
//		Flags  -> ()
// Parameters:
//		class USeqAct_AssignController*                    inAction                                                   (Parm)
void APawn::OnAssignController(class USeqAct_AssignController* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnAssignController");

	APawn_OnAssignController_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.ReceivedNewEvent
//		Flags  -> ()
// Parameters:
//		class USequenceEvent*                              Evt                                                        (Parm)
void APawn::ReceivedNewEvent(class USequenceEvent* Evt)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReceivedNewEvent");

	APawn_ReceivedNewEvent_Params params {};
	params.Evt = Evt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SpawnDefaultController
//		Flags  -> ()
void APawn::SpawnDefaultController()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpawnDefaultController");

	APawn_SpawnDefaultController_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.PostBeginPlay
//		Flags  -> ()
void APawn::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PostBeginPlay");

	APawn_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.PreBeginPlay
//		Flags  -> ()
void APawn::PreBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PreBeginPlay");

	APawn_PreBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.Destroyed
//		Flags  -> ()
void APawn::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Destroyed");

	APawn_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.DetachFromController
//		Flags  -> ()
// Parameters:
//		bool                                               bDestroyController                                         (OptionalParm, Parm)
void APawn::DetachFromController(bool bDestroyController)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DetachFromController");

	APawn_DetachFromController_Params params {};
	params.bDestroyController = bDestroyController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.CrushedBy
//		Flags  -> ()
// Parameters:
//		class APawn*                                       OtherPawn                                                  (Parm)
void APawn::CrushedBy(class APawn* OtherPawn)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CrushedBy");

	APawn_CrushedBy_Params params {};
	params.OtherPawn = OtherPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.CanBeBaseForPawn
//		Flags  -> ()
// Parameters:
//		class APawn*                                       aPawn                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::CanBeBaseForPawn(class APawn* aPawn)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanBeBaseForPawn");

	APawn_CanBeBaseForPawn_Params params {};
	params.aPawn = aPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.BaseChange
//		Flags  -> ()
void APawn::BaseChange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BaseChange");

	APawn_BaseChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.StuckOnPawn
//		Flags  -> ()
// Parameters:
//		class APawn*                                       OtherPawn                                                  (Parm)
void APawn::StuckOnPawn(class APawn* OtherPawn)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StuckOnPawn");

	APawn_StuckOnPawn_Params params {};
	params.OtherPawn = OtherPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.JumpOffPawn
//		Flags  -> ()
void APawn::JumpOffPawn()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.JumpOffPawn");

	APawn_JumpOffPawn_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.gibbedBy
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void APawn::gibbedBy(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.gibbedBy");

	APawn_gibbedBy_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.EncroachedBy
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void APawn::EncroachedBy(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EncroachedBy");

	APawn_EncroachedBy_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.EncroachingOn
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::EncroachingOn(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EncroachingOn");

	APawn_EncroachingOn_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.FaceRotation
//		Flags  -> ()
// Parameters:
//		struct FRotator                                    NewRotation                                                (Parm)
//		float                                              DeltaTime                                                  (Parm)
void APawn::FaceRotation(const struct FRotator& NewRotation, float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FaceRotation");

	APawn_FaceRotation_Params params {};
	params.NewRotation = NewRotation;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.UpdatePawnRotation
//		Flags  -> ()
// Parameters:
//		struct FRotator                                    NewRotation                                                (Parm)
void APawn::UpdatePawnRotation(const struct FRotator& NewRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UpdatePawnRotation");

	APawn_UpdatePawnRotation_Params params {};
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.ClientSetRotation
//		Flags  -> ()
// Parameters:
//		struct FRotator                                    NewRotation                                                (Parm)
void APawn::ClientSetRotation(const struct FRotator& NewRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientSetRotation");

	APawn_ClientSetRotation_Params params {};
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.ClientRestart
//		Flags  -> ()
void APawn::ClientRestart()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientRestart");

	APawn_ClientRestart_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.Restart
//		Flags  -> ()
void APawn::Restart()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Restart");

	APawn_Restart_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.TakeFallingDamage
//		Flags  -> ()
void APawn::TakeFallingDamage()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TakeFallingDamage");

	APawn_TakeFallingDamage_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.KilledBy
//		Flags  -> ()
// Parameters:
//		class APawn*                                       EventInstigator                                            (Parm)
void APawn::KilledBy(class APawn* EventInstigator)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.KilledBy");

	APawn_KilledBy_Params params {};
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.AddVelocity
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewVelocity                                                (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (OptionalParm, Parm)
void APawn::AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddVelocity");

	APawn_AddVelocity_Params params {};
	params.NewVelocity = NewVelocity;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.HandleMomentum
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Momentum                                                   (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (OptionalParm, Parm)
void APawn::HandleMomentum(const struct FVector& Momentum, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HandleMomentum");

	APawn_HandleMomentum_Params params {};
	params.Momentum = Momentum;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.StartCrouch
//		Flags  -> ()
// Parameters:
//		float                                              HeightAdjust                                               (Parm)
void APawn::StartCrouch(float HeightAdjust)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StartCrouch");

	APawn_StartCrouch_Params params {};
	params.HeightAdjust = HeightAdjust;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.EndCrouch
//		Flags  -> ()
// Parameters:
//		float                                              HeightAdjust                                               (Parm)
void APawn::EndCrouch(float HeightAdjust)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EndCrouch");

	APawn_EndCrouch_Params params {};
	params.HeightAdjust = HeightAdjust;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.ShouldCrouch
//		Flags  -> ()
// Parameters:
//		bool                                               bCrouch                                                    (Parm)
void APawn::ShouldCrouch(bool bCrouch)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ShouldCrouch");

	APawn_ShouldCrouch_Params params {};
	params.bCrouch = bCrouch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.UnCrouch
//		Flags  -> ()
void APawn::UnCrouch()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UnCrouch");

	APawn_UnCrouch_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.OutsideWorldBounds
//		Flags  -> ()
void APawn::OutsideWorldBounds()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OutsideWorldBounds");

	APawn_OutsideWorldBounds_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.FellOutOfWorld
//		Flags  -> ()
// Parameters:
//		class UClass*                                      dmgType                                                    (Parm)
void APawn::FellOutOfWorld(class UClass* dmgType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FellOutOfWorld");

	APawn_FellOutOfWorld_Params params {};
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.ClientMessage
//		Flags  -> ()
// Parameters:
//		struct FString                                     S                                                          (Parm, CoerceParm, NeedCtorLink)
//		struct FName                                       Type                                                       (OptionalParm, Parm)
void APawn::ClientMessage(const struct FString& S, const struct FName& Type)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientMessage");

	APawn_ClientMessage_Params params {};
	params.S = S;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.HandlePickup
//		Flags  -> ()
// Parameters:
//		class AInventory*                                  Inv                                                        (Parm)
void APawn::HandlePickup(class AInventory* Inv)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HandlePickup");

	APawn_HandlePickup_Params params {};
	params.Inv = Inv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.LineOfSightTo
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::LineOfSightTo(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.LineOfSightTo");

	APawn_LineOfSightTo_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SetMoveTarget
//		Flags  -> ()
// Parameters:
//		class AActor*                                      NewTarget                                                  (Parm)
void APawn::SetMoveTarget(class AActor* NewTarget)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetMoveTarget");

	APawn_SetMoveTarget_Params params {};
	params.NewTarget = NewTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.InGodMode
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::InGodMode()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InGodMode");

	APawn_InGodMode_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SetViewRotation
//		Flags  -> ()
// Parameters:
//		struct FRotator                                    NewRotation                                                (Parm)
void APawn::SetViewRotation(const struct FRotator& NewRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetViewRotation");

	APawn_SetViewRotation_Params params {};
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.GetAdjustedAimFor
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     W                                                          (Parm)
//		struct FVector                                     StartFireLoc                                               (Parm)
//		struct FRotator                                    ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FRotator APawn::GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetAdjustedAimFor");

	APawn_GetAdjustedAimFor_Params params {};
	params.W = W;
	params.StartFireLoc = StartFireLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.InFreeCam
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::InFreeCam()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InFreeCam");

	APawn_InFreeCam_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.GetBaseAimRotation
//		Flags  -> (NetReliable, Exec, Event, Operator, HasOptionalParms, Const, Delegate, DLLImport, K2Override, K2Pure)
// Parameters:
//		struct FRotator                                    ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FRotator APawn::GetBaseAimRotation()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetBaseAimRotation");

	APawn_GetBaseAimRotation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.GetWeaponStartTraceLocation
//		Flags  -> (Simulated, Native, Event, Operator, HasOptionalParms, Const, Delegate, DLLImport, K2Override, K2Pure)
// Parameters:
//		class AWeapon*                                     CurrentWeapon                                              (OptionalParm, Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector APawn::GetWeaponStartTraceLocation(class AWeapon* CurrentWeapon)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetWeaponStartTraceLocation");

	APawn_GetWeaponStartTraceLocation_Params params {};
	params.CurrentWeapon = CurrentWeapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.GetPawnViewLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector APawn::GetPawnViewLocation()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetPawnViewLocation");

	APawn_GetPawnViewLocation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.GetViewRotation
//		Flags  -> ()
// Parameters:
//		struct FRotator                                    ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FRotator APawn::GetViewRotation()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetViewRotation");

	APawn_GetViewRotation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.GetActorEyesViewPoint
//		Flags  -> ()
// Parameters:
//		struct FVector                                     out_Location                                               (Parm, OutParm)
//		struct FRotator                                    out_Rotation                                               (Parm, OutParm)
void APawn::GetActorEyesViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetActorEyesViewPoint");

	APawn_GetActorEyesViewPoint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Rotation != nullptr)
		*out_Rotation = params.out_Rotation;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.ProcessViewRotation
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
//		struct FRotator                                    out_ViewRotation                                           (Parm, OutParm)
//		struct FRotator                                    out_DeltaRot                                               (Parm, OutParm)
void APawn::ProcessViewRotation(float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ProcessViewRotation");

	APawn_ProcessViewRotation_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_ViewRotation != nullptr)
		*out_ViewRotation = params.out_ViewRotation;
	if (out_DeltaRot != nullptr)
		*out_DeltaRot = params.out_DeltaRot;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.IsFirstPerson
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::IsFirstPerson()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsFirstPerson");

	APawn_IsFirstPerson_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.IsPlayerPawn
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::IsPlayerPawn()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsPlayerPawn");

	APawn_IsPlayerPawn_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.IsLocallyControlled
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::IsLocallyControlled()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsLocallyControlled");

	APawn_IsLocallyControlled_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.IsHumanControlled
//		Flags  -> ()
// Parameters:
//		class AController*                                 PawnController                                             (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::IsHumanControlled(class AController* PawnController)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsHumanControlled");

	APawn_IsHumanControlled_Params params {};
	params.PawnController = PawnController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.DisplayDebug
//		Flags  -> ()
// Parameters:
//		class AHUD*                                        HUD                                                        (Parm)
//		float                                              out_YL                                                     (Parm, OutParm)
//		float                                              out_YPos                                                   (Parm, OutParm)
void APawn::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DisplayDebug");

	APawn_DisplayDebug_Params params {};
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.ClimbLadder
//		Flags  -> ()
// Parameters:
//		class ALadderVolume*                               L                                                          (Parm)
void APawn::ClimbLadder(class ALadderVolume* L)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClimbLadder");

	APawn_ClimbLadder_Params params {};
	params.L = L;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.EndClimbLadder
//		Flags  -> ()
// Parameters:
//		class ALadderVolume*                               OldLadder                                                  (Parm)
void APawn::EndClimbLadder(class ALadderVolume* OldLadder)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EndClimbLadder");

	APawn_EndClimbLadder_Params params {};
	params.OldLadder = OldLadder;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.CanSplash
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::CanSplash()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanSplash");

	APawn_CanSplash_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SetWalking
//		Flags  -> ()
// Parameters:
//		bool                                               bNewIsWalking                                              (Parm)
void APawn::SetWalking(bool bNewIsWalking)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetWalking");

	APawn_SetWalking_Params params {};
	params.bNewIsWalking = bNewIsWalking;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.RangedAttackTime
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float APawn::RangedAttackTime()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.RangedAttackTime");

	APawn_RangedAttackTime_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.RecommendLongRangedAttack
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::RecommendLongRangedAttack()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.RecommendLongRangedAttack");

	APawn_RecommendLongRangedAttack_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.CanGrabLadder
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::CanGrabLadder()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanGrabLadder");

	APawn_CanGrabLadder_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.DropToGround
//		Flags  -> ()
void APawn::DropToGround()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DropToGround");

	APawn_DropToGround_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.GetDefaultCameraMode
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           RequestedBy                                                (Parm)
//		struct FName                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FName APawn::GetDefaultCameraMode(class APlayerController* RequestedBy)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetDefaultCameraMode");

	APawn_GetDefaultCameraMode_Params params {};
	params.RequestedBy = RequestedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.UnPossessed
//		Flags  -> ()
void APawn::UnPossessed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UnPossessed");

	APawn_UnPossessed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.UpdateControllerOnPossess
//		Flags  -> ()
// Parameters:
//		bool                                               bVehicleTransition                                         (Parm)
void APawn::UpdateControllerOnPossess(bool bVehicleTransition)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UpdateControllerOnPossess");

	APawn_UpdateControllerOnPossess_Params params {};
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.PossessedBy
//		Flags  -> ()
// Parameters:
//		class AController*                                 C                                                          (Parm)
//		bool                                               bVehicleTransition                                         (Parm)
void APawn::PossessedBy(class AController* C, bool bVehicleTransition)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PossessedBy");

	APawn_PossessedBy_Params params {};
	params.C = C;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.NotifyTeamChanged
//		Flags  -> ()
void APawn::NotifyTeamChanged()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.NotifyTeamChanged");

	APawn_NotifyTeamChanged_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.PlayTeleportEffect
//		Flags  -> ()
// Parameters:
//		bool                                               bOut                                                       (Parm)
//		bool                                               bSound                                                     (Parm)
void APawn::PlayTeleportEffect(bool bOut, bool bSound)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayTeleportEffect");

	APawn_PlayTeleportEffect_Params params {};
	params.bOut = bOut;
	params.bSound = bSound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.GetHumanReadableName
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString APawn::GetHumanReadableName()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetHumanReadableName");

	APawn_GetHumanReadableName_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.NeedToTurn
//		Flags  -> (Singular, NetReliable, Simulated, Event, HasOptionalParms, Const, Delegate, DLLImport, K2Override, K2Pure)
// Parameters:
//		struct FVector                                     targ                                                       (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::NeedToTurn(const struct FVector& targ)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.NeedToTurn");

	APawn_NeedToTurn_Params params {};
	params.targ = targ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.IsFiring
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::IsFiring()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsFiring");

	APawn_IsFiring_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.HasRangedAttack
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::HasRangedAttack()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HasRangedAttack");

	APawn_HasRangedAttack_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.FireOnRelease
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::FireOnRelease()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FireOnRelease");

	APawn_FireOnRelease_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.TooCloseToAttack
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::TooCloseToAttack(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TooCloseToAttack");

	APawn_TooCloseToAttack_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.CanAttack
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::CanAttack(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanAttack");

	APawn_CanAttack_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.BotFire
//		Flags  -> ()
// Parameters:
//		bool                                               bFinished                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::BotFire(bool bFinished)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BotFire");

	APawn_BotFire_Params params {};
	params.bFinished = bFinished;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.WeaponStoppedFiring
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     InWeapon                                                   (Parm)
//		bool                                               bViaReplication                                            (Parm)
void APawn::WeaponStoppedFiring(class AWeapon* InWeapon, bool bViaReplication)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.WeaponStoppedFiring");

	APawn_WeaponStoppedFiring_Params params {};
	params.InWeapon = InWeapon;
	params.bViaReplication = bViaReplication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.WeaponFired
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     InWeapon                                                   (Parm)
//		bool                                               bViaReplication                                            (Parm)
//		struct FVector                                     HitLocation                                                (OptionalParm, Parm)
void APawn::WeaponFired(class AWeapon* InWeapon, bool bViaReplication, const struct FVector& HitLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.WeaponFired");

	APawn_WeaponFired_Params params {};
	params.InWeapon = InWeapon;
	params.bViaReplication = bViaReplication;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.FlashLocationUpdated
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     InWeapon                                                   (Parm)
//		struct FVector                                     InFlashLocation                                            (Parm)
//		bool                                               bViaReplication                                            (Parm)
void APawn::FlashLocationUpdated(class AWeapon* InWeapon, const struct FVector& InFlashLocation, bool bViaReplication)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FlashLocationUpdated");

	APawn_FlashLocationUpdated_Params params {};
	params.InWeapon = InWeapon;
	params.InFlashLocation = InFlashLocation;
	params.bViaReplication = bViaReplication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.ClearFlashLocation
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     InWeapon                                                   (Parm)
void APawn::ClearFlashLocation(class AWeapon* InWeapon)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClearFlashLocation");

	APawn_ClearFlashLocation_Params params {};
	params.InWeapon = InWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SetFlashLocation
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     InWeapon                                                   (Parm)
//		unsigned char                                      InFiringMode                                               (Parm)
//		struct FVector                                     NewLoc                                                     (Parm)
void APawn::SetFlashLocation(class AWeapon* InWeapon, unsigned char InFiringMode, const struct FVector& NewLoc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetFlashLocation");

	APawn_SetFlashLocation_Params params {};
	params.InWeapon = InWeapon;
	params.InFiringMode = InFiringMode;
	params.NewLoc = NewLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.ClearFlashCount
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     InWeapon                                                   (Parm)
void APawn::ClearFlashCount(class AWeapon* InWeapon)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClearFlashCount");

	APawn_ClearFlashCount_Params params {};
	params.InWeapon = InWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.FlashCountUpdated
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     InWeapon                                                   (Parm)
//		unsigned char                                      InFlashCount                                               (Parm)
//		bool                                               bViaReplication                                            (Parm)
void APawn::FlashCountUpdated(class AWeapon* InWeapon, unsigned char InFlashCount, bool bViaReplication)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FlashCountUpdated");

	APawn_FlashCountUpdated_Params params {};
	params.InWeapon = InWeapon;
	params.InFlashCount = InFlashCount;
	params.bViaReplication = bViaReplication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.IncrementFlashCount
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     InWeapon                                                   (Parm)
//		unsigned char                                      InFiringMode                                               (Parm)
void APawn::IncrementFlashCount(class AWeapon* InWeapon, unsigned char InFiringMode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IncrementFlashCount");

	APawn_IncrementFlashCount_Params params {};
	params.InWeapon = InWeapon;
	params.InFiringMode = InFiringMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.FiringModeUpdated
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     InWeapon                                                   (Parm)
//		unsigned char                                      InFiringMode                                               (Parm)
//		bool                                               bViaReplication                                            (Parm)
void APawn::FiringModeUpdated(class AWeapon* InWeapon, unsigned char InFiringMode, bool bViaReplication)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FiringModeUpdated");

	APawn_FiringModeUpdated_Params params {};
	params.InWeapon = InWeapon;
	params.InFiringMode = InFiringMode;
	params.bViaReplication = bViaReplication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SetFiringMode
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     InWeapon                                                   (Parm)
//		unsigned char                                      InFiringMode                                               (Parm)
void APawn::SetFiringMode(class AWeapon* InWeapon, unsigned char InFiringMode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetFiringMode");

	APawn_SetFiringMode_Params params {};
	params.InWeapon = InWeapon;
	params.InFiringMode = InFiringMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.GetWeaponFiringMode
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     InWeapon                                                   (Parm)
//		unsigned char                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
unsigned char APawn::GetWeaponFiringMode(class AWeapon* InWeapon)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetWeaponFiringMode");

	APawn_GetWeaponFiringMode_Params params {};
	params.InWeapon = InWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.StopFire
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FireModeNum                                                (Parm)
void APawn::StopFire(unsigned char FireModeNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StopFire");

	APawn_StopFire_Params params {};
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.StartFire
//		Flags  -> ()
// Parameters:
//		unsigned char                                      FireModeNum                                                (Parm)
void APawn::StartFire(unsigned char FireModeNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StartFire");

	APawn_StartFire_Params params {};
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.StopFiring
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::StopFiring()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StopFiring");

	APawn_StopFiring_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.Reset
//		Flags  -> ()
void APawn::Reset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Reset");

	APawn_Reset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.PlayerChangedTeam
//		Flags  -> ()
void APawn::PlayerChangedTeam()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayerChangedTeam");

	APawn_PlayerChangedTeam_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SetBaseEyeheight
//		Flags  -> ()
void APawn::SetBaseEyeheight()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetBaseEyeheight");

	APawn_SetBaseEyeheight_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SpecialMoveThruEdge
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ENavMeshEdgeType>               EdgeType                                                   (Parm)
//		int                                                Dir                                                        (Parm)
//		struct FVector                                     MoveStart                                                  (Parm)
//		struct FVector                                     MoveDest                                                   (Parm)
//		class AActor*                                      RelActor                                                   (OptionalParm, Parm)
//		int                                                RelItem                                                    (OptionalParm, Parm)
//		class UNavigationHandle*                           NavHandle                                                  (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::SpecialMoveThruEdge(TEnumAsByte<Engine_ENavMeshEdgeType> EdgeType, int Dir, const struct FVector& MoveStart, const struct FVector& MoveDest, class AActor* RelActor, int RelItem, class UNavigationHandle* NavHandle)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpecialMoveThruEdge");

	APawn_SpecialMoveThruEdge_Params params {};
	params.EdgeType = EdgeType;
	params.Dir = Dir;
	params.MoveStart = MoveStart;
	params.MoveDest = MoveDest;
	params.RelActor = RelActor;
	params.RelItem = RelItem;
	params.NavHandle = NavHandle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SpecialMoveTo
//		Flags  -> ()
// Parameters:
//		class ANavigationPoint*                            Start                                                      (Parm)
//		class ANavigationPoint*                            End                                                        (Parm)
//		class AActor*                                      Next                                                       (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::SpecialMoveTo(class ANavigationPoint* Start, class ANavigationPoint* End, class AActor* Next)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpecialMoveTo");

	APawn_SpecialMoveTo_Params params {};
	params.Start = Start;
	params.End = End;
	params.Next = Next;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.TermRagdoll
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::TermRagdoll()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TermRagdoll");

	APawn_TermRagdoll_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.InitRagdoll
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::InitRagdoll()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InitRagdoll");

	APawn_InitRagdoll_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.GetBoundingCylinder
//		Flags  -> ()
// Parameters:
//		float                                              CollisionRadius                                            (Parm, OutParm)
//		float                                              CollisionHeight                                            (Parm, OutParm)
void APawn::GetBoundingCylinder(float* CollisionRadius, float* CollisionHeight)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetBoundingCylinder");

	APawn_GetBoundingCylinder_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (CollisionRadius != nullptr)
		*CollisionRadius = params.CollisionRadius;
	if (CollisionHeight != nullptr)
		*CollisionHeight = params.CollisionHeight;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.ReachedDesiredRotation
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::ReachedDesiredRotation()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReachedDesiredRotation");

	APawn_ReachedDesiredRotation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SetPushesRigidBodies
//		Flags  -> ()
// Parameters:
//		bool                                               NewPush                                                    (Parm)
void APawn::SetPushesRigidBodies(bool NewPush)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetPushesRigidBodies");

	APawn_SetPushesRigidBodies_Params params {};
	params.NewPush = NewPush;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.ForceCrouch
//		Flags  -> ()
void APawn::ForceCrouch()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ForceCrouch");

	APawn_ForceCrouch_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.ReachedPoint
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Point                                                      (Parm)
//		class AActor*                                      NewAnchor                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::ReachedPoint(const struct FVector& Point, class AActor* NewAnchor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReachedPoint");

	APawn_ReachedPoint_Params params {};
	params.Point = Point;
	params.NewAnchor = NewAnchor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.ReachedDestination
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Goal                                                       (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::ReachedDestination(class AActor* Goal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReachedDestination");

	APawn_ReachedDestination_Params params {};
	params.Goal = Goal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.GetBestAnchor
//		Flags  -> ()
// Parameters:
//		class AActor*                                      TestActor                                                  (Parm)
//		struct FVector                                     TestLocation                                               (Parm)
//		bool                                               bStartPoint                                                (Parm)
//		bool                                               bOnlyCheckVisible                                          (Parm)
//		float                                              out_Dist                                                   (Parm, OutParm)
//		class ANavigationPoint*                            ReturnValue                                                (Parm, OutParm, ReturnParm)
class ANavigationPoint* APawn::GetBestAnchor(class AActor* TestActor, const struct FVector& TestLocation, bool bStartPoint, bool bOnlyCheckVisible, float* out_Dist)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetBestAnchor");

	APawn_GetBestAnchor_Params params {};
	params.TestActor = TestActor;
	params.TestLocation = TestLocation;
	params.bStartPoint = bStartPoint;
	params.bOnlyCheckVisible = bOnlyCheckVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Dist != nullptr)
		*out_Dist = params.out_Dist;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SetAnchor
//		Flags  -> ()
// Parameters:
//		class ANavigationPoint*                            NewAnchor                                                  (Parm)
void APawn::SetAnchor(class ANavigationPoint* NewAnchor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetAnchor");

	APawn_SetAnchor_Params params {};
	params.NewAnchor = NewAnchor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SetRemoteViewPitch
//		Flags  -> ()
// Parameters:
//		int                                                NewRemoteViewPitch                                         (Parm)
void APawn::SetRemoteViewPitch(int NewRemoteViewPitch)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetRemoteViewPitch");

	APawn_SetRemoteViewPitch_Params params {};
	params.NewRemoteViewPitch = NewRemoteViewPitch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.IsInvisible
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::IsInvisible()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsInvisible");

	APawn_IsInvisible_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.IsValidEnemyTargetFor
//		Flags  -> ()
// Parameters:
//		class APlayerReplicationInfo*                      PRI                                                        (Const, Parm)
//		bool                                               bNoPRIisEnemy                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::IsValidEnemyTargetFor(class APlayerReplicationInfo* PRI, bool bNoPRIisEnemy)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsValidEnemyTargetFor");

	APawn_IsValidEnemyTargetFor_Params params {};
	params.PRI = PRI;
	params.bNoPRIisEnemy = bNoPRIisEnemy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.GetFallDuration
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float APawn::GetFallDuration()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetFallDuration");

	APawn_GetFallDuration_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SuggestJumpVelocity
//		Flags  -> ()
// Parameters:
//		struct FVector                                     JumpVelocity                                               (Parm, OutParm)
//		struct FVector                                     Destination                                                (Parm)
//		struct FVector                                     Start                                                      (Parm)
//		bool                                               bRequireFallLanding                                        (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::SuggestJumpVelocity(struct FVector* JumpVelocity, const struct FVector& Destination, const struct FVector& Start, bool bRequireFallLanding)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SuggestJumpVelocity");

	APawn_SuggestJumpVelocity_Params params {};
	params.Destination = Destination;
	params.Start = Start;
	params.bRequireFallLanding = bRequireFallLanding;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (JumpVelocity != nullptr)
		*JumpVelocity = params.JumpVelocity;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.ValidAnchor
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::ValidAnchor()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ValidAnchor");

	APawn_ValidAnchor_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.AdjustDestination
//		Flags  -> ()
// Parameters:
//		class AActor*                                      GoalActor                                                  (Parm)
//		struct FVector                                     Dest                                                       (OptionalParm, Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector APawn::AdjustDestination(class AActor* GoalActor, const struct FVector& Dest)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AdjustDestination");

	APawn_AdjustDestination_Params params {};
	params.GoalActor = GoalActor;
	params.Dest = Dest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.IsAliveAndWell
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::IsAliveAndWell()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsAliveAndWell");

	APawn_IsAliveAndWell_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void APawn::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReplicatedEvent");

	APawn_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SetSkelControlScale
//		Flags  -> ()
// Parameters:
//		struct FName                                       SkelControlName                                            (Parm)
//		float                                              Scale                                                      (Parm)
void APawn::SetSkelControlScale(const struct FName& SkelControlName, float Scale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetSkelControlScale");

	APawn_SetSkelControlScale_Params params {};
	params.SkelControlName = SkelControlName;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SetMorphWeight
//		Flags  -> ()
// Parameters:
//		struct FName                                       MorphNodeName                                              (Parm)
//		float                                              MorphWeight                                                (Parm)
void APawn::SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetMorphWeight");

	APawn_SetMorphWeight_Params params {};
	params.MorphNodeName = MorphNodeName;
	params.MorphWeight = MorphWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.GetActorFaceFXAsset
//		Flags  -> ()
// Parameters:
//		class UFaceFXAsset*                                ReturnValue                                                (Parm, OutParm, ReturnParm)
class UFaceFXAsset* APawn::GetActorFaceFXAsset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetActorFaceFXAsset");

	APawn_GetActorFaceFXAsset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.FaceFXAudioFinished
//		Flags  -> ()
// Parameters:
//		class UAudioComponent*                             AC                                                         (Parm, EditInline)
void APawn::FaceFXAudioFinished(class UAudioComponent* AC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FaceFXAudioFinished");

	APawn_FaceFXAudioFinished_Params params {};
	params.AC = AC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.OnPlayFaceFXAnim
//		Flags  -> ()
// Parameters:
//		class USeqAct_PlayFaceFXAnim*                      inAction                                                   (Parm)
void APawn::OnPlayFaceFXAnim(class USeqAct_PlayFaceFXAnim* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnPlayFaceFXAnim");

	APawn_OnPlayFaceFXAnim_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.CanActorPlayFaceFXAnim
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::CanActorPlayFaceFXAnim()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanActorPlayFaceFXAnim");

	APawn_CanActorPlayFaceFXAnim_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.IsActorPlayingFaceFXAnim
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::IsActorPlayingFaceFXAnim()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsActorPlayingFaceFXAnim");

	APawn_IsActorPlayingFaceFXAnim_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.GetFaceFXAudioComponent
//		Flags  -> ()
// Parameters:
//		class UAudioComponent*                             ReturnValue                                                (Parm, OutParm, ReturnParm, EditInline)
class UAudioComponent* APawn::GetFaceFXAudioComponent()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetFaceFXAudioComponent");

	APawn_GetFaceFXAudioComponent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.StopActorFaceFXAnim
//		Flags  -> ()
void APawn::StopActorFaceFXAnim()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StopActorFaceFXAnim");

	APawn_StopActorFaceFXAnim_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.PlayActorFaceFXAnim
//		Flags  -> ()
// Parameters:
//		class UFaceFXAnimSet*                              AnimSet                                                    (Parm)
//		struct FString                                     GroupName                                                  (Parm, NeedCtorLink)
//		struct FString                                     SeqName                                                    (Parm, NeedCtorLink)
//		class USoundCue*                                   SoundCueToPlay                                             (Parm)
//		class UAkEvent*                                    AkEventToPlay                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayActorFaceFXAnim");

	APawn_PlayActorFaceFXAnim_Params params {};
	params.AnimSet = AnimSet;
	params.GroupName = GroupName;
	params.SeqName = SeqName;
	params.SoundCueToPlay = SoundCueToPlay;
	params.AkEventToPlay = AkEventToPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.MAT_FinishAIGroup
//		Flags  -> ()
void APawn::MAT_FinishAIGroup()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_FinishAIGroup");

	APawn_MAT_FinishAIGroup_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.MAT_BeginAIGroup
//		Flags  -> ()
// Parameters:
//		struct FVector                                     StartLoc                                                   (Parm)
//		struct FRotator                                    StartRot                                                   (Parm)
void APawn::MAT_BeginAIGroup(const struct FVector& StartLoc, const struct FRotator& StartRot)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_BeginAIGroup");

	APawn_MAT_BeginAIGroup_Params params {};
	params.StartLoc = StartLoc;
	params.StartRot = StartRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.FinishAIGroup
//		Flags  -> ()
void APawn::FinishAIGroup()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FinishAIGroup");

	APawn_FinishAIGroup_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.BeginAIGroup
//		Flags  -> ()
void APawn::BeginAIGroup()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BeginAIGroup");

	APawn_BeginAIGroup_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.InterpolationFinished
//		Flags  -> ()
// Parameters:
//		class USeqAct_Interp*                              InterpAction                                               (Parm)
void APawn::InterpolationFinished(class USeqAct_Interp* InterpAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InterpolationFinished");

	APawn_InterpolationFinished_Params params {};
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.InterpolationStarted
//		Flags  -> ()
// Parameters:
//		class USeqAct_Interp*                              InterpAction                                               (Parm)
//		class UInterpGroupInst*                            GroupInst                                                  (Parm)
void APawn::InterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InterpolationStarted");

	APawn_InterpolationStarted_Params params {};
	params.InterpAction = InterpAction;
	params.GroupInst = GroupInst;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.MAT_SetAnimNodeBlendWeight
//		Flags  -> ()
// Parameters:
//		struct FName                                       AnimNodeBlendName                                          (Parm)
//		float                                              Weight                                                     (Parm)
void APawn::MAT_SetAnimNodeBlendWeight(const struct FName& AnimNodeBlendName, float Weight)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_SetAnimNodeBlendWeight");

	APawn_MAT_SetAnimNodeBlendWeight_Params params {};
	params.AnimNodeBlendName = AnimNodeBlendName;
	params.Weight = Weight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.MAT_SetSkelControlStrength
//		Flags  -> ()
// Parameters:
//		struct FName                                       SkelControlName                                            (Parm)
//		float                                              ControlStrength                                            (Parm)
void APawn::MAT_SetSkelControlStrength(const struct FName& SkelControlName, float ControlStrength)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_SetSkelControlStrength");

	APawn_MAT_SetSkelControlStrength_Params params {};
	params.SkelControlName = SkelControlName;
	params.ControlStrength = ControlStrength;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.MAT_SetSkelControlScale
//		Flags  -> ()
// Parameters:
//		struct FName                                       SkelControlName                                            (Parm)
//		float                                              Scale                                                      (Parm)
void APawn::MAT_SetSkelControlScale(const struct FName& SkelControlName, float Scale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_SetSkelControlScale");

	APawn_MAT_SetSkelControlScale_Params params {};
	params.SkelControlName = SkelControlName;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.MAT_SetMorphWeight
//		Flags  -> ()
// Parameters:
//		struct FName                                       MorphNodeName                                              (Parm)
//		float                                              MorphWeight                                                (Parm)
void APawn::MAT_SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_SetMorphWeight");

	APawn_MAT_SetMorphWeight_Params params {};
	params.MorphNodeName = MorphNodeName;
	params.MorphWeight = MorphWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.MAT_SetAnimWeights
//		Flags  -> ()
// Parameters:
//		TArray<struct FAnimSlotInfo>                       SlotInfos                                                  (Parm, NeedCtorLink)
void APawn::MAT_SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_SetAnimWeights");

	APawn_MAT_SetAnimWeights_Params params {};
	params.SlotInfos = SlotInfos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.MAT_SetAnimPosition
//		Flags  -> ()
// Parameters:
//		struct FName                                       SlotName                                                   (Parm)
//		int                                                ChannelIndex                                               (Parm)
//		struct FName                                       InAnimSeqName                                              (Parm)
//		float                                              InPosition                                                 (Parm)
//		bool                                               bFireNotifies                                              (Parm)
//		bool                                               bLooping                                                   (Parm)
//		bool                                               bEnableRootMotion                                          (Parm)
//		struct FPointer                                    pRootBoneOption                                            (OptionalParm, Parm)
//		struct FPointer                                    pRootBoneRotationOption                                    (OptionalParm, Parm)
void APawn::MAT_SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion, const struct FPointer& pRootBoneOption, const struct FPointer& pRootBoneRotationOption)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_SetAnimPosition");

	APawn_MAT_SetAnimPosition_Params params {};
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;
	params.bEnableRootMotion = bEnableRootMotion;
	params.pRootBoneOption = pRootBoneOption;
	params.pRootBoneRotationOption = pRootBoneRotationOption;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SetAnimPosition
//		Flags  -> ()
// Parameters:
//		struct FName                                       SlotName                                                   (Parm)
//		int                                                ChannelIndex                                               (Parm)
//		struct FName                                       InAnimSeqName                                              (Parm)
//		float                                              InPosition                                                 (Parm)
//		bool                                               bFireNotifies                                              (Parm)
//		bool                                               bLooping                                                   (Parm)
//		bool                                               bEnableRootMotion                                          (Parm)
//		struct FPointer                                    pRootBoneOption                                            (OptionalParm, Parm)
//		struct FPointer                                    pRootBoneRotationOption                                    (OptionalParm, Parm)
void APawn::SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion, const struct FPointer& pRootBoneOption, const struct FPointer& pRootBoneRotationOption)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetAnimPosition");

	APawn_SetAnimPosition_Params params {};
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;
	params.bEnableRootMotion = bEnableRootMotion;
	params.pRootBoneOption = pRootBoneOption;
	params.pRootBoneRotationOption = pRootBoneRotationOption;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.MAT_FinishAnimControl
//		Flags  -> ()
// Parameters:
//		class UInterpGroup*                                InInterpGroup                                              (Parm)
void APawn::MAT_FinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_FinishAnimControl");

	APawn_MAT_FinishAnimControl_Params params {};
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.FinishAnimControl
//		Flags  -> ()
// Parameters:
//		class UInterpGroup*                                InInterpGroup                                              (Parm)
void APawn::FinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FinishAnimControl");

	APawn_FinishAnimControl_Params params {};
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.MAT_BeginAnimControl
//		Flags  -> ()
// Parameters:
//		class UInterpGroup*                                InInterpGroup                                              (Parm)
void APawn::MAT_BeginAnimControl(class UInterpGroup* InInterpGroup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_BeginAnimControl");

	APawn_MAT_BeginAnimControl_Params params {};
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.BeginAnimControl
//		Flags  -> ()
// Parameters:
//		class UInterpGroup*                                InInterpGroup                                              (Parm)
void APawn::BeginAnimControl(class UInterpGroup* InInterpGroup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BeginAnimControl");

	APawn_BeginAnimControl_Params params {};
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.RestoreAnimSetsToDefault
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::RestoreAnimSetsToDefault()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.RestoreAnimSetsToDefault");

	APawn_RestoreAnimSetsToDefault_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.AnimSetListUpdated
//		Flags  -> ()
void APawn::AnimSetListUpdated()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AnimSetListUpdated");

	APawn_AnimSetListUpdated_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.AddAnimSets
//		Flags  -> ()
// Parameters:
//		TArray<class UAnimSet*>                            CustomAnimSets                                             (Const, Parm, OutParm, NeedCtorLink)
void APawn::AddAnimSets(TArray<class UAnimSet*>* CustomAnimSets)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddAnimSets");

	APawn_AddAnimSets_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (CustomAnimSets != nullptr)
		*CustomAnimSets = params.CustomAnimSets;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.BuildScriptAnimSetList
//		Flags  -> ()
void APawn::BuildScriptAnimSetList()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BuildScriptAnimSetList");

	APawn_BuildScriptAnimSetList_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.UpdateAnimSetList
//		Flags  -> ()
void APawn::UpdateAnimSetList()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UpdateAnimSetList");

	APawn_UpdateAnimSetList_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.ClearAnimNodes
//		Flags  -> ()
void APawn::ClearAnimNodes()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClearAnimNodes");

	APawn_ClearAnimNodes_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.CacheAnimNodes
//		Flags  -> ()
void APawn::CacheAnimNodes()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CacheAnimNodes");

	APawn_CacheAnimNodes_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.PostInitAnimTree
//		Flags  -> ()
// Parameters:
//		class USkeletalMeshComponent*                      SkelComp                                                   (Parm, EditInline)
void APawn::PostInitAnimTree(class USkeletalMeshComponent* SkelComp)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PostInitAnimTree");

	APawn_PostInitAnimTree_Params params {};
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.IsDesiredRotationLocked
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::IsDesiredRotationLocked()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsDesiredRotationLocked");

	APawn_IsDesiredRotationLocked_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.IsDesiredRotationInUse
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::IsDesiredRotationInUse()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsDesiredRotationInUse");

	APawn_IsDesiredRotationInUse_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.CheckDesiredRotation
//		Flags  -> ()
void APawn::CheckDesiredRotation()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheckDesiredRotation");

	APawn_CheckDesiredRotation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.ResetDesiredRotation
//		Flags  -> ()
void APawn::ResetDesiredRotation()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ResetDesiredRotation");

	APawn_ResetDesiredRotation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.LockDesiredRotation
//		Flags  -> ()
// Parameters:
//		bool                                               Lock                                                       (Parm)
//		bool                                               InUnlockWhenReached                                        (OptionalParm, Parm)
void APawn::LockDesiredRotation(bool Lock, bool InUnlockWhenReached)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.LockDesiredRotation");

	APawn_LockDesiredRotation_Params params {};
	params.Lock = Lock;
	params.InUnlockWhenReached = InUnlockWhenReached;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.SetDesiredRotation
//		Flags  -> ()
// Parameters:
//		struct FRotator                                    TargetDesiredRotation                                      (Parm)
//		bool                                               InLockDesiredRotation                                      (OptionalParm, Parm)
//		bool                                               InUnlockWhenReached                                        (OptionalParm, Parm)
//		float                                              InterpolationTime                                          (OptionalParm, Parm)
//		bool                                               bResetRotationRate                                         (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::SetDesiredRotation(const struct FRotator& TargetDesiredRotation, bool InLockDesiredRotation, bool InUnlockWhenReached, float InterpolationTime, bool bResetRotationRate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetDesiredRotation");

	APawn_SetDesiredRotation_Params params {};
	params.TargetDesiredRotation = TargetDesiredRotation;
	params.InLockDesiredRotation = InLockDesiredRotation;
	params.InUnlockWhenReached = InUnlockWhenReached;
	params.InterpolationTime = InterpolationTime;
	params.bResetRotationRate = bResetRotationRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Pawn.PickWallAdjust
//		Flags  -> ()
// Parameters:
//		struct FVector                                     WallHitNormal                                              (Parm)
//		class AActor*                                      HitActor                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APawn::PickWallAdjust(const struct FVector& WallHitNormal, class AActor* HitActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PickWallAdjust");

	APawn_PickWallAdjust_Params params {};
	params.WallHitNormal = WallHitNormal;
	params.HitActor = HitActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.ZeroMovementVariables
//		Flags  -> ()
void AVehicle::ZeroMovementVariables()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ZeroMovementVariables");

	AVehicle_ZeroMovementVariables_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.NotifyDriverTakeHit
//		Flags  -> ()
// Parameters:
//		class AController*                                 InstigatedBy                                               (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		int                                                Damage                                                     (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FVector                                     Momentum                                                   (Parm)
void AVehicle::NotifyDriverTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.NotifyDriverTakeHit");

	AVehicle_NotifyDriverTakeHit_Params params {};
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.Momentum = Momentum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void AVehicle::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ReplicatedEvent");

	AVehicle_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.DrivingStatusChanged
//		Flags  -> ()
void AVehicle::DrivingStatusChanged()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DrivingStatusChanged");

	AVehicle_DrivingStatusChanged_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.SetDriving
//		Flags  -> ()
// Parameters:
//		bool                                               B                                                          (Parm)
void AVehicle::SetDriving(bool B)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetDriving");

	AVehicle_SetDriving_Params params {};
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.GetEntryLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector AVehicle::GetEntryLocation()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetEntryLocation");

	AVehicle_GetEntryLocation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.CrushedBy
//		Flags  -> ()
// Parameters:
//		class APawn*                                       OtherPawn                                                  (Parm)
void AVehicle::CrushedBy(class APawn* OtherPawn)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CrushedBy");

	AVehicle_CrushedBy_Params params {};
	params.OtherPawn = OtherPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.PancakeOther
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
void AVehicle::PancakeOther(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PancakeOther");

	AVehicle_PancakeOther_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.EncroachingOn
//		Flags  -> (Singular, Net, NetReliable, Native, Event, Operator, HasOptionalParms, Private, Protected, Delegate, NetServer, HasOutParms, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AVehicle::EncroachingOn(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.EncroachingOn");

	AVehicle_EncroachingOn_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.GetCollisionDamageInstigator
//		Flags  -> ()
// Parameters:
//		class AController*                                 ReturnValue                                                (Parm, OutParm, ReturnParm)
class AController* AVehicle::GetCollisionDamageInstigator()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetCollisionDamageInstigator");

	AVehicle_GetCollisionDamageInstigator_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.EncroachedBy
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void AVehicle::EncroachedBy(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.EncroachedBy");

	AVehicle_EncroachedBy_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.FaceRotation
//		Flags  -> ()
// Parameters:
//		struct FRotator                                    NewRotation                                                (Parm)
//		float                                              DeltaTime                                                  (Parm)
void AVehicle::FaceRotation(const struct FRotator& NewRotation, float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.FaceRotation");

	AVehicle_FaceRotation_Params params {};
	params.NewRotation = NewRotation;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.GetDefaultCameraMode
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           RequestedBy                                                (Parm)
//		struct FName                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FName AVehicle::GetDefaultCameraMode(class APlayerController* RequestedBy)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetDefaultCameraMode");

	AVehicle_GetDefaultCameraMode_Params params {};
	params.RequestedBy = RequestedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.PlayDying
//		Flags  -> ()
// Parameters:
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FVector                                     HitLoc                                                     (Parm)
void AVehicle::PlayDying(class UClass* DamageType, const struct FVector& HitLoc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PlayDying");

	AVehicle_PlayDying_Params params {};
	params.DamageType = DamageType;
	params.HitLoc = HitLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.DriverDied
//		Flags  -> ()
// Parameters:
//		class UClass*                                      DamageType                                                 (Parm)
void AVehicle::DriverDied(class UClass* DamageType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverDied");

	AVehicle_DriverDied_Params params {};
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.Died
//		Flags  -> ()
// Parameters:
//		class AController*                                 Killer                                                     (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AVehicle::Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Died");

	AVehicle_Died_Params params {};
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.ThrowActiveWeapon
//		Flags  -> ()
// Parameters:
//		bool                                               bDestroyWeap                                               (OptionalParm, Parm)
void AVehicle::ThrowActiveWeapon(bool bDestroyWeap)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ThrowActiveWeapon");

	AVehicle_ThrowActiveWeapon_Params params {};
	params.bDestroyWeap = bDestroyWeap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.AdjustDriverDamage
//		Flags  -> ()
// Parameters:
//		int                                                Damage                                                     (Parm, OutParm)
//		class AController*                                 InstigatedBy                                               (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     Momentum                                                   (Parm, OutParm)
//		class UClass*                                      DamageType                                                 (Parm)
void AVehicle::AdjustDriverDamage(int* Damage, class AController* InstigatedBy, const struct FVector& HitLocation, struct FVector* Momentum, class UClass* DamageType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.AdjustDriverDamage");

	AVehicle_AdjustDriverDamage_Params params {};
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Damage != nullptr)
		*Damage = params.Damage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.TakeDamage
//		Flags  -> ()
// Parameters:
//		int                                                Damage                                                     (Parm)
//		class AController*                                 EventInstigator                                            (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     Momentum                                                   (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (OptionalParm, Parm)
//		class AActor*                                      DamageCauser                                               (OptionalParm, Parm)
void AVehicle::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.TakeDamage");

	AVehicle_TakeDamage_Params params {};
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.SetKillInstigator
//		Flags  -> ()
// Parameters:
//		class AController*                                 InstigatedBy                                               (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		class AController*                                 ReturnValue                                                (Parm, OutParm, ReturnParm)
class AController* AVehicle::SetKillInstigator(class AController* InstigatedBy, class UClass* DamageType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetKillInstigator");

	AVehicle_SetKillInstigator_Params params {};
	params.InstigatedBy = InstigatedBy;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.UnPossessed
//		Flags  -> ()
void AVehicle::UnPossessed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.UnPossessed");

	AVehicle_UnPossessed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.TryExitPos
//		Flags  -> (Singular, NetReliable, Native, Event, HasOptionalParms, Private, Protected, Delegate, NetServer, HasOutParms, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		class APawn*                                       ExitingDriver                                              (Parm)
//		struct FVector                                     ExitPos                                                    (Parm)
//		bool                                               bMustFindGround                                            (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AVehicle::TryExitPos(class APawn* ExitingDriver, const struct FVector& ExitPos, bool bMustFindGround)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.TryExitPos");

	AVehicle_TryExitPos_Params params {};
	params.ExitingDriver = ExitingDriver;
	params.ExitPos = ExitPos;
	params.bMustFindGround = bMustFindGround;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.FindAutoExit
//		Flags  -> (Singular, NetReliable, Simulated, Operator, HasOptionalParms, Private, Protected, Delegate, NetServer, HasOutParms, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		class APawn*                                       ExitingDriver                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AVehicle::FindAutoExit(class APawn* ExitingDriver)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.FindAutoExit");

	AVehicle_FindAutoExit_Params params {};
	params.ExitingDriver = ExitingDriver;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.PlaceExitingDriver
//		Flags  -> (Singular, Native, Event, Static, Private, Protected, Delegate, NetServer, HasOutParms, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		class APawn*                                       ExitingDriver                                              (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AVehicle::STATIC_PlaceExitingDriver(class APawn* ExitingDriver)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PlaceExitingDriver");

	AVehicle_PlaceExitingDriver_Params params {};
	params.ExitingDriver = ExitingDriver;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.DriverLeft
//		Flags  -> ()
void AVehicle::DriverLeft()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverLeft");

	AVehicle_DriverLeft_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.SetInputs
//		Flags  -> ()
// Parameters:
//		float                                              InForward                                                  (Parm)
//		float                                              InStrafe                                                   (Parm)
//		float                                              InUp                                                       (Parm)
void AVehicle::SetInputs(float InForward, float InStrafe, float InUp)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetInputs");

	AVehicle_SetInputs_Params params {};
	params.InForward = InForward;
	params.InStrafe = InStrafe;
	params.InUp = InUp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.DriverLeave
//		Flags  -> (Simulated, Exec, Operator, Static, Private, Protected, Delegate, NetServer, HasOutParms, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		bool                                               bForceLeave                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AVehicle::STATIC_DriverLeave(bool bForceLeave)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverLeave");

	AVehicle_DriverLeave_Params params {};
	params.bForceLeave = bForceLeave;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.GetExitRotation
//		Flags  -> (Singular, Net, NetReliable, Native, Operator, Static, Private, Protected, Delegate, NetServer, HasOutParms, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		class AController*                                 C                                                          (Parm)
//		struct FRotator                                    ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FRotator AVehicle::STATIC_GetExitRotation(class AController* C)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetExitRotation");

	AVehicle_GetExitRotation_Params params {};
	params.C = C;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.ContinueOnFoot
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AVehicle::ContinueOnFoot()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ContinueOnFoot");

	AVehicle_ContinueOnFoot_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.DetachDriver
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
void AVehicle::DetachDriver(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DetachDriver");

	AVehicle_DetachDriver_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.AttachDriver
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
void AVehicle::AttachDriver(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.AttachDriver");

	AVehicle_AttachDriver_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.EntryAnnouncement
//		Flags  -> ()
// Parameters:
//		class AController*                                 C                                                          (Parm)
void AVehicle::EntryAnnouncement(class AController* C)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.EntryAnnouncement");

	AVehicle_EntryAnnouncement_Params params {};
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.PossessedBy
//		Flags  -> ()
// Parameters:
//		class AController*                                 C                                                          (Parm)
//		bool                                               bVehicleTransition                                         (Parm)
void AVehicle::PossessedBy(class AController* C, bool bVehicleTransition)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PossessedBy");

	AVehicle_PossessedBy_Params params {};
	params.C = C;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.DriverEnter
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AVehicle::DriverEnter(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverEnter");

	AVehicle_DriverEnter_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.TryToDrive
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AVehicle::TryToDrive(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.TryToDrive");

	AVehicle_TryToDrive_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.AnySeatAvailable
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AVehicle::AnySeatAvailable()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.AnySeatAvailable");

	AVehicle_AnySeatAvailable_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.CanEnterVehicle
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AVehicle::CanEnterVehicle(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CanEnterVehicle");

	AVehicle_CanEnterVehicle_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.Destroyed_HandleDriver
//		Flags  -> ()
void AVehicle::Destroyed_HandleDriver()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Destroyed_HandleDriver");

	AVehicle_Destroyed_HandleDriver_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.Destroyed
//		Flags  -> ()
void AVehicle::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Destroyed");

	AVehicle_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.CheatFly
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AVehicle::CheatFly()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CheatFly");

	AVehicle_CheatFly_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.CheatGhost
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AVehicle::CheatGhost()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CheatGhost");

	AVehicle_CheatGhost_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.CheatWalk
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AVehicle::CheatWalk()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CheatWalk");

	AVehicle_CheatWalk_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.PostBeginPlay
//		Flags  -> ()
void AVehicle::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PostBeginPlay");

	AVehicle_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.SetBaseEyeheight
//		Flags  -> ()
void AVehicle::SetBaseEyeheight()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetBaseEyeheight");

	AVehicle_SetBaseEyeheight_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.PlayerChangedTeam
//		Flags  -> ()
void AVehicle::PlayerChangedTeam()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PlayerChangedTeam");

	AVehicle_PlayerChangedTeam_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.DriverRadiusDamage
//		Flags  -> ()
// Parameters:
//		float                                              DamageAmount                                               (Parm)
//		float                                              DamageRadius                                               (Parm)
//		class AController*                                 EventInstigator                                            (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		float                                              Momentum                                                   (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		class AActor*                                      DamageCauser                                               (Parm)
//		float                                              DamageFalloffExponent                                      (OptionalParm, Parm)
void AVehicle::DriverRadiusDamage(float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, const struct FVector& HitLocation, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverRadiusDamage");

	AVehicle_DriverRadiusDamage_Params params {};
	params.DamageAmount = DamageAmount;
	params.DamageRadius = DamageRadius;
	params.EventInstigator = EventInstigator;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HitLocation = HitLocation;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.TakeRadiusDamage
//		Flags  -> ()
// Parameters:
//		class AController*                                 InstigatedBy                                               (Parm)
//		float                                              BaseDamage                                                 (Parm)
//		float                                              DamageRadius                                               (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		float                                              Momentum                                                   (Parm)
//		struct FVector                                     HurtOrigin                                                 (Parm)
//		bool                                               bFullDamage                                                (Parm)
//		class AActor*                                      DamageCauser                                               (Parm)
//		float                                              DamageFalloffExponent                                      (OptionalParm, Parm)
void AVehicle::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.TakeRadiusDamage");

	AVehicle_TakeRadiusDamage_Params params {};
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.GetTargetLocation
//		Flags  -> ()
// Parameters:
//		class AActor*                                      RequestedBy                                                (OptionalParm, Parm)
//		bool                                               bRequestAlternateLoc                                       (OptionalParm, Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector AVehicle::GetTargetLocation(class AActor* RequestedBy, bool bRequestAlternateLoc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetTargetLocation");

	AVehicle_GetTargetLocation_Params params {};
	params.RequestedBy = RequestedBy;
	params.bRequestAlternateLoc = bRequestAlternateLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.GetMaxRiseForce
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float AVehicle::GetMaxRiseForce()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetMaxRiseForce");

	AVehicle_GetMaxRiseForce_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.Suicide
//		Flags  -> ()
void AVehicle::Suicide()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Suicide");

	AVehicle_Suicide_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.DisplayDebug
//		Flags  -> ()
// Parameters:
//		class AHUD*                                        HUD                                                        (Parm)
//		float                                              out_YL                                                     (Parm, OutParm)
//		float                                              out_YPos                                                   (Parm, OutParm)
void AVehicle::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DisplayDebug");

	AVehicle_DisplayDebug_Params params {};
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Vehicle.NotifyTeamChanged
//		Flags  -> ()
void AVehicle::NotifyTeamChanged()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.NotifyTeamChanged");

	AVehicle_NotifyTeamChanged_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.GetSVehicleDebug
//		Flags  -> ()
// Parameters:
//		TArray<struct FString>                             DebugInfo                                                  (Parm, OutParm, NeedCtorLink)
void ASVehicle::GetSVehicleDebug(TArray<struct FString>* DebugInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.GetSVehicleDebug");

	ASVehicle_GetSVehicleDebug_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DebugInfo != nullptr)
		*DebugInfo = params.DebugInfo;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.HermiteEval
//		Flags  -> ()
// Parameters:
//		float                                              Slip                                                       (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float ASVehicle::HermiteEval(float Slip)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.HermiteEval");

	ASVehicle_HermiteEval_Params params {};
	params.Slip = Slip;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.DisplayWheelsDebug
//		Flags  -> (Simulated, Event, HasOptionalParms, Const, Private, Protected, Delegate, NetServer, HasOutParms, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		class AHUD*                                        HUD                                                        (Parm)
//		float                                              YL                                                         (Parm)
void ASVehicle::DisplayWheelsDebug(class AHUD* HUD, float YL)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.DisplayWheelsDebug");

	ASVehicle_DisplayWheelsDebug_Params params {};
	params.HUD = HUD;
	params.YL = YL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.DisplayDebug
//		Flags  -> ()
// Parameters:
//		class AHUD*                                        HUD                                                        (Parm)
//		float                                              out_YL                                                     (Parm, OutParm)
//		float                                              out_YPos                                                   (Parm, OutParm)
void ASVehicle::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.DisplayDebug");

	ASVehicle_DisplayDebug_Params params {};
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.PostTeleport
//		Flags  -> ()
// Parameters:
//		class ATeleporter*                                 OutTeleporter                                              (Parm)
void ASVehicle::PostTeleport(class ATeleporter* OutTeleporter)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.PostTeleport");

	ASVehicle_PostTeleport_Params params {};
	params.OutTeleporter = OutTeleporter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.SuspensionHeavyShift
//		Flags  -> ()
// Parameters:
//		float                                              Delta                                                      (Parm)
void ASVehicle::SuspensionHeavyShift(float Delta)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.SuspensionHeavyShift");

	ASVehicle_SuspensionHeavyShift_Params params {};
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.RigidBodyCollision
//		Flags  -> ()
// Parameters:
//		class UPrimitiveComponent*                         HitComponent                                               (Parm, EditInline)
//		class UPrimitiveComponent*                         OtherComponent                                             (Parm, EditInline)
//		struct FCollisionImpactData                        RigidCollisionData                                         (Const, Parm, OutParm, NeedCtorLink)
//		int                                                ContactIndex                                               (Parm)
void ASVehicle::RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, struct FCollisionImpactData* RigidCollisionData, int ContactIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.RigidBodyCollision");

	ASVehicle_RigidBodyCollision_Params params {};
	params.HitComponent = HitComponent;
	params.OtherComponent = OtherComponent;
	params.ContactIndex = ContactIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (RigidCollisionData != nullptr)
		*RigidCollisionData = params.RigidCollisionData;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.DrivingStatusChanged
//		Flags  -> ()
void ASVehicle::DrivingStatusChanged()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.DrivingStatusChanged");

	ASVehicle_DrivingStatusChanged_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.VehiclePlayExitSound
//		Flags  -> ()
void ASVehicle::VehiclePlayExitSound()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.VehiclePlayExitSound");

	ASVehicle_VehiclePlayExitSound_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.VehiclePlayEnterSound
//		Flags  -> ()
void ASVehicle::VehiclePlayEnterSound()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.VehiclePlayEnterSound");

	ASVehicle_VehiclePlayEnterSound_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.StopEngineSoundTimed
//		Flags  -> ()
void ASVehicle::StopEngineSoundTimed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.StopEngineSoundTimed");

	ASVehicle_StopEngineSoundTimed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.StopEngineSound
//		Flags  -> ()
void ASVehicle::StopEngineSound()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.StopEngineSound");

	ASVehicle_StopEngineSound_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.StartEngineSoundTimed
//		Flags  -> ()
void ASVehicle::StartEngineSoundTimed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.StartEngineSoundTimed");

	ASVehicle_StartEngineSoundTimed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.StartEngineSound
//		Flags  -> ()
void ASVehicle::StartEngineSound()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.StartEngineSound");

	ASVehicle_StartEngineSound_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.HasWheelsOnGround
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ASVehicle::HasWheelsOnGround()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.HasWheelsOnGround");

	ASVehicle_HasWheelsOnGround_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.TryToDrive
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ASVehicle::TryToDrive(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.TryToDrive");

	ASVehicle_TryToDrive_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.GetDefaultCameraMode
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           RequestedBy                                                (Parm)
//		struct FName                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FName ASVehicle::GetDefaultCameraMode(class APlayerController* RequestedBy)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.GetDefaultCameraMode");

	ASVehicle_GetDefaultCameraMode_Params params {};
	params.RequestedBy = RequestedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.CalcCamera
//		Flags  -> (Net, Exec, Native, Operator, Static, Const, Private, Protected, Delegate, NetServer, HasOutParms, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		float                                              fDeltaTime                                                 (Parm)
//		struct FVector                                     out_CamLoc                                                 (Parm, OutParm)
//		struct FRotator                                    out_CamRot                                                 (Parm, OutParm)
//		float                                              out_FOV                                                    (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ASVehicle::STATIC_CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.CalcCamera");

	ASVehicle_CalcCamera_Params params {};
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_CamLoc != nullptr)
		*out_CamLoc = params.out_CamLoc;
	if (out_CamRot != nullptr)
		*out_CamRot = params.out_CamRot;
	if (out_FOV != nullptr)
		*out_FOV = params.out_FOV;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.Died
//		Flags  -> ()
// Parameters:
//		class AController*                                 Killer                                                     (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ASVehicle::Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.Died");

	ASVehicle_Died_Params params {};
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.AddVelocity
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewVelocity                                                (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (OptionalParm, Parm)
void ASVehicle::AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.AddVelocity");

	ASVehicle_AddVelocity_Params params {};
	params.NewVelocity = NewVelocity;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.InitVehicleRagdoll
//		Flags  -> ()
// Parameters:
//		class USkeletalMesh*                               RagdollMesh                                                (Parm)
//		class UPhysicsAsset*                               RagdollPhysAsset                                           (Parm)
//		struct FVector                                     ActorMove                                                  (Parm)
//		bool                                               bClearAnimTree                                             (Parm)
void ASVehicle::InitVehicleRagdoll(class USkeletalMesh* RagdollMesh, class UPhysicsAsset* RagdollPhysAsset, const struct FVector& ActorMove, bool bClearAnimTree)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.InitVehicleRagdoll");

	ASVehicle_InitVehicleRagdoll_Params params {};
	params.RagdollMesh = RagdollMesh;
	params.RagdollPhysAsset = RagdollPhysAsset;
	params.ActorMove = ActorMove;
	params.bClearAnimTree = bClearAnimTree;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.TakeRadiusDamage
//		Flags  -> (Native, Event, Operator, Const, Private, Protected, Delegate, NetServer, HasOutParms, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		class AController*                                 InstigatedBy                                               (Parm)
//		float                                              BaseDamage                                                 (Parm)
//		float                                              DamageRadius                                               (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		float                                              Momentum                                                   (Parm)
//		struct FVector                                     HurtOrigin                                                 (Parm)
//		bool                                               bFullDamage                                                (Parm)
//		class AActor*                                      DamageCauser                                               (Parm)
//		float                                              DamageFalloffExponent                                      (OptionalParm, Parm)
void ASVehicle::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.TakeRadiusDamage");

	ASVehicle_TakeRadiusDamage_Params params {};
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.StopVehicleSounds
//		Flags  -> ()
void ASVehicle::StopVehicleSounds()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.StopVehicleSounds");

	ASVehicle_StopVehicleSounds_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.TurnOff
//		Flags  -> ()
void ASVehicle::TurnOff()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.TurnOff");

	ASVehicle_TurnOff_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.Destroyed
//		Flags  -> ()
void ASVehicle::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.Destroyed");

	ASVehicle_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.PostInitAnimTree
//		Flags  -> ()
// Parameters:
//		class USkeletalMeshComponent*                      SkelComp                                                   (Parm, EditInline)
void ASVehicle::PostInitAnimTree(class USkeletalMeshComponent* SkelComp)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.PostInitAnimTree");

	ASVehicle_PostInitAnimTree_Params params {};
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.PostBeginPlay
//		Flags  -> ()
void ASVehicle::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.PostBeginPlay");

	ASVehicle_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.SetWheelCollision
//		Flags  -> ()
// Parameters:
//		int                                                WheelNum                                                   (Parm)
//		bool                                               bCollision                                                 (Parm)
void ASVehicle::SetWheelCollision(int WheelNum, bool bCollision)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.SetWheelCollision");

	ASVehicle_SetWheelCollision_Params params {};
	params.WheelNum = WheelNum;
	params.bCollision = bCollision;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.IsSleeping
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ASVehicle::IsSleeping()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.IsSleeping");

	ASVehicle_IsSleeping_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.AddTorque
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Torque                                                     (Parm)
void ASVehicle::AddTorque(const struct FVector& Torque)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.AddTorque");

	ASVehicle_AddTorque_Params params {};
	params.Torque = Torque;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.AddImpulse
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Impulse                                                    (Parm)
void ASVehicle::AddImpulse(const struct FVector& Impulse)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.AddImpulse");

	ASVehicle_AddImpulse_Params params {};
	params.Impulse = Impulse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SVehicle.AddForce
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Force                                                      (Parm)
void ASVehicle::AddForce(const struct FVector& Force)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.AddForce");

	ASVehicle_AddForce_Params params {};
	params.Force = Force;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_LineImpulseActor.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void ARB_LineImpulseActor::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_LineImpulseActor.ReplicatedEvent");

	ARB_LineImpulseActor_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_LineImpulseActor.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              inAction                                                   (Parm)
void ARB_LineImpulseActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_LineImpulseActor.OnToggle");

	ARB_LineImpulseActor_OnToggle_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_LineImpulseActor.FireLineImpulse
//		Flags  -> ()
void ARB_LineImpulseActor::FireLineImpulse()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_LineImpulseActor.FireLineImpulse");

	ARB_LineImpulseActor_FireLineImpulse_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_RadialImpulseActor.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void ARB_RadialImpulseActor::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_RadialImpulseActor.ReplicatedEvent");

	ARB_RadialImpulseActor_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_RadialImpulseActor.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              inAction                                                   (Parm)
void ARB_RadialImpulseActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_RadialImpulseActor.OnToggle");

	ARB_RadialImpulseActor_OnToggle_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_Thruster.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void ARB_Thruster::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_Thruster.OnToggle");

	ARB_Thruster_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WorldAttractor.OnSetWorldAttractorParam
//		Flags  -> ()
// Parameters:
//		class USeqAct_SetWorldAttractorParam*              Action                                                     (Parm)
void AWorldAttractor::OnSetWorldAttractorParam(class USeqAct_SetWorldAttractorParam* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WorldAttractor.OnSetWorldAttractorParam");

	AWorldAttractor_OnSetWorldAttractorParam_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_RadialImpulseComponent.FireImpulse
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Origin                                                     (Parm)
void URB_RadialImpulseComponent::FireImpulse(const struct FVector& Origin)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_RadialImpulseComponent.FireImpulse");

	URB_RadialImpulseComponent_FireImpulse_Params params {};
	params.Origin = Origin;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_Handle.GetOrientation
//		Flags  -> ()
// Parameters:
//		struct FQuat                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FQuat URB_Handle::GetOrientation()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.GetOrientation");

	URB_Handle_GetOrientation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_Handle.SetOrientation
//		Flags  -> ()
// Parameters:
//		struct FQuat                                       NewOrientation                                             (Const, Parm, OutParm)
void URB_Handle::SetOrientation(struct FQuat* NewOrientation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.SetOrientation");

	URB_Handle_SetOrientation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (NewOrientation != nullptr)
		*NewOrientation = params.NewOrientation;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_Handle.UpdateSmoothLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewLocation                                                (Const, Parm, OutParm)
void URB_Handle::UpdateSmoothLocation(struct FVector* NewLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.UpdateSmoothLocation");

	URB_Handle_UpdateSmoothLocation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (NewLocation != nullptr)
		*NewLocation = params.NewLocation;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_Handle.SetSmoothLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewLocation                                                (Parm)
//		float                                              MoveTime                                                   (Parm)
void URB_Handle::SetSmoothLocation(const struct FVector& NewLocation, float MoveTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.SetSmoothLocation");

	URB_Handle_SetSmoothLocation_Params params {};
	params.NewLocation = NewLocation;
	params.MoveTime = MoveTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_Handle.SetLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewLocation                                                (Parm)
void URB_Handle::SetLocation(const struct FVector& NewLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.SetLocation");

	URB_Handle_SetLocation_Params params {};
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_Handle.ReleaseComponent
//		Flags  -> ()
void URB_Handle::ReleaseComponent()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.ReleaseComponent");

	URB_Handle_ReleaseComponent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_Handle.GrabComponent
//		Flags  -> ()
// Parameters:
//		class UPrimitiveComponent*                         Component                                                  (Parm, EditInline)
//		struct FName                                       InBoneName                                                 (Parm)
//		struct FVector                                     GrabLocation                                               (Parm)
//		bool                                               bConstrainRotation                                         (Parm)
void URB_Handle::GrabComponent(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.GrabComponent");

	URB_Handle_GrabComponent_Params params {};
	params.Component = Component;
	params.InBoneName = InBoneName;
	params.GrabLocation = GrabLocation;
	params.bConstrainRotation = bConstrainRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_Spring.Clear
//		Flags  -> ()
void URB_Spring::Clear()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_Spring.Clear");

	URB_Spring_Clear_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_Spring.SetComponents
//		Flags  -> ()
// Parameters:
//		class UPrimitiveComponent*                         InComponent1                                               (Parm, EditInline)
//		struct FName                                       InBoneName1                                                (Parm)
//		struct FVector                                     Position1                                                  (Parm)
//		class UPrimitiveComponent*                         InComponent2                                               (Parm, EditInline)
//		struct FName                                       InBoneName2                                                (Parm)
//		struct FVector                                     Position2                                                  (Parm)
void URB_Spring::SetComponents(class UPrimitiveComponent* InComponent1, const struct FName& InBoneName1, const struct FVector& Position1, class UPrimitiveComponent* InComponent2, const struct FName& InBoneName2, const struct FVector& Position2)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_Spring.SetComponents");

	URB_Spring_SetComponents_Params params {};
	params.InComponent1 = InComponent1;
	params.InBoneName1 = InBoneName1;
	params.Position1 = Position1;
	params.InComponent2 = InComponent2;
	params.InBoneName2 = InBoneName2;
	params.Position2 = Position2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.Cleanup
//		Flags  -> ()
// Parameters:
//		bool                                               bExit                                                      (OptionalParm, Parm)
void ULocalPlayer::Cleanup(bool bExit)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.Cleanup");

	ULocalPlayer_Cleanup_Params params {};
	params.bExit = bExit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.Exit
//		Flags  -> ()
void ULocalPlayer::Exit()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.Exit");

	ULocalPlayer_Exit_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.NotifyServerConnectionClose
//		Flags  -> ()
void ULocalPlayer::NotifyServerConnectionClose()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.NotifyServerConnectionClose");

	ULocalPlayer_NotifyServerConnectionClose_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.ViewportClosed
//		Flags  -> ()
void ULocalPlayer::ViewportClosed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.ViewportClosed");

	ULocalPlayer_ViewportClosed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.StaticOnServerConnectionClose
//		Flags  -> (Singular, Operator, Const, Public, Private, Protected, DLLImport, K2Override, K2Pure)
// Parameters:
//		class UPlayer*                                     ServerConnection                                           (Parm)
void ULocalPlayer::StaticOnServerConnectionClose(class UPlayer* ServerConnection)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.StaticOnServerConnectionClose");

	ULocalPlayer_StaticOnServerConnectionClose_Params params {};
	params.ServerConnection = ServerConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.OnServerConnectionClose
//		Flags  -> ()
// Parameters:
//		class UPlayer*                                     ServerConnection                                           (Parm)
void ULocalPlayer::OnServerConnectionClose(class UPlayer* ServerConnection)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.OnServerConnectionClose");

	ULocalPlayer_OnServerConnectionClose_Params params {};
	params.ServerConnection = ServerConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.ServerAuthFailure
//		Flags  -> ()
void ULocalPlayer::ServerAuthFailure()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.ServerAuthFailure");

	ULocalPlayer_ServerAuthFailure_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.ServerAuthTimedOut
//		Flags  -> (Exec, Event, Static, HasOptionalParms, Public, Private, Protected, DLLImport, K2Override, K2Pure)
// Parameters:
void ULocalPlayer::STATIC_ServerAuthTimedOut()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.ServerAuthTimedOut");

	ULocalPlayer_ServerAuthTimedOut_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.OnServerAuthComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bSuccess                                                   (Parm)
//		struct FUniqueNetId                                ServerUID                                                  (Parm)
//		class UPlayer*                                     ServerConnection                                           (Parm)
//		struct FString                                     ExtraInfo                                                  (Parm, NeedCtorLink)
void ULocalPlayer::OnServerAuthComplete(bool bSuccess, const struct FUniqueNetId& ServerUID, class UPlayer* ServerConnection, const struct FString& ExtraInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.OnServerAuthComplete");

	ULocalPlayer_OnServerAuthComplete_Params params {};
	params.bSuccess = bSuccess;
	params.ServerUID = ServerUID;
	params.ServerConnection = ServerConnection;
	params.ExtraInfo = ExtraInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.ProcessServerAuthResponse
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                ServerUID                                                  (Parm)
//		int                                                ServerIP                                                   (Parm)
//		int                                                AuthTicketUID                                              (Parm)
void ULocalPlayer::ProcessServerAuthResponse(const struct FUniqueNetId& ServerUID, int ServerIP, int AuthTicketUID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.ProcessServerAuthResponse");

	ULocalPlayer_ProcessServerAuthResponse_Params params {};
	params.ServerUID = ServerUID;
	params.ServerIP = ServerIP;
	params.AuthTicketUID = AuthTicketUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.ProcessClientAuthEndSessionRequest
//		Flags  -> (Singular, Exec, Operator, Static, HasOptionalParms, Public, Private, Protected, DLLImport, K2Override, K2Pure)
// Parameters:
//		class UPlayer*                                     ServerConnection                                           (Parm)
void ULocalPlayer::STATIC_ProcessClientAuthEndSessionRequest(class UPlayer* ServerConnection)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.ProcessClientAuthEndSessionRequest");

	ULocalPlayer_ProcessClientAuthEndSessionRequest_Params params {};
	params.ServerConnection = ServerConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.ProcessClientAuthRequest
//		Flags  -> (NetReliable, Exec, Native, Operator, Static, HasOptionalParms, Public, Private, Protected, DLLImport, K2Override, K2Pure)
// Parameters:
//		struct FUniqueNetId                                ServerUID                                                  (Parm)
//		int                                                ServerIP                                                   (Parm)
//		int                                                ServerPort                                                 (Parm)
//		bool                                               bSecure                                                    (Parm)
void ULocalPlayer::STATIC_ProcessClientAuthRequest(const struct FUniqueNetId& ServerUID, int ServerIP, int ServerPort, bool bSecure)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.ProcessClientAuthRequest");

	ULocalPlayer_ProcessClientAuthRequest_Params params {};
	params.ServerUID = ServerUID;
	params.ServerIP = ServerIP;
	params.ServerPort = ServerPort;
	params.bSecure = bSecure;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.NotifyServerConnectionOpen
//		Flags  -> ()
void ULocalPlayer::NotifyServerConnectionOpen()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.NotifyServerConnectionOpen");

	ULocalPlayer_NotifyServerConnectionOpen_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.GetNickname
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString ULocalPlayer::GetNickname()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.GetNickname");

	ULocalPlayer_GetNickname_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.GetUniqueNetId
//		Flags  -> (Net, Exec, Event, Operator, Static, HasOptionalParms, Public, Private, Protected, DLLImport, K2Override, K2Pure)
// Parameters:
//		struct FUniqueNetId                                ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FUniqueNetId ULocalPlayer::STATIC_GetUniqueNetId()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.GetUniqueNetId");

	ULocalPlayer_GetUniqueNetId_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.FastProject
//		Flags  -> ()
// Parameters:
//		struct FVector                                     WorldLoc                                                   (Parm)
//		struct FVector2D                                   ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector2D ULocalPlayer::FastProject(const struct FVector& WorldLoc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.FastProject");

	ULocalPlayer_FastProject_Params params {};
	params.WorldLoc = WorldLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.FastDeProject
//		Flags  -> ()
// Parameters:
//		struct FVector2D                                   RelativeScreenPos                                          (Parm)
//		struct FVector                                     WorldOrigin                                                (Parm, OutParm)
//		struct FVector                                     WorldDirection                                             (Parm, OutParm)
void ULocalPlayer::FastDeProject(const struct FVector2D& RelativeScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.FastDeProject");

	ULocalPlayer_FastDeProject_Params params {};
	params.RelativeScreenPos = RelativeScreenPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (WorldOrigin != nullptr)
		*WorldOrigin = params.WorldOrigin;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.Project
//		Flags  -> ()
// Parameters:
//		struct FVector                                     WorldLoc                                                   (Parm)
//		struct FVector2D                                   ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector2D ULocalPlayer::Project(const struct FVector& WorldLoc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.Project");

	ULocalPlayer_Project_Params params {};
	params.WorldLoc = WorldLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.DeProject
//		Flags  -> ()
// Parameters:
//		struct FVector2D                                   RelativeScreenPos                                          (Parm)
//		struct FVector                                     WorldOrigin                                                (Parm, OutParm)
//		struct FVector                                     WorldDirection                                             (Parm, OutParm)
void ULocalPlayer::DeProject(const struct FVector2D& RelativeScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.DeProject");

	ULocalPlayer_DeProject_Params params {};
	params.RelativeScreenPos = RelativeScreenPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (WorldOrigin != nullptr)
		*WorldOrigin = params.WorldOrigin;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.TouchPlayerPostProcessChain
//		Flags  -> ()
void ULocalPlayer::TouchPlayerPostProcessChain()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.TouchPlayerPostProcessChain");

	ULocalPlayer_TouchPlayerPostProcessChain_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.GetPostProcessChain
//		Flags  -> ()
// Parameters:
//		int                                                InIndex                                                    (Parm)
//		class UPostProcessChain*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class UPostProcessChain* ULocalPlayer::GetPostProcessChain(int InIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.GetPostProcessChain");

	ULocalPlayer_GetPostProcessChain_Params params {};
	params.InIndex = InIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.RemoveAllPostProcessingChains
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ULocalPlayer::RemoveAllPostProcessingChains()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.RemoveAllPostProcessingChains");

	ULocalPlayer_RemoveAllPostProcessingChains_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.RemovePostProcessingChain
//		Flags  -> ()
// Parameters:
//		int                                                InIndex                                                    (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ULocalPlayer::RemovePostProcessingChain(int InIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.RemovePostProcessingChain");

	ULocalPlayer_RemovePostProcessingChain_Params params {};
	params.InIndex = InIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.IsUberPostProcessChain
//		Flags  -> ()
// Parameters:
//		class UPostProcessChain*                           InChain                                                    (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ULocalPlayer::IsUberPostProcessChain(class UPostProcessChain* InChain)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.IsUberPostProcessChain");

	ULocalPlayer_IsUberPostProcessChain_Params params {};
	params.InChain = InChain;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.GetFirstUberPostProcessChainIndex
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int ULocalPlayer::GetFirstUberPostProcessChainIndex()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.GetFirstUberPostProcessChainIndex");

	ULocalPlayer_GetFirstUberPostProcessChainIndex_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.InsertPostProcessingChain
//		Flags  -> ()
// Parameters:
//		class UPostProcessChain*                           InChain                                                    (Parm)
//		int                                                InIndex                                                    (Parm)
//		bool                                               bInClone                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ULocalPlayer::InsertPostProcessingChain(class UPostProcessChain* InChain, int InIndex, bool bInClone)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.InsertPostProcessingChain");

	ULocalPlayer_InsertPostProcessingChain_Params params {};
	params.InChain = InChain;
	params.InIndex = InIndex;
	params.bInClone = bInClone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.GetTranslationContext
//		Flags  -> ()
// Parameters:
//		class UTranslationContext*                         ReturnValue                                                (Parm, OutParm, ReturnParm)
class UTranslationContext* ULocalPlayer::GetTranslationContext()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.GetTranslationContext");

	ULocalPlayer_GetTranslationContext_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.SetControllerId
//		Flags  -> ()
// Parameters:
//		int                                                NewControllerId                                            (Parm)
void ULocalPlayer::SetControllerId(int NewControllerId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.SetControllerId");

	ULocalPlayer_SetControllerId_Params params {};
	params.NewControllerId = NewControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.ClearPostProcessSettingsOverride
//		Flags  -> ()
// Parameters:
//		float                                              BlendOutTime                                               (OptionalParm, Parm)
void ULocalPlayer::ClearPostProcessSettingsOverride(float BlendOutTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.ClearPostProcessSettingsOverride");

	ULocalPlayer_ClearPostProcessSettingsOverride_Params params {};
	params.BlendOutTime = BlendOutTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.OverridePostProcessSettingsCurve
//		Flags  -> ()
// Parameters:
//		struct FPostProcessSettings                        OverrideSettings                                           (Parm, NeedCtorLink)
//		struct FInterpCurveFloat                           Curve                                                      (Const, Parm, OutParm, NeedCtorLink)
void ULocalPlayer::OverridePostProcessSettingsCurve(const struct FPostProcessSettings& OverrideSettings, struct FInterpCurveFloat* Curve)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.OverridePostProcessSettingsCurve");

	ULocalPlayer_OverridePostProcessSettingsCurve_Params params {};
	params.OverrideSettings = OverrideSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Curve != nullptr)
		*Curve = params.Curve;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.OverridePostProcessSettings
//		Flags  -> ()
// Parameters:
//		struct FPostProcessSettings                        OverrideSettings                                           (Parm, NeedCtorLink)
//		float                                              BlendInTime                                                (OptionalParm, Parm)
void ULocalPlayer::OverridePostProcessSettings(const struct FPostProcessSettings& OverrideSettings, float BlendInTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.OverridePostProcessSettings");

	ULocalPlayer_OverridePostProcessSettings_Params params {};
	params.OverrideSettings = OverrideSettings;
	params.BlendInTime = BlendInTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.GetActorVisibility
//		Flags  -> ()
// Parameters:
//		class AActor*                                      TestActor                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ULocalPlayer::GetActorVisibility(class AActor* TestActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.GetActorVisibility");

	ULocalPlayer_GetActorVisibility_Params params {};
	params.TestActor = TestActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.SendSplitJoin
//		Flags  -> ()
void ULocalPlayer::SendSplitJoin()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.SendSplitJoin");

	ULocalPlayer_SendSplitJoin_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LocalPlayer.SpawnPlayActor
//		Flags  -> ()
// Parameters:
//		struct FString                                     URL                                                        (Parm, NeedCtorLink)
//		struct FString                                     OutError                                                   (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ULocalPlayer::SpawnPlayActor(const struct FString& URL, struct FString* OutError)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.SpawnPlayActor");

	ULocalPlayer_SpawnPlayActor_Params params {};
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutError != nullptr)
		*OutError = params.OutError;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PostProcessChain.FindPostProcessEffect
//		Flags  -> ()
// Parameters:
//		struct FName                                       EffectName                                                 (Parm)
//		class UPostProcessEffect*                          ReturnValue                                                (Parm, OutParm, ReturnParm)
class UPostProcessEffect* UPostProcessChain::FindPostProcessEffect(const struct FName& EffectName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PostProcessChain.FindPostProcessEffect");

	UPostProcessChain_FindPostProcessEffect_Params params {};
	params.EffectName = EffectName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ReachSpec.IsBlockedFor
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UReachSpec::IsBlockedFor(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ReachSpec.IsBlockedFor");

	UReachSpec_IsBlockedFor_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ReachSpec.GetDirection
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector UReachSpec::GetDirection()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ReachSpec.GetDirection");

	UReachSpec_GetDirection_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ReachSpec.GetEnd
//		Flags  -> ()
// Parameters:
//		class ANavigationPoint*                            ReturnValue                                                (Parm, OutParm, ReturnParm)
class ANavigationPoint* UReachSpec::GetEnd()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ReachSpec.GetEnd");

	UReachSpec_GetEnd_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ReachSpec.CostFor
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UReachSpec::CostFor(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ReachSpec.CostFor");

	UReachSpec_CostFor_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SavedMove.GetDebugString
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString USavedMove::GetDebugString()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.GetDebugString");

	USavedMove_GetDebugString_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SavedMove.SetFlags
//		Flags  -> ()
// Parameters:
//		unsigned char                                      Flags                                                      (Parm)
//		class APlayerController*                           PC                                                         (Parm)
//		TEnumAsByte<Engine_EDoubleClickDir>                ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_EDoubleClickDir> USavedMove::SetFlags(unsigned char Flags, class APlayerController* PC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.SetFlags");

	USavedMove_SetFlags_Params params {};
	params.Flags = Flags;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SavedMove.CompressedFlags
//		Flags  -> ()
// Parameters:
//		unsigned char                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
unsigned char USavedMove::CompressedFlags()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.CompressedFlags");

	USavedMove_CompressedFlags_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SavedMove.ResetMoveFor
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
void USavedMove::ResetMoveFor(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.ResetMoveFor");

	USavedMove_ResetMoveFor_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SavedMove.PrepMoveFor
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
void USavedMove::PrepMoveFor(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.PrepMoveFor");

	USavedMove_PrepMoveFor_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SavedMove.SetMoveFor
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           P                                                          (Parm)
//		float                                              DeltaTime                                                  (Parm)
//		struct FVector                                     newAccel                                                   (Parm)
//		TEnumAsByte<Engine_EDoubleClickDir>                InDoubleClick                                              (Parm)
void USavedMove::SetMoveFor(class APlayerController* P, float DeltaTime, const struct FVector& newAccel, TEnumAsByte<Engine_EDoubleClickDir> InDoubleClick)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.SetMoveFor");

	USavedMove_SetMoveFor_Params params {};
	params.P = P;
	params.DeltaTime = DeltaTime;
	params.newAccel = newAccel;
	params.InDoubleClick = InDoubleClick;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SavedMove.CanCombineWith
//		Flags  -> ()
// Parameters:
//		class USavedMove*                                  NewMove                                                    (Parm)
//		class APawn*                                       inPawn                                                     (Parm)
//		float                                              MaxDelta                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USavedMove::CanCombineWith(class USavedMove* NewMove, class APawn* inPawn, float MaxDelta)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.CanCombineWith");

	USavedMove_CanCombineWith_Params params {};
	params.NewMove = NewMove;
	params.inPawn = inPawn;
	params.MaxDelta = MaxDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SavedMove.SetInitialPosition
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
void USavedMove::SetInitialPosition(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.SetInitialPosition");

	USavedMove_SetInitialPosition_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SavedMove.GetStartLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector USavedMove::GetStartLocation()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.GetStartLocation");

	USavedMove_GetStartLocation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SavedMove.IsImportantMove
//		Flags  -> (Net, NetReliable, Operator, Const, Public, Delegate, NetServer, HasOutParms, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		struct FVector                                     CompareAccel                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USavedMove::IsImportantMove(const struct FVector& CompareAccel)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.IsImportantMove");

	USavedMove_IsImportantMove_Params params {};
	params.CompareAccel = CompareAccel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SavedMove.PostUpdate
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           P                                                          (Parm)
void USavedMove::PostUpdate(class APlayerController* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.PostUpdate");

	USavedMove_PostUpdate_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SavedMove.Clear
//		Flags  -> ()
void USavedMove::Clear()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.Clear");

	USavedMove_Clear_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshPathGoalEvaluator.GetDumpString
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UNavMeshPathGoalEvaluator::GetDumpString()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPathGoalEvaluator.GetDumpString");

	UNavMeshPathGoalEvaluator_GetDumpString_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshPathGoalEvaluator.Recycle
//		Flags  -> ()
void UNavMeshPathGoalEvaluator::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPathGoalEvaluator.Recycle");

	UNavMeshPathGoalEvaluator_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_Random.Recycle
//		Flags  -> ()
void UNavMeshGoal_Random::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_Random.Recycle");

	UNavMeshGoal_Random_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_Random.RecycleNative
//		Flags  -> ()
void UNavMeshGoal_Random::RecycleNative()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_Random.RecycleNative");

	UNavMeshGoal_Random_RecycleNative_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_Random.FindRandom
//		Flags  -> ()
// Parameters:
//		class UNavigationHandle*                           NavHandle                                                  (Parm)
//		int                                                InMinDist                                                  (OptionalParm, Parm)
//		int                                                InMaxPathVisits                                            (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavMeshGoal_Random::FindRandom(class UNavigationHandle* NavHandle, int InMinDist, int InMaxPathVisits)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_Random.FindRandom");

	UNavMeshGoal_Random_FindRandom_Params params {};
	params.NavHandle = NavHandle;
	params.InMinDist = InMinDist;
	params.InMaxPathVisits = InMaxPathVisits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_WithinDistanceEnvelope.Recycle
//		Flags  -> ()
void UNavMeshGoal_WithinDistanceEnvelope::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_WithinDistanceEnvelope.Recycle");

	UNavMeshGoal_WithinDistanceEnvelope_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_WithinDistanceEnvelope.GoalWithinEnvelopeToLoc
//		Flags  -> ()
// Parameters:
//		class UNavigationHandle*                           NavHandle                                                  (Parm)
//		struct FVector                                     InEnvelopeTestPoint                                        (Parm)
//		float                                              InMaxDistance                                              (Parm)
//		float                                              InMinDistance                                              (Parm)
//		float                                              InMinTraversalDist                                         (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavMeshGoal_WithinDistanceEnvelope::GoalWithinEnvelopeToLoc(class UNavigationHandle* NavHandle, const struct FVector& InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, float InMinTraversalDist)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_WithinDistanceEnvelope.GoalWithinEnvelopeToLoc");

	UNavMeshGoal_WithinDistanceEnvelope_GoalWithinEnvelopeToLoc_Params params {};
	params.NavHandle = NavHandle;
	params.InEnvelopeTestPoint = InEnvelopeTestPoint;
	params.InMaxDistance = InMaxDistance;
	params.InMinDistance = InMinDistance;
	params.InMinTraversalDist = InMinTraversalDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PathConstraint.GetDumpString
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UPathConstraint::GetDumpString()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PathConstraint.GetDumpString");

	UPathConstraint_GetDumpString_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PathConstraint.Recycle
//		Flags  -> ()
void UPathConstraint::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PathConstraint.Recycle");

	UPathConstraint_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Path_WithinDistanceEnvelope.Recycle
//		Flags  -> ()
void UPath_WithinDistanceEnvelope::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Path_WithinDistanceEnvelope.Recycle");

	UPath_WithinDistanceEnvelope_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Path_WithinDistanceEnvelope.StayWithinEnvelopeToLoc
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
//		struct FVector                                     InEnvelopeTestPoint                                        (Parm)
//		float                                              InMaxDistance                                              (Parm)
//		float                                              InMinDistance                                              (Parm)
//		bool                                               bInSoft                                                    (OptionalParm, Parm)
//		float                                              InSoftStartPenalty                                         (OptionalParm, Parm)
//		bool                                               bOnlyTossOutSpecsThatLeave                                 (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UPath_WithinDistanceEnvelope::StayWithinEnvelopeToLoc(class APawn* P, const struct FVector& InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, bool bInSoft, float InSoftStartPenalty, bool bOnlyTossOutSpecsThatLeave)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Path_WithinDistanceEnvelope.StayWithinEnvelopeToLoc");

	UPath_WithinDistanceEnvelope_StayWithinEnvelopeToLoc_Params params {};
	params.P = P;
	params.InEnvelopeTestPoint = InEnvelopeTestPoint;
	params.InMaxDistance = InMaxDistance;
	params.InMinDistance = InMinDistance;
	params.bInSoft = bInSoft;
	params.InSoftStartPenalty = InSoftStartPenalty;
	params.bOnlyTossOutSpecsThatLeave = bOnlyTossOutSpecsThatLeave;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Path_WithinTraversalDist.Recycle
//		Flags  -> ()
void UPath_WithinTraversalDist::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Path_WithinTraversalDist.Recycle");

	UPath_WithinTraversalDist_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Path_WithinTraversalDist.DontExceedMaxDist
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
//		float                                              InMaxTraversalDist                                         (Parm)
//		bool                                               bInSoft                                                    (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UPath_WithinTraversalDist::DontExceedMaxDist(class APawn* P, float InMaxTraversalDist, bool bInSoft)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Path_WithinTraversalDist.DontExceedMaxDist");

	UPath_WithinTraversalDist_DontExceedMaxDist_Params params {};
	params.P = P;
	params.InMaxTraversalDist = InMaxTraversalDist;
	params.bInSoft = bInSoft;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PathGoalEvaluator.GetDumpString
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UPathGoalEvaluator::GetDumpString()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PathGoalEvaluator.GetDumpString");

	UPathGoalEvaluator_GetDumpString_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PathGoalEvaluator.Recycle
//		Flags  -> ()
void UPathGoalEvaluator::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PathGoalEvaluator.Recycle");

	UPathGoalEvaluator_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Goal_AtActor.Recycle
//		Flags  -> ()
void UGoal_AtActor::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Goal_AtActor.Recycle");

	UGoal_AtActor_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Goal_AtActor.AtActor
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
//		class AActor*                                      Goal                                                       (Parm)
//		float                                              Dist                                                       (OptionalParm, Parm)
//		bool                                               bReturnPartial                                             (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGoal_AtActor::AtActor(class APawn* P, class AActor* Goal, float Dist, bool bReturnPartial)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Goal_AtActor.AtActor");

	UGoal_AtActor_AtActor_Params params {};
	params.P = P;
	params.Goal = Goal;
	params.Dist = Dist;
	params.bReturnPartial = bReturnPartial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Goal_Null.Recycle
//		Flags  -> ()
void UGoal_Null::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Goal_Null.Recycle");

	UGoal_Null_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Goal_Null.GoUntilBust
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
//		int                                                InMaxPathVisits                                            (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGoal_Null::GoUntilBust(class APawn* P, int InMaxPathVisits)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Goal_Null.GoUntilBust");

	UGoal_Null_GoUntilBust_Params params {};
	params.P = P;
	params.InMaxPathVisits = InMaxPathVisits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.CreateForceField
//		Flags  -> ()
// Parameters:
//		class UAnimNotify_ForceField*                      AnimNotifyData                                             (Const, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ASkeletalMeshActor::CreateForceField(class UAnimNotify_ForceField* AnimNotifyData)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.CreateForceField");

	ASkeletalMeshActor_CreateForceField_Params params {};
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.SkelMeshActorOnParticleSystemFinished
//		Flags  -> ()
// Parameters:
//		class UParticleSystemComponent*                    PSC                                                        (Parm, EditInline)
void ASkeletalMeshActor::SkelMeshActorOnParticleSystemFinished(class UParticleSystemComponent* PSC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.SkelMeshActorOnParticleSystemFinished");

	ASkeletalMeshActor_SkelMeshActorOnParticleSystemFinished_Params params {};
	params.PSC = PSC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.PlayParticleEffect
//		Flags  -> (Native, Event, Static, HasOptionalParms, Const, Public, Protected, Delegate, NetServer, HasOutParms, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		class UAnimNotify_PlayParticleEffect*              AnimNotifyData                                             (Const, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ASkeletalMeshActor::STATIC_PlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.PlayParticleEffect");

	ASkeletalMeshActor_PlayParticleEffect_Params params {};
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.SkeletalMeshActor.ApplyCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct ASkeletalMeshActor_FCheckpointRecord        Record                                                     (Const, Parm, OutParm)
//void ASkeletalMeshActor::ApplyCheckpointRecord(struct ASkeletalMeshActor_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.ApplyCheckpointRecord");
//
//	ASkeletalMeshActor_ApplyCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}
//
//
//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.SkeletalMeshActor.CreateCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct ASkeletalMeshActor_FCheckpointRecord        Record                                                     (Parm, OutParm)
//void ASkeletalMeshActor::CreateCheckpointRecord(struct ASkeletalMeshActor_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.CreateCheckpointRecord");
//
//	ASkeletalMeshActor_CreateCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.ShouldSaveForCheckpoint
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ASkeletalMeshActor::ShouldSaveForCheckpoint()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.ShouldSaveForCheckpoint");

	ASkeletalMeshActor_ShouldSaveForCheckpoint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.TakeDamage
//		Flags  -> (Net, NetReliable, Native, Operator, Static, HasOptionalParms, Const, Public, Protected, Delegate, NetServer, HasOutParms, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		int                                                Damage                                                     (Parm)
//		class AController*                                 EventInstigator                                            (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     Momentum                                                   (Parm)
//		class UClass*                                      DamageType                                                 (Parm)
//		struct FTraceHitInfo                               HitInfo                                                    (OptionalParm, Parm)
//		class AActor*                                      DamageCauser                                               (OptionalParm, Parm)
void ASkeletalMeshActor::STATIC_TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.TakeDamage");

	ASkeletalMeshActor_TakeDamage_Params params {};
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.DoKismetAttachment
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Attachment                                                 (Parm)
//		class USeqAct_AttachToActor*                       Action                                                     (Parm)
void ASkeletalMeshActor::DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.DoKismetAttachment");

	ASkeletalMeshActor_DoKismetAttachment_Params params {};
	params.Attachment = Attachment;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.OnSetSkelControlTarget
//		Flags  -> ()
// Parameters:
//		class USeqAct_SetSkelControlTarget*                Action                                                     (Parm)
void ASkeletalMeshActor::OnSetSkelControlTarget(class USeqAct_SetSkelControlTarget* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnSetSkelControlTarget");

	ASkeletalMeshActor_OnSetSkelControlTarget_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.OnUpdatePhysBonesFromAnim
//		Flags  -> ()
// Parameters:
//		class USeqAct_UpdatePhysBonesFromAnim*             Action                                                     (Parm)
void ASkeletalMeshActor::OnUpdatePhysBonesFromAnim(class USeqAct_UpdatePhysBonesFromAnim* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnUpdatePhysBonesFromAnim");

	ASkeletalMeshActor_OnUpdatePhysBonesFromAnim_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.OnSetMesh
//		Flags  -> ()
// Parameters:
//		class USeqAct_SetMesh*                             Action                                                     (Parm)
void ASkeletalMeshActor::OnSetMesh(class USeqAct_SetMesh* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnSetMesh");

	ASkeletalMeshActor_OnSetMesh_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.IsActorPlayingFaceFXAnim
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ASkeletalMeshActor::IsActorPlayingFaceFXAnim()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.IsActorPlayingFaceFXAnim");

	ASkeletalMeshActor_IsActorPlayingFaceFXAnim_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.GetActorFaceFXAsset
//		Flags  -> ()
// Parameters:
//		class UFaceFXAsset*                                ReturnValue                                                (Parm, OutParm, ReturnParm)
class UFaceFXAsset* ASkeletalMeshActor::GetActorFaceFXAsset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.GetActorFaceFXAsset");

	ASkeletalMeshActor_GetActorFaceFXAsset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.OnPlayFaceFXAnim
//		Flags  -> ()
// Parameters:
//		class USeqAct_PlayFaceFXAnim*                      inAction                                                   (Parm)
void ASkeletalMeshActor::OnPlayFaceFXAnim(class USeqAct_PlayFaceFXAnim* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnPlayFaceFXAnim");

	ASkeletalMeshActor_OnPlayFaceFXAnim_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.GetFaceFXAudioComponent
//		Flags  -> ()
// Parameters:
//		class UAudioComponent*                             ReturnValue                                                (Parm, OutParm, ReturnParm, EditInline)
class UAudioComponent* ASkeletalMeshActor::GetFaceFXAudioComponent()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.GetFaceFXAudioComponent");

	ASkeletalMeshActor_GetFaceFXAudioComponent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.StopActorFaceFXAnim
//		Flags  -> ()
void ASkeletalMeshActor::StopActorFaceFXAnim()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.StopActorFaceFXAnim");

	ASkeletalMeshActor_StopActorFaceFXAnim_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.PlayActorFaceFXAnim
//		Flags  -> ()
// Parameters:
//		class UFaceFXAnimSet*                              AnimSet                                                    (Parm)
//		struct FString                                     GroupName                                                  (Parm, NeedCtorLink)
//		struct FString                                     SeqName                                                    (Parm, NeedCtorLink)
//		class USoundCue*                                   SoundCueToPlay                                             (Parm)
//		class UAkEvent*                                    AkEventToPlay                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ASkeletalMeshActor::PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.PlayActorFaceFXAnim");

	ASkeletalMeshActor_PlayActorFaceFXAnim_Params params {};
	params.AnimSet = AnimSet;
	params.GroupName = GroupName;
	params.SeqName = SeqName;
	params.SoundCueToPlay = SoundCueToPlay;
	params.AkEventToPlay = AkEventToPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.MAT_FinishAnimControl
//		Flags  -> ()
// Parameters:
//		class UInterpGroup*                                InInterpGroup                                              (Parm)
void ASkeletalMeshActor::MAT_FinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.MAT_FinishAnimControl");

	ASkeletalMeshActor_MAT_FinishAnimControl_Params params {};
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.FinishAnimControl
//		Flags  -> ()
// Parameters:
//		class UInterpGroup*                                InInterpGroup                                              (Parm)
void ASkeletalMeshActor::FinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.FinishAnimControl");

	ASkeletalMeshActor_FinishAnimControl_Params params {};
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.SetAnimPosition
//		Flags  -> ()
// Parameters:
//		struct FName                                       SlotName                                                   (Parm)
//		int                                                ChannelIndex                                               (Parm)
//		struct FName                                       InAnimSeqName                                              (Parm)
//		float                                              InPosition                                                 (Parm)
//		bool                                               bFireNotifies                                              (Parm)
//		bool                                               bLooping                                                   (Parm)
//		bool                                               bEnableRootMotion                                          (Parm)
//		struct FPointer                                    pRootBoneOption                                            (OptionalParm, Parm)
//		struct FPointer                                    pRootBoneRotationOption                                    (OptionalParm, Parm)
void ASkeletalMeshActor::SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion, const struct FPointer& pRootBoneOption, const struct FPointer& pRootBoneRotationOption)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.SetAnimPosition");

	ASkeletalMeshActor_SetAnimPosition_Params params {};
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;
	params.bEnableRootMotion = bEnableRootMotion;
	params.pRootBoneOption = pRootBoneOption;
	params.pRootBoneRotationOption = pRootBoneRotationOption;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.MAT_SetAnimPosition
//		Flags  -> ()
// Parameters:
//		struct FName                                       SlotName                                                   (Parm)
//		int                                                ChannelIndex                                               (Parm)
//		struct FName                                       InAnimSeqName                                              (Parm)
//		float                                              InPosition                                                 (Parm)
//		bool                                               bFireNotifies                                              (Parm)
//		bool                                               bLooping                                                   (Parm)
//		bool                                               bEnableRootMotion                                          (Parm)
//		struct FPointer                                    pRootBoneOption                                            (OptionalParm, Parm)
//		struct FPointer                                    pRootBoneRotationOption                                    (OptionalParm, Parm)
void ASkeletalMeshActor::MAT_SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion, const struct FPointer& pRootBoneOption, const struct FPointer& pRootBoneRotationOption)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.MAT_SetAnimPosition");

	ASkeletalMeshActor_MAT_SetAnimPosition_Params params {};
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;
	params.bEnableRootMotion = bEnableRootMotion;
	params.pRootBoneOption = pRootBoneOption;
	params.pRootBoneRotationOption = pRootBoneRotationOption;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.MAT_BeginAnimControl
//		Flags  -> ()
// Parameters:
//		class UInterpGroup*                                InInterpGroup                                              (Parm)
void ASkeletalMeshActor::MAT_BeginAnimControl(class UInterpGroup* InInterpGroup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.MAT_BeginAnimControl");

	ASkeletalMeshActor_MAT_BeginAnimControl_Params params {};
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.BeginAnimControl
//		Flags  -> ()
// Parameters:
//		class UInterpGroup*                                InInterpGroup                                              (Parm)
void ASkeletalMeshActor::BeginAnimControl(class UInterpGroup* InInterpGroup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.BeginAnimControl");

	ASkeletalMeshActor_BeginAnimControl_Params params {};
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.OnSetMaterial
//		Flags  -> ()
// Parameters:
//		class USeqAct_SetMaterial*                         Action                                                     (Parm)
void ASkeletalMeshActor::OnSetMaterial(class USeqAct_SetMaterial* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnSetMaterial");

	ASkeletalMeshActor_OnSetMaterial_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void ASkeletalMeshActor::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnToggle");

	ASkeletalMeshActor_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void ASkeletalMeshActor::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.ReplicatedEvent");

	ASkeletalMeshActor_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.UpdateAnimSetList
//		Flags  -> ()
void ASkeletalMeshActor::UpdateAnimSetList()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.UpdateAnimSetList");

	ASkeletalMeshActor_UpdateAnimSetList_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.Destroyed
//		Flags  -> ()
void ASkeletalMeshActor::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.Destroyed");

	ASkeletalMeshActor_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActor.PostBeginPlay
//		Flags  -> ()
void ASkeletalMeshActor::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.PostBeginPlay");

	ASkeletalMeshActor_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActorBasedOnExtremeContent.SetMaterialBasedOnExtremeContent
//		Flags  -> ()
void ASkeletalMeshActorBasedOnExtremeContent::SetMaterialBasedOnExtremeContent()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorBasedOnExtremeContent.SetMaterialBasedOnExtremeContent");

	ASkeletalMeshActorBasedOnExtremeContent_SetMaterialBasedOnExtremeContent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActorBasedOnExtremeContent.PostBeginPlay
//		Flags  -> ()
void ASkeletalMeshActorBasedOnExtremeContent::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorBasedOnExtremeContent.PostBeginPlay");

	ASkeletalMeshActorBasedOnExtremeContent_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActorMAT.SetSkelControlScale
//		Flags  -> ()
// Parameters:
//		struct FName                                       SkelControlName                                            (Parm)
//		float                                              Scale                                                      (Parm)
void ASkeletalMeshActorMAT::SetSkelControlScale(const struct FName& SkelControlName, float Scale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.SetSkelControlScale");

	ASkeletalMeshActorMAT_SetSkelControlScale_Params params {};
	params.SkelControlName = SkelControlName;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActorMAT.SetMorphWeight
//		Flags  -> ()
// Parameters:
//		struct FName                                       MorphNodeName                                              (Parm)
//		float                                              MorphWeight                                                (Parm)
void ASkeletalMeshActorMAT::SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.SetMorphWeight");

	ASkeletalMeshActorMAT_SetMorphWeight_Params params {};
	params.MorphNodeName = MorphNodeName;
	params.MorphWeight = MorphWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActorMAT.FinishAnimControl
//		Flags  -> ()
// Parameters:
//		class UInterpGroup*                                InInterpGroup                                              (Parm)
void ASkeletalMeshActorMAT::FinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.FinishAnimControl");

	ASkeletalMeshActorMAT_FinishAnimControl_Params params {};
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActorMAT.MAT_SetAnimPosition
//		Flags  -> ()
// Parameters:
//		struct FName                                       SlotName                                                   (Parm)
//		int                                                ChannelIndex                                               (Parm)
//		struct FName                                       InAnimSeqName                                              (Parm)
//		float                                              InPosition                                                 (Parm)
//		bool                                               bFireNotifies                                              (Parm)
//		bool                                               bLooping                                                   (Parm)
//		bool                                               bEnableRootMotion                                          (Parm)
//		struct FPointer                                    pRootBoneOption                                            (OptionalParm, Parm)
//		struct FPointer                                    pRootBoneRotationOption                                    (OptionalParm, Parm)
void ASkeletalMeshActorMAT::MAT_SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion, const struct FPointer& pRootBoneOption, const struct FPointer& pRootBoneRotationOption)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.MAT_SetAnimPosition");

	ASkeletalMeshActorMAT_MAT_SetAnimPosition_Params params {};
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;
	params.bEnableRootMotion = bEnableRootMotion;
	params.pRootBoneOption = pRootBoneOption;
	params.pRootBoneRotationOption = pRootBoneRotationOption;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActorMAT.SetAnimPosition
//		Flags  -> ()
// Parameters:
//		struct FName                                       SlotName                                                   (Parm)
//		int                                                ChannelIndex                                               (Parm)
//		struct FName                                       InAnimSeqName                                              (Parm)
//		float                                              InPosition                                                 (Parm)
//		bool                                               bFireNotifies                                              (Parm)
//		bool                                               bLooping                                                   (Parm)
//		bool                                               bEnableRootMotion                                          (Parm)
//		struct FPointer                                    pRootBoneOption                                            (OptionalParm, Parm)
//		struct FPointer                                    pRootBoneRotationOption                                    (OptionalParm, Parm)
void ASkeletalMeshActorMAT::SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion, const struct FPointer& pRootBoneOption, const struct FPointer& pRootBoneRotationOption)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.SetAnimPosition");

	ASkeletalMeshActorMAT_SetAnimPosition_Params params {};
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;
	params.bEnableRootMotion = bEnableRootMotion;
	params.pRootBoneOption = pRootBoneOption;
	params.pRootBoneRotationOption = pRootBoneRotationOption;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActorMAT.ClearAnimNodes
//		Flags  -> ()
void ASkeletalMeshActorMAT::ClearAnimNodes()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.ClearAnimNodes");

	ASkeletalMeshActorMAT_ClearAnimNodes_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActorMAT.CacheAnimNodes
//		Flags  -> ()
void ASkeletalMeshActorMAT::CacheAnimNodes()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.CacheAnimNodes");

	ASkeletalMeshActorMAT_CacheAnimNodes_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActorMAT.PostInitAnimTree
//		Flags  -> ()
// Parameters:
//		class USkeletalMeshComponent*                      SkelComp                                                   (Parm, EditInline)
void ASkeletalMeshActorMAT::PostInitAnimTree(class USkeletalMeshComponent* SkelComp)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.PostInitAnimTree");

	ASkeletalMeshActorMAT_PostInitAnimTree_Params params {};
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActorMAT.Destroyed
//		Flags  -> ()
void ASkeletalMeshActorMAT::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.Destroyed");

	ASkeletalMeshActorMAT_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActorMAT.MAT_SetAnimNodeBlendWeight
//		Flags  -> ()
// Parameters:
//		struct FName                                       AnimNodeBlendName                                          (Parm)
//		float                                              Weight                                                     (Parm)
void ASkeletalMeshActorMAT::MAT_SetAnimNodeBlendWeight(const struct FName& AnimNodeBlendName, float Weight)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.MAT_SetAnimNodeBlendWeight");

	ASkeletalMeshActorMAT_MAT_SetAnimNodeBlendWeight_Params params {};
	params.AnimNodeBlendName = AnimNodeBlendName;
	params.Weight = Weight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActorMAT.MAT_SetSkelControlStrength
//		Flags  -> ()
// Parameters:
//		struct FName                                       SkelControlName                                            (Parm)
//		float                                              ControlStrength                                            (Parm)
void ASkeletalMeshActorMAT::MAT_SetSkelControlStrength(const struct FName& SkelControlName, float ControlStrength)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.MAT_SetSkelControlStrength");

	ASkeletalMeshActorMAT_MAT_SetSkelControlStrength_Params params {};
	params.SkelControlName = SkelControlName;
	params.ControlStrength = ControlStrength;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActorMAT.MAT_SetSkelControlScale
//		Flags  -> ()
// Parameters:
//		struct FName                                       SkelControlName                                            (Parm)
//		float                                              Scale                                                      (Parm)
void ASkeletalMeshActorMAT::MAT_SetSkelControlScale(const struct FName& SkelControlName, float Scale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.MAT_SetSkelControlScale");

	ASkeletalMeshActorMAT_MAT_SetSkelControlScale_Params params {};
	params.SkelControlName = SkelControlName;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActorMAT.MAT_SetMorphWeight
//		Flags  -> ()
// Parameters:
//		struct FName                                       MorphNodeName                                              (Parm)
//		float                                              MorphWeight                                                (Parm)
void ASkeletalMeshActorMAT::MAT_SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.MAT_SetMorphWeight");

	ASkeletalMeshActorMAT_MAT_SetMorphWeight_Params params {};
	params.MorphNodeName = MorphNodeName;
	params.MorphWeight = MorphWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshActorMAT.MAT_SetAnimWeights
//		Flags  -> ()
// Parameters:
//		TArray<struct FAnimSlotInfo>                       SlotInfos                                                  (Parm, NeedCtorLink)
void ASkeletalMeshActorMAT::MAT_SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.MAT_SetAnimWeights");

	ASkeletalMeshActorMAT_MAT_SetAnimWeights_Params params {};
	params.SlotInfos = SlotInfos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.SetHardwareMouseCursorVisibility
//		Flags  -> (NetReliable, Simulated, Exec, Operator, Static, HasOptionalParms, Const, Delegate, NetServer, HasDefaults, NetClient, K2Override, K2Pure)
// Parameters:
//		bool                                               bIsVisible                                                 (Parm)
void UGameViewportClient::STATIC_SetHardwareMouseCursorVisibility(bool bIsVisible)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetHardwareMouseCursorVisibility");

	UGameViewportClient_SetHardwareMouseCursorVisibility_Params params {};
	params.bIsVisible = bIsVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.DebugSetUISystemEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               bOldUISystemActive                                         (Parm)
//		bool                                               bGFxUISystemActive                                         (Parm)
void UGameViewportClient::DebugSetUISystemEnabled(bool bOldUISystemActive, bool bGFxUISystemActive)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.DebugSetUISystemEnabled");

	UGameViewportClient_DebugSetUISystemEnabled_Params params {};
	params.bOldUISystemActive = bOldUISystemActive;
	params.bGFxUISystemActive = bGFxUISystemActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.IsScaleformEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameViewportClient::IsScaleformEnabled()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.IsScaleformEnabled");

	UGameViewportClient_IsScaleformEnabled_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.DisableScaleform
//		Flags  -> ()
void UGameViewportClient::DisableScaleform()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.DisableScaleform");

	UGameViewportClient_DisableScaleform_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.EnableScaleform
//		Flags  -> ()
void UGameViewportClient::EnableScaleform()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.EnableScaleform");

	UGameViewportClient_EnableScaleform_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.BecomePrimaryPlayer
//		Flags  -> ()
// Parameters:
//		int                                                PlayerIndex                                                (Parm)
void UGameViewportClient::BecomePrimaryPlayer(int PlayerIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.BecomePrimaryPlayer");

	UGameViewportClient_BecomePrimaryPlayer_Params params {};
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.OnPrimaryPlayerSwitch
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                OldPrimaryPlayer                                           (Parm)
//		class ULocalPlayer*                                NewPrimaryPlayer                                           (Parm)
void UGameViewportClient::OnPrimaryPlayerSwitch(class ULocalPlayer* OldPrimaryPlayer, class ULocalPlayer* NewPrimaryPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.OnPrimaryPlayerSwitch");

	UGameViewportClient_OnPrimaryPlayerSwitch_Params params {};
	params.OldPrimaryPlayer = OldPrimaryPlayer;
	params.NewPrimaryPlayer = NewPrimaryPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.FixupOwnerReferences
//		Flags  -> ()
// Parameters:
//		TArray<int>                                        IDMappings                                                 (Parm, NeedCtorLink)
void UGameViewportClient::FixupOwnerReferences(TArray<int> IDMappings)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.FixupOwnerReferences");

	UGameViewportClient_FixupOwnerReferences_Params params {};
	params.IDMappings = IDMappings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.GetPlayerOwner
//		Flags  -> ()
// Parameters:
//		int                                                PlayerIndex                                                (Parm)
//		class ULocalPlayer*                                ReturnValue                                                (Parm, OutParm, ReturnParm)
class ULocalPlayer* UGameViewportClient::GetPlayerOwner(int PlayerIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetPlayerOwner");

	UGameViewportClient_GetPlayerOwner_Params params {};
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.ClearProgressMessages
//		Flags  -> ()
void UGameViewportClient::ClearProgressMessages()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.ClearProgressMessages");

	UGameViewportClient_ClearProgressMessages_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.SetProgressTime
//		Flags  -> ()
// Parameters:
//		float                                              T                                                          (Parm)
void UGameViewportClient::SetProgressTime(float T)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetProgressTime");

	UGameViewportClient_SetProgressTime_Params params {};
	params.T = T;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.NotifyConnectionError
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_EProgressMessageType>           MessageType                                                (Parm)
//		struct FString                                     Message                                                    (OptionalParm, Parm, NeedCtorLink)
//		struct FString                                     Title                                                      (OptionalParm, Parm, NeedCtorLink)
void UGameViewportClient::NotifyConnectionError(TEnumAsByte<Engine_EProgressMessageType> MessageType, const struct FString& Message, const struct FString& Title)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.NotifyConnectionError");

	UGameViewportClient_NotifyConnectionError_Params params {};
	params.MessageType = MessageType;
	params.Message = Message;
	params.Title = Title;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.SetProgressMessage
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_EProgressMessageType>           MessageType                                                (Parm)
//		struct FString                                     Message                                                    (Parm, NeedCtorLink)
//		struct FString                                     Title                                                      (OptionalParm, Parm, NeedCtorLink)
//		bool                                               bIgnoreFutureNetworkMessages                               (OptionalParm, Parm)
void UGameViewportClient::SetProgressMessage(TEnumAsByte<Engine_EProgressMessageType> MessageType, const struct FString& Message, const struct FString& Title, bool bIgnoreFutureNetworkMessages)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetProgressMessage");

	UGameViewportClient_SetProgressMessage_Params params {};
	params.MessageType = MessageType;
	params.Message = Message;
	params.Title = Title;
	params.bIgnoreFutureNetworkMessages = bIgnoreFutureNetworkMessages;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.RemoveLocalPlayer
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                ExistingPlayer                                             (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UGameViewportClient::RemoveLocalPlayer(class ULocalPlayer* ExistingPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.RemoveLocalPlayer");

	UGameViewportClient_RemoveLocalPlayer_Params params {};
	params.ExistingPlayer = ExistingPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.AddLocalPlayer
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                NewPlayer                                                  (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UGameViewportClient::AddLocalPlayer(class ULocalPlayer* NewPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.AddLocalPlayer");

	UGameViewportClient_AddLocalPlayer_Params params {};
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.NotifyPlayerRemoved
//		Flags  -> ()
// Parameters:
//		int                                                PlayerIndex                                                (Parm)
//		class ULocalPlayer*                                RemovedPlayer                                              (Parm)
void UGameViewportClient::NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.NotifyPlayerRemoved");

	UGameViewportClient_NotifyPlayerRemoved_Params params {};
	params.PlayerIndex = PlayerIndex;
	params.RemovedPlayer = RemovedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.NotifyPlayerAdded
//		Flags  -> ()
// Parameters:
//		int                                                PlayerIndex                                                (Parm)
//		class ULocalPlayer*                                AddedPlayer                                                (Parm)
void UGameViewportClient::NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.NotifyPlayerAdded");

	UGameViewportClient_NotifyPlayerAdded_Params params {};
	params.PlayerIndex = PlayerIndex;
	params.AddedPlayer = AddedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.DrawTransitionMessage
//		Flags  -> ()
// Parameters:
//		class UCanvas*                                     Canvas                                                     (Parm)
//		struct FString                                     Message                                                    (Parm, NeedCtorLink)
void UGameViewportClient::DrawTransitionMessage(class UCanvas* Canvas, const struct FString& Message)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.DrawTransitionMessage");

	UGameViewportClient_DrawTransitionMessage_Params params {};
	params.Canvas = Canvas;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.DrawTransition
//		Flags  -> ()
// Parameters:
//		class UCanvas*                                     Canvas                                                     (Parm)
void UGameViewportClient::DrawTransition(class UCanvas* Canvas)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.DrawTransition");

	UGameViewportClient_DrawTransition_Params params {};
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.DisplayProgressMessage
//		Flags  -> ()
// Parameters:
//		class UCanvas*                                     Canvas                                                     (Parm)
void UGameViewportClient::DisplayProgressMessage(class UCanvas* Canvas)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.DisplayProgressMessage");

	UGameViewportClient_DisplayProgressMessage_Params params {};
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.PostRender
//		Flags  -> ()
// Parameters:
//		class UCanvas*                                     Canvas                                                     (Parm)
void UGameViewportClient::PostRender(class UCanvas* Canvas)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.PostRender");

	UGameViewportClient_PostRender_Params params {};
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.DrawTitleSafeArea
//		Flags  -> ()
// Parameters:
//		class UCanvas*                                     Canvas                                                     (Parm)
void UGameViewportClient::DrawTitleSafeArea(class UCanvas* Canvas)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.DrawTitleSafeArea");

	UGameViewportClient_DrawTitleSafeArea_Params params {};
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.Tick
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
void UGameViewportClient::Tick(float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.Tick");

	UGameViewportClient_Tick_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.CalculateDeadZoneForAllSides
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                LPlayer                                                    (Parm)
//		class UCanvas*                                     Canvas                                                     (Parm)
//		float                                              fTopSafeZone                                               (Parm, OutParm)
//		float                                              fBottomSafeZone                                            (Parm, OutParm)
//		float                                              fLeftSafeZone                                              (Parm, OutParm)
//		float                                              fRightSafeZone                                             (Parm, OutParm)
//		bool                                               bUseMaxPercent                                             (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameViewportClient::CalculateDeadZoneForAllSides(class ULocalPlayer* LPlayer, class UCanvas* Canvas, float* fTopSafeZone, float* fBottomSafeZone, float* fLeftSafeZone, float* fRightSafeZone, bool bUseMaxPercent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.CalculateDeadZoneForAllSides");

	UGameViewportClient_CalculateDeadZoneForAllSides_Params params {};
	params.LPlayer = LPlayer;
	params.Canvas = Canvas;
	params.bUseMaxPercent = bUseMaxPercent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (fTopSafeZone != nullptr)
		*fTopSafeZone = params.fTopSafeZone;
	if (fBottomSafeZone != nullptr)
		*fBottomSafeZone = params.fBottomSafeZone;
	if (fLeftSafeZone != nullptr)
		*fLeftSafeZone = params.fLeftSafeZone;
	if (fRightSafeZone != nullptr)
		*fRightSafeZone = params.fRightSafeZone;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.CalculateSafeZoneValues
//		Flags  -> ()
// Parameters:
//		float                                              out_Horizontal                                             (Parm, OutParm)
//		float                                              out_Vertical                                               (Parm, OutParm)
//		class UCanvas*                                     Canvas                                                     (Parm)
//		int                                                LocalPlayerIndex                                           (Parm)
//		bool                                               bUseMaxPercent                                             (Parm)
void UGameViewportClient::CalculateSafeZoneValues(float* out_Horizontal, float* out_Vertical, class UCanvas* Canvas, int LocalPlayerIndex, bool bUseMaxPercent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.CalculateSafeZoneValues");

	UGameViewportClient_CalculateSafeZoneValues_Params params {};
	params.Canvas = Canvas;
	params.LocalPlayerIndex = LocalPlayerIndex;
	params.bUseMaxPercent = bUseMaxPercent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Horizontal != nullptr)
		*out_Horizontal = params.out_Horizontal;
	if (out_Vertical != nullptr)
		*out_Vertical = params.out_Vertical;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.GetPixelSizeOfScreen
//		Flags  -> ()
// Parameters:
//		float                                              out_Width                                                  (Parm, OutParm)
//		float                                              out_Height                                                 (Parm, OutParm)
//		class UCanvas*                                     Canvas                                                     (Parm)
//		int                                                LocalPlayerIndex                                           (Parm)
void UGameViewportClient::GetPixelSizeOfScreen(float* out_Width, float* out_Height, class UCanvas* Canvas, int LocalPlayerIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetPixelSizeOfScreen");

	UGameViewportClient_GetPixelSizeOfScreen_Params params {};
	params.Canvas = Canvas;
	params.LocalPlayerIndex = LocalPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Width != nullptr)
		*out_Width = params.out_Width;
	if (out_Height != nullptr)
		*out_Height = params.out_Height;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.HasRightSafeZone
//		Flags  -> ()
// Parameters:
//		int                                                LocalPlayerIndex                                           (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameViewportClient::HasRightSafeZone(int LocalPlayerIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HasRightSafeZone");

	UGameViewportClient_HasRightSafeZone_Params params {};
	params.LocalPlayerIndex = LocalPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.HasLeftSafeZone
//		Flags  -> ()
// Parameters:
//		int                                                LocalPlayerIndex                                           (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameViewportClient::HasLeftSafeZone(int LocalPlayerIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HasLeftSafeZone");

	UGameViewportClient_HasLeftSafeZone_Params params {};
	params.LocalPlayerIndex = LocalPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.HasBottomSafeZone
//		Flags  -> ()
// Parameters:
//		int                                                LocalPlayerIndex                                           (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameViewportClient::HasBottomSafeZone(int LocalPlayerIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HasBottomSafeZone");

	UGameViewportClient_HasBottomSafeZone_Params params {};
	params.LocalPlayerIndex = LocalPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.HasTopSafeZone
//		Flags  -> ()
// Parameters:
//		int                                                LocalPlayerIndex                                           (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameViewportClient::HasTopSafeZone(int LocalPlayerIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HasTopSafeZone");

	UGameViewportClient_HasTopSafeZone_Params params {};
	params.LocalPlayerIndex = LocalPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.ConvertLocalPlayerToGamePlayerIndex
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                LPlayer                                                    (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UGameViewportClient::ConvertLocalPlayerToGamePlayerIndex(class ULocalPlayer* LPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.ConvertLocalPlayerToGamePlayerIndex");

	UGameViewportClient_ConvertLocalPlayerToGamePlayerIndex_Params params {};
	params.LPlayer = LPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.GetSubtitleRegion
//		Flags  -> ()
// Parameters:
//		struct FVector2D                                   MinPos                                                     (Parm, OutParm)
//		struct FVector2D                                   MaxPos                                                     (Parm, OutParm)
void UGameViewportClient::GetSubtitleRegion(struct FVector2D* MinPos, struct FVector2D* MaxPos)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetSubtitleRegion");

	UGameViewportClient_GetSubtitleRegion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (MinPos != nullptr)
		*MinPos = params.MinPos;
	if (MaxPos != nullptr)
		*MaxPos = params.MaxPos;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.LayoutPlayers
//		Flags  -> ()
// Parameters:
void UGameViewportClient::LayoutPlayers()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.LayoutPlayers");

	UGameViewportClient_LayoutPlayers_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.UpdateActiveSplitscreenType
//		Flags  -> ()
void UGameViewportClient::UpdateActiveSplitscreenType()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.UpdateActiveSplitscreenType");

	UGameViewportClient_UpdateActiveSplitscreenType_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.GetSplitscreenConfiguration
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ESplitScreenType>               ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_ESplitScreenType> UGameViewportClient::GetSplitscreenConfiguration()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetSplitscreenConfiguration");

	UGameViewportClient_GetSplitscreenConfiguration_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.SetSplitscreenConfiguration
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ESplitScreenType>               SplitType                                                  (Parm)
void UGameViewportClient::SetSplitscreenConfiguration(TEnumAsByte<Engine_ESplitScreenType> SplitType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetSplitscreenConfiguration");

	UGameViewportClient_SetSplitscreenConfiguration_Params params {};
	params.SplitType = SplitType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.GameSessionEnded
//		Flags  -> ()
void UGameViewportClient::GameSessionEnded()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GameSessionEnded");

	UGameViewportClient_GameSessionEnded_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.InsertInteraction
//		Flags  -> ()
// Parameters:
//		class UInteraction*                                NewInteraction                                             (Parm)
//		int                                                InIndex                                                    (OptionalParm, Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UGameViewportClient::InsertInteraction(class UInteraction* NewInteraction, int InIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.InsertInteraction");

	UGameViewportClient_InsertInteraction_Params params {};
	params.NewInteraction = NewInteraction;
	params.InIndex = InIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.CreateInitialPlayer
//		Flags  -> ()
// Parameters:
//		struct FString                                     OutError                                                   (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameViewportClient::CreateInitialPlayer(struct FString* OutError)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.CreateInitialPlayer");

	UGameViewportClient_CreateInitialPlayer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutError != nullptr)
		*OutError = params.OutError;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.Init
//		Flags  -> ()
// Parameters:
//		struct FString                                     OutError                                                   (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameViewportClient::Init(struct FString* OutError)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.Init");

	UGameViewportClient_Init_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutError != nullptr)
		*OutError = params.OutError;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.FindPlayerByControllerId
//		Flags  -> ()
// Parameters:
//		int                                                ControllerId                                               (Parm)
//		class ULocalPlayer*                                ReturnValue                                                (Parm, OutParm, ReturnParm)
class ULocalPlayer* UGameViewportClient::FindPlayerByControllerId(int ControllerId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.FindPlayerByControllerId");

	UGameViewportClient_FindPlayerByControllerId_Params params {};
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.RemovePlayer
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                ExPlayer                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameViewportClient::RemovePlayer(class ULocalPlayer* ExPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.RemovePlayer");

	UGameViewportClient_RemovePlayer_Params params {};
	params.ExPlayer = ExPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.CreatePlayer
//		Flags  -> ()
// Parameters:
//		int                                                ControllerId                                               (Parm)
//		struct FString                                     OutError                                                   (Parm, OutParm, NeedCtorLink)
//		bool                                               bSpawnActor                                                (Parm)
//		class ULocalPlayer*                                ReturnValue                                                (Parm, OutParm, ReturnParm)
class ULocalPlayer* UGameViewportClient::CreatePlayer(int ControllerId, struct FString* OutError, bool bSpawnActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.CreatePlayer");

	UGameViewportClient_CreatePlayer_Params params {};
	params.ControllerId = ControllerId;
	params.bSpawnActor = bSpawnActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutError != nullptr)
		*OutError = params.OutError;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.SetMouse
//		Flags  -> ()
// Parameters:
//		int                                                X                                                          (Parm)
//		int                                                Y                                                          (Parm)
void UGameViewportClient::SetMouse(int X, int Y)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetMouse");

	UGameViewportClient_SetMouse_Params params {};
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.ForceUpdateMouseCursor
//		Flags  -> ()
// Parameters:
//		bool                                               bSetCursor                                                 (Parm)
void UGameViewportClient::ForceUpdateMouseCursor(bool bSetCursor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.ForceUpdateMouseCursor");

	UGameViewportClient_ForceUpdateMouseCursor_Params params {};
	params.bSetCursor = bSetCursor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.NotifySplitscreenLayoutChanged
//		Flags  -> ()
void UGameViewportClient::NotifySplitscreenLayoutChanged()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.NotifySplitscreenLayoutChanged");

	UGameViewportClient_NotifySplitscreenLayoutChanged_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.SetCustomInteractionObject
//		Flags  -> ()
// Parameters:
//		class UInteraction*                                InInteraction                                              (Parm)
void UGameViewportClient::SetCustomInteractionObject(class UInteraction* InInteraction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetCustomInteractionObject");

	UGameViewportClient_SetCustomInteractionObject_Params params {};
	params.InInteraction = InInteraction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.GetCustomInteractionClass
//		Flags  -> ()
// Parameters:
//		int                                                InIndex                                                    (Parm)
//		class UClass*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class UClass* UGameViewportClient::GetCustomInteractionClass(int InIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetCustomInteractionClass");

	UGameViewportClient_GetCustomInteractionClass_Params params {};
	params.InIndex = InIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.GetNumCustomInteractions
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UGameViewportClient::GetNumCustomInteractions()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetNumCustomInteractions");

	UGameViewportClient_GetNumCustomInteractions_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.ShouldForceFullscreenViewport
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameViewportClient::ShouldForceFullscreenViewport()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.ShouldForceFullscreenViewport");

	UGameViewportClient_ShouldForceFullscreenViewport_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.GetMouseLocalPosition
//		Flags  -> ()
// Parameters:
//		struct FVector2D                                   ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector2D UGameViewportClient::GetMouseLocalPosition()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetMouseLocalPosition");

	UGameViewportClient_GetMouseLocalPosition_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.GetMousePosition
//		Flags  -> ()
// Parameters:
//		struct FVector2D                                   ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector2D UGameViewportClient::GetMousePosition()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetMousePosition");

	UGameViewportClient_GetMousePosition_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.IsBorderlessViewport
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameViewportClient::IsBorderlessViewport()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.IsBorderlessViewport");

	UGameViewportClient_IsBorderlessViewport_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.IsFullScreenViewport
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameViewportClient::IsFullScreenViewport()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.IsFullScreenViewport");

	UGameViewportClient_IsFullScreenViewport_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.GetVirtualViewportRect
//		Flags  -> ()
// Parameters:
//		float                                              out_left                                                   (Parm, OutParm)
//		float                                              out_right                                                  (Parm, OutParm)
//		float                                              out_top                                                    (Parm, OutParm)
//		float                                              out_bottom                                                 (Parm, OutParm)
void UGameViewportClient::GetVirtualViewportRect(float* out_left, float* out_right, float* out_top, float* out_bottom)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetVirtualViewportRect");

	UGameViewportClient_GetVirtualViewportRect_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_left != nullptr)
		*out_left = params.out_left;
	if (out_right != nullptr)
		*out_right = params.out_right;
	if (out_top != nullptr)
		*out_top = params.out_top;
	if (out_bottom != nullptr)
		*out_bottom = params.out_bottom;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.GetVirtualViewportSize
//		Flags  -> ()
// Parameters:
//		struct FVector2D                                   out_ViewportSize                                           (Parm, OutParm)
void UGameViewportClient::GetVirtualViewportSize(struct FVector2D* out_ViewportSize)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetVirtualViewportSize");

	UGameViewportClient_GetVirtualViewportSize_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_ViewportSize != nullptr)
		*out_ViewportSize = params.out_ViewportSize;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.GetVirtualViewportPos
//		Flags  -> ()
// Parameters:
//		struct FVector2D                                   out_ViewportPos                                            (Parm, OutParm)
void UGameViewportClient::GetVirtualViewportPos(struct FVector2D* out_ViewportPos)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetVirtualViewportPos");

	UGameViewportClient_GetVirtualViewportPos_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_ViewportPos != nullptr)
		*out_ViewportPos = params.out_ViewportPos;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.GetViewportSize
//		Flags  -> ()
// Parameters:
//		struct FVector2D                                   out_ViewportSize                                           (Parm, OutParm)
void UGameViewportClient::GetViewportSize(struct FVector2D* out_ViewportSize)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetViewportSize");

	UGameViewportClient_GetViewportSize_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_ViewportSize != nullptr)
		*out_ViewportSize = params.out_ViewportSize;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.ConsoleCommand
//		Flags  -> ()
// Parameters:
//		struct FString                                     Command                                                    (Parm, NeedCtorLink)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UGameViewportClient::ConsoleCommand(const struct FString& Command)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.ConsoleCommand");

	UGameViewportClient_ConsoleCommand_Params params {};
	params.Command = Command;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.HandleInputChar
//		Flags  -> ()
// Parameters:
//		int                                                ControllerId                                               (Parm)
//		struct FString                                     Unicode                                                    (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameViewportClient::HandleInputChar(int ControllerId, const struct FString& Unicode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HandleInputChar");

	UGameViewportClient_HandleInputChar_Params params {};
	params.ControllerId = ControllerId;
	params.Unicode = Unicode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.HandleInputAxis
//		Flags  -> ()
// Parameters:
//		int                                                ControllerId                                               (Parm)
//		struct FName                                       Key                                                        (Parm)
//		float                                              Delta                                                      (Parm)
//		float                                              DeltaTime                                                  (Parm)
//		bool                                               bGamepad                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameViewportClient::HandleInputAxis(int ControllerId, const struct FName& Key, float Delta, float DeltaTime, bool bGamepad)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HandleInputAxis");

	UGameViewportClient_HandleInputAxis_Params params {};
	params.ControllerId = ControllerId;
	params.Key = Key;
	params.Delta = Delta;
	params.DeltaTime = DeltaTime;
	params.bGamepad = bGamepad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameViewportClient.HandleInputKey
//		Flags  -> ()
// Parameters:
//		int                                                ControllerId                                               (Parm)
//		struct FName                                       Key                                                        (Parm)
//		TEnumAsByte<Core_EInputEvent>                      EventType                                                  (Parm)
//		float                                              AmountDepressed                                            (Parm)
//		bool                                               bGamepad                                                   (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UGameViewportClient::HandleInputKey(int ControllerId, const struct FName& Key, TEnumAsByte<Core_EInputEvent> EventType, float AmountDepressed, bool bGamepad)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HandleInputKey");

	UGameViewportClient_HandleInputKey_Params params {};
	params.ControllerId = ControllerId;
	params.Key = Key;
	params.EventType = EventType;
	params.AmountDepressed = AmountDepressed;
	params.bGamepad = bGamepad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNotify.FindNextNotifyOfClass
//		Flags  -> ()
// Parameters:
//		class UAnimNodeSequence*                           AnimSeqInstigator                                          (Parm)
//		class UClass*                                      NotifyClass                                                (Parm)
//		struct FAnimNotifyEvent                            OutEvent                                                   (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UAnimNotify::FindNextNotifyOfClass(class UAnimNodeSequence* AnimSeqInstigator, class UClass* NotifyClass, struct FAnimNotifyEvent* OutEvent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify.FindNextNotifyOfClass");

	UAnimNotify_FindNextNotifyOfClass_Params params {};
	params.AnimSeqInstigator = AnimSeqInstigator;
	params.NotifyClass = NotifyClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutEvent != nullptr)
		*OutEvent = params.OutEvent;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNotify_Scripted.NotifyEnd
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Owner                                                      (Parm)
//		class UAnimNodeSequence*                           AnimSeqInstigator                                          (Parm)
void UAnimNotify_Scripted::NotifyEnd(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify_Scripted.NotifyEnd");

	UAnimNotify_Scripted_NotifyEnd_Params params {};
	params.Owner = Owner;
	params.AnimSeqInstigator = AnimSeqInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNotify_Scripted.Notify
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Owner                                                      (Parm)
//		class UAnimNodeSequence*                           AnimSeqInstigator                                          (Parm)
void UAnimNotify_Scripted::Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify_Scripted.Notify");

	UAnimNotify_Scripted_Notify_Params params {};
	params.Owner = Owner;
	params.AnimSeqInstigator = AnimSeqInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNotify_PawnMaterialParam.Notify
//		Flags  -> (Singular, NetReliable, Event, Operator, HasOptionalParms, Const, Protected, NetServer, HasOutParms, NetClient, K2Call, K2Pure)
// Parameters:
//		class AActor*                                      Owner                                                      (Parm)
//		class UAnimNodeSequence*                           AnimSeqInstigator                                          (Parm)
void UAnimNotify_PawnMaterialParam::Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify_PawnMaterialParam.Notify");

	UAnimNotify_PawnMaterialParam_Notify_Params params {};
	params.Owner = Owner;
	params.AnimSeqInstigator = AnimSeqInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNotify_ViewShake.Notify
//		Flags  -> (Singular, Net, Exec, Event, Public, HasOutParms, HasDefaults, NetClient, DLLImport, K2Call)
// Parameters:
//		class AActor*                                      Owner                                                      (Parm)
//		class UAnimNodeSequence*                           AnimSeqInstigator                                          (Parm)
void UAnimNotify_ViewShake::Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify_ViewShake.Notify");

	UAnimNotify_ViewShake_Notify_Params params {};
	params.Owner = Owner;
	params.AnimSeqInstigator = AnimSeqInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNotify_Trails.GetNumSteps
//		Flags  -> ()
// Parameters:
//		int                                                InLastTrailIndex                                           (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UAnimNotify_Trails::GetNumSteps(int InLastTrailIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify_Trails.GetNumSteps");

	UAnimNotify_Trails_GetNumSteps_Params params {};
	params.InLastTrailIndex = InLastTrailIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNode.ReplayAnim
//		Flags  -> ()
void UAnimNode::ReplayAnim()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.ReplayAnim");

	UAnimNode_ReplayAnim_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNode.StopAnim
//		Flags  -> ()
void UAnimNode::StopAnim()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.StopAnim");

	UAnimNode_StopAnim_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNode.PlayAnim
//		Flags  -> ()
// Parameters:
//		bool                                               bLoop                                                      (OptionalParm, Parm)
//		float                                              Rate                                                       (OptionalParm, Parm)
//		float                                              StartTime                                                  (OptionalParm, Parm)
void UAnimNode::PlayAnim(bool bLoop, float Rate, float StartTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.PlayAnim");

	UAnimNode_PlayAnim_Params params {};
	params.bLoop = bLoop;
	params.Rate = Rate;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNode.FindAnimNode
//		Flags  -> ()
// Parameters:
//		struct FName                                       InNodeName                                                 (Parm)
//		class UAnimNode*                                   ReturnValue                                                (Parm, OutParm, ReturnParm)
class UAnimNode* UAnimNode::FindAnimNode(const struct FName& InNodeName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.FindAnimNode");

	UAnimNode_FindAnimNode_Params params {};
	params.InNodeName = InNodeName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNode.OnCeaseRelevant
//		Flags  -> ()
void UAnimNode::OnCeaseRelevant()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.OnCeaseRelevant");

	UAnimNode_OnCeaseRelevant_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNode.OnBecomeRelevant
//		Flags  -> ()
void UAnimNode::OnBecomeRelevant()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.OnBecomeRelevant");

	UAnimNode_OnBecomeRelevant_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNode.OnInit
//		Flags  -> ()
void UAnimNode::OnInit()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.OnInit");

	UAnimNode_OnInit_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeBlendBase.ReplayAnim
//		Flags  -> ()
void UAnimNodeBlendBase::ReplayAnim()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlendBase.ReplayAnim");

	UAnimNodeBlendBase_ReplayAnim_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeBlendBase.StopAnim
//		Flags  -> ()
void UAnimNodeBlendBase::StopAnim()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlendBase.StopAnim");

	UAnimNodeBlendBase_StopAnim_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeBlendBase.PlayAnim
//		Flags  -> ()
// Parameters:
//		bool                                               bLoop                                                      (OptionalParm, Parm)
//		float                                              Rate                                                       (OptionalParm, Parm)
//		float                                              StartTime                                                  (OptionalParm, Parm)
void UAnimNodeBlendBase::PlayAnim(bool bLoop, float Rate, float StartTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlendBase.PlayAnim");

	UAnimNodeBlendBase_PlayAnim_Params params {};
	params.bLoop = bLoop;
	params.Rate = Rate;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNode_MultiBlendPerBone.SetMaskWeight
//		Flags  -> ()
// Parameters:
//		int                                                MaskIndex                                                  (Parm)
//		float                                              DesiredWeight                                              (Parm)
//		float                                              BlendTime                                                  (Parm)
void UAnimNode_MultiBlendPerBone::SetMaskWeight(int MaskIndex, float DesiredWeight, float BlendTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNode_MultiBlendPerBone.SetMaskWeight");

	UAnimNode_MultiBlendPerBone_SetMaskWeight_Params params {};
	params.MaskIndex = MaskIndex;
	params.DesiredWeight = DesiredWeight;
	params.BlendTime = BlendTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeAimOffset.SetActiveProfileByIndex
//		Flags  -> ()
// Parameters:
//		int                                                ProfileIndex                                               (Parm)
void UAnimNodeAimOffset::SetActiveProfileByIndex(int ProfileIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeAimOffset.SetActiveProfileByIndex");

	UAnimNodeAimOffset_SetActiveProfileByIndex_Params params {};
	params.ProfileIndex = ProfileIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeAimOffset.SetActiveProfileByName
//		Flags  -> ()
// Parameters:
//		struct FName                                       ProfileName                                                (Parm)
void UAnimNodeAimOffset::SetActiveProfileByName(const struct FName& ProfileName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeAimOffset.SetActiveProfileByName");

	UAnimNodeAimOffset_SetActiveProfileByName_Params params {};
	params.ProfileName = ProfileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeBlend.SetBlendTarget
//		Flags  -> ()
// Parameters:
//		float                                              BlendTarget                                                (Parm)
//		float                                              BlendTime                                                  (Parm)
void UAnimNodeBlend::SetBlendTarget(float BlendTarget, float BlendTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlend.SetBlendTarget");

	UAnimNodeBlend_SetBlendTarget_Params params {};
	params.BlendTarget = BlendTarget;
	params.BlendTime = BlendTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeAdditiveBlending.SetBlendTarget
//		Flags  -> ()
// Parameters:
//		float                                              BlendTarget                                                (Parm)
//		float                                              BlendTime                                                  (Parm)
void UAnimNodeAdditiveBlending::SetBlendTarget(float BlendTarget, float BlendTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeAdditiveBlending.SetBlendTarget");

	UAnimNodeAdditiveBlending_SetBlendTarget_Params params {};
	params.BlendTarget = BlendTarget;
	params.BlendTime = BlendTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeBlendPerBone.SetBlendTarget
//		Flags  -> ()
// Parameters:
//		float                                              BlendTarget                                                (Parm)
//		float                                              BlendTime                                                  (Parm)
void UAnimNodeBlendPerBone::SetBlendTarget(float BlendTarget, float BlendTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlendPerBone.SetBlendTarget");

	UAnimNodeBlendPerBone_SetBlendTarget_Params params {};
	params.BlendTarget = BlendTarget;
	params.BlendTime = BlendTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeCrossfader.GetActiveChild
//		Flags  -> ()
// Parameters:
//		class UAnimNodeSequence*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class UAnimNodeSequence* UAnimNodeCrossfader::GetActiveChild()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeCrossfader.GetActiveChild");

	UAnimNodeCrossfader_GetActiveChild_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeCrossfader.GetAnimName
//		Flags  -> ()
// Parameters:
//		struct FName                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FName UAnimNodeCrossfader::GetAnimName()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeCrossfader.GetAnimName");

	UAnimNodeCrossfader_GetAnimName_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeCrossfader.BlendToLoopingAnim
//		Flags  -> ()
// Parameters:
//		struct FName                                       AnimSeqName                                                (Parm)
//		float                                              BlendInTime                                                (OptionalParm, Parm)
//		float                                              Rate                                                       (OptionalParm, Parm)
void UAnimNodeCrossfader::BlendToLoopingAnim(const struct FName& AnimSeqName, float BlendInTime, float Rate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeCrossfader.BlendToLoopingAnim");

	UAnimNodeCrossfader_BlendToLoopingAnim_Params params {};
	params.AnimSeqName = AnimSeqName;
	params.BlendInTime = BlendInTime;
	params.Rate = Rate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeCrossfader.PlayOneShotAnim
//		Flags  -> ()
// Parameters:
//		struct FName                                       AnimSeqName                                                (Parm)
//		float                                              BlendInTime                                                (OptionalParm, Parm)
//		float                                              BlendOutTime                                               (OptionalParm, Parm)
//		bool                                               bDontBlendOut                                              (OptionalParm, Parm)
//		float                                              Rate                                                       (OptionalParm, Parm)
void UAnimNodeCrossfader::PlayOneShotAnim(const struct FName& AnimSeqName, float BlendInTime, float BlendOutTime, bool bDontBlendOut, float Rate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeCrossfader.PlayOneShotAnim");

	UAnimNodeCrossfader_PlayOneShotAnim_Params params {};
	params.AnimSeqName = AnimSeqName;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bDontBlendOut = bDontBlendOut;
	params.Rate = Rate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodePlayCustomAnim.SetRootBoneAxisOption
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ERootBoneAxis>                  AxisX                                                      (OptionalParm, Parm)
//		TEnumAsByte<Engine_ERootBoneAxis>                  AxisY                                                      (OptionalParm, Parm)
//		TEnumAsByte<Engine_ERootBoneAxis>                  AxisZ                                                      (OptionalParm, Parm)
void UAnimNodePlayCustomAnim::SetRootBoneAxisOption(TEnumAsByte<Engine_ERootBoneAxis> AxisX, TEnumAsByte<Engine_ERootBoneAxis> AxisY, TEnumAsByte<Engine_ERootBoneAxis> AxisZ)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.SetRootBoneAxisOption");

	UAnimNodePlayCustomAnim_SetRootBoneAxisOption_Params params {};
	params.AxisX = AxisX;
	params.AxisY = AxisY;
	params.AxisZ = AxisZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodePlayCustomAnim.GetCustomAnimNodeSeq
//		Flags  -> ()
// Parameters:
//		class UAnimNodeSequence*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class UAnimNodeSequence* UAnimNodePlayCustomAnim::GetCustomAnimNodeSeq()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.GetCustomAnimNodeSeq");

	UAnimNodePlayCustomAnim_GetCustomAnimNodeSeq_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodePlayCustomAnim.SetActorAnimEndNotification
//		Flags  -> ()
// Parameters:
//		bool                                               bNewStatus                                                 (Parm)
void UAnimNodePlayCustomAnim::SetActorAnimEndNotification(bool bNewStatus)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.SetActorAnimEndNotification");

	UAnimNodePlayCustomAnim_SetActorAnimEndNotification_Params params {};
	params.bNewStatus = bNewStatus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodePlayCustomAnim.SetCustomAnim
//		Flags  -> ()
// Parameters:
//		struct FName                                       AnimName                                                   (Parm)
void UAnimNodePlayCustomAnim::SetCustomAnim(const struct FName& AnimName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.SetCustomAnim");

	UAnimNodePlayCustomAnim_SetCustomAnim_Params params {};
	params.AnimName = AnimName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodePlayCustomAnim.StopCustomAnim
//		Flags  -> ()
// Parameters:
//		float                                              BlendOutTime                                               (Parm)
void UAnimNodePlayCustomAnim::StopCustomAnim(float BlendOutTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.StopCustomAnim");

	UAnimNodePlayCustomAnim_StopCustomAnim_Params params {};
	params.BlendOutTime = BlendOutTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodePlayCustomAnim.PlayCustomAnimByDuration
//		Flags  -> ()
// Parameters:
//		struct FName                                       AnimName                                                   (Parm)
//		float                                              Duration                                                   (Parm)
//		float                                              BlendInTime                                                (OptionalParm, Parm)
//		float                                              BlendOutTime                                               (OptionalParm, Parm)
//		bool                                               bLooping                                                   (OptionalParm, Parm)
//		bool                                               bOverride                                                  (OptionalParm, Parm)
void UAnimNodePlayCustomAnim::PlayCustomAnimByDuration(const struct FName& AnimName, float Duration, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.PlayCustomAnimByDuration");

	UAnimNodePlayCustomAnim_PlayCustomAnimByDuration_Params params {};
	params.AnimName = AnimName;
	params.Duration = Duration;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLooping = bLooping;
	params.bOverride = bOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodePlayCustomAnim.PlayCustomAnim
//		Flags  -> ()
// Parameters:
//		struct FName                                       AnimName                                                   (Parm)
//		float                                              Rate                                                       (Parm)
//		float                                              BlendInTime                                                (OptionalParm, Parm)
//		float                                              BlendOutTime                                               (OptionalParm, Parm)
//		bool                                               bLooping                                                   (OptionalParm, Parm)
//		bool                                               bOverride                                                  (OptionalParm, Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UAnimNodePlayCustomAnim::PlayCustomAnim(const struct FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.PlayCustomAnim");

	UAnimNodePlayCustomAnim_PlayCustomAnim_Params params {};
	params.AnimName = AnimName;
	params.Rate = Rate;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLooping = bLooping;
	params.bOverride = bOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeBlendList.SetActiveChild
//		Flags  -> ()
// Parameters:
//		int                                                ChildIndex                                                 (Parm)
//		float                                              BlendTime                                                  (Parm)
void UAnimNodeBlendList::SetActiveChild(int ChildIndex, float BlendTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlendList.SetActiveChild");

	UAnimNodeBlendList_SetActiveChild_Params params {};
	params.ChildIndex = ChildIndex;
	params.BlendTime = BlendTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeBlendMultiBone.SetTargetStartBone
//		Flags  -> ()
// Parameters:
//		int                                                TargetIdx                                                  (Parm)
//		struct FName                                       StartBoneName                                              (Parm)
//		float                                              PerBoneIncrease                                            (OptionalParm, Parm)
void UAnimNodeBlendMultiBone::SetTargetStartBone(int TargetIdx, const struct FName& StartBoneName, float PerBoneIncrease)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlendMultiBone.SetTargetStartBone");

	UAnimNodeBlendMultiBone_SetTargetStartBone_Params params {};
	params.TargetIdx = TargetIdx;
	params.StartBoneName = StartBoneName;
	params.PerBoneIncrease = PerBoneIncrease;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSlot.TickChildWeights
//		Flags  -> ()
// Parameters:
//		float                                              DeltaSeconds                                               (Parm)
void UAnimNodeSlot::TickChildWeights(float DeltaSeconds)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.TickChildWeights");

	UAnimNodeSlot_TickChildWeights_Params params {};
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSlot.SetRootBoneRotationOption
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ERootRotationOption>            AxisX                                                      (OptionalParm, Parm)
//		TEnumAsByte<Engine_ERootRotationOption>            AxisY                                                      (OptionalParm, Parm)
//		TEnumAsByte<Engine_ERootRotationOption>            AxisZ                                                      (OptionalParm, Parm)
void UAnimNodeSlot::SetRootBoneRotationOption(TEnumAsByte<Engine_ERootRotationOption> AxisX, TEnumAsByte<Engine_ERootRotationOption> AxisY, TEnumAsByte<Engine_ERootRotationOption> AxisZ)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.SetRootBoneRotationOption");

	UAnimNodeSlot_SetRootBoneRotationOption_Params params {};
	params.AxisX = AxisX;
	params.AxisY = AxisY;
	params.AxisZ = AxisZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSlot.SetRootBoneAxisOption
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ERootBoneAxis>                  AxisX                                                      (OptionalParm, Parm)
//		TEnumAsByte<Engine_ERootBoneAxis>                  AxisY                                                      (OptionalParm, Parm)
//		TEnumAsByte<Engine_ERootBoneAxis>                  AxisZ                                                      (OptionalParm, Parm)
void UAnimNodeSlot::SetRootBoneAxisOption(TEnumAsByte<Engine_ERootBoneAxis> AxisX, TEnumAsByte<Engine_ERootBoneAxis> AxisY, TEnumAsByte<Engine_ERootBoneAxis> AxisZ)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.SetRootBoneAxisOption");

	UAnimNodeSlot_SetRootBoneAxisOption_Params params {};
	params.AxisX = AxisX;
	params.AxisY = AxisY;
	params.AxisZ = AxisZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSlot.GetCustomAnimNodeSeq
//		Flags  -> ()
// Parameters:
//		class UAnimNodeSequence*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class UAnimNodeSequence* UAnimNodeSlot::GetCustomAnimNodeSeq()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.GetCustomAnimNodeSeq");

	UAnimNodeSlot_GetCustomAnimNodeSeq_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSlot.SetActorAnimEndNotification
//		Flags  -> ()
// Parameters:
//		bool                                               bNewStatus                                                 (Parm)
void UAnimNodeSlot::SetActorAnimEndNotification(bool bNewStatus)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.SetActorAnimEndNotification");

	UAnimNodeSlot_SetActorAnimEndNotification_Params params {};
	params.bNewStatus = bNewStatus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSlot.SetCustomAnim
//		Flags  -> ()
// Parameters:
//		struct FName                                       AnimName                                                   (Parm)
void UAnimNodeSlot::SetCustomAnim(const struct FName& AnimName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.SetCustomAnim");

	UAnimNodeSlot_SetCustomAnim_Params params {};
	params.AnimName = AnimName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSlot.SetAllowPauseAnims
//		Flags  -> ()
// Parameters:
//		bool                                               bSet                                                       (Parm)
void UAnimNodeSlot::SetAllowPauseAnims(bool bSet)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.SetAllowPauseAnims");

	UAnimNodeSlot_SetAllowPauseAnims_Params params {};
	params.bSet = bSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSlot.StopCustomAnim
//		Flags  -> ()
// Parameters:
//		float                                              BlendOutTime                                               (Parm)
void UAnimNodeSlot::StopCustomAnim(float BlendOutTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.StopCustomAnim");

	UAnimNodeSlot_StopCustomAnim_Params params {};
	params.BlendOutTime = BlendOutTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSlot.GetPlayedAnimation
//		Flags  -> ()
// Parameters:
//		struct FName                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FName UAnimNodeSlot::GetPlayedAnimation()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.GetPlayedAnimation");

	UAnimNodeSlot_GetPlayedAnimation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSlot.PlayCustomAnimByDuration
//		Flags  -> ()
// Parameters:
//		struct FName                                       AnimName                                                   (Parm)
//		float                                              Duration                                                   (Parm)
//		float                                              BlendInTime                                                (OptionalParm, Parm)
//		float                                              BlendOutTime                                               (OptionalParm, Parm)
//		bool                                               bLooping                                                   (OptionalParm, Parm)
//		bool                                               bOverride                                                  (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UAnimNodeSlot::PlayCustomAnimByDuration(const struct FName& AnimName, float Duration, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.PlayCustomAnimByDuration");

	UAnimNodeSlot_PlayCustomAnimByDuration_Params params {};
	params.AnimName = AnimName;
	params.Duration = Duration;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLooping = bLooping;
	params.bOverride = bOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSlot.PlayCustomAnim
//		Flags  -> ()
// Parameters:
//		struct FName                                       AnimName                                                   (Parm)
//		float                                              Rate                                                       (Parm)
//		float                                              BlendInTime                                                (OptionalParm, Parm)
//		float                                              BlendOutTime                                               (OptionalParm, Parm)
//		bool                                               bLooping                                                   (OptionalParm, Parm)
//		bool                                               bOverride                                                  (OptionalParm, Parm)
//		float                                              StartTime                                                  (OptionalParm, Parm)
//		float                                              EndTime                                                    (OptionalParm, Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UAnimNodeSlot::PlayCustomAnim(const struct FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride, float StartTime, float EndTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.PlayCustomAnim");

	UAnimNodeSlot_PlayCustomAnim_Params params {};
	params.AnimName = AnimName;
	params.Rate = Rate;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLooping = bLooping;
	params.bOverride = bOverride;
	params.StartTime = StartTime;
	params.EndTime = EndTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSynch.SetGroupRateScale
//		Flags  -> ()
// Parameters:
//		struct FName                                       GroupName                                                  (Parm)
//		float                                              NewRateScale                                               (Parm)
void UAnimNodeSynch::SetGroupRateScale(const struct FName& GroupName, float NewRateScale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.SetGroupRateScale");

	UAnimNodeSynch_SetGroupRateScale_Params params {};
	params.GroupName = GroupName;
	params.NewRateScale = NewRateScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSynch.GetRelativePosition
//		Flags  -> ()
// Parameters:
//		struct FName                                       GroupName                                                  (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UAnimNodeSynch::GetRelativePosition(const struct FName& GroupName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.GetRelativePosition");

	UAnimNodeSynch_GetRelativePosition_Params params {};
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSynch.ForceRelativePosition
//		Flags  -> ()
// Parameters:
//		struct FName                                       GroupName                                                  (Parm)
//		float                                              RelativePosition                                           (Parm)
void UAnimNodeSynch::ForceRelativePosition(const struct FName& GroupName, float RelativePosition)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.ForceRelativePosition");

	UAnimNodeSynch_ForceRelativePosition_Params params {};
	params.GroupName = GroupName;
	params.RelativePosition = RelativePosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSynch.GetMasterNodeOfGroup
//		Flags  -> ()
// Parameters:
//		struct FName                                       GroupName                                                  (Parm)
//		class UAnimNodeSequence*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class UAnimNodeSequence* UAnimNodeSynch::GetMasterNodeOfGroup(const struct FName& GroupName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.GetMasterNodeOfGroup");

	UAnimNodeSynch_GetMasterNodeOfGroup_Params params {};
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSynch.RemoveNodeFromGroup
//		Flags  -> ()
// Parameters:
//		class UAnimNodeSequence*                           SeqNode                                                    (Parm)
//		struct FName                                       GroupName                                                  (Parm)
void UAnimNodeSynch::RemoveNodeFromGroup(class UAnimNodeSequence* SeqNode, const struct FName& GroupName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.RemoveNodeFromGroup");

	UAnimNodeSynch_RemoveNodeFromGroup_Params params {};
	params.SeqNode = SeqNode;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSynch.AddNodeToGroup
//		Flags  -> ()
// Parameters:
//		class UAnimNodeSequence*                           SeqNode                                                    (Parm)
//		struct FName                                       GroupName                                                  (Parm)
void UAnimNodeSynch::AddNodeToGroup(class UAnimNodeSequence* SeqNode, const struct FName& GroupName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.AddNodeToGroup");

	UAnimNodeSynch_AddNodeToGroup_Params params {};
	params.SeqNode = SeqNode;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimTree.GetGroupIndex
//		Flags  -> ()
// Parameters:
//		struct FName                                       GroupName                                                  (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UAnimTree::GetGroupIndex(const struct FName& GroupName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.GetGroupIndex");

	UAnimTree_GetGroupIndex_Params params {};
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimTree.GetGroupRateScale
//		Flags  -> ()
// Parameters:
//		struct FName                                       GroupName                                                  (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UAnimTree::GetGroupRateScale(const struct FName& GroupName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.GetGroupRateScale");

	UAnimTree_GetGroupRateScale_Params params {};
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimTree.SetGroupRateScale
//		Flags  -> ()
// Parameters:
//		struct FName                                       GroupName                                                  (Parm)
//		float                                              NewRateScale                                               (Parm)
void UAnimTree::SetGroupRateScale(const struct FName& GroupName, float NewRateScale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.SetGroupRateScale");

	UAnimTree_SetGroupRateScale_Params params {};
	params.GroupName = GroupName;
	params.NewRateScale = NewRateScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimTree.GetGroupRelativePosition
//		Flags  -> ()
// Parameters:
//		struct FName                                       GroupName                                                  (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UAnimTree::GetGroupRelativePosition(const struct FName& GroupName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.GetGroupRelativePosition");

	UAnimTree_GetGroupRelativePosition_Params params {};
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimTree.ForceGroupRelativePosition
//		Flags  -> ()
// Parameters:
//		struct FName                                       GroupName                                                  (Parm)
//		float                                              RelativePosition                                           (Parm)
void UAnimTree::ForceGroupRelativePosition(const struct FName& GroupName, float RelativePosition)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.ForceGroupRelativePosition");

	UAnimTree_ForceGroupRelativePosition_Params params {};
	params.GroupName = GroupName;
	params.RelativePosition = RelativePosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimTree.GetGroupNotifyMaster
//		Flags  -> ()
// Parameters:
//		struct FName                                       GroupName                                                  (Parm)
//		class UAnimNodeSequence*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class UAnimNodeSequence* UAnimTree::GetGroupNotifyMaster(const struct FName& GroupName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.GetGroupNotifyMaster");

	UAnimTree_GetGroupNotifyMaster_Params params {};
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimTree.GetGroupSynchMaster
//		Flags  -> ()
// Parameters:
//		struct FName                                       GroupName                                                  (Parm)
//		class UAnimNodeSequence*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class UAnimNodeSequence* UAnimTree::GetGroupSynchMaster(const struct FName& GroupName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.GetGroupSynchMaster");

	UAnimTree_GetGroupSynchMaster_Params params {};
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimTree.SetAnimGroupForNode
//		Flags  -> ()
// Parameters:
//		class UAnimNodeSequence*                           SeqNode                                                    (Parm)
//		struct FName                                       GroupName                                                  (Parm)
//		bool                                               bCreateIfNotFound                                          (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UAnimTree::SetAnimGroupForNode(class UAnimNodeSequence* SeqNode, const struct FName& GroupName, bool bCreateIfNotFound)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.SetAnimGroupForNode");

	UAnimTree_SetAnimGroupForNode_Params params {};
	params.SeqNode = SeqNode;
	params.GroupName = GroupName;
	params.bCreateIfNotFound = bCreateIfNotFound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimTree.SetUseSavedPose
//		Flags  -> ()
// Parameters:
//		bool                                               bUseSaved                                                  (Parm)
void UAnimTree::SetUseSavedPose(bool bUseSaved)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.SetUseSavedPose");

	UAnimTree_SetUseSavedPose_Params params {};
	params.bUseSaved = bUseSaved;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimTree.FindMorphNode
//		Flags  -> ()
// Parameters:
//		struct FName                                       InNodeName                                                 (Parm)
//		class UMorphNodeBase*                              ReturnValue                                                (Parm, OutParm, ReturnParm)
class UMorphNodeBase* UAnimTree::FindMorphNode(const struct FName& InNodeName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.FindMorphNode");

	UAnimTree_FindMorphNode_Params params {};
	params.InNodeName = InNodeName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimTree.FindSkelControl
//		Flags  -> ()
// Parameters:
//		struct FName                                       InControlName                                              (Parm)
//		class USkelControlBase*                            ReturnValue                                                (Parm, OutParm, ReturnParm)
class USkelControlBase* UAnimTree::FindSkelControl(const struct FName& InControlName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.FindSkelControl");

	UAnimTree_FindSkelControl_Params params {};
	params.InControlName = InControlName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSequence.SetRootBoneRotationOption
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ERootRotationOption>            AxisX                                                      (OptionalParm, Parm)
//		TEnumAsByte<Engine_ERootRotationOption>            AxisY                                                      (OptionalParm, Parm)
//		TEnumAsByte<Engine_ERootRotationOption>            AxisZ                                                      (OptionalParm, Parm)
void UAnimNodeSequence::SetRootBoneRotationOption(TEnumAsByte<Engine_ERootRotationOption> AxisX, TEnumAsByte<Engine_ERootRotationOption> AxisY, TEnumAsByte<Engine_ERootRotationOption> AxisZ)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.SetRootBoneRotationOption");

	UAnimNodeSequence_SetRootBoneRotationOption_Params params {};
	params.AxisX = AxisX;
	params.AxisY = AxisY;
	params.AxisZ = AxisZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSequence.SetRootBoneAxisOption
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ERootBoneAxis>                  AxisX                                                      (OptionalParm, Parm)
//		TEnumAsByte<Engine_ERootBoneAxis>                  AxisY                                                      (OptionalParm, Parm)
//		TEnumAsByte<Engine_ERootBoneAxis>                  AxisZ                                                      (OptionalParm, Parm)
void UAnimNodeSequence::SetRootBoneAxisOption(TEnumAsByte<Engine_ERootBoneAxis> AxisX, TEnumAsByte<Engine_ERootBoneAxis> AxisY, TEnumAsByte<Engine_ERootBoneAxis> AxisZ)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.SetRootBoneAxisOption");

	UAnimNodeSequence_SetRootBoneAxisOption_Params params {};
	params.AxisX = AxisX;
	params.AxisY = AxisY;
	params.AxisZ = AxisZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSequence.GetTimeLeft
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UAnimNodeSequence::GetTimeLeft()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.GetTimeLeft");

	UAnimNodeSequence_GetTimeLeft_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSequence.GetAnimPlaybackLength
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UAnimNodeSequence::GetAnimPlaybackLength()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.GetAnimPlaybackLength");

	UAnimNodeSequence_GetAnimPlaybackLength_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSequence.GetGlobalPlayRate
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UAnimNodeSequence::GetGlobalPlayRate()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.GetGlobalPlayRate");

	UAnimNodeSequence_GetGlobalPlayRate_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSequence.GetGroupRelativePosition
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UAnimNodeSequence::GetGroupRelativePosition()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.GetGroupRelativePosition");

	UAnimNodeSequence_GetGroupRelativePosition_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSequence.FindGroupPosition
//		Flags  -> ()
// Parameters:
//		float                                              GroupRelativePosition                                      (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UAnimNodeSequence::FindGroupPosition(float GroupRelativePosition)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.FindGroupPosition");

	UAnimNodeSequence_FindGroupPosition_Params params {};
	params.GroupRelativePosition = GroupRelativePosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSequence.FindGroupRelativePosition
//		Flags  -> ()
// Parameters:
//		float                                              GroupRelativePosition                                      (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UAnimNodeSequence::FindGroupRelativePosition(float GroupRelativePosition)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.FindGroupRelativePosition");

	UAnimNodeSequence_FindGroupRelativePosition_Params params {};
	params.GroupRelativePosition = GroupRelativePosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSequence.GetNormalizedPosition
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UAnimNodeSequence::GetNormalizedPosition()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.GetNormalizedPosition");

	UAnimNodeSequence_GetNormalizedPosition_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSequence.SetPosition
//		Flags  -> ()
// Parameters:
//		float                                              NewTime                                                    (Parm)
//		bool                                               bFireNotifies                                              (Parm)
void UAnimNodeSequence::SetPosition(float NewTime, bool bFireNotifies)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.SetPosition");

	UAnimNodeSequence_SetPosition_Params params {};
	params.NewTime = NewTime;
	params.bFireNotifies = bFireNotifies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSequence.ReplayAnim
//		Flags  -> ()
void UAnimNodeSequence::ReplayAnim()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.ReplayAnim");

	UAnimNodeSequence_ReplayAnim_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSequence.StopAnim
//		Flags  -> ()
void UAnimNodeSequence::StopAnim()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.StopAnim");

	UAnimNodeSequence_StopAnim_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSequence.PlayAnim
//		Flags  -> ()
// Parameters:
//		bool                                               bLoop                                                      (OptionalParm, Parm)
//		float                                              InRate                                                     (OptionalParm, Parm)
//		float                                              StartTime                                                  (OptionalParm, Parm)
void UAnimNodeSequence::PlayAnim(bool bLoop, float InRate, float StartTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.PlayAnim");

	UAnimNodeSequence_PlayAnim_Params params {};
	params.bLoop = bLoop;
	params.InRate = InRate;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSequence.SetAnim
//		Flags  -> ()
// Parameters:
//		struct FName                                       Sequence                                                   (Parm)
void UAnimNodeSequence::SetAnim(const struct FName& Sequence)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.SetAnim");

	UAnimNodeSequence_SetAnim_Params params {};
	params.Sequence = Sequence;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNodeSequenceBlendByAim.CheckAnimsUpToDate
//		Flags  -> ()
void UAnimNodeSequenceBlendByAim::CheckAnimsUpToDate()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequenceBlendByAim.CheckAnimsUpToDate");

	UAnimNodeSequenceBlendByAim_CheckAnimsUpToDate_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MorphNodeMultiPose.UpdateMorphTarget
//		Flags  -> ()
// Parameters:
//		class UMorphTarget*                                Target                                                     (Parm)
//		float                                              InWeight                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMorphNodeMultiPose::UpdateMorphTarget(class UMorphTarget* Target, float InWeight)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MorphNodeMultiPose.UpdateMorphTarget");

	UMorphNodeMultiPose_UpdateMorphTarget_Params params {};
	params.Target = Target;
	params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MorphNodeMultiPose.RemoveMorphTarget
//		Flags  -> ()
// Parameters:
//		struct FName                                       MorphTargetName                                            (Parm)
void UMorphNodeMultiPose::RemoveMorphTarget(const struct FName& MorphTargetName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MorphNodeMultiPose.RemoveMorphTarget");

	UMorphNodeMultiPose_RemoveMorphTarget_Params params {};
	params.MorphTargetName = MorphTargetName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MorphNodeMultiPose.AddMorphTarget
//		Flags  -> ()
// Parameters:
//		struct FName                                       MorphTargetName                                            (Parm)
//		float                                              InWeight                                                   (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UMorphNodeMultiPose::AddMorphTarget(const struct FName& MorphTargetName, float InWeight)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MorphNodeMultiPose.AddMorphTarget");

	UMorphNodeMultiPose_AddMorphTarget_Params params {};
	params.MorphTargetName = MorphTargetName;
	params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MorphNodePose.SetMorphTarget
//		Flags  -> ()
// Parameters:
//		struct FName                                       MorphTargetName                                            (Parm)
void UMorphNodePose::SetMorphTarget(const struct FName& MorphTargetName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MorphNodePose.SetMorphTarget");

	UMorphNodePose_SetMorphTarget_Params params {};
	params.MorphTargetName = MorphTargetName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MorphNodeWeight.SetNodeWeight
//		Flags  -> ()
// Parameters:
//		float                                              NewWeight                                                  (Parm)
void UMorphNodeWeight::SetNodeWeight(float NewWeight)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MorphNodeWeight.SetNodeWeight");

	UMorphNodeWeight_SetNodeWeight_Params params {};
	params.NewWeight = NewWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TerrainLayerSetup.PostBeginPlay
//		Flags  -> ()
void UTerrainLayerSetup::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TerrainLayerSetup.PostBeginPlay");

	UTerrainLayerSetup_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DataStoreClient.DebugDumpDataStoreInfo
//		Flags  -> ()
// Parameters:
//		bool                                               bVerbose                                                   (Parm)
void UDataStoreClient::DebugDumpDataStoreInfo(bool bVerbose)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.DebugDumpDataStoreInfo");

	UDataStoreClient_DebugDumpDataStoreInfo_Params params {};
	params.bVerbose = bVerbose;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DataStoreClient.NotifyGameSessionEnded
//		Flags  -> ()
// Parameters:
void UDataStoreClient::NotifyGameSessionEnded()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.NotifyGameSessionEnded");

	UDataStoreClient_NotifyGameSessionEnded_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DataStoreClient.FindDataStoreClass
//		Flags  -> ()
// Parameters:
//		class UClass*                                      RequiredMetaClass                                          (Parm)
//		class UClass*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class UClass* UDataStoreClient::FindDataStoreClass(class UClass* RequiredMetaClass)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.FindDataStoreClass");

	UDataStoreClient_FindDataStoreClass_Params params {};
	params.RequiredMetaClass = RequiredMetaClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DataStoreClient.GetPlayerDataStoreClasses
//		Flags  -> ()
// Parameters:
//		TArray<class UClass*>                              out_DataStoreClasses                                       (Parm, OutParm, NeedCtorLink)
void UDataStoreClient::GetPlayerDataStoreClasses(TArray<class UClass*>* out_DataStoreClasses)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.GetPlayerDataStoreClasses");

	UDataStoreClient_GetPlayerDataStoreClasses_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_DataStoreClasses != nullptr)
		*out_DataStoreClasses = params.out_DataStoreClasses;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DataStoreClient.FindPlayerDataStoreIndex
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                PlayerOwner                                                (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UDataStoreClient::FindPlayerDataStoreIndex(class ULocalPlayer* PlayerOwner)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.FindPlayerDataStoreIndex");

	UDataStoreClient_FindPlayerDataStoreIndex_Params params {};
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DataStoreClient.UnregisterDataStore
//		Flags  -> ()
// Parameters:
//		class UUIDataStore*                                DataStore                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UDataStoreClient::UnregisterDataStore(class UUIDataStore* DataStore)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.UnregisterDataStore");

	UDataStoreClient_UnregisterDataStore_Params params {};
	params.DataStore = DataStore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DataStoreClient.RegisterDataStore
//		Flags  -> ()
// Parameters:
//		class UUIDataStore*                                DataStore                                                  (Parm)
//		class ULocalPlayer*                                PlayerOwner                                                (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UDataStoreClient::RegisterDataStore(class UUIDataStore* DataStore, class ULocalPlayer* PlayerOwner)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.RegisterDataStore");

	UDataStoreClient_RegisterDataStore_Params params {};
	params.DataStore = DataStore;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DataStoreClient.CreateDataStore
//		Flags  -> ()
// Parameters:
//		class UClass*                                      DataStoreClass                                             (Parm)
//		class UUIDataStore*                                ReturnValue                                                (Parm, OutParm, ReturnParm, CoerceParm)
class UUIDataStore* UDataStoreClient::CreateDataStore(class UClass* DataStoreClass)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.CreateDataStore");

	UDataStoreClient_CreateDataStore_Params params {};
	params.DataStoreClass = DataStoreClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DataStoreClient.FindDataStore
//		Flags  -> ()
// Parameters:
//		struct FName                                       DataStoreTag                                               (Parm)
//		class ULocalPlayer*                                PlayerOwner                                                (OptionalParm, Parm)
//		class UUIDataStore*                                ReturnValue                                                (Parm, OutParm, ReturnParm)
class UUIDataStore* UDataStoreClient::FindDataStore(const struct FName& DataStoreTag, class ULocalPlayer* PlayerOwner)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.FindDataStore");

	UDataStoreClient_FindDataStore_Params params {};
	params.DataStoreTag = DataStoreTag;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Console.UpdateCompleteIndices
//		Flags  -> ()
void UConsole::UpdateCompleteIndices()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Console.UpdateCompleteIndices");

	UConsole_UpdateCompleteIndices_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Console.BuildRuntimeAutoCompleteList
//		Flags  -> ()
// Parameters:
//		bool                                               bForce                                                     (OptionalParm, Parm)
void UConsole::BuildRuntimeAutoCompleteList(bool bForce)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Console.BuildRuntimeAutoCompleteList");

	UConsole_BuildRuntimeAutoCompleteList_Params params {};
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Console.AppendInputText
//		Flags  -> ()
// Parameters:
//		struct FString                                     Text                                                       (Parm, NeedCtorLink)
void UConsole::AppendInputText(const struct FString& Text)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Console.AppendInputText");

	UConsole_AppendInputText_Params params {};
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Console.ProcessControlKey
//		Flags  -> ()
// Parameters:
//		struct FName                                       Key                                                        (Parm)
//		TEnumAsByte<Core_EInputEvent>                      Event                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UConsole::ProcessControlKey(const struct FName& Key, TEnumAsByte<Core_EInputEvent> Event)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Console.ProcessControlKey");

	UConsole_ProcessControlKey_Params params {};
	params.Key = Key;
	params.Event = Event;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Console.FlushPlayerInput
//		Flags  -> ()
void UConsole::FlushPlayerInput()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Console.FlushPlayerInput");

	UConsole_FlushPlayerInput_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Console.InputChar
//		Flags  -> ()
// Parameters:
//		int                                                ControllerId                                               (Parm)
//		struct FString                                     Unicode                                                    (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UConsole::InputChar(int ControllerId, const struct FString& Unicode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Console.InputChar");

	UConsole_InputChar_Params params {};
	params.ControllerId = ControllerId;
	params.Unicode = Unicode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Console.InputKey
//		Flags  -> ()
// Parameters:
//		int                                                ControllerId                                               (Parm)
//		struct FName                                       Key                                                        (Parm)
//		TEnumAsByte<Core_EInputEvent>                      Event                                                      (Parm)
//		float                                              AmountDepressed                                            (OptionalParm, Parm)
//		bool                                               bGamepad                                                   (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UConsole::InputKey(int ControllerId, const struct FName& Key, TEnumAsByte<Core_EInputEvent> Event, float AmountDepressed, bool bGamepad)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Console.InputKey");

	UConsole_InputKey_Params params {};
	params.ControllerId = ControllerId;
	params.Key = Key;
	params.Event = Event;
	params.AmountDepressed = AmountDepressed;
	params.bGamepad = bGamepad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Console.PostRender_Console
//		Flags  -> ()
// Parameters:
//		class UCanvas*                                     Canvas                                                     (Parm)
void UConsole::PostRender_Console(class UCanvas* Canvas)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Console.PostRender_Console");

	UConsole_PostRender_Console_Params params {};
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Console.StartTyping
//		Flags  -> ()
// Parameters:
//		struct FString                                     Text                                                       (Parm, CoerceParm, NeedCtorLink)
void UConsole::StartTyping(const struct FString& Text)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Console.StartTyping");

	UConsole_StartTyping_Params params {};
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Console.OutputText
//		Flags  -> ()
// Parameters:
//		struct FString                                     Text                                                       (Parm, CoerceParm, NeedCtorLink)
void UConsole::OutputText(const struct FString& Text)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Console.OutputText");

	UConsole_OutputText_Params params {};
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Console.OutputTextLine
//		Flags  -> ()
// Parameters:
//		struct FString                                     Text                                                       (Parm, CoerceParm, NeedCtorLink)
void UConsole::OutputTextLine(const struct FString& Text)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Console.OutputTextLine");

	UConsole_OutputTextLine_Params params {};
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Console.ClearOutput
//		Flags  -> ()
void UConsole::ClearOutput()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Console.ClearOutput");

	UConsole_ClearOutput_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Console.ConsoleCommand
//		Flags  -> ()
// Parameters:
//		struct FString                                     Command                                                    (Parm, NeedCtorLink)
void UConsole::ConsoleCommand(const struct FString& Command)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Console.ConsoleCommand");

	UConsole_ConsoleCommand_Params params {};
	params.Command = Command;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Console.PurgeCommandFromHistory
//		Flags  -> ()
// Parameters:
//		struct FString                                     Command                                                    (Parm, NeedCtorLink)
void UConsole::PurgeCommandFromHistory(const struct FString& Command)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Console.PurgeCommandFromHistory");

	UConsole_PurgeCommandFromHistory_Params params {};
	params.Command = Command;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Console.SetCursorPos
//		Flags  -> ()
// Parameters:
//		int                                                Position                                                   (Parm)
void UConsole::SetCursorPos(int Position)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Console.SetCursorPos");

	UConsole_SetCursorPos_Params params {};
	params.Position = Position;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Console.SetInputText
//		Flags  -> ()
// Parameters:
//		struct FString                                     Text                                                       (Parm, NeedCtorLink)
void UConsole::SetInputText(const struct FString& Text)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Console.SetInputText");

	UConsole_SetInputText_Params params {};
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Console.Initialized
//		Flags  -> ()
void UConsole::Initialized()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Console.Initialized");

	UConsole_Initialized_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIInteraction.NotifyGameSessionEnded
//		Flags  -> ()
void UUIInteraction::NotifyGameSessionEnded()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.NotifyGameSessionEnded");

	UUIInteraction_NotifyGameSessionEnded_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIInteraction.GetNATType
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ENATType>                       ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_ENATType> UUIInteraction::GetNATType()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetNATType");

	UUIInteraction_GetNATType_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIInteraction.GetConnectedGamepadCount
//		Flags  -> ()
// Parameters:
//		TArray<unsigned long>                              ControllerConnectionStatusOverrides                        (OptionalParm, Parm, NeedCtorLink)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UUIInteraction::GetConnectedGamepadCount(TArray<unsigned long> ControllerConnectionStatusOverrides)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetConnectedGamepadCount");

	UUIInteraction_GetConnectedGamepadCount_Params params {};
	params.ControllerConnectionStatusOverrides = ControllerConnectionStatusOverrides;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIInteraction.IsGamepadConnected
//		Flags  -> ()
// Parameters:
//		int                                                ControllerId                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIInteraction::IsGamepadConnected(int ControllerId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.IsGamepadConnected");

	UUIInteraction_IsGamepadConnected_Params params {};
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIInteraction.GetNumGuestsLoggedIn
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UUIInteraction::GetNumGuestsLoggedIn()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetNumGuestsLoggedIn");

	UUIInteraction_GetNumGuestsLoggedIn_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIInteraction.GetLoggedInPlayerCount
//		Flags  -> ()
// Parameters:
//		bool                                               bRequireOnlineLogin                                        (OptionalParm, Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UUIInteraction::GetLoggedInPlayerCount(bool bRequireOnlineLogin)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetLoggedInPlayerCount");

	UUIInteraction_GetLoggedInPlayerCount_Params params {};
	params.bRequireOnlineLogin = bRequireOnlineLogin;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIInteraction.IsLoggedIn
//		Flags  -> ()
// Parameters:
//		int                                                ControllerId                                               (Parm)
//		bool                                               bRequireOnlineLogin                                        (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIInteraction::IsLoggedIn(int ControllerId, bool bRequireOnlineLogin)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.IsLoggedIn");

	UUIInteraction_IsLoggedIn_Params params {};
	params.ControllerId = ControllerId;
	params.bRequireOnlineLogin = bRequireOnlineLogin;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIInteraction.HasLinkConnection
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIInteraction::HasLinkConnection()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.HasLinkConnection");

	UUIInteraction_HasLinkConnection_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIInteraction.GetLowestLoginStatusOfControllers
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ELoginStatus>                   ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_ELoginStatus> UUIInteraction::GetLowestLoginStatusOfControllers()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetLowestLoginStatusOfControllers");

	UUIInteraction_GetLowestLoginStatusOfControllers_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIInteraction.GetLoginStatus
//		Flags  -> ()
// Parameters:
//		int                                                ControllerId                                               (Parm)
//		TEnumAsByte<Engine_ELoginStatus>                   ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_ELoginStatus> UUIInteraction::GetLoginStatus(int ControllerId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetLoginStatus");

	UUIInteraction_GetLoginStatus_Params params {};
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIInteraction.NotifyPlayerRemoved
//		Flags  -> (Net, Native, Operator, Static, Public, Protected, HasDefaults, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		int                                                PlayerIndex                                                (Parm)
//		class ULocalPlayer*                                RemovedPlayer                                              (Parm)
void UUIInteraction::STATIC_NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.NotifyPlayerRemoved");

	UUIInteraction_NotifyPlayerRemoved_Params params {};
	params.PlayerIndex = PlayerIndex;
	params.RemovedPlayer = RemovedPlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIInteraction.NotifyPlayerAdded
//		Flags  -> (Singular, Exec, Native, Operator, Static, Public, Protected, HasDefaults, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		int                                                PlayerIndex                                                (Parm)
//		class ULocalPlayer*                                AddedPlayer                                                (Parm)
void UUIInteraction::STATIC_NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.NotifyPlayerAdded");

	UUIInteraction_NotifyPlayerAdded_Params params {};
	params.PlayerIndex = PlayerIndex;
	params.AddedPlayer = AddedPlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIInteraction.GetLocalPlayer
//		Flags  -> ()
// Parameters:
//		int                                                PlayerIndex                                                (Parm)
//		class ULocalPlayer*                                ReturnValue                                                (Parm, OutParm, ReturnParm)
class ULocalPlayer* UUIInteraction::GetLocalPlayer(int PlayerIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetLocalPlayer");

	UUIInteraction_GetLocalPlayer_Params params {};
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIInteraction.GetDataStoreClient
//		Flags  -> ()
// Parameters:
//		class UDataStoreClient*                            ReturnValue                                                (Parm, OutParm, ReturnParm)
class UDataStoreClient* UUIInteraction::GetDataStoreClient()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetDataStoreClient");

	UUIInteraction_GetDataStoreClient_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIInteraction.GetPlayerControllerId
//		Flags  -> ()
// Parameters:
//		int                                                PlayerIndex                                                (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UUIInteraction::GetPlayerControllerId(int PlayerIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetPlayerControllerId");

	UUIInteraction_GetPlayerControllerId_Params params {};
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIInteraction.GetPlayerIndex
//		Flags  -> ()
// Parameters:
//		int                                                ControllerId                                               (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UUIInteraction::GetPlayerIndex(int ControllerId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetPlayerIndex");

	UUIInteraction_GetPlayerIndex_Params params {};
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIInteraction.GetPlayerCount
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UUIInteraction::GetPlayerCount()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetPlayerCount");

	UUIInteraction_GetPlayerCount_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIManager.FindLocalPlayerIndex
//		Flags  -> ()
// Parameters:
//		class UPlayer*                                     P                                                          (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UUIManager::FindLocalPlayerIndex(class UPlayer* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIManager.FindLocalPlayerIndex");

	UUIManager_FindLocalPlayerIndex_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIManager.NotifyPlayerRemoved
//		Flags  -> ()
// Parameters:
//		int                                                PlayerIndex                                                (Parm)
//		class ULocalPlayer*                                RemovedPlayer                                              (Parm)
void UUIManager::NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIManager.NotifyPlayerRemoved");

	UUIManager_NotifyPlayerRemoved_Params params {};
	params.PlayerIndex = PlayerIndex;
	params.RemovedPlayer = RemovedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIManager.NotifyPlayerAdded
//		Flags  -> ()
// Parameters:
//		int                                                PlayerIndex                                                (Parm)
//		class ULocalPlayer*                                AddedPlayer                                                (Parm)
void UUIManager::NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIManager.NotifyPlayerAdded");

	UUIManager_NotifyPlayerAdded_Params params {};
	params.PlayerIndex = PlayerIndex;
	params.AddedPlayer = AddedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIManager.PauseGame
//		Flags  -> ()
// Parameters:
//		bool                                               bDesiredPauseState                                         (Parm)
//		int                                                PlayerIndex                                                (OptionalParm, Parm)
void UUIManager::PauseGame(bool bDesiredPauseState, int PlayerIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIManager.PauseGame");

	UUIManager_PauseGame_Params params {};
	params.bDesiredPauseState = bDesiredPauseState;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIManager.CanUnpauseInternalUI
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIManager::CanUnpauseInternalUI()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIManager.CanUnpauseInternalUI");

	UUIManager_CanUnpauseInternalUI_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIManager.GetUIManager
//		Flags  -> ()
// Parameters:
//		class UUIManager*                                  ReturnValue                                                (Parm, OutParm, ReturnParm)
class UUIManager* UUIManager::GetUIManager()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIManager.GetUIManager");

	UUIManager_GetUIManager_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.EnvironmentVolume.SetSplitNavMesh
//		Flags  -> ()
// Parameters:
//		bool                                               bNewValue                                                  (Parm)
void AEnvironmentVolume::SetSplitNavMesh(bool bNewValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.EnvironmentVolume.SetSplitNavMesh");

	AEnvironmentVolume_SetSplitNavMesh_Params params {};
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimSequence.GetNotifyTimeByClass
//		Flags  -> ()
// Parameters:
//		class UClass*                                      NotifyClass                                                (Parm)
//		float                                              PlayRate                                                   (OptionalParm, Parm)
//		float                                              StartPosition                                              (OptionalParm, Parm)
//		class UAnimNotify*                                 out_Notify                                                 (OptionalParm, Parm, OutParm)
//		float                                              out_Duration                                               (OptionalParm, Parm, OutParm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UAnimSequence::GetNotifyTimeByClass(class UClass* NotifyClass, float PlayRate, float StartPosition, class UAnimNotify** out_Notify, float* out_Duration)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimSequence.GetNotifyTimeByClass");

	UAnimSequence_GetNotifyTimeByClass_Params params {};
	params.NotifyClass = NotifyClass;
	params.PlayRate = PlayRate;
	params.StartPosition = StartPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Notify != nullptr)
		*out_Notify = params.out_Notify;
	if (out_Duration != nullptr)
		*out_Duration = params.out_Duration;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AIController.CanFireWeapon
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     Wpn                                                        (Parm)
//		unsigned char                                      FireModeNum                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AAIController::CanFireWeapon(class AWeapon* Wpn, unsigned char FireModeNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AIController.CanFireWeapon");

	AAIController_CanFireWeapon_Params params {};
	params.Wpn = Wpn;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AIController.NotifyWeaponFinishedFiring
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     W                                                          (Parm)
//		unsigned char                                      FireMode                                                   (Parm)
void AAIController::NotifyWeaponFinishedFiring(class AWeapon* W, unsigned char FireMode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AIController.NotifyWeaponFinishedFiring");

	AAIController_NotifyWeaponFinishedFiring_Params params {};
	params.W = W;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AIController.NotifyWeaponFired
//		Flags  -> ()
// Parameters:
//		class AWeapon*                                     W                                                          (Parm)
//		unsigned char                                      FireMode                                                   (Parm)
void AAIController::NotifyWeaponFired(class AWeapon* W, unsigned char FireMode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AIController.NotifyWeaponFired");

	AAIController_NotifyWeaponFired_Params params {};
	params.W = W;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AIController.OnAIMoveToActor
//		Flags  -> ()
// Parameters:
//		class USeqAct_AIMoveToActor*                       Action                                                     (Parm)
void AAIController::OnAIMoveToActor(class USeqAct_AIMoveToActor* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AIController.OnAIMoveToActor");

	AAIController_OnAIMoveToActor_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AIController.GetPlayerViewPoint
//		Flags  -> ()
// Parameters:
//		struct FVector                                     out_Location                                               (Parm, OutParm)
//		struct FRotator                                    out_Rotation                                               (Parm, OutParm)
void AAIController::GetPlayerViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AIController.GetPlayerViewPoint");

	AAIController_GetPlayerViewPoint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Rotation != nullptr)
		*out_Rotation = params.out_Rotation;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AIController.SetTeam
//		Flags  -> ()
// Parameters:
//		int                                                inTeamIdx                                                  (Parm)
void AAIController::SetTeam(int inTeamIdx)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AIController.SetTeam");

	AAIController_SetTeam_Params params {};
	params.inTeamIdx = inTeamIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AIController.DisplayDebug
//		Flags  -> ()
// Parameters:
//		class AHUD*                                        HUD                                                        (Parm)
//		float                                              out_YL                                                     (Parm, OutParm)
//		float                                              out_YPos                                                   (Parm, OutParm)
void AAIController::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AIController.DisplayDebug");

	AAIController_DisplayDebug_Params params {};
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AIController.Reset
//		Flags  -> ()
void AAIController::Reset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AIController.Reset");

	AAIController_Reset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AIController.PreBeginPlay
//		Flags  -> ()
void AAIController::PreBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AIController.PreBeginPlay");

	AAIController_PreBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Path_AlongLine.Recycle
//		Flags  -> ()
void UPath_AlongLine::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Path_AlongLine.Recycle");

	UPath_AlongLine_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Path_AlongLine.AlongLine
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
//		struct FVector                                     Dir                                                        (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UPath_AlongLine::AlongLine(class APawn* P, const struct FVector& Dir)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Path_AlongLine.AlongLine");

	UPath_AlongLine_AlongLine_Params params {};
	params.P = P;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Path_AvoidInEscapableNodes.Recycle
//		Flags  -> ()
void UPath_AvoidInEscapableNodes::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Path_AvoidInEscapableNodes.Recycle");

	UPath_AvoidInEscapableNodes_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Path_AvoidInEscapableNodes.DontGetStuck
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UPath_AvoidInEscapableNodes::DontGetStuck(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Path_AvoidInEscapableNodes.DontGetStuck");

	UPath_AvoidInEscapableNodes_DontGetStuck_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Path_AvoidInEscapableNodes.CachePawnReacFlags
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
void UPath_AvoidInEscapableNodes::CachePawnReacFlags(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Path_AvoidInEscapableNodes.CachePawnReacFlags");

	UPath_AvoidInEscapableNodes_CachePawnReacFlags_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Path_MinDistBetweenSpecsOfType.Recycle
//		Flags  -> ()
void UPath_MinDistBetweenSpecsOfType::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Path_MinDistBetweenSpecsOfType.Recycle");

	UPath_MinDistBetweenSpecsOfType_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Path_MinDistBetweenSpecsOfType.EnforceMinDist
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
//		float                                              InMinDist                                                  (Parm)
//		class UClass*                                      InSpecClass                                                (Parm)
//		struct FVector                                     LastLocation                                               (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UPath_MinDistBetweenSpecsOfType::EnforceMinDist(class APawn* P, float InMinDist, class UClass* InSpecClass, const struct FVector& LastLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Path_MinDistBetweenSpecsOfType.EnforceMinDist");

	UPath_MinDistBetweenSpecsOfType_EnforceMinDist_Params params {};
	params.P = P;
	params.InMinDist = InMinDist;
	params.InSpecClass = InSpecClass;
	params.LastLocation = LastLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Path_TowardGoal.Recycle
//		Flags  -> ()
void UPath_TowardGoal::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Path_TowardGoal.Recycle");

	UPath_TowardGoal_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Path_TowardGoal.TowardGoal
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
//		class AActor*                                      Goal                                                       (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UPath_TowardGoal::TowardGoal(class APawn* P, class AActor* Goal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Path_TowardGoal.TowardGoal");

	UPath_TowardGoal_TowardGoal_Params params {};
	params.P = P;
	params.Goal = Goal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Path_TowardPoint.Recycle
//		Flags  -> ()
void UPath_TowardPoint::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Path_TowardPoint.Recycle");

	UPath_TowardPoint_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Path_TowardPoint.TowardPoint
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
//		struct FVector                                     Point                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UPath_TowardPoint::TowardPoint(class APawn* P, const struct FVector& Point)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Path_TowardPoint.TowardPoint");

	UPath_TowardPoint_TowardPoint_Params params {};
	params.P = P;
	params.Point = Point;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DecalComponent.IsWaitingForResetToDefaultsToComplete
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UDecalComponent::IsWaitingForResetToDefaultsToComplete()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.IsWaitingForResetToDefaultsToComplete");

	UDecalComponent_IsWaitingForResetToDefaultsToComplete_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DecalComponent.GetDecalMaterial
//		Flags  -> ()
// Parameters:
//		class UMaterialInterface*                          ReturnValue                                                (Parm, OutParm, ReturnParm)
class UMaterialInterface* UDecalComponent::GetDecalMaterial()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.GetDecalMaterial");

	UDecalComponent_GetDecalMaterial_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DecalComponent.SetDecalMaterial
//		Flags  -> ()
// Parameters:
//		class UMaterialInterface*                          NewDecalMaterial                                           (Parm)
void UDecalComponent::SetDecalMaterial(class UMaterialInterface* NewDecalMaterial)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.SetDecalMaterial");

	UDecalComponent_SetDecalMaterial_Params params {};
	params.NewDecalMaterial = NewDecalMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DecalComponent.ResetToDefaults
//		Flags  -> ()
void UDecalComponent::ResetToDefaults()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.ResetToDefaults");

	UDecalComponent_ResetToDefaults_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.FogVolumeDensityInfo.ApplyCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct AFogVolumeDensityInfo_FCheckpointRecord     Record                                                     (Const, Parm, OutParm)
//void AFogVolumeDensityInfo::ApplyCheckpointRecord(struct AFogVolumeDensityInfo_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityInfo.ApplyCheckpointRecord");
//
//	AFogVolumeDensityInfo_ApplyCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}
//
//
//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.FogVolumeDensityInfo.CreateCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct AFogVolumeDensityInfo_FCheckpointRecord     Record                                                     (Parm, OutParm)
//void AFogVolumeDensityInfo::CreateCheckpointRecord(struct AFogVolumeDensityInfo_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityInfo.CreateCheckpointRecord");
//
//	AFogVolumeDensityInfo_CreateCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FogVolumeDensityInfo.ShouldSaveForCheckpoint
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AFogVolumeDensityInfo::ShouldSaveForCheckpoint()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityInfo.ShouldSaveForCheckpoint");

	AFogVolumeDensityInfo_ShouldSaveForCheckpoint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FogVolumeDensityInfo.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void AFogVolumeDensityInfo::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityInfo.OnToggle");

	AFogVolumeDensityInfo_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FogVolumeDensityInfo.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void AFogVolumeDensityInfo::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityInfo.ReplicatedEvent");

	AFogVolumeDensityInfo_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FogVolumeDensityInfo.PostBeginPlay
//		Flags  -> ()
void AFogVolumeDensityInfo::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityInfo.PostBeginPlay");

	AFogVolumeDensityInfo_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ExponentialHeightFogComponent.SetEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               bSetEnabled                                                (Parm)
void UExponentialHeightFogComponent::SetEnabled(bool bSetEnabled)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetEnabled");

	UExponentialHeightFogComponent_SetEnabled_Params params {};
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NxForceFieldComponent.DoInitRBPhys
//		Flags  -> ()
void UNxForceFieldComponent::DoInitRBPhys()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NxForceFieldComponent.DoInitRBPhys");

	UNxForceFieldComponent_DoInitRBPhys_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NxForceFieldComponent.OnForceFieldDestroy
//		Flags  -> ()
// Parameters:
//		class UNxForceFieldComponent*                      ForeceFieldComponent                                       (Parm, EditInline)
void UNxForceFieldComponent::OnForceFieldDestroy(class UNxForceFieldComponent* ForeceFieldComponent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NxForceFieldComponent.OnForceFieldDestroy");

	UNxForceFieldComponent_OnForceFieldDestroy_Params params {};
	params.ForeceFieldComponent = ForeceFieldComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AICommandBase.GetUtility
//		Flags  -> ()
// Parameters:
//		class AAIController*                               InAI                                                       (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UAICommandBase::GetUtility(class AAIController* InAI)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AICommandBase.GetUtility");

	UAICommandBase_GetUtility_Params params {};
	params.InAI = InAI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Interface_NavMeshPathSwitch.AIActivateSwitch
//		Flags  -> ()
// Parameters:
//		class AAIController*                               AI                                                         (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UInterface_NavMeshPathSwitch::AIActivateSwitch(class AAIController* AI)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Interface_NavMeshPathSwitch.AIActivateSwitch");

	UInterface_NavMeshPathSwitch_AIActivateSwitch_Params params {};
	params.AI = AI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.DrawBreadCrumbs
//		Flags  -> ()
// Parameters:
//		bool                                               bPersistent                                                (OptionalParm, Parm)
void UNavigationHandle::DrawBreadCrumbs(bool bPersistent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.DrawBreadCrumbs");

	UNavigationHandle_DrawBreadCrumbs_Params params {};
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.StaticGetValidatedAnchorPosition
//		Flags  -> ()
// Parameters:
//		struct FVector                                     out_NewAnchorLoc                                           (Parm, OutParm)
//		struct FVector                                     StartCheckBaseLocation                                     (Parm)
//		struct FVector                                     Extent                                                     (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavigationHandle::StaticGetValidatedAnchorPosition(struct FVector* out_NewAnchorLoc, const struct FVector& StartCheckBaseLocation, const struct FVector& Extent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.StaticGetValidatedAnchorPosition");

	UNavigationHandle_StaticGetValidatedAnchorPosition_Params params {};
	params.StartCheckBaseLocation = StartCheckBaseLocation;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_NewAnchorLoc != nullptr)
		*out_NewAnchorLoc = params.out_NewAnchorLoc;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.GetValidatedAnchorPosition
//		Flags  -> ()
// Parameters:
//		struct FVector                                     out_NewAnchorLoc                                           (Parm, OutParm)
//		struct FVector                                     OverrideStartLoc                                           (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavigationHandle::GetValidatedAnchorPosition(struct FVector* out_NewAnchorLoc, const struct FVector& OverrideStartLoc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetValidatedAnchorPosition");

	UNavigationHandle_GetValidatedAnchorPosition_Params params {};
	params.OverrideStartLoc = OverrideStartLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_NewAnchorLoc != nullptr)
		*out_NewAnchorLoc = params.out_NewAnchorLoc;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.GetAllCoverSlotsInRadius
//		Flags  -> ()
// Parameters:
//		struct FVector                                     FromLoc                                                    (Parm)
//		float                                              Radius                                                     (Parm)
//		TArray<struct FCoverInfo>                          out_CoverList                                              (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavigationHandle::GetAllCoverSlotsInRadius(const struct FVector& FromLoc, float Radius, TArray<struct FCoverInfo>* out_CoverList)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetAllCoverSlotsInRadius");

	UNavigationHandle_GetAllCoverSlotsInRadius_Params params {};
	params.FromLoc = FromLoc;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_CoverList != nullptr)
		*out_CoverList = params.out_CoverList;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.PopulatePathfindingParamCache
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavigationHandle::PopulatePathfindingParamCache()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.PopulatePathfindingParamCache");

	UNavigationHandle_PopulatePathfindingParamCache_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.MoveToDesiredHeightAboveMesh
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Point                                                      (Parm)
//		float                                              Height                                                     (Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector UNavigationHandle::MoveToDesiredHeightAboveMesh(const struct FVector& Point, float Height)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.MoveToDesiredHeightAboveMesh");

	UNavigationHandle_MoveToDesiredHeightAboveMesh_Params params {};
	params.Point = Point;
	params.Height = Height;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.CopyMovePointsFromPathCache
//		Flags  -> ()
// Parameters:
//		struct FVector                                     FinalDest                                                  (Parm)
//		TArray<struct FVector>                             out_MovePoints                                             (Parm, OutParm, NeedCtorLink)
void UNavigationHandle::CopyMovePointsFromPathCache(const struct FVector& FinalDest, TArray<struct FVector>* out_MovePoints)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.CopyMovePointsFromPathCache");

	UNavigationHandle_CopyMovePointsFromPathCache_Params params {};
	params.FinalDest = FinalDest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_MovePoints != nullptr)
		*out_MovePoints = params.out_MovePoints;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.CalculatePathDistance
//		Flags  -> ()
// Parameters:
//		struct FVector                                     FinalDest                                                  (OptionalParm, Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UNavigationHandle::CalculatePathDistance(const struct FVector& FinalDest)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.CalculatePathDistance");

	UNavigationHandle_CalculatePathDistance_Params params {};
	params.FinalDest = FinalDest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.GetFirstMoveLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector UNavigationHandle::GetFirstMoveLocation()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetFirstMoveLocation");

	UNavigationHandle_GetFirstMoveLocation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.IsAnchorInescapable
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavigationHandle::IsAnchorInescapable()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.IsAnchorInescapable");

	UNavigationHandle_IsAnchorInescapable_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.LimitPathCacheDistance
//		Flags  -> ()
// Parameters:
//		float                                              MaxDist                                                    (Parm)
void UNavigationHandle::LimitPathCacheDistance(float MaxDist)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.LimitPathCacheDistance");

	UNavigationHandle_LimitPathCacheDistance_Params params {};
	params.MaxDist = MaxDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.GetValidPositionsForBox
//		Flags  -> ()
// Parameters:
//		struct FVector                                     pos                                                        (Parm)
//		float                                              Radius                                                     (Parm)
//		struct FVector                                     Extent                                                     (Parm)
//		bool                                               bMustBeReachableFromStartPos                               (Parm)
//		TArray<struct FVector>                             out_ValidPositions                                         (Parm, OutParm, NeedCtorLink)
//		int                                                MaxPositions                                               (OptionalParm, Parm)
//		float                                              MinRadius                                                  (OptionalParm, Parm)
//		struct FVector                                     ValidBoxAroundStartPos                                     (OptionalParm, Parm)
void UNavigationHandle::GetValidPositionsForBox(const struct FVector& pos, float Radius, const struct FVector& Extent, bool bMustBeReachableFromStartPos, TArray<struct FVector>* out_ValidPositions, int MaxPositions, float MinRadius, const struct FVector& ValidBoxAroundStartPos)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetValidPositionsForBox");

	UNavigationHandle_GetValidPositionsForBox_Params params {};
	params.pos = pos;
	params.Radius = Radius;
	params.Extent = Extent;
	params.bMustBeReachableFromStartPos = bMustBeReachableFromStartPos;
	params.MaxPositions = MaxPositions;
	params.MinRadius = MinRadius;
	params.ValidBoxAroundStartPos = ValidBoxAroundStartPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_ValidPositions != nullptr)
		*out_ValidPositions = params.out_ValidPositions;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.GetAllPolyCentersWithinBounds
//		Flags  -> ()
// Parameters:
//		struct FVector                                     pos                                                        (Parm)
//		struct FVector                                     Extent                                                     (Parm)
//		TArray<struct FVector>                             out_PolyCtrs                                               (Parm, OutParm, NeedCtorLink)
void UNavigationHandle::GetAllPolyCentersWithinBounds(const struct FVector& pos, const struct FVector& Extent, TArray<struct FVector>* out_PolyCtrs)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetAllPolyCentersWithinBounds");

	UNavigationHandle_GetAllPolyCentersWithinBounds_Params params {};
	params.pos = pos;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_PolyCtrs != nullptr)
		*out_PolyCtrs = params.out_PolyCtrs;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.GetCurrentEdgeType
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ENavMeshEdgeType>               ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_ENavMeshEdgeType> UNavigationHandle::GetCurrentEdgeType()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetCurrentEdgeType");

	UNavigationHandle_GetCurrentEdgeType_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.ClearCurrentEdge
//		Flags  -> ()
void UNavigationHandle::ClearCurrentEdge()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.ClearCurrentEdge");

	UNavigationHandle_ClearCurrentEdge_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.GetCurrentEdgeDebugText
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UNavigationHandle::GetCurrentEdgeDebugText()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetCurrentEdgeDebugText");

	UNavigationHandle_GetCurrentEdgeDebugText_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.PrintPathCacheDebugText
//		Flags  -> ()
void UNavigationHandle::PrintPathCacheDebugText()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.PrintPathCacheDebugText");

	UNavigationHandle_PrintPathCacheDebugText_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.DrawPathCache
//		Flags  -> ()
// Parameters:
//		struct FVector                                     DrawOffset                                                 (OptionalParm, Parm)
//		bool                                               bPersistent                                                (OptionalParm, Parm)
//		struct FColor                                      DrawColor                                                  (OptionalParm, Parm)
void UNavigationHandle::DrawPathCache(const struct FVector& DrawOffset, bool bPersistent, const struct FColor& DrawColor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.DrawPathCache");

	UNavigationHandle_DrawPathCache_Params params {};
	params.DrawOffset = DrawOffset;
	params.bPersistent = bPersistent;
	params.DrawColor = DrawColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.ActorReachable
//		Flags  -> ()
// Parameters:
//		class AActor*                                      A                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavigationHandle::ActorReachable(class AActor* A)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.ActorReachable");

	UNavigationHandle_ActorReachable_Params params {};
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.PointReachable
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Point                                                      (Parm)
//		struct FVector                                     OverrideStartPoint                                         (OptionalParm, Parm)
//		bool                                               bAllowHitsInEndCollisionBox                                (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavigationHandle::PointReachable(const struct FVector& Point, const struct FVector& OverrideStartPoint, bool bAllowHitsInEndCollisionBox)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.PointReachable");

	UNavigationHandle_PointReachable_Params params {};
	params.Point = Point;
	params.OverrideStartPoint = OverrideStartPoint;
	params.bAllowHitsInEndCollisionBox = bAllowHitsInEndCollisionBox;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.PointCheck
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Pt                                                         (Parm)
//		struct FVector                                     Extent                                                     (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavigationHandle::PointCheck(const struct FVector& Pt, const struct FVector& Extent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.PointCheck");

	UNavigationHandle_PointCheck_Params params {};
	params.Pt = Pt;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.LineCheck
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Start                                                      (Parm)
//		struct FVector                                     End                                                        (Parm)
//		struct FVector                                     Extent                                                     (Parm)
//		struct FVector                                     out_HitLocation                                            (OptionalParm, Parm, OutParm)
//		struct FVector                                     out_HitNormal                                              (OptionalParm, Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavigationHandle::LineCheck(const struct FVector& Start, const struct FVector& End, const struct FVector& Extent, struct FVector* out_HitLocation, struct FVector* out_HitNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.LineCheck");

	UNavigationHandle_LineCheck_Params params {};
	params.Start = Start;
	params.End = End;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_HitLocation != nullptr)
		*out_HitLocation = params.out_HitLocation;
	if (out_HitNormal != nullptr)
		*out_HitNormal = params.out_HitNormal;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.ObstaclePointCheck
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Pt                                                         (Parm)
//		struct FVector                                     Extent                                                     (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavigationHandle::ObstaclePointCheck(const struct FVector& Pt, const struct FVector& Extent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.ObstaclePointCheck");

	UNavigationHandle_ObstaclePointCheck_Params params {};
	params.Pt = Pt;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.ObstacleLineCheck
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Start                                                      (Parm)
//		struct FVector                                     End                                                        (Parm)
//		struct FVector                                     Extent                                                     (Parm)
//		struct FVector                                     out_HitLoc                                                 (OptionalParm, Parm, OutParm)
//		struct FVector                                     out_HitNorm                                                (OptionalParm, Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavigationHandle::ObstacleLineCheck(const struct FVector& Start, const struct FVector& End, const struct FVector& Extent, struct FVector* out_HitLoc, struct FVector* out_HitNorm)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.ObstacleLineCheck");

	UNavigationHandle_ObstacleLineCheck_Params params {};
	params.Start = Start;
	params.End = End;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_HitLoc != nullptr)
		*out_HitLoc = params.out_HitLoc;
	if (out_HitNorm != nullptr)
		*out_HitNorm = params.out_HitNorm;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.SuggestMovePreparation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     MovePt                                                     (Parm, OutParm)
//		class AController*                                 C                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavigationHandle::SuggestMovePreparation(struct FVector* MovePt, class AController* C)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.SuggestMovePreparation");

	UNavigationHandle_SuggestMovePreparation_Params params {};
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (MovePt != nullptr)
		*MovePt = params.MovePt;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.FindPath
//		Flags  -> ()
// Parameters:
//		class AActor*                                      out_DestActor                                              (OptionalParm, Parm, OutParm)
//		int                                                out_DestItem                                               (OptionalParm, Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavigationHandle::FindPath(class AActor** out_DestActor, int* out_DestItem)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.FindPath");

	UNavigationHandle_FindPath_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_DestActor != nullptr)
		*out_DestActor = params.out_DestActor;
	if (out_DestItem != nullptr)
		*out_DestItem = params.out_DestItem;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.ComputeValidFinalDestination
//		Flags  -> ()
// Parameters:
//		struct FVector                                     out_ComputedPosition                                       (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavigationHandle::ComputeValidFinalDestination(struct FVector* out_ComputedPosition)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.ComputeValidFinalDestination");

	UNavigationHandle_ComputeValidFinalDestination_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_ComputedPosition != nullptr)
		*out_ComputedPosition = params.out_ComputedPosition;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.SetFinalDestination
//		Flags  -> ()
// Parameters:
//		struct FVector                                     FinalDest                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavigationHandle::SetFinalDestination(const struct FVector& FinalDest)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.SetFinalDestination");

	UNavigationHandle_SetFinalDestination_Params params {};
	params.FinalDest = FinalDest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.GetNextMoveLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     out_MoveDest                                               (Parm, OutParm)
//		float                                              ArrivalDistance                                            (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavigationHandle::GetNextMoveLocation(struct FVector* out_MoveDest, float ArrivalDistance)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetNextMoveLocation");

	UNavigationHandle_GetNextMoveLocation_Params params {};
	params.ArrivalDistance = ArrivalDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_MoveDest != nullptr)
		*out_MoveDest = params.out_MoveDest;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.GetPylonFromPos
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Position                                                   (Parm)
//		class APylon*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class APylon* UNavigationHandle::GetPylonFromPos(const struct FVector& Position)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetPylonFromPos");

	UNavigationHandle_GetPylonFromPos_Params params {};
	params.Position = Position;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.FindPylon
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavigationHandle::FindPylon()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.FindPylon");

	UNavigationHandle_FindPylon_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.GetBestUnfinishedPathPoint
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector UNavigationHandle::GetBestUnfinishedPathPoint()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetBestUnfinishedPathPoint");

	UNavigationHandle_GetBestUnfinishedPathPoint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.PathCache_RemoveIndex
//		Flags  -> ()
// Parameters:
//		int                                                InIdx                                                      (Parm)
//		int                                                Count                                                      (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavigationHandle::PathCache_RemoveIndex(int InIdx, int Count)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.PathCache_RemoveIndex");

	UNavigationHandle_PathCache_RemoveIndex_Params params {};
	params.InIdx = InIdx;
	params.Count = Count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.PathCache_GetGoalPoint
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector UNavigationHandle::PathCache_GetGoalPoint()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.PathCache_GetGoalPoint");

	UNavigationHandle_PathCache_GetGoalPoint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.PathCache_Empty
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavigationHandle::PathCache_Empty()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.PathCache_Empty");

	UNavigationHandle_PathCache_Empty_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.GetPathCacheLength
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UNavigationHandle::GetPathCacheLength()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetPathCacheLength");

	UNavigationHandle_GetPathCacheLength_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.CreatePathGoalEvaluator
//		Flags  -> ()
// Parameters:
//		class UClass*                                      GoalEvalClass                                              (Parm)
//		class UNavMeshPathGoalEvaluator*                   ReturnValue                                                (Parm, OutParm, ReturnParm)
class UNavMeshPathGoalEvaluator* UNavigationHandle::CreatePathGoalEvaluator(class UClass* GoalEvalClass)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.CreatePathGoalEvaluator");

	UNavigationHandle_CreatePathGoalEvaluator_Params params {};
	params.GoalEvalClass = GoalEvalClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.CreatePathConstraint
//		Flags  -> ()
// Parameters:
//		class UClass*                                      ConstraintClass                                            (Parm)
//		class UNavMeshPathConstraint*                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class UNavMeshPathConstraint* UNavigationHandle::CreatePathConstraint(class UClass* ConstraintClass)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.CreatePathConstraint");

	UNavigationHandle_CreatePathConstraint_Params params {};
	params.ConstraintClass = ConstraintClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.DoesPylonAHaveAPathToPylonB
//		Flags  -> ()
// Parameters:
//		class APylon*                                      A                                                          (Parm)
//		class APylon*                                      B                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavigationHandle::DoesPylonAHaveAPathToPylonB(class APylon* A, class APylon* B)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.DoesPylonAHaveAPathToPylonB");

	UNavigationHandle_DoesPylonAHaveAPathToPylonB_Params params {};
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.BuildFromPylonAToPylonB
//		Flags  -> ()
// Parameters:
//		class APylon*                                      A                                                          (Parm)
//		class APylon*                                      B                                                          (Parm)
//		class APylon*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class APylon* UNavigationHandle::BuildFromPylonAToPylonB(class APylon* A, class APylon* B)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.BuildFromPylonAToPylonB");

	UNavigationHandle_BuildFromPylonAToPylonB_Params params {};
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.AddGoalEvaluator
//		Flags  -> ()
// Parameters:
//		class UNavMeshPathGoalEvaluator*                   Evaluator                                                  (Parm)
void UNavigationHandle::AddGoalEvaluator(class UNavMeshPathGoalEvaluator* Evaluator)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.AddGoalEvaluator");

	UNavigationHandle_AddGoalEvaluator_Params params {};
	params.Evaluator = Evaluator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.AddPathConstraint
//		Flags  -> ()
// Parameters:
//		class UNavMeshPathConstraint*                      Constraint                                                 (Parm)
void UNavigationHandle::AddPathConstraint(class UNavMeshPathConstraint* Constraint)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.AddPathConstraint");

	UNavigationHandle_AddPathConstraint_Params params {};
	params.Constraint = Constraint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.ClearConstraints
//		Flags  -> ()
void UNavigationHandle::ClearConstraints()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.ClearConstraints");

	UNavigationHandle_ClearConstraints_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.GetNextBreadCrumb
//		Flags  -> ()
// Parameters:
//		struct FVector                                     out_BreadCrumbLoc                                          (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavigationHandle::GetNextBreadCrumb(struct FVector* out_BreadCrumbLoc)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetNextBreadCrumb");

	UNavigationHandle_GetNextBreadCrumb_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_BreadCrumbLoc != nullptr)
		*out_BreadCrumbLoc = params.out_BreadCrumbLoc;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.UpdateBreadCrumbs
//		Flags  -> ()
// Parameters:
//		struct FVector                                     InLocation                                                 (Parm)
void UNavigationHandle::UpdateBreadCrumbs(const struct FVector& InLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.UpdateBreadCrumbs");

	UNavigationHandle_UpdateBreadCrumbs_Params params {};
	params.InLocation = InLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavigationHandle.CopyPathStoreToPathCache
//		Flags  -> ()
// Parameters:
//		struct FPathStore                                  InStore                                                    (Const, Parm, OutParm)
void UNavigationHandle::CopyPathStoreToPathCache(struct FPathStore* InStore)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.CopyPathStoreToPathCache");

	UNavigationHandle_CopyPathStoreToPathCache_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InStore != nullptr)
		*InStore = params.InStore;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoalFilter_MinPathDistance.MustBeLongerPathThan
//		Flags  -> ()
// Parameters:
//		class UNavMeshGoal_GenericFilterContainer*         FilterContainer                                            (Parm)
//		int                                                InMinDistancePathShouldBe                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavMeshGoalFilter_MinPathDistance::MustBeLongerPathThan(class UNavMeshGoal_GenericFilterContainer* FilterContainer, int InMinDistancePathShouldBe)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoalFilter_MinPathDistance.MustBeLongerPathThan");

	UNavMeshGoalFilter_MinPathDistance_MustBeLongerPathThan_Params params {};
	params.FilterContainer = FilterContainer;
	params.InMinDistancePathShouldBe = InMinDistancePathShouldBe;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoalFilter_NotNearOtherAI.NotNearOtherAI
//		Flags  -> ()
// Parameters:
//		class UNavMeshGoal_GenericFilterContainer*         FilterContainer                                            (Parm)
//		float                                              InDistanceToCheck                                          (Const, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavMeshGoalFilter_NotNearOtherAI::NotNearOtherAI(class UNavMeshGoal_GenericFilterContainer* FilterContainer, float InDistanceToCheck)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoalFilter_NotNearOtherAI.NotNearOtherAI");

	UNavMeshGoalFilter_NotNearOtherAI_NotNearOtherAI_Params params {};
	params.FilterContainer = FilterContainer;
	params.InDistanceToCheck = InDistanceToCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DirectionalLightComponent.OnUpdatePropertyBrightness
//		Flags  -> ()
void UDirectionalLightComponent::OnUpdatePropertyBrightness()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.OnUpdatePropertyBrightness");

	UDirectionalLightComponent_OnUpdatePropertyBrightness_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DirectionalLightComponent.OnUpdatePropertyLightColor
//		Flags  -> ()
void UDirectionalLightComponent::OnUpdatePropertyLightColor()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.OnUpdatePropertyLightColor");

	UDirectionalLightComponent_OnUpdatePropertyLightColor_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PointLightComponent.OnUpdatePropertyBrightness
//		Flags  -> ()
void UPointLightComponent::OnUpdatePropertyBrightness()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.OnUpdatePropertyBrightness");

	UPointLightComponent_OnUpdatePropertyBrightness_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PointLightComponent.OnUpdatePropertyLightColor
//		Flags  -> ()
void UPointLightComponent::OnUpdatePropertyLightColor()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.OnUpdatePropertyLightColor");

	UPointLightComponent_OnUpdatePropertyLightColor_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PointLightComponent.SetTranslation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewTranslation                                             (Parm)
void UPointLightComponent::SetTranslation(const struct FVector& NewTranslation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.SetTranslation");

	UPointLightComponent_SetTranslation_Params params {};
	params.NewTranslation = NewTranslation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SpotLightComponent.SetRotation
//		Flags  -> ()
// Parameters:
//		struct FRotator                                    NewRotation                                                (Parm)
void USpotLightComponent::SetRotation(const struct FRotator& NewRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SpotLightComponent.SetRotation");

	USpotLightComponent_SetRotation_Params params {};
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LightEnvironmentComponent.IsEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ULightEnvironmentComponent::IsEnabled()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LightEnvironmentComponent.IsEnabled");

	ULightEnvironmentComponent_IsEnabled_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.LightEnvironmentComponent.SetEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               bNewEnabled                                                (Parm)
void ULightEnvironmentComponent::SetEnabled(bool bNewEnabled)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.LightEnvironmentComponent.SetEnabled");

	ULightEnvironmentComponent_SetEnabled_Params params {};
	params.bNewEnabled = bNewEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DynamicLightEnvironmentComponent.ResetEnvironment
//		Flags  -> ()
void UDynamicLightEnvironmentComponent::ResetEnvironment()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DynamicLightEnvironmentComponent.ResetEnvironment");

	UDynamicLightEnvironmentComponent_ResetEnvironment_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetMaterial
//		Flags  -> ()
// Parameters:
//		int                                                ElementIndex                                               (Parm)
//		class UMaterialInterface*                          Material                                                   (Parm)
void USkeletalMeshComponent::SetMaterial(int ElementIndex, class UMaterialInterface* Material)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetMaterial");

	USkeletalMeshComponent_SetMaterial_Params params {};
	params.ElementIndex = ElementIndex;
	params.Material = Material;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetRotation
//		Flags  -> ()
// Parameters:
//		struct FRotator                                    ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FRotator USkeletalMeshComponent::GetRotation()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetRotation");

	USkeletalMeshComponent_GetRotation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetPosition
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector USkeletalMeshComponent::GetPosition()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetPosition");

	USkeletalMeshComponent_GetPosition_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.BreakConstraint
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Impulse                                                    (Parm)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FName                                       InBoneName                                                 (Parm)
//		bool                                               bVelChange                                                 (OptionalParm, Parm)
void USkeletalMeshComponent::BreakConstraint(const struct FVector& Impulse, const struct FVector& HitLocation, const struct FName& InBoneName, bool bVelChange)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.BreakConstraint");

	USkeletalMeshComponent_BreakConstraint_Params params {};
	params.Impulse = Impulse;
	params.HitLocation = HitLocation;
	params.InBoneName = InBoneName;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SkelMeshCompOnParticleSystemFinished
//		Flags  -> ()
// Parameters:
//		class UParticleSystemComponent*                    PSC                                                        (Parm, EditInline)
void USkeletalMeshComponent::SkelMeshCompOnParticleSystemFinished(class UParticleSystemComponent* PSC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SkelMeshCompOnParticleSystemFinished");

	USkeletalMeshComponent_SkelMeshCompOnParticleSystemFinished_Params params {};
	params.PSC = PSC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.PlayParticleEffect
//		Flags  -> (Simulated, Exec, Event, Public, Protected, Delegate, HasDefaults, K2Call, K2Pure)
// Parameters:
//		class UAnimNotify_PlayParticleEffect*              AnimNotifyData                                             (Const, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USkeletalMeshComponent::PlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.PlayParticleEffect");

	USkeletalMeshComponent_PlayParticleEffect_Params params {};
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.CreateForceField
//		Flags  -> ()
// Parameters:
//		class UAnimNotify_ForceField*                      AnimNotifyData                                             (Const, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USkeletalMeshComponent::CreateForceField(class UAnimNotify_ForceField* AnimNotifyData)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.CreateForceField");

	USkeletalMeshComponent_CreateForceField_Params params {};
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.StopAnim
//		Flags  -> ()
void USkeletalMeshComponent::StopAnim()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.StopAnim");

	USkeletalMeshComponent_StopAnim_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.PlayAnim
//		Flags  -> ()
// Parameters:
//		struct FName                                       AnimName                                                   (Parm)
//		float                                              Duration                                                   (OptionalParm, Parm)
//		bool                                               bLoop                                                      (OptionalParm, Parm)
//		bool                                               bRestartIfAlreadyPlaying                                   (OptionalParm, Parm)
//		float                                              StartTime                                                  (OptionalParm, Parm)
//		bool                                               bPlayBackwards                                             (OptionalParm, Parm)
void USkeletalMeshComponent::PlayAnim(const struct FName& AnimName, float Duration, bool bLoop, bool bRestartIfAlreadyPlaying, float StartTime, bool bPlayBackwards)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.PlayAnim");

	USkeletalMeshComponent_PlayAnim_Params params {};
	params.AnimName = AnimName;
	params.Duration = Duration;
	params.bLoop = bLoop;
	params.bRestartIfAlreadyPlaying = bRestartIfAlreadyPlaying;
	params.StartTime = StartTime;
	params.bPlayBackwards = bPlayBackwards;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.ShowAllMaterialSections
//		Flags  -> ()
// Parameters:
//		bool                                               bShow                                                      (Parm)
void USkeletalMeshComponent::ShowAllMaterialSections(bool bShow)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ShowAllMaterialSections");

	USkeletalMeshComponent_ShowAllMaterialSections_Params params {};
	params.bShow = bShow;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.ShowMaterialSection
//		Flags  -> ()
// Parameters:
//		int                                                MaterialID                                                 (Parm)
//		bool                                               bShow                                                      (Parm)
//		int                                                LODIndex                                                   (Parm)
void USkeletalMeshComponent::ShowMaterialSection(int MaterialID, bool bShow, int LODIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ShowMaterialSection");

	USkeletalMeshComponent_ShowMaterialSection_Params params {};
	params.MaterialID = MaterialID;
	params.bShow = bShow;
	params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.UpdateMeshForBrokenConstraints
//		Flags  -> ()
void USkeletalMeshComponent::UpdateMeshForBrokenConstraints()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateMeshForBrokenConstraints");

	USkeletalMeshComponent_UpdateMeshForBrokenConstraints_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.UnHideBoneByName
//		Flags  -> ()
// Parameters:
//		struct FName                                       BoneName                                                   (Parm)
void USkeletalMeshComponent::UnHideBoneByName(const struct FName& BoneName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UnHideBoneByName");

	USkeletalMeshComponent_UnHideBoneByName_Params params {};
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.HideBoneByName
//		Flags  -> ()
// Parameters:
//		struct FName                                       BoneName                                                   (Parm)
//		TEnumAsByte<Engine_EPhysBodyOp>                    PhysBodyOption                                             (Parm)
void USkeletalMeshComponent::HideBoneByName(const struct FName& BoneName, TEnumAsByte<Engine_EPhysBodyOp> PhysBodyOption)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.HideBoneByName");

	USkeletalMeshComponent_HideBoneByName_Params params {};
	params.BoneName = BoneName;
	params.PhysBodyOption = PhysBodyOption;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.IsBoneHidden
//		Flags  -> ()
// Parameters:
//		int                                                BoneIndex                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USkeletalMeshComponent::IsBoneHidden(int BoneIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsBoneHidden");

	USkeletalMeshComponent_IsBoneHidden_Params params {};
	params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.UnHideBone
//		Flags  -> ()
// Parameters:
//		int                                                BoneIndex                                                  (Parm)
void USkeletalMeshComponent::UnHideBone(int BoneIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UnHideBone");

	USkeletalMeshComponent_UnHideBone_Params params {};
	params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.HideBone
//		Flags  -> ()
// Parameters:
//		int                                                BoneIndex                                                  (Parm)
//		TEnumAsByte<Engine_EPhysBodyOp>                    PhysBodyOption                                             (Parm)
void USkeletalMeshComponent::HideBone(int BoneIndex, TEnumAsByte<Engine_EPhysBodyOp> PhysBodyOption)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.HideBone");

	USkeletalMeshComponent_HideBone_Params params {};
	params.BoneIndex = BoneIndex;
	params.PhysBodyOption = PhysBodyOption;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetFaceFXRegisterEx
//		Flags  -> ()
// Parameters:
//		struct FString                                     RegName                                                    (Parm, NeedCtorLink)
//		TEnumAsByte<Engine_EFaceFXRegOp>                   RegOp                                                      (Parm)
//		float                                              FirstValue                                                 (Parm)
//		float                                              FirstInterpDuration                                        (Parm)
//		float                                              NextValue                                                  (Parm)
//		float                                              NextInterpDuration                                         (Parm)
void USkeletalMeshComponent::SetFaceFXRegisterEx(const struct FString& RegName, TEnumAsByte<Engine_EFaceFXRegOp> RegOp, float FirstValue, float FirstInterpDuration, float NextValue, float NextInterpDuration)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetFaceFXRegisterEx");

	USkeletalMeshComponent_SetFaceFXRegisterEx_Params params {};
	params.RegName = RegName;
	params.RegOp = RegOp;
	params.FirstValue = FirstValue;
	params.FirstInterpDuration = FirstInterpDuration;
	params.NextValue = NextValue;
	params.NextInterpDuration = NextInterpDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetFaceFXRegister
//		Flags  -> ()
// Parameters:
//		struct FString                                     RegName                                                    (Parm, NeedCtorLink)
//		float                                              RegVal                                                     (Parm)
//		TEnumAsByte<Engine_EFaceFXRegOp>                   RegOp                                                      (Parm)
//		float                                              InterpDuration                                             (OptionalParm, Parm)
void USkeletalMeshComponent::SetFaceFXRegister(const struct FString& RegName, float RegVal, TEnumAsByte<Engine_EFaceFXRegOp> RegOp, float InterpDuration)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetFaceFXRegister");

	USkeletalMeshComponent_SetFaceFXRegister_Params params {};
	params.RegName = RegName;
	params.RegVal = RegVal;
	params.RegOp = RegOp;
	params.InterpDuration = InterpDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetFaceFXRegister
//		Flags  -> ()
// Parameters:
//		struct FString                                     RegName                                                    (Parm, NeedCtorLink)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float USkeletalMeshComponent::GetFaceFXRegister(const struct FString& RegName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetFaceFXRegister");

	USkeletalMeshComponent_GetFaceFXRegister_Params params {};
	params.RegName = RegName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.DeclareFaceFXRegister
//		Flags  -> ()
// Parameters:
//		struct FString                                     RegName                                                    (Parm, NeedCtorLink)
void USkeletalMeshComponent::DeclareFaceFXRegister(const struct FString& RegName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.DeclareFaceFXRegister");

	USkeletalMeshComponent_DeclareFaceFXRegister_Params params {};
	params.RegName = RegName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.IsPlayingFaceFXAnim
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USkeletalMeshComponent::IsPlayingFaceFXAnim()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsPlayingFaceFXAnim");

	USkeletalMeshComponent_IsPlayingFaceFXAnim_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.StopFaceFXAnim
//		Flags  -> ()
void USkeletalMeshComponent::StopFaceFXAnim()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.StopFaceFXAnim");

	USkeletalMeshComponent_StopFaceFXAnim_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.PlayFaceFXAnim
//		Flags  -> ()
// Parameters:
//		class UFaceFXAnimSet*                              FaceFXAnimSetRef                                           (Parm)
//		struct FString                                     AnimName                                                   (Parm, NeedCtorLink)
//		struct FString                                     GroupName                                                  (Parm, NeedCtorLink)
//		class USoundCue*                                   SoundCueToPlay                                             (Parm)
//		class UAkEvent*                                    AkEventToPlay                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USkeletalMeshComponent::PlayFaceFXAnim(class UFaceFXAnimSet* FaceFXAnimSetRef, const struct FString& AnimName, const struct FString& GroupName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.PlayFaceFXAnim");

	USkeletalMeshComponent_PlayFaceFXAnim_Params params {};
	params.FaceFXAnimSetRef = FaceFXAnimSetRef;
	params.AnimName = AnimName;
	params.GroupName = GroupName;
	params.SoundCueToPlay = SoundCueToPlay;
	params.AkEventToPlay = AkEventToPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.ToggleInstanceVertexWeights
//		Flags  -> ()
// Parameters:
//		bool                                               bEnable                                                    (Parm)
//		int                                                LODIdx                                                     (Parm)
void USkeletalMeshComponent::ToggleInstanceVertexWeights(bool bEnable, int LODIdx)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ToggleInstanceVertexWeights");

	USkeletalMeshComponent_ToggleInstanceVertexWeights_Params params {};
	params.bEnable = bEnable;
	params.LODIdx = LODIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.UpdateInstanceVertexWeightBones
//		Flags  -> ()
// Parameters:
//		TArray<struct FBonePair>                           BonePairs                                                  (Parm, NeedCtorLink)
void USkeletalMeshComponent::UpdateInstanceVertexWeightBones(TArray<struct FBonePair> BonePairs)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateInstanceVertexWeightBones");

	USkeletalMeshComponent_UpdateInstanceVertexWeightBones_Params params {};
	params.BonePairs = BonePairs;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.FindInstanceVertexweightBonePair
//		Flags  -> ()
// Parameters:
//		struct FBonePair                                   Bones                                                      (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USkeletalMeshComponent::FindInstanceVertexweightBonePair(const struct FBonePair& Bones)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindInstanceVertexweightBonePair");

	USkeletalMeshComponent_FindInstanceVertexweightBonePair_Params params {};
	params.Bones = Bones;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.RemoveInstanceVertexWeightBoneParented
//		Flags  -> ()
// Parameters:
//		struct FName                                       BoneName                                                   (Parm)
void USkeletalMeshComponent::RemoveInstanceVertexWeightBoneParented(const struct FName& BoneName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.RemoveInstanceVertexWeightBoneParented");

	USkeletalMeshComponent_RemoveInstanceVertexWeightBoneParented_Params params {};
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.AddInstanceVertexWeightBoneParented
//		Flags  -> ()
// Parameters:
//		struct FName                                       BoneName                                                   (Parm)
//		bool                                               bPairWithParent                                            (OptionalParm, Parm)
void USkeletalMeshComponent::AddInstanceVertexWeightBoneParented(const struct FName& BoneName, bool bPairWithParent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AddInstanceVertexWeightBoneParented");

	USkeletalMeshComponent_AddInstanceVertexWeightBoneParented_Params params {};
	params.BoneName = BoneName;
	params.bPairWithParent = bPairWithParent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetBonesWithinRadius
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Origin                                                     (Parm)
//		float                                              Radius                                                     (Parm)
//		int                                                TraceFlags                                                 (Parm)
//		TArray<struct FName>                               out_Bones                                                  (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USkeletalMeshComponent::GetBonesWithinRadius(const struct FVector& Origin, float Radius, int TraceFlags, TArray<struct FName>* out_Bones)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBonesWithinRadius");

	USkeletalMeshComponent_GetBonesWithinRadius_Params params {};
	params.Origin = Origin;
	params.Radius = Radius;
	params.TraceFlags = TraceFlags;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Bones != nullptr)
		*out_Bones = params.out_Bones;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.UpdateAnimations
//		Flags  -> ()
void USkeletalMeshComponent::UpdateAnimations()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateAnimations");

	USkeletalMeshComponent_UpdateAnimations_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.ForceSkelUpdate
//		Flags  -> ()
void USkeletalMeshComponent::ForceSkelUpdate()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ForceSkelUpdate");

	USkeletalMeshComponent_ForceSkelUpdate_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.UpdateRBBonesFromSpaceBases
//		Flags  -> ()
// Parameters:
//		bool                                               bMoveUnfixedBodies                                         (Parm)
//		bool                                               bTeleport                                                  (Parm)
void USkeletalMeshComponent::UpdateRBBonesFromSpaceBases(bool bMoveUnfixedBodies, bool bTeleport)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateRBBonesFromSpaceBases");

	USkeletalMeshComponent_UpdateRBBonesFromSpaceBases_Params params {};
	params.bMoveUnfixedBodies = bMoveUnfixedBodies;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetHasPhysicsAssetInstance
//		Flags  -> ()
// Parameters:
//		bool                                               bHasInstance                                               (Parm)
//		bool                                               bUseCurrentPosition                                        (OptionalParm, Parm)
void USkeletalMeshComponent::SetHasPhysicsAssetInstance(bool bHasInstance, bool bUseCurrentPosition)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetHasPhysicsAssetInstance");

	USkeletalMeshComponent_SetHasPhysicsAssetInstance_Params params {};
	params.bHasInstance = bHasInstance;
	params.bUseCurrentPosition = bUseCurrentPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.FindBodyInstanceNamed
//		Flags  -> ()
// Parameters:
//		struct FName                                       BoneName                                                   (Parm)
//		class URB_BodyInstance*                            ReturnValue                                                (Parm, OutParm, ReturnParm)
class URB_BodyInstance* USkeletalMeshComponent::FindBodyInstanceNamed(const struct FName& BoneName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindBodyInstanceNamed");

	USkeletalMeshComponent_FindBodyInstanceNamed_Params params {};
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.FindConstraintBoneName
//		Flags  -> ()
// Parameters:
//		int                                                ConstraintIndex                                            (Parm)
//		struct FName                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FName USkeletalMeshComponent::FindConstraintBoneName(int ConstraintIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindConstraintBoneName");

	USkeletalMeshComponent_FindConstraintBoneName_Params params {};
	params.ConstraintIndex = ConstraintIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.FindConstraintIndex
//		Flags  -> ()
// Parameters:
//		struct FName                                       ConstraintName                                             (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USkeletalMeshComponent::FindConstraintIndex(const struct FName& ConstraintName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindConstraintIndex");

	USkeletalMeshComponent_FindConstraintIndex_Params params {};
	params.ConstraintName = ConstraintName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.InitMorphTargets
//		Flags  -> ()
void USkeletalMeshComponent::InitMorphTargets()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.InitMorphTargets");

	USkeletalMeshComponent_InitMorphTargets_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.InitSkelControls
//		Flags  -> ()
void USkeletalMeshComponent::InitSkelControls()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.InitSkelControls");

	USkeletalMeshComponent_InitSkelControls_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.UpdateParentBoneMap
//		Flags  -> ()
void USkeletalMeshComponent::UpdateParentBoneMap()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateParentBoneMap");

	USkeletalMeshComponent_UpdateParentBoneMap_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetParentAnimComponent
//		Flags  -> ()
// Parameters:
//		class USkeletalMeshComponent*                      NewParentAnimComp                                          (Parm, EditInline)
void USkeletalMeshComponent::SetParentAnimComponent(class USkeletalMeshComponent* NewParentAnimComp)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetParentAnimComponent");

	USkeletalMeshComponent_SetParentAnimComponent_Params params {};
	params.NewParentAnimComp = NewParentAnimComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetAnimTreeTemplate
//		Flags  -> ()
// Parameters:
//		class UAnimTree*                                   NewTemplate                                                (Parm)
void USkeletalMeshComponent::SetAnimTreeTemplate(class UAnimTree* NewTemplate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAnimTreeTemplate");

	USkeletalMeshComponent_SetAnimTreeTemplate_Params params {};
	params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetClosestCollidingBoneLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     TestLocation                                               (Parm)
//		bool                                               bCheckZeroExtent                                           (Parm)
//		bool                                               bCheckNonZeroExtent                                        (Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector USkeletalMeshComponent::GetClosestCollidingBoneLocation(const struct FVector& TestLocation, bool bCheckZeroExtent, bool bCheckNonZeroExtent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClosestCollidingBoneLocation");

	USkeletalMeshComponent_GetClosestCollidingBoneLocation_Params params {};
	params.TestLocation = TestLocation;
	params.bCheckZeroExtent = bCheckZeroExtent;
	params.bCheckNonZeroExtent = bCheckNonZeroExtent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.FindClosestBone
//		Flags  -> ()
// Parameters:
//		struct FVector                                     TestLocation                                               (Parm)
//		struct FVector                                     BoneLocation                                               (OptionalParm, Parm, OutParm)
//		float                                              IgnoreScale                                                (OptionalParm, Parm)
//		struct FName                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FName USkeletalMeshComponent::FindClosestBone(const struct FVector& TestLocation, struct FVector* BoneLocation, float IgnoreScale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindClosestBone");

	USkeletalMeshComponent_FindClosestBone_Params params {};
	params.TestLocation = TestLocation;
	params.IgnoreScale = IgnoreScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (BoneLocation != nullptr)
		*BoneLocation = params.BoneLocation;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.TransformFromBoneSpace
//		Flags  -> ()
// Parameters:
//		struct FName                                       BoneName                                                   (Parm)
//		struct FVector                                     InPosition                                                 (Parm)
//		struct FRotator                                    InRotation                                                 (Parm)
//		struct FVector                                     OutPosition                                                (Parm, OutParm)
//		struct FRotator                                    OutRotation                                                (Parm, OutParm)
void USkeletalMeshComponent::TransformFromBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.TransformFromBoneSpace");

	USkeletalMeshComponent_TransformFromBoneSpace_Params params {};
	params.BoneName = BoneName;
	params.InPosition = InPosition;
	params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPosition != nullptr)
		*OutPosition = params.OutPosition;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.TransformToBoneSpace
//		Flags  -> ()
// Parameters:
//		struct FName                                       BoneName                                                   (Parm)
//		struct FVector                                     InPosition                                                 (Parm)
//		struct FRotator                                    InRotation                                                 (Parm)
//		struct FVector                                     OutPosition                                                (Parm, OutParm)
//		struct FRotator                                    OutRotation                                                (Parm, OutParm)
void USkeletalMeshComponent::TransformToBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.TransformToBoneSpace");

	USkeletalMeshComponent_TransformToBoneSpace_Params params {};
	params.BoneName = BoneName;
	params.InPosition = InPosition;
	params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPosition != nullptr)
		*OutPosition = params.OutPosition;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetBoneAxis
//		Flags  -> ()
// Parameters:
//		struct FName                                       BoneName                                                   (Parm)
//		TEnumAsByte<Core_EAxis>                            Axis                                                       (Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector USkeletalMeshComponent::GetBoneAxis(const struct FName& BoneName, TEnumAsByte<Core_EAxis> Axis)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneAxis");

	USkeletalMeshComponent_GetBoneAxis_Params params {};
	params.BoneName = BoneName;
	params.Axis = Axis;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetRefPosePosition
//		Flags  -> ()
// Parameters:
//		int                                                BoneIndex                                                  (Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector USkeletalMeshComponent::GetRefPosePosition(int BoneIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetRefPosePosition");

	USkeletalMeshComponent_GetRefPosePosition_Params params {};
	params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.BoneIsChildOf
//		Flags  -> ()
// Parameters:
//		struct FName                                       BoneName                                                   (Parm)
//		struct FName                                       ParentBoneName                                             (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USkeletalMeshComponent::BoneIsChildOf(const struct FName& BoneName, const struct FName& ParentBoneName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.BoneIsChildOf");

	USkeletalMeshComponent_BoneIsChildOf_Params params {};
	params.BoneName = BoneName;
	params.ParentBoneName = ParentBoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetBoneNames
//		Flags  -> ()
// Parameters:
//		TArray<struct FName>                               BoneNames                                                  (Parm, OutParm, NeedCtorLink)
void USkeletalMeshComponent::GetBoneNames(TArray<struct FName>* BoneNames)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneNames");

	USkeletalMeshComponent_GetBoneNames_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (BoneNames != nullptr)
		*BoneNames = params.BoneNames;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetParentBone
//		Flags  -> ()
// Parameters:
//		struct FName                                       BoneName                                                   (Parm)
//		struct FName                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FName USkeletalMeshComponent::GetParentBone(const struct FName& BoneName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetParentBone");

	USkeletalMeshComponent_GetParentBone_Params params {};
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetBoneMatrix
//		Flags  -> ()
// Parameters:
//		int                                                BoneIndex                                                  (Parm)
//		struct FMatrix                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FMatrix USkeletalMeshComponent::GetBoneMatrix(int BoneIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneMatrix");

	USkeletalMeshComponent_GetBoneMatrix_Params params {};
	params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetBoneName
//		Flags  -> ()
// Parameters:
//		int                                                BoneIndex                                                  (Parm)
//		struct FName                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FName USkeletalMeshComponent::GetBoneName(int BoneIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneName");

	USkeletalMeshComponent_GetBoneName_Params params {};
	params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.MatchRefBone
//		Flags  -> ()
// Parameters:
//		struct FName                                       BoneName                                                   (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USkeletalMeshComponent::MatchRefBone(const struct FName& BoneName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.MatchRefBone");

	USkeletalMeshComponent_MatchRefBone_Params params {};
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetBoneLocation
//		Flags  -> ()
// Parameters:
//		struct FName                                       BoneName                                                   (Parm)
//		int                                                Space                                                      (OptionalParm, Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector USkeletalMeshComponent::GetBoneLocation(const struct FName& BoneName, int Space)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneLocation");

	USkeletalMeshComponent_GetBoneLocation_Params params {};
	params.BoneName = BoneName;
	params.Space = Space;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetBoneQuaternion
//		Flags  -> ()
// Parameters:
//		struct FName                                       BoneName                                                   (Parm)
//		int                                                Space                                                      (OptionalParm, Parm)
//		struct FQuat                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FQuat USkeletalMeshComponent::GetBoneQuaternion(const struct FName& BoneName, int Space)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneQuaternion");

	USkeletalMeshComponent_GetBoneQuaternion_Params params {};
	params.BoneName = BoneName;
	params.Space = Space;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.FindMorphNode
//		Flags  -> ()
// Parameters:
//		struct FName                                       InNodeName                                                 (Parm)
//		class UMorphNodeBase*                              ReturnValue                                                (Parm, OutParm, ReturnParm)
class UMorphNodeBase* USkeletalMeshComponent::FindMorphNode(const struct FName& InNodeName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindMorphNode");

	USkeletalMeshComponent_FindMorphNode_Params params {};
	params.InNodeName = InNodeName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.FindSkelControl
//		Flags  -> ()
// Parameters:
//		struct FName                                       InControlName                                              (Parm)
//		class USkelControlBase*                            ReturnValue                                                (Parm, OutParm, ReturnParm)
class USkelControlBase* USkeletalMeshComponent::FindSkelControl(const struct FName& InControlName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindSkelControl");

	USkeletalMeshComponent_FindSkelControl_Params params {};
	params.InControlName = InControlName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.AllAnimNodes
//		Flags  -> ()
// Parameters:
//		class UClass*                                      BaseClass                                                  (Parm)
//		class UAnimNode*                                   Node                                                       (Parm, OutParm)
void USkeletalMeshComponent::AllAnimNodes(class UClass* BaseClass, class UAnimNode** Node)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AllAnimNodes");

	USkeletalMeshComponent_AllAnimNodes_Params params {};
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Node != nullptr)
		*Node = params.Node;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.FindAnimNode
//		Flags  -> ()
// Parameters:
//		struct FName                                       InNodeName                                                 (Parm)
//		class UAnimNode*                                   ReturnValue                                                (Parm, OutParm, ReturnParm)
class UAnimNode* USkeletalMeshComponent::FindAnimNode(const struct FName& InNodeName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindAnimNode");

	USkeletalMeshComponent_FindAnimNode_Params params {};
	params.InNodeName = InNodeName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.FindMorphTarget
//		Flags  -> ()
// Parameters:
//		struct FName                                       MorphTargetName                                            (Parm)
//		class UMorphTarget*                                ReturnValue                                                (Parm, OutParm, ReturnParm)
class UMorphTarget* USkeletalMeshComponent::FindMorphTarget(const struct FName& MorphTargetName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindMorphTarget");

	USkeletalMeshComponent_FindMorphTarget_Params params {};
	params.MorphTargetName = MorphTargetName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetAnimLength
//		Flags  -> ()
// Parameters:
//		struct FName                                       AnimSeqName                                                (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float USkeletalMeshComponent::GetAnimLength(const struct FName& AnimSeqName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetAnimLength");

	USkeletalMeshComponent_GetAnimLength_Params params {};
	params.AnimSeqName = AnimSeqName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetAnimRateByDuration
//		Flags  -> ()
// Parameters:
//		struct FName                                       AnimSeqName                                                (Parm)
//		float                                              Duration                                                   (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float USkeletalMeshComponent::GetAnimRateByDuration(const struct FName& AnimSeqName, float Duration)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetAnimRateByDuration");

	USkeletalMeshComponent_GetAnimRateByDuration_Params params {};
	params.AnimSeqName = AnimSeqName;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.RestoreSavedAnimSets
//		Flags  -> ()
void USkeletalMeshComponent::RestoreSavedAnimSets()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.RestoreSavedAnimSets");

	USkeletalMeshComponent_RestoreSavedAnimSets_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SaveAnimSets
//		Flags  -> ()
void USkeletalMeshComponent::SaveAnimSets()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SaveAnimSets");

	USkeletalMeshComponent_SaveAnimSets_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.FindAnimSequence
//		Flags  -> ()
// Parameters:
//		struct FName                                       AnimSeqName                                                (Parm)
//		class UAnimSequence*                               ReturnValue                                                (Parm, OutParm, ReturnParm)
class UAnimSequence* USkeletalMeshComponent::FindAnimSequence(const struct FName& AnimSeqName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindAnimSequence");

	USkeletalMeshComponent_FindAnimSequence_Params params {};
	params.AnimSeqName = AnimSeqName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.WakeSoftBody
//		Flags  -> ()
void USkeletalMeshComponent::WakeSoftBody()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.WakeSoftBody");

	USkeletalMeshComponent_WakeSoftBody_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetSoftBodyFrozen
//		Flags  -> ()
// Parameters:
//		bool                                               bNewFrozen                                                 (Parm)
void USkeletalMeshComponent::SetSoftBodyFrozen(bool bNewFrozen)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetSoftBodyFrozen");

	USkeletalMeshComponent_SetSoftBodyFrozen_Params params {};
	params.bNewFrozen = bNewFrozen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.UpdateSoftBodyParams
//		Flags  -> ()
void USkeletalMeshComponent::UpdateSoftBodyParams()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateSoftBodyParams");

	USkeletalMeshComponent_UpdateSoftBodyParams_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetClothValidBounds
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ClothValidBoundsMin                                        (Parm)
//		struct FVector                                     ClothValidBoundsMax                                        (Parm)
void USkeletalMeshComponent::SetClothValidBounds(const struct FVector& ClothValidBoundsMin, const struct FVector& ClothValidBoundsMax)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothValidBounds");

	USkeletalMeshComponent_SetClothValidBounds_Params params {};
	params.ClothValidBoundsMin = ClothValidBoundsMin;
	params.ClothValidBoundsMax = ClothValidBoundsMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.EnableClothValidBounds
//		Flags  -> ()
// Parameters:
//		bool                                               IfEnableClothValidBounds                                   (Parm)
void USkeletalMeshComponent::EnableClothValidBounds(bool IfEnableClothValidBounds)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.EnableClothValidBounds");

	USkeletalMeshComponent_EnableClothValidBounds_Params params {};
	params.IfEnableClothValidBounds = IfEnableClothValidBounds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.AttachClothToCollidingShapes
//		Flags  -> ()
// Parameters:
//		bool                                               AttatchTwoWay                                              (Parm)
//		bool                                               AttachTearable                                             (Parm)
void USkeletalMeshComponent::AttachClothToCollidingShapes(bool AttatchTwoWay, bool AttachTearable)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AttachClothToCollidingShapes");

	USkeletalMeshComponent_AttachClothToCollidingShapes_Params params {};
	params.AttatchTwoWay = AttatchTwoWay;
	params.AttachTearable = AttachTearable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetClothVelocity
//		Flags  -> ()
// Parameters:
//		struct FVector                                     VelocityOffSet                                             (Parm)
void USkeletalMeshComponent::SetClothVelocity(const struct FVector& VelocityOffSet)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothVelocity");

	USkeletalMeshComponent_SetClothVelocity_Params params {};
	params.VelocityOffSet = VelocityOffSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetClothPosition
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ClothOffSet                                                (Parm)
void USkeletalMeshComponent::SetClothPosition(const struct FVector& ClothOffSet)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothPosition");

	USkeletalMeshComponent_SetClothPosition_Params params {};
	params.ClothOffSet = ClothOffSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetClothSleep
//		Flags  -> ()
// Parameters:
//		bool                                               IfClothSleep                                               (Parm)
void USkeletalMeshComponent::SetClothSleep(bool IfClothSleep)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothSleep");

	USkeletalMeshComponent_SetClothSleep_Params params {};
	params.IfClothSleep = IfClothSleep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetClothThickness
//		Flags  -> ()
// Parameters:
//		float                                              ClothThickness                                             (Parm)
void USkeletalMeshComponent::SetClothThickness(float ClothThickness)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothThickness");

	USkeletalMeshComponent_SetClothThickness_Params params {};
	params.ClothThickness = ClothThickness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetClothTearFactor
//		Flags  -> ()
// Parameters:
//		float                                              ClothTearFactor                                            (Parm)
void USkeletalMeshComponent::SetClothTearFactor(float ClothTearFactor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothTearFactor");

	USkeletalMeshComponent_SetClothTearFactor_Params params {};
	params.ClothTearFactor = ClothTearFactor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetClothStretchingStiffness
//		Flags  -> ()
// Parameters:
//		float                                              ClothStretchingStiffness                                   (Parm)
void USkeletalMeshComponent::SetClothStretchingStiffness(float ClothStretchingStiffness)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothStretchingStiffness");

	USkeletalMeshComponent_SetClothStretchingStiffness_Params params {};
	params.ClothStretchingStiffness = ClothStretchingStiffness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetClothSolverIterations
//		Flags  -> ()
// Parameters:
//		int                                                ClothSolverIterations                                      (Parm)
void USkeletalMeshComponent::SetClothSolverIterations(int ClothSolverIterations)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothSolverIterations");

	USkeletalMeshComponent_SetClothSolverIterations_Params params {};
	params.ClothSolverIterations = ClothSolverIterations;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetClothSleepLinearVelocity
//		Flags  -> ()
// Parameters:
//		float                                              ClothSleepLinearVelocity                                   (Parm)
void USkeletalMeshComponent::SetClothSleepLinearVelocity(float ClothSleepLinearVelocity)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothSleepLinearVelocity");

	USkeletalMeshComponent_SetClothSleepLinearVelocity_Params params {};
	params.ClothSleepLinearVelocity = ClothSleepLinearVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetClothPressure
//		Flags  -> ()
// Parameters:
//		float                                              ClothPressure                                              (Parm)
void USkeletalMeshComponent::SetClothPressure(float ClothPressure)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothPressure");

	USkeletalMeshComponent_SetClothPressure_Params params {};
	params.ClothPressure = ClothPressure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetClothFriction
//		Flags  -> ()
// Parameters:
//		float                                              ClothFriction                                              (Parm)
void USkeletalMeshComponent::SetClothFriction(float ClothFriction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothFriction");

	USkeletalMeshComponent_SetClothFriction_Params params {};
	params.ClothFriction = ClothFriction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetClothFlags
//		Flags  -> ()
// Parameters:
//		int                                                ClothFlags                                                 (Parm)
void USkeletalMeshComponent::SetClothFlags(int ClothFlags)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothFlags");

	USkeletalMeshComponent_SetClothFlags_Params params {};
	params.ClothFlags = ClothFlags;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetClothDampingCoefficient
//		Flags  -> ()
// Parameters:
//		float                                              ClothDampingCoefficient                                    (Parm)
void USkeletalMeshComponent::SetClothDampingCoefficient(float ClothDampingCoefficient)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothDampingCoefficient");

	USkeletalMeshComponent_SetClothDampingCoefficient_Params params {};
	params.ClothDampingCoefficient = ClothDampingCoefficient;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetClothCollisionResponseCoefficient
//		Flags  -> ()
// Parameters:
//		float                                              ClothCollisionResponseCoefficient                          (Parm)
void USkeletalMeshComponent::SetClothCollisionResponseCoefficient(float ClothCollisionResponseCoefficient)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothCollisionResponseCoefficient");

	USkeletalMeshComponent_SetClothCollisionResponseCoefficient_Params params {};
	params.ClothCollisionResponseCoefficient = ClothCollisionResponseCoefficient;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetClothBendingStiffness
//		Flags  -> ()
// Parameters:
//		float                                              ClothBendingStiffness                                      (Parm)
void USkeletalMeshComponent::SetClothBendingStiffness(float ClothBendingStiffness)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothBendingStiffness");

	USkeletalMeshComponent_SetClothBendingStiffness_Params params {};
	params.ClothBendingStiffness = ClothBendingStiffness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetClothAttachmentTearFactor
//		Flags  -> ()
// Parameters:
//		float                                              ClothAttachTearFactor                                      (Parm)
void USkeletalMeshComponent::SetClothAttachmentTearFactor(float ClothAttachTearFactor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothAttachmentTearFactor");

	USkeletalMeshComponent_SetClothAttachmentTearFactor_Params params {};
	params.ClothAttachTearFactor = ClothAttachTearFactor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetClothAttachmentResponseCoefficient
//		Flags  -> ()
// Parameters:
//		float                                              ClothAttachmentResponseCoefficient                         (Parm)
void USkeletalMeshComponent::SetClothAttachmentResponseCoefficient(float ClothAttachmentResponseCoefficient)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothAttachmentResponseCoefficient");

	USkeletalMeshComponent_SetClothAttachmentResponseCoefficient_Params params {};
	params.ClothAttachmentResponseCoefficient = ClothAttachmentResponseCoefficient;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetClothThickness
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float USkeletalMeshComponent::GetClothThickness()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothThickness");

	USkeletalMeshComponent_GetClothThickness_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetClothTearFactor
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float USkeletalMeshComponent::GetClothTearFactor()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothTearFactor");

	USkeletalMeshComponent_GetClothTearFactor_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetClothStretchingStiffness
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float USkeletalMeshComponent::GetClothStretchingStiffness()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothStretchingStiffness");

	USkeletalMeshComponent_GetClothStretchingStiffness_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetClothSolverIterations
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USkeletalMeshComponent::GetClothSolverIterations()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothSolverIterations");

	USkeletalMeshComponent_GetClothSolverIterations_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetClothSleepLinearVelocity
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float USkeletalMeshComponent::GetClothSleepLinearVelocity()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothSleepLinearVelocity");

	USkeletalMeshComponent_GetClothSleepLinearVelocity_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetClothPressure
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float USkeletalMeshComponent::GetClothPressure()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothPressure");

	USkeletalMeshComponent_GetClothPressure_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetClothFriction
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float USkeletalMeshComponent::GetClothFriction()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothFriction");

	USkeletalMeshComponent_GetClothFriction_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetClothFlags
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USkeletalMeshComponent::GetClothFlags()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothFlags");

	USkeletalMeshComponent_GetClothFlags_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetClothDampingCoefficient
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float USkeletalMeshComponent::GetClothDampingCoefficient()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothDampingCoefficient");

	USkeletalMeshComponent_GetClothDampingCoefficient_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetClothCollisionResponseCoefficient
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float USkeletalMeshComponent::GetClothCollisionResponseCoefficient()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothCollisionResponseCoefficient");

	USkeletalMeshComponent_GetClothCollisionResponseCoefficient_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetClothBendingStiffness
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float USkeletalMeshComponent::GetClothBendingStiffness()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothBendingStiffness");

	USkeletalMeshComponent_GetClothBendingStiffness_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetClothAttachmentTearFactor
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float USkeletalMeshComponent::GetClothAttachmentTearFactor()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothAttachmentTearFactor");

	USkeletalMeshComponent_GetClothAttachmentTearFactor_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetClothAttachmentResponseCoefficient
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float USkeletalMeshComponent::GetClothAttachmentResponseCoefficient()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothAttachmentResponseCoefficient");

	USkeletalMeshComponent_GetClothAttachmentResponseCoefficient_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.ForceApexClothingTeleport
//		Flags  -> ()
void USkeletalMeshComponent::ForceApexClothingTeleport()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ForceApexClothingTeleport");

	USkeletalMeshComponent_ForceApexClothingTeleport_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.ForceApexClothingTeleportAndReset
//		Flags  -> ()
void USkeletalMeshComponent::ForceApexClothingTeleportAndReset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ForceApexClothingTeleportAndReset");

	USkeletalMeshComponent_ForceApexClothingTeleportAndReset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.ResetClothVertsToRefPose
//		Flags  -> ()
void USkeletalMeshComponent::ResetClothVertsToRefPose()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ResetClothVertsToRefPose");

	USkeletalMeshComponent_ResetClothVertsToRefPose_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetAttachClothVertsToBaseBody
//		Flags  -> ()
// Parameters:
//		bool                                               bAttachVerts                                               (Parm)
void USkeletalMeshComponent::SetAttachClothVertsToBaseBody(bool bAttachVerts)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAttachClothVertsToBaseBody");

	USkeletalMeshComponent_SetAttachClothVertsToBaseBody_Params params {};
	params.bAttachVerts = bAttachVerts;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetClothExternalForce
//		Flags  -> ()
// Parameters:
//		struct FVector                                     InForce                                                    (Parm)
void USkeletalMeshComponent::SetClothExternalForce(const struct FVector& InForce)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothExternalForce");

	USkeletalMeshComponent_SetClothExternalForce_Params params {};
	params.InForce = InForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.UpdateClothParams
//		Flags  -> ()
void USkeletalMeshComponent::UpdateClothParams()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateClothParams");

	USkeletalMeshComponent_UpdateClothParams_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetEnableClothingSimulation
//		Flags  -> ()
// Parameters:
//		bool                                               bInEnable                                                  (Parm)
void USkeletalMeshComponent::SetEnableClothingSimulation(bool bInEnable)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetEnableClothingSimulation");

	USkeletalMeshComponent_SetEnableClothingSimulation_Params params {};
	params.bInEnable = bInEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetClothFrozen
//		Flags  -> ()
// Parameters:
//		bool                                               bNewFrozen                                                 (Parm)
void USkeletalMeshComponent::SetClothFrozen(bool bNewFrozen)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothFrozen");

	USkeletalMeshComponent_SetClothFrozen_Params params {};
	params.bNewFrozen = bNewFrozen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetEnableClothSimulation
//		Flags  -> ()
// Parameters:
//		bool                                               bInEnable                                                  (Parm)
void USkeletalMeshComponent::SetEnableClothSimulation(bool bInEnable)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetEnableClothSimulation");

	USkeletalMeshComponent_SetEnableClothSimulation_Params params {};
	params.bInEnable = bInEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetForceRefPose
//		Flags  -> ()
// Parameters:
//		bool                                               bNewForceRefPose                                           (Parm)
void USkeletalMeshComponent::SetForceRefPose(bool bNewForceRefPose)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetForceRefPose");

	USkeletalMeshComponent_SetForceRefPose_Params params {};
	params.bNewForceRefPose = bNewForceRefPose;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetPhysicsAsset
//		Flags  -> ()
// Parameters:
//		class UPhysicsAsset*                               NewPhysicsAsset                                            (Parm)
//		bool                                               bForceReInit                                               (OptionalParm, Parm)
void USkeletalMeshComponent::SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetPhysicsAsset");

	USkeletalMeshComponent_SetPhysicsAsset_Params params {};
	params.NewPhysicsAsset = NewPhysicsAsset;
	params.bForceReInit = bForceReInit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.SetSkeletalMesh
//		Flags  -> ()
// Parameters:
//		class USkeletalMesh*                               NewMesh                                                    (Parm)
//		bool                                               bKeepSpaceBases                                            (OptionalParm, Parm)
void USkeletalMeshComponent::SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bKeepSpaceBases)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetSkeletalMesh");

	USkeletalMeshComponent_SetSkeletalMesh_Params params {};
	params.NewMesh = NewMesh;
	params.bKeepSpaceBases = bKeepSpaceBases;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetTransformMatrix
//		Flags  -> ()
// Parameters:
//		struct FMatrix                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FMatrix USkeletalMeshComponent::GetTransformMatrix()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetTransformMatrix");

	USkeletalMeshComponent_GetTransformMatrix_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.AttachedComponents
//		Flags  -> ()
// Parameters:
//		class UClass*                                      BaseClass                                                  (Parm)
//		class UActorComponent*                             OutComponent                                               (Parm, OutParm, EditInline)
void USkeletalMeshComponent::AttachedComponents(class UClass* BaseClass, class UActorComponent** OutComponent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AttachedComponents");

	USkeletalMeshComponent_AttachedComponents_Params params {};
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutComponent != nullptr)
		*OutComponent = params.OutComponent;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.IsComponentAttached
//		Flags  -> ()
// Parameters:
//		class UActorComponent*                             Component                                                  (Parm, EditInline)
//		struct FName                                       BoneName                                                   (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USkeletalMeshComponent::IsComponentAttached(class UActorComponent* Component, const struct FName& BoneName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsComponentAttached");

	USkeletalMeshComponent_IsComponentAttached_Params params {};
	params.Component = Component;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.FindComponentAttachedToBone
//		Flags  -> ()
// Parameters:
//		struct FName                                       InBoneName                                                 (Parm)
//		class UActorComponent*                             ReturnValue                                                (Parm, OutParm, ReturnParm, EditInline)
class UActorComponent* USkeletalMeshComponent::FindComponentAttachedToBone(const struct FName& InBoneName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindComponentAttachedToBone");

	USkeletalMeshComponent_FindComponentAttachedToBone_Params params {};
	params.InBoneName = InBoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetSocketBoneName
//		Flags  -> ()
// Parameters:
//		struct FName                                       InSocketName                                               (Parm)
//		struct FName                                       ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FName USkeletalMeshComponent::GetSocketBoneName(const struct FName& InSocketName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetSocketBoneName");

	USkeletalMeshComponent_GetSocketBoneName_Params params {};
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetSocketByName
//		Flags  -> ()
// Parameters:
//		struct FName                                       InSocketName                                               (Parm)
//		class USkeletalMeshSocket*                         ReturnValue                                                (Parm, OutParm, ReturnParm)
class USkeletalMeshSocket* USkeletalMeshComponent::GetSocketByName(const struct FName& InSocketName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetSocketByName");

	USkeletalMeshComponent_GetSocketByName_Params params {};
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.GetSocketWorldLocationAndRotation
//		Flags  -> ()
// Parameters:
//		struct FName                                       InSocketName                                               (Parm)
//		struct FVector                                     OutLocation                                                (Parm, OutParm)
//		struct FRotator                                    OutRotation                                                (OptionalParm, Parm, OutParm)
//		int                                                Space                                                      (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USkeletalMeshComponent::GetSocketWorldLocationAndRotation(const struct FName& InSocketName, struct FVector* OutLocation, struct FRotator* OutRotation, int Space)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetSocketWorldLocationAndRotation");

	USkeletalMeshComponent_GetSocketWorldLocationAndRotation_Params params {};
	params.InSocketName = InSocketName;
	params.Space = Space;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutLocation != nullptr)
		*OutLocation = params.OutLocation;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.AttachComponentToSocketEx
//		Flags  -> ()
// Parameters:
//		class UActorComponent*                             Component                                                  (Parm, EditInline)
//		struct FName                                       SocketName                                                 (Parm)
//		struct FVector                                     RelativeLocation                                           (Parm)
//		struct FRotator                                    RelativeRotation                                           (Parm)
//		struct FVector                                     RelativeScale                                              (Parm)
//		bool                                               bIgnoreAttachLocation                                      (Parm)
//		bool                                               bIgnoreAttachRotation                                      (Parm)
//		bool                                               bIgnoreAttachWorldRotation                                 (Parm)
//		float                                              ModifyParentVelocity                                       (Parm)
//		float                                              ModifyParentAcceleration                                   (Parm)
void USkeletalMeshComponent::AttachComponentToSocketEx(class UActorComponent* Component, const struct FName& SocketName, const struct FVector& RelativeLocation, const struct FRotator& RelativeRotation, const struct FVector& RelativeScale, bool bIgnoreAttachLocation, bool bIgnoreAttachRotation, bool bIgnoreAttachWorldRotation, float ModifyParentVelocity, float ModifyParentAcceleration)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AttachComponentToSocketEx");

	USkeletalMeshComponent_AttachComponentToSocketEx_Params params {};
	params.Component = Component;
	params.SocketName = SocketName;
	params.RelativeLocation = RelativeLocation;
	params.RelativeRotation = RelativeRotation;
	params.RelativeScale = RelativeScale;
	params.bIgnoreAttachLocation = bIgnoreAttachLocation;
	params.bIgnoreAttachRotation = bIgnoreAttachRotation;
	params.bIgnoreAttachWorldRotation = bIgnoreAttachWorldRotation;
	params.ModifyParentVelocity = ModifyParentVelocity;
	params.ModifyParentAcceleration = ModifyParentAcceleration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.AttachComponentEx
//		Flags  -> ()
// Parameters:
//		class UActorComponent*                             Component                                                  (Parm, EditInline)
//		struct FName                                       BoneName                                                   (Parm)
//		struct FVector                                     RelativeLocation                                           (Parm)
//		struct FRotator                                    RelativeRotation                                           (Parm)
//		struct FVector                                     RelativeScale                                              (Parm)
//		bool                                               bIgnoreAttachLocation                                      (Parm)
//		bool                                               bIgnoreAttachRotation                                      (Parm)
//		bool                                               bIgnoreAttachWorldRotation                                 (Parm)
//		float                                              ModifyParentVelocity                                       (Parm)
//		float                                              ModifyParentAcceleration                                   (Parm)
//		int                                                SocketIndex                                                (Parm)
void USkeletalMeshComponent::AttachComponentEx(class UActorComponent* Component, const struct FName& BoneName, const struct FVector& RelativeLocation, const struct FRotator& RelativeRotation, const struct FVector& RelativeScale, bool bIgnoreAttachLocation, bool bIgnoreAttachRotation, bool bIgnoreAttachWorldRotation, float ModifyParentVelocity, float ModifyParentAcceleration, int SocketIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AttachComponentEx");

	USkeletalMeshComponent_AttachComponentEx_Params params {};
	params.Component = Component;
	params.BoneName = BoneName;
	params.RelativeLocation = RelativeLocation;
	params.RelativeRotation = RelativeRotation;
	params.RelativeScale = RelativeScale;
	params.bIgnoreAttachLocation = bIgnoreAttachLocation;
	params.bIgnoreAttachRotation = bIgnoreAttachRotation;
	params.bIgnoreAttachWorldRotation = bIgnoreAttachWorldRotation;
	params.ModifyParentVelocity = ModifyParentVelocity;
	params.ModifyParentAcceleration = ModifyParentAcceleration;
	params.SocketIndex = SocketIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.AttachComponentToSocket
//		Flags  -> ()
// Parameters:
//		class UActorComponent*                             Component                                                  (Parm, EditInline)
//		struct FName                                       SocketName                                                 (Parm)
void USkeletalMeshComponent::AttachComponentToSocket(class UActorComponent* Component, const struct FName& SocketName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AttachComponentToSocket");

	USkeletalMeshComponent_AttachComponentToSocket_Params params {};
	params.Component = Component;
	params.SocketName = SocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.DetachComponent
//		Flags  -> ()
// Parameters:
//		class UActorComponent*                             Component                                                  (Parm, EditInline)
void USkeletalMeshComponent::DetachComponent(class UActorComponent* Component)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.DetachComponent");

	USkeletalMeshComponent_DetachComponent_Params params {};
	params.Component = Component;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkeletalMeshComponent.AttachComponent
//		Flags  -> ()
// Parameters:
//		class UActorComponent*                             Component                                                  (Parm, EditInline)
//		struct FName                                       BoneName                                                   (Parm)
//		struct FVector                                     RelativeLocation                                           (OptionalParm, Parm)
//		struct FRotator                                    RelativeRotation                                           (OptionalParm, Parm)
//		struct FVector                                     RelativeScale                                              (OptionalParm, Parm)
void USkeletalMeshComponent::AttachComponent(class UActorComponent* Component, const struct FName& BoneName, const struct FVector& RelativeLocation, const struct FRotator& RelativeRotation, const struct FVector& RelativeScale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AttachComponent");

	USkeletalMeshComponent_AttachComponent_Params params {};
	params.Component = Component;
	params.BoneName = BoneName;
	params.RelativeLocation = RelativeLocation;
	params.RelativeRotation = RelativeRotation;
	params.RelativeScale = RelativeScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineActor.OnToggleHidden
//		Flags  -> ()
// Parameters:
//		class USeqAct_ToggleHidden*                        Action                                                     (Parm)
void ASplineActor::OnToggleHidden(class USeqAct_ToggleHidden* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.OnToggleHidden");

	ASplineActor_OnToggleHidden_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineActor.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              inAction                                                   (Parm)
void ASplineActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.OnToggle");

	ASplineActor_OnToggle_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineActor.GetAllConnectedSplineActors
//		Flags  -> ()
// Parameters:
//		TArray<class ASplineActor*>                        OutSet                                                     (Parm, OutParm, NeedCtorLink)
void ASplineActor::GetAllConnectedSplineActors(TArray<class ASplineActor*>* OutSet)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.GetAllConnectedSplineActors");

	ASplineActor_GetAllConnectedSplineActors_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutSet != nullptr)
		*OutSet = params.OutSet;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineActor.FindSplinePathTo
//		Flags  -> ()
// Parameters:
//		class ASplineActor*                                Goal                                                       (Parm)
//		TArray<class ASplineActor*>                        OutRoute                                                   (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ASplineActor::FindSplinePathTo(class ASplineActor* Goal, TArray<class ASplineActor*>* OutRoute)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.FindSplinePathTo");

	ASplineActor_FindSplinePathTo_Params params {};
	params.Goal = Goal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutRoute != nullptr)
		*OutRoute = params.OutRoute;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineActor.GetBestConnectionInDirection
//		Flags  -> ()
// Parameters:
//		struct FVector                                     DesiredDir                                                 (Parm)
//		bool                                               bUseLinksFrom                                              (OptionalParm, Parm)
//		class ASplineActor*                                ReturnValue                                                (Parm, OutParm, ReturnParm)
class ASplineActor* ASplineActor::GetBestConnectionInDirection(const struct FVector& DesiredDir, bool bUseLinksFrom)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.GetBestConnectionInDirection");

	ASplineActor_GetBestConnectionInDirection_Params params {};
	params.DesiredDir = DesiredDir;
	params.bUseLinksFrom = bUseLinksFrom;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineActor.GetRandomConnection
//		Flags  -> ()
// Parameters:
//		bool                                               bUseLinksFrom                                              (OptionalParm, Parm)
//		class ASplineActor*                                ReturnValue                                                (Parm, OutParm, ReturnParm)
class ASplineActor* ASplineActor::GetRandomConnection(bool bUseLinksFrom)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.GetRandomConnection");

	ASplineActor_GetRandomConnection_Params params {};
	params.bUseLinksFrom = bUseLinksFrom;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineActor.BreakAllConnectionsFrom
//		Flags  -> ()
void ASplineActor::BreakAllConnectionsFrom()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.BreakAllConnectionsFrom");

	ASplineActor_BreakAllConnectionsFrom_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineActor.BreakAllConnections
//		Flags  -> ()
void ASplineActor::BreakAllConnections()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.BreakAllConnections");

	ASplineActor_BreakAllConnections_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineActor.BreakConnectionTo
//		Flags  -> ()
// Parameters:
//		class ASplineActor*                                NextActor                                                  (Parm)
void ASplineActor::BreakConnectionTo(class ASplineActor* NextActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.BreakConnectionTo");

	ASplineActor_BreakConnectionTo_Params params {};
	params.NextActor = NextActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineActor.FindTargetForComponent
//		Flags  -> ()
// Parameters:
//		class USplineComponent*                            SplineComp                                                 (Parm, EditInline)
//		class ASplineActor*                                ReturnValue                                                (Parm, OutParm, ReturnParm)
class ASplineActor* ASplineActor::FindTargetForComponent(class USplineComponent* SplineComp)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.FindTargetForComponent");

	ASplineActor_FindTargetForComponent_Params params {};
	params.SplineComp = SplineComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineActor.FindSplineComponentTo
//		Flags  -> ()
// Parameters:
//		class ASplineActor*                                NextActor                                                  (Parm)
//		class USplineComponent*                            ReturnValue                                                (Parm, OutParm, ReturnParm, EditInline)
class USplineComponent* ASplineActor::FindSplineComponentTo(class ASplineActor* NextActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.FindSplineComponentTo");

	ASplineActor_FindSplineComponentTo_Params params {};
	params.NextActor = NextActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineActor.IsConnectedTo
//		Flags  -> ()
// Parameters:
//		class ASplineActor*                                NextActor                                                  (Parm)
//		bool                                               bCheckForDisableDestination                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ASplineActor::IsConnectedTo(class ASplineActor* NextActor, bool bCheckForDisableDestination)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.IsConnectedTo");

	ASplineActor_IsConnectedTo_Params params {};
	params.NextActor = NextActor;
	params.bCheckForDisableDestination = bCheckForDisableDestination;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineActor.AddConnectionTo
//		Flags  -> ()
// Parameters:
//		class ASplineActor*                                NextActor                                                  (Parm)
void ASplineActor::AddConnectionTo(class ASplineActor* NextActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.AddConnectionTo");

	ASplineActor_AddConnectionTo_Params params {};
	params.NextActor = NextActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineActor.UpdateConnectedSplineComponents
//		Flags  -> ()
// Parameters:
//		bool                                               bFinish                                                    (Parm)
void ASplineActor::UpdateConnectedSplineComponents(bool bFinish)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.UpdateConnectedSplineComponents");

	ASplineActor_UpdateConnectedSplineComponents_Params params {};
	params.bFinish = bFinish;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineActor.UpdateSplineComponents
//		Flags  -> ()
void ASplineActor::UpdateSplineComponents()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.UpdateSplineComponents");

	ASplineActor_UpdateSplineComponents_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineActor.GetWorldSpaceTangent
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector ASplineActor::GetWorldSpaceTangent()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.GetWorldSpaceTangent");

	ASplineActor_GetWorldSpaceTangent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineLoftActor.UpdateSplineParams
//		Flags  -> ()
void ASplineLoftActor::UpdateSplineParams()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineLoftActor.UpdateSplineParams");

	ASplineLoftActor_UpdateSplineParams_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineLoftActor.ClearLoftMesh
//		Flags  -> ()
void ASplineLoftActor::ClearLoftMesh()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineLoftActor.ClearLoftMesh");

	ASplineLoftActor_ClearLoftMesh_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline
//		Flags  -> ()
// Parameters:
//		float                                              Distance                                                   (Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector USplineComponent::GetTangentAtDistanceAlongSpline(float Distance)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline");

	USplineComponent_GetTangentAtDistanceAlongSpline_Params params {};
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline
//		Flags  -> ()
// Parameters:
//		float                                              Distance                                                   (Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector USplineComponent::GetLocationAtDistanceAlongSpline(float Distance)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline");

	USplineComponent_GetLocationAtDistanceAlongSpline_Params params {};
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineComponent.GetSplineLength
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float USplineComponent::GetSplineLength()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetSplineLength");

	USplineComponent_GetSplineLength_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineComponent.UpdateSplineReparamTable
//		Flags  -> ()
void USplineComponent::UpdateSplineReparamTable()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.UpdateSplineReparamTable");

	USplineComponent_UpdateSplineReparamTable_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SplineComponent.UpdateSplineCurviness
//		Flags  -> ()
void USplineComponent::UpdateSplineCurviness()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.UpdateSplineCurviness");

	USplineComponent_UpdateSplineCurviness_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ProcBuilding.FindEdgeForTopLevelScope
//		Flags  -> ()
// Parameters:
//		int                                                TopLevelScopeIndex                                         (Parm)
//		TEnumAsByte<Engine_EScopeEdge>                     Edge                                                       (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int AProcBuilding::FindEdgeForTopLevelScope(int TopLevelScopeIndex, TEnumAsByte<Engine_EScopeEdge> Edge)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ProcBuilding.FindEdgeForTopLevelScope");

	AProcBuilding_FindEdgeForTopLevelScope_Params params {};
	params.TopLevelScopeIndex = TopLevelScopeIndex;
	params.Edge = Edge;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ProcBuilding.BreakFractureComponent
//		Flags  -> ()
// Parameters:
//		class UFracturedStaticMeshComponent*               Comp                                                       (Parm, EditInline)
//		struct FVector                                     BoxMin                                                     (Parm)
//		struct FVector                                     BoxMax                                                     (Parm)
void AProcBuilding::BreakFractureComponent(class UFracturedStaticMeshComponent* Comp, const struct FVector& BoxMin, const struct FVector& BoxMax)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ProcBuilding.BreakFractureComponent");

	AProcBuilding_BreakFractureComponent_Params params {};
	params.Comp = Comp;
	params.BoxMin = BoxMin;
	params.BoxMax = BoxMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ProcBuilding.GetAllGroupedProcBuildings
//		Flags  -> ()
// Parameters:
//		TArray<class AProcBuilding*>                       OutSet                                                     (Parm, OutParm, NeedCtorLink)
void AProcBuilding::GetAllGroupedProcBuildings(TArray<class AProcBuilding*>* OutSet)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ProcBuilding.GetAllGroupedProcBuildings");

	AProcBuilding_GetAllGroupedProcBuildings_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutSet != nullptr)
		*OutSet = params.OutSet;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ProcBuilding.GetBaseMostBuilding
//		Flags  -> ()
// Parameters:
//		class AProcBuilding*                               ReturnValue                                                (Parm, OutParm, ReturnParm)
class AProcBuilding* AProcBuilding::GetBaseMostBuilding()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ProcBuilding.GetBaseMostBuilding");

	AProcBuilding_GetBaseMostBuilding_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ProcBuilding.FindComponentsForTopLevelScope
//		Flags  -> ()
// Parameters:
//		int                                                TopLevelScopeIndex                                         (Parm)
//		TArray<class UStaticMeshComponent*>                ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink, EditInline)
TArray<class UStaticMeshComponent*> AProcBuilding::FindComponentsForTopLevelScope(int TopLevelScopeIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ProcBuilding.FindComponentsForTopLevelScope");

	AProcBuilding_FindComponentsForTopLevelScope_Params params {};
	params.TopLevelScopeIndex = TopLevelScopeIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ProcBuilding.ClearBuildingMeshes
//		Flags  -> ()
void AProcBuilding::ClearBuildingMeshes()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ProcBuilding.ClearBuildingMeshes");

	AProcBuilding_ClearBuildingMeshes_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoalFilter_OutSideOfDotProductWedge.OutsideOfDotProductWedge
//		Flags  -> ()
// Parameters:
//		class UNavMeshGoal_GenericFilterContainer*         FilterContainer                                            (Parm)
//		struct FVector                                     InLocation                                                 (Parm)
//		struct FRotator                                    InRotation                                                 (Parm)
//		float                                              InEpsilon                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavMeshGoalFilter_OutSideOfDotProductWedge::OutsideOfDotProductWedge(class UNavMeshGoal_GenericFilterContainer* FilterContainer, const struct FVector& InLocation, const struct FRotator& InRotation, float InEpsilon)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoalFilter_OutSideOfDotProductWedge.OutsideOfDotProductWedge");

	UNavMeshGoalFilter_OutSideOfDotProductWedge_OutsideOfDotProductWedge_Params params {};
	params.FilterContainer = FilterContainer;
	params.InLocation = InLocation;
	params.InRotation = InRotation;
	params.InEpsilon = InEpsilon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshPath_AlongLine.Recycle
//		Flags  -> ()
void UNavMeshPath_AlongLine::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_AlongLine.Recycle");

	UNavMeshPath_AlongLine_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshPath_AlongLine.AlongLine
//		Flags  -> ()
// Parameters:
//		class UNavigationHandle*                           NavHandle                                                  (Parm)
//		struct FVector                                     Dir                                                        (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavMeshPath_AlongLine::AlongLine(class UNavigationHandle* NavHandle, const struct FVector& Dir)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_AlongLine.AlongLine");

	UNavMeshPath_AlongLine_AlongLine_Params params {};
	params.NavHandle = NavHandle;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshPath_EnforceTwoWayEdges.EnforceTwoWayEdges
//		Flags  -> ()
// Parameters:
//		class UNavigationHandle*                           NavHandle                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavMeshPath_EnforceTwoWayEdges::EnforceTwoWayEdges(class UNavigationHandle* NavHandle)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_EnforceTwoWayEdges.EnforceTwoWayEdges");

	UNavMeshPath_EnforceTwoWayEdges_EnforceTwoWayEdges_Params params {};
	params.NavHandle = NavHandle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshPath_MinDistBetweenSpecsOfType.Recycle
//		Flags  -> ()
void UNavMeshPath_MinDistBetweenSpecsOfType::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_MinDistBetweenSpecsOfType.Recycle");

	UNavMeshPath_MinDistBetweenSpecsOfType_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshPath_MinDistBetweenSpecsOfType.EnforceMinDist
//		Flags  -> ()
// Parameters:
//		class UNavigationHandle*                           NavHandle                                                  (Parm)
//		float                                              InMinDist                                                  (Parm)
//		TEnumAsByte<Engine_ENavMeshEdgeType>               InEdgeType                                                 (Parm)
//		struct FVector                                     LastLocation                                               (OptionalParm, Parm)
//		float                                              InPenalty                                                  (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavMeshPath_MinDistBetweenSpecsOfType::EnforceMinDist(class UNavigationHandle* NavHandle, float InMinDist, TEnumAsByte<Engine_ENavMeshEdgeType> InEdgeType, const struct FVector& LastLocation, float InPenalty)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_MinDistBetweenSpecsOfType.EnforceMinDist");

	UNavMeshPath_MinDistBetweenSpecsOfType_EnforceMinDist_Params params {};
	params.NavHandle = NavHandle;
	params.InMinDist = InMinDist;
	params.InEdgeType = InEdgeType;
	params.LastLocation = LastLocation;
	params.InPenalty = InPenalty;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshPath_SameCoverLink.Recycle
//		Flags  -> ()
void UNavMeshPath_SameCoverLink::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_SameCoverLink.Recycle");

	UNavMeshPath_SameCoverLink_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshPath_SameCoverLink.SameCoverLink
//		Flags  -> ()
// Parameters:
//		class UNavigationHandle*                           NavHandle                                                  (Parm)
//		class ACoverLink*                                  InLink                                                     (Parm)
void UNavMeshPath_SameCoverLink::SameCoverLink(class UNavigationHandle* NavHandle, class ACoverLink* InLink)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_SameCoverLink.SameCoverLink");

	UNavMeshPath_SameCoverLink_SameCoverLink_Params params {};
	params.NavHandle = NavHandle;
	params.InLink = InLink;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverReplicator.ClientReceiveLinkDisabledState
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
//		class ACoverLink*                                  Link                                                       (Parm)
//		bool                                               bLinkDisabled                                              (Parm)
void ACoverReplicator::ClientReceiveLinkDisabledState(int Index, class ACoverLink* Link, bool bLinkDisabled)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveLinkDisabledState");

	ACoverReplicator_ClientReceiveLinkDisabledState_Params params {};
	params.Index = Index;
	params.Link = Link;
	params.bLinkDisabled = bLinkDisabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverReplicator.ServerSendLinkDisabledState
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
void ACoverReplicator::ServerSendLinkDisabledState(int Index)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendLinkDisabledState");

	ACoverReplicator_ServerSendLinkDisabledState_Params params {};
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverReplicator.NotifyLinkDisabledStateChange
//		Flags  -> ()
// Parameters:
//		class ACoverLink*                                  Link                                                       (Parm)
void ACoverReplicator::NotifyLinkDisabledStateChange(class ACoverLink* Link)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.NotifyLinkDisabledStateChange");

	ACoverReplicator_NotifyLinkDisabledStateChange_Params params {};
	params.Link = Link;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverReplicator.ClientReceiveManualCoverTypeSlots
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
//		class ACoverLink*                                  Link                                                       (Parm)
//		unsigned char                                      NumCoverTypesChanged                                       (Parm)
//		struct FManualCoverTypeInfo*                       SlotsCoverTypeChanged                                      (Parm)
//		bool                                               bDone                                                      (Parm)
void ACoverReplicator::ClientReceiveManualCoverTypeSlots(int Index, class ACoverLink* Link, unsigned char NumCoverTypesChanged, struct FManualCoverTypeInfo* SlotsCoverTypeChanged, bool bDone)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveManualCoverTypeSlots");

	ACoverReplicator_ClientReceiveManualCoverTypeSlots_Params params {};
	params.Index = Index;
	params.Link = Link;
	params.NumCoverTypesChanged = NumCoverTypesChanged;
	params.SlotsCoverTypeChanged = SlotsCoverTypeChanged;
	params.bDone = bDone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverReplicator.ServerSendManualCoverTypeSlots
//		Flags  -> (Net, NetReliable, Native, Static, Const, Private, Protected, NetServer, K2Call, K2Pure)
// Parameters:
//		int                                                Index                                                      (Parm)
void ACoverReplicator::STATIC_ServerSendManualCoverTypeSlots(int Index)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendManualCoverTypeSlots");

	ACoverReplicator_ServerSendManualCoverTypeSlots_Params params {};
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverReplicator.NotifySetManualCoverTypeForSlots
//		Flags  -> ()
// Parameters:
//		class ACoverLink*                                  Link                                                       (Parm)
//		TArray<int>                                        SlotIndices                                                (Const, Parm, OutParm, NeedCtorLink)
//		TEnumAsByte<Engine_ECoverType>                     NewCoverType                                               (Parm)
void ACoverReplicator::NotifySetManualCoverTypeForSlots(class ACoverLink* Link, TArray<int>* SlotIndices, TEnumAsByte<Engine_ECoverType> NewCoverType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.NotifySetManualCoverTypeForSlots");

	ACoverReplicator_NotifySetManualCoverTypeForSlots_Params params {};
	params.Link = Link;
	params.NewCoverType = NewCoverType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SlotIndices != nullptr)
		*SlotIndices = params.SlotIndices;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverReplicator.ClientReceiveAdjustedSlots
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
//		class ACoverLink*                                  Link                                                       (Parm)
//		unsigned char                                      NumSlotsAdjusted                                           (Parm)
//		unsigned char*                                     SlotsAdjusted                                              (Parm)
//		bool                                               bDone                                                      (Parm)
void ACoverReplicator::ClientReceiveAdjustedSlots(int Index, class ACoverLink* Link, unsigned char NumSlotsAdjusted, unsigned char* SlotsAdjusted, bool bDone)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveAdjustedSlots");

	ACoverReplicator_ClientReceiveAdjustedSlots_Params params {};
	params.Index = Index;
	params.Link = Link;
	params.NumSlotsAdjusted = NumSlotsAdjusted;
	params.SlotsAdjusted = SlotsAdjusted;
	params.bDone = bDone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverReplicator.ServerSendAdjustedSlots
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
void ACoverReplicator::ServerSendAdjustedSlots(int Index)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendAdjustedSlots");

	ACoverReplicator_ServerSendAdjustedSlots_Params params {};
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverReplicator.NotifyAutoAdjustSlots
//		Flags  -> ()
// Parameters:
//		class ACoverLink*                                  Link                                                       (Parm)
//		TArray<int>                                        SlotIndices                                                (Const, Parm, OutParm, NeedCtorLink)
void ACoverReplicator::NotifyAutoAdjustSlots(class ACoverLink* Link, TArray<int>* SlotIndices)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.NotifyAutoAdjustSlots");

	ACoverReplicator_NotifyAutoAdjustSlots_Params params {};
	params.Link = Link;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SlotIndices != nullptr)
		*SlotIndices = params.SlotIndices;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverReplicator.ClientReceiveDisabledSlots
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
//		class ACoverLink*                                  Link                                                       (Parm)
//		unsigned char                                      NumSlotsDisabled                                           (Parm)
//		unsigned char*                                     SlotsDisabled                                              (Parm)
//		bool                                               bDone                                                      (Parm)
void ACoverReplicator::ClientReceiveDisabledSlots(int Index, class ACoverLink* Link, unsigned char NumSlotsDisabled, unsigned char* SlotsDisabled, bool bDone)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveDisabledSlots");

	ACoverReplicator_ClientReceiveDisabledSlots_Params params {};
	params.Index = Index;
	params.Link = Link;
	params.NumSlotsDisabled = NumSlotsDisabled;
	params.SlotsDisabled = SlotsDisabled;
	params.bDone = bDone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverReplicator.ServerSendDisabledSlots
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
void ACoverReplicator::ServerSendDisabledSlots(int Index)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendDisabledSlots");

	ACoverReplicator_ServerSendDisabledSlots_Params params {};
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverReplicator.NotifyDisabledSlots
//		Flags  -> ()
// Parameters:
//		class ACoverLink*                                  Link                                                       (Parm)
//		TArray<int>                                        SlotIndices                                                (Const, Parm, OutParm, NeedCtorLink)
void ACoverReplicator::NotifyDisabledSlots(class ACoverLink* Link, TArray<int>* SlotIndices)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.NotifyDisabledSlots");

	ACoverReplicator_NotifyDisabledSlots_Params params {};
	params.Link = Link;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SlotIndices != nullptr)
		*SlotIndices = params.SlotIndices;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverReplicator.ClientReceiveEnabledSlots
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
//		class ACoverLink*                                  Link                                                       (Parm)
//		unsigned char                                      NumSlotsEnabled                                            (Parm)
//		unsigned char*                                     SlotsEnabled                                               (Parm)
//		bool                                               bDone                                                      (Parm)
void ACoverReplicator::ClientReceiveEnabledSlots(int Index, class ACoverLink* Link, unsigned char NumSlotsEnabled, unsigned char* SlotsEnabled, bool bDone)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveEnabledSlots");

	ACoverReplicator_ClientReceiveEnabledSlots_Params params {};
	params.Index = Index;
	params.Link = Link;
	params.NumSlotsEnabled = NumSlotsEnabled;
	params.SlotsEnabled = SlotsEnabled;
	params.bDone = bDone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverReplicator.ServerSendEnabledSlots
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
void ACoverReplicator::ServerSendEnabledSlots(int Index)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendEnabledSlots");

	ACoverReplicator_ServerSendEnabledSlots_Params params {};
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverReplicator.NotifyEnabledSlots
//		Flags  -> ()
// Parameters:
//		class ACoverLink*                                  Link                                                       (Parm)
//		TArray<int>                                        SlotIndices                                                (Const, Parm, OutParm, NeedCtorLink)
void ACoverReplicator::NotifyEnabledSlots(class ACoverLink* Link, TArray<int>* SlotIndices)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.NotifyEnabledSlots");

	ACoverReplicator_NotifyEnabledSlots_Params params {};
	params.Link = Link;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SlotIndices != nullptr)
		*SlotIndices = params.SlotIndices;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverReplicator.ClientReceiveInitialCoverReplicationInfo
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
//		class ACoverLink*                                  Link                                                       (Parm)
//		bool                                               bLinkDisabled                                              (Parm)
//		unsigned char                                      NumSlotsEnabled                                            (Parm)
//		unsigned char*                                     SlotsEnabled                                               (Parm)
//		unsigned char                                      NumSlotsDisabled                                           (Parm)
//		unsigned char*                                     SlotsDisabled                                              (Parm)
//		unsigned char                                      NumSlotsAdjusted                                           (Parm)
//		unsigned char*                                     SlotsAdjusted                                              (Parm)
//		unsigned char                                      NumCoverTypesChanged                                       (Parm)
//		struct FManualCoverTypeInfo*                       SlotsCoverTypeChanged                                      (Parm)
//		bool                                               bDone                                                      (Parm)
void ACoverReplicator::ClientReceiveInitialCoverReplicationInfo(int Index, class ACoverLink* Link, bool bLinkDisabled, unsigned char NumSlotsEnabled, unsigned char* SlotsEnabled, unsigned char NumSlotsDisabled, unsigned char* SlotsDisabled, unsigned char NumSlotsAdjusted, unsigned char* SlotsAdjusted, unsigned char NumCoverTypesChanged, struct FManualCoverTypeInfo* SlotsCoverTypeChanged, bool bDone)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveInitialCoverReplicationInfo");

	ACoverReplicator_ClientReceiveInitialCoverReplicationInfo_Params params {};
	params.Index = Index;
	params.Link = Link;
	params.bLinkDisabled = bLinkDisabled;
	params.NumSlotsEnabled = NumSlotsEnabled;
	params.SlotsEnabled = SlotsEnabled;
	params.NumSlotsDisabled = NumSlotsDisabled;
	params.SlotsDisabled = SlotsDisabled;
	params.NumSlotsAdjusted = NumSlotsAdjusted;
	params.SlotsAdjusted = SlotsAdjusted;
	params.NumCoverTypesChanged = NumCoverTypesChanged;
	params.SlotsCoverTypeChanged = SlotsCoverTypeChanged;
	params.bDone = bDone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverReplicator.ServerSendInitialCoverReplicationInfo
//		Flags  -> (NetReliable, Exec, Static, HasOptionalParms, Private, Protected, NetServer, K2Call, K2Pure)
// Parameters:
//		int                                                Index                                                      (Parm)
void ACoverReplicator::STATIC_ServerSendInitialCoverReplicationInfo(int Index)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendInitialCoverReplicationInfo");

	ACoverReplicator_ServerSendInitialCoverReplicationInfo_Params params {};
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverReplicator.ClientSetOwner
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           PC                                                         (Parm)
void ACoverReplicator::ClientSetOwner(class APlayerController* PC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientSetOwner");

	ACoverReplicator_ClientSetOwner_Params params {};
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverReplicator.ReplicateInitialCoverInfo
//		Flags  -> ()
void ACoverReplicator::ReplicateInitialCoverInfo()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ReplicateInitialCoverInfo");

	ACoverReplicator_ReplicateInitialCoverInfo_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CoverReplicator.PurgeOldEntries
//		Flags  -> ()
void ACoverReplicator::PurgeOldEntries()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.PurgeOldEntries");

	ACoverReplicator_PurgeOldEntries_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameMessage.GetString
//		Flags  -> ()
// Parameters:
//		int                                                Switch                                                     (OptionalParm, Parm)
//		bool                                               bPRI1HUD                                                   (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_2                                               (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_3                                               (OptionalParm, Parm)
//		class UObject*                                     OptionalObject                                             (OptionalParm, Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UGameMessage::GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameMessage.GetString");

	UGameMessage_GetString_Params params {};
	params.Switch = Switch;
	params.bPRI1HUD = bPRI1HUD;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_ToggleHUD.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_ToggleHUD::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ToggleHUD.GetObjClassVersion");

	USeqAct_ToggleHUD_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_ConsoleCommand.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_ConsoleCommand::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ConsoleCommand.GetObjClassVersion");

	USeqAct_ConsoleCommand_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_ConsoleCommand.VersionUpdated
//		Flags  -> ()
// Parameters:
//		int                                                OldVersion                                                 (Parm)
//		int                                                NewVersion                                                 (Parm)
void USeqAct_ConsoleCommand::VersionUpdated(int OldVersion, int NewVersion)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ConsoleCommand.VersionUpdated");

	USeqAct_ConsoleCommand_VersionUpdated_Params params {};
	params.OldVersion = OldVersion;
	params.NewVersion = NewVersion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_SetSoundMode.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_SetSoundMode::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetSoundMode.GetObjClassVersion");

	USeqAct_SetSoundMode_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_SetSoundMode.Activated
//		Flags  -> ()
void USeqAct_SetSoundMode::Activated()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetSoundMode.Activated");

	USeqAct_SetSoundMode_Activated_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AnimNotify_PlayFaceFXAnim.Notify
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Owner                                                      (Parm)
//		class UAnimNodeSequence*                           AnimSeqInstigator                                          (Parm)
void UAnimNotify_PlayFaceFXAnim::Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify_PlayFaceFXAnim.Notify");

	UAnimNotify_PlayFaceFXAnim_Notify_Params params {};
	params.Owner = Owner;
	params.AnimSeqInstigator = AnimSeqInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.BroadcastHandler.AllowBroadcastLocalizedTeam
//		Flags  -> ()
// Parameters:
//		int                                                TeamIndex                                                  (Parm)
//		class AActor*                                      Sender                                                     (Parm)
//		class UClass*                                      Message                                                    (Parm)
//		int                                                Switch                                                     (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_2                                               (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_3                                               (OptionalParm, Parm)
//		class UObject*                                     OptionalObject                                             (OptionalParm, Parm)
void ABroadcastHandler::AllowBroadcastLocalizedTeam(int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.AllowBroadcastLocalizedTeam");

	ABroadcastHandler_AllowBroadcastLocalizedTeam_Params params {};
	params.TeamIndex = TeamIndex;
	params.Sender = Sender;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.BroadcastHandler.AllowBroadcastLocalized
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Sender                                                     (Parm)
//		class UClass*                                      Message                                                    (Parm)
//		int                                                Switch                                                     (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_2                                               (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_3                                               (OptionalParm, Parm)
//		class UObject*                                     OptionalObject                                             (OptionalParm, Parm)
void ABroadcastHandler::AllowBroadcastLocalized(class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.AllowBroadcastLocalized");

	ABroadcastHandler_AllowBroadcastLocalized_Params params {};
	params.Sender = Sender;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.BroadcastHandler.BroadcastTeam
//		Flags  -> ()
// Parameters:
//		class AController*                                 Sender                                                     (Parm)
//		struct FString                                     msg                                                        (Parm, CoerceParm, NeedCtorLink)
//		struct FName                                       Type                                                       (OptionalParm, Parm)
void ABroadcastHandler::BroadcastTeam(class AController* Sender, const struct FString& msg, const struct FName& Type)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.BroadcastTeam");

	ABroadcastHandler_BroadcastTeam_Params params {};
	params.Sender = Sender;
	params.msg = msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.BroadcastHandler.Broadcast
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Sender                                                     (Parm)
//		struct FString                                     msg                                                        (Parm, CoerceParm, NeedCtorLink)
//		struct FName                                       Type                                                       (OptionalParm, Parm)
void ABroadcastHandler::Broadcast(class AActor* Sender, const struct FString& msg, const struct FName& Type)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.Broadcast");

	ABroadcastHandler_Broadcast_Params params {};
	params.Sender = Sender;
	params.msg = msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.BroadcastHandler.BroadcastLocalized
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Sender                                                     (Parm)
//		class APlayerController*                           Receiver                                                   (Parm)
//		class UClass*                                      Message                                                    (Parm)
//		int                                                Switch                                                     (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_2                                               (OptionalParm, Parm)
//		class APlayerReplicationInfo*                      RelatedPRI_3                                               (OptionalParm, Parm)
//		class UObject*                                     OptionalObject                                             (OptionalParm, Parm)
void ABroadcastHandler::BroadcastLocalized(class AActor* Sender, class APlayerController* Receiver, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.BroadcastLocalized");

	ABroadcastHandler_BroadcastLocalized_Params params {};
	params.Sender = Sender;
	params.Receiver = Receiver;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.BroadcastHandler.BroadcastText
//		Flags  -> ()
// Parameters:
//		class APlayerReplicationInfo*                      SenderPRI                                                  (Parm)
//		class APlayerController*                           Receiver                                                   (Parm)
//		struct FString                                     msg                                                        (Parm, CoerceParm, NeedCtorLink)
//		struct FName                                       Type                                                       (OptionalParm, Parm)
void ABroadcastHandler::BroadcastText(class APlayerReplicationInfo* SenderPRI, class APlayerController* Receiver, const struct FString& msg, const struct FName& Type)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.BroadcastText");

	ABroadcastHandler_BroadcastText_Params params {};
	params.SenderPRI = SenderPRI;
	params.Receiver = Receiver;
	params.msg = msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.BroadcastHandler.AllowsBroadcast
//		Flags  -> ()
// Parameters:
//		class AActor*                                      broadcaster                                                (Parm)
//		int                                                InLen                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ABroadcastHandler::AllowsBroadcast(class AActor* broadcaster, int InLen)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.AllowsBroadcast");

	ABroadcastHandler_AllowsBroadcast_Params params {};
	params.broadcaster = broadcaster;
	params.InLen = InLen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.BroadcastHandler.UpdateSentText
//		Flags  -> ()
void ABroadcastHandler::UpdateSentText()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.UpdateSentText");

	ABroadcastHandler_UpdateSentText_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.HttpFactory.CreateRequest
//		Flags  -> ()
// Parameters:
//		class UHttpRequestInterface*                       ReturnValue                                                (Parm, OutParm, ReturnParm)
class UHttpRequestInterface* UHttpFactory::CreateRequest()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.HttpFactory.CreateRequest");

	UHttpFactory_CreateRequest_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystemKVSInterface.WriteKeyValue
//		Flags  -> ()
// Parameters:
//		int                                                SaveSlotIndex                                              (Parm)
//		struct FString                                     KeyName                                                    (Parm, NeedCtorLink)
//		struct FPlatformInterfaceData                      Value                                                      (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudSaveSystemKVSInterface::WriteKeyValue(int SaveSlotIndex, const struct FString& KeyName, struct FPlatformInterfaceData* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystemKVSInterface.WriteKeyValue");

	UCloudSaveSystemKVSInterface_WriteKeyValue_Params params {};
	params.SaveSlotIndex = SaveSlotIndex;
	params.KeyName = KeyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystemKVSInterface.ReadKeyValue
//		Flags  -> ()
// Parameters:
//		int                                                SaveSlotIndex                                              (Parm)
//		struct FString                                     KeyName                                                    (Parm, NeedCtorLink)
//		TEnumAsByte<Engine_EPlatformInterfaceDataType>     Type                                                       (Parm)
//		struct FPlatformInterfaceDelegateResult            Value                                                      (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudSaveSystemKVSInterface::ReadKeyValue(int SaveSlotIndex, const struct FString& KeyName, TEnumAsByte<Engine_EPlatformInterfaceDataType> Type, struct FPlatformInterfaceDelegateResult* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystemKVSInterface.ReadKeyValue");

	UCloudSaveSystemKVSInterface_ReadKeyValue_Params params {};
	params.SaveSlotIndex = SaveSlotIndex;
	params.KeyName = KeyName;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystemDataBlobStoreInterface.DeleteDataBlob
//		Flags  -> ()
// Parameters:
//		struct FString                                     StorageID                                                  (Parm, NeedCtorLink)
//		struct FString                                     BlobName                                                   (Parm, NeedCtorLink)
//		struct FScriptDelegate                             InDeleteDataBlobCallback                                   (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudSaveSystemDataBlobStoreInterface::DeleteDataBlob(const struct FString& StorageID, const struct FString& BlobName, const struct FScriptDelegate& InDeleteDataBlobCallback)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystemDataBlobStoreInterface.DeleteDataBlob");

	UCloudSaveSystemDataBlobStoreInterface_DeleteDataBlob_Params params {};
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.InDeleteDataBlobCallback = InDeleteDataBlobCallback;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystemDataBlobStoreInterface.DeleteDataBlobCallbackDelegate
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSucessfull                                             (Parm)
//		struct FString                                     StorageID                                                  (Parm, NeedCtorLink)
//		struct FString                                     BlobName                                                   (Parm, NeedCtorLink)
//		struct FString                                     Error                                                      (Parm, NeedCtorLink)
void UCloudSaveSystemDataBlobStoreInterface::DeleteDataBlobCallbackDelegate(bool bWasSucessfull, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystemDataBlobStoreInterface.DeleteDataBlobCallbackDelegate");

	UCloudSaveSystemDataBlobStoreInterface_DeleteDataBlobCallbackDelegate_Params params {};
	params.bWasSucessfull = bWasSucessfull;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystemDataBlobStoreInterface.SetDataBlob
//		Flags  -> ()
// Parameters:
//		struct FString                                     StorageID                                                  (Parm, NeedCtorLink)
//		struct FString                                     BlobName                                                   (Parm, NeedCtorLink)
//		TArray<unsigned char>                              DataBlob                                                   (Const, Parm, OutParm, NeedCtorLink)
//		struct FScriptDelegate                             InSetDataBlobCallback                                      (Parm, NeedCtorLink)
void UCloudSaveSystemDataBlobStoreInterface::SetDataBlob(const struct FString& StorageID, const struct FString& BlobName, TArray<unsigned char>* DataBlob, const struct FScriptDelegate& InSetDataBlobCallback)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystemDataBlobStoreInterface.SetDataBlob");

	UCloudSaveSystemDataBlobStoreInterface_SetDataBlob_Params params {};
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.InSetDataBlobCallback = InSetDataBlobCallback;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DataBlob != nullptr)
		*DataBlob = params.DataBlob;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystemDataBlobStoreInterface.SetDataBlobCallbackDelegate
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSucessfull                                             (Parm)
//		struct FString                                     StorageID                                                  (Parm, NeedCtorLink)
//		struct FString                                     BlobName                                                   (Parm, NeedCtorLink)
//		struct FString                                     Error                                                      (Parm, NeedCtorLink)
void UCloudSaveSystemDataBlobStoreInterface::SetDataBlobCallbackDelegate(bool bWasSucessfull, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystemDataBlobStoreInterface.SetDataBlobCallbackDelegate");

	UCloudSaveSystemDataBlobStoreInterface_SetDataBlobCallbackDelegate_Params params {};
	params.bWasSucessfull = bWasSucessfull;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystemDataBlobStoreInterface.GetDataBlob
//		Flags  -> ()
// Parameters:
//		struct FString                                     StorageID                                                  (Parm, NeedCtorLink)
//		struct FString                                     BlobName                                                   (Parm, NeedCtorLink)
//		struct FScriptDelegate                             OnGetDataBlobComplete                                      (Parm, NeedCtorLink)
void UCloudSaveSystemDataBlobStoreInterface::GetDataBlob(const struct FString& StorageID, const struct FString& BlobName, const struct FScriptDelegate& OnGetDataBlobComplete)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystemDataBlobStoreInterface.GetDataBlob");

	UCloudSaveSystemDataBlobStoreInterface_GetDataBlob_Params params {};
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.OnGetDataBlobComplete = OnGetDataBlobComplete;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudSaveSystemDataBlobStoreInterface.GetDataBlobCallbackDelegate
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     StorageID                                                  (Parm, NeedCtorLink)
//		struct FString                                     BlobName                                                   (Parm, NeedCtorLink)
//		TArray<unsigned char>                              DataBlob                                                   (Const, Parm, OutParm, NeedCtorLink)
//		struct FString                                     Error                                                      (Parm, NeedCtorLink)
void UCloudSaveSystemDataBlobStoreInterface::GetDataBlobCallbackDelegate(bool bWasSuccessful, const struct FString& StorageID, const struct FString& BlobName, TArray<unsigned char>* DataBlob, const struct FString& Error)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystemDataBlobStoreInterface.GetDataBlobCallbackDelegate");

	UCloudSaveSystemDataBlobStoreInterface_GetDataBlobCallbackDelegate_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DataBlob != nullptr)
		*DataBlob = params.DataBlob;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBaseCloudSaveSystemKVS.GenerateKeyNameForSaveSlot
//		Flags  -> ()
// Parameters:
//		int                                                SaveSlotIndex                                              (Parm)
//		struct FString                                     KeyName                                                    (Parm, NeedCtorLink)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UCloudStorageBaseCloudSaveSystemKVS::GenerateKeyNameForSaveSlot(int SaveSlotIndex, const struct FString& KeyName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBaseCloudSaveSystemKVS.GenerateKeyNameForSaveSlot");

	UCloudStorageBaseCloudSaveSystemKVS_GenerateKeyNameForSaveSlot_Params params {};
	params.SaveSlotIndex = SaveSlotIndex;
	params.KeyName = KeyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBaseCloudSaveSystemKVS.WriteKeyValue
//		Flags  -> ()
// Parameters:
//		int                                                SaveSlotIndex                                              (Parm)
//		struct FString                                     KeyName                                                    (Parm, NeedCtorLink)
//		struct FPlatformInterfaceData                      Value                                                      (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudStorageBaseCloudSaveSystemKVS::WriteKeyValue(int SaveSlotIndex, const struct FString& KeyName, struct FPlatformInterfaceData* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBaseCloudSaveSystemKVS.WriteKeyValue");

	UCloudStorageBaseCloudSaveSystemKVS_WriteKeyValue_Params params {};
	params.SaveSlotIndex = SaveSlotIndex;
	params.KeyName = KeyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBaseCloudSaveSystemKVS.ReadKeyValue
//		Flags  -> ()
// Parameters:
//		int                                                SaveSlotIndex                                              (Parm)
//		struct FString                                     KeyName                                                    (Parm, NeedCtorLink)
//		TEnumAsByte<Engine_EPlatformInterfaceDataType>     Type                                                       (Parm)
//		struct FPlatformInterfaceDelegateResult            Value                                                      (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UCloudStorageBaseCloudSaveSystemKVS::ReadKeyValue(int SaveSlotIndex, const struct FString& KeyName, TEnumAsByte<Engine_EPlatformInterfaceDataType> Type, struct FPlatformInterfaceDelegateResult* Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBaseCloudSaveSystemKVS.ReadKeyValue");

	UCloudStorageBaseCloudSaveSystemKVS_ReadKeyValue_Params params {};
	params.SaveSlotIndex = SaveSlotIndex;
	params.KeyName = KeyName;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CloudStorageBaseCloudSaveSystemKVS.Init
//		Flags  -> ()
// Parameters:
//		class UCloudStorageBase*                           InCloudStorage                                             (Parm)
void UCloudStorageBaseCloudSaveSystemKVS::Init(class UCloudStorageBase* InCloudStorage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBaseCloudSaveSystemKVS.Init");

	UCloudStorageBaseCloudSaveSystemKVS_Init_Params params {};
	params.InCloudStorage = InCloudStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ColorScaleVolume.UnTouch
//		Flags  -> (Net, NetReliable, Simulated, Native, Static, HasOptionalParms, Const, Private, Protected, Delegate, HasDefaults, K2Call, K2Pure)
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void AColorScaleVolume::STATIC_UnTouch(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ColorScaleVolume.UnTouch");

	AColorScaleVolume_UnTouch_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ColorScaleVolume.Touch
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		class UPrimitiveComponent*                         OtherComp                                                  (Parm, EditInline)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     HitNormal                                                  (Parm)
void AColorScaleVolume::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ColorScaleVolume.Touch");

	AColorScaleVolume_Touch_Params params {};
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshPath_Toward.Recycle
//		Flags  -> ()
void UNavMeshPath_Toward::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_Toward.Recycle");

	UNavMeshPath_Toward_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshPath_Toward.TowardPoint
//		Flags  -> ()
// Parameters:
//		class UNavigationHandle*                           NavHandle                                                  (Parm)
//		struct FVector                                     Point                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavMeshPath_Toward::TowardPoint(class UNavigationHandle* NavHandle, const struct FVector& Point)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_Toward.TowardPoint");

	UNavMeshPath_Toward_TowardPoint_Params params {};
	params.NavHandle = NavHandle;
	params.Point = Point;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshPath_Toward.TowardGoal
//		Flags  -> ()
// Parameters:
//		class UNavigationHandle*                           NavHandle                                                  (Parm)
//		class AActor*                                      Goal                                                       (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavMeshPath_Toward::TowardGoal(class UNavigationHandle* NavHandle, class AActor* Goal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_Toward.TowardGoal");

	UNavMeshPath_Toward_TowardGoal_Params params {};
	params.NavHandle = NavHandle;
	params.Goal = Goal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_PolyEncompassesAI.Recycle
//		Flags  -> ()
void UNavMeshGoal_PolyEncompassesAI::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_PolyEncompassesAI.Recycle");

	UNavMeshGoal_PolyEncompassesAI_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_PolyEncompassesAI.MakeSureAIFits
//		Flags  -> ()
// Parameters:
//		class UNavigationHandle*                           NavHandle                                                  (Parm)
//		struct FVector                                     InOverrideExtentToCheck                                    (Const, OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavMeshGoal_PolyEncompassesAI::MakeSureAIFits(class UNavigationHandle* NavHandle, const struct FVector& InOverrideExtentToCheck)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_PolyEncompassesAI.MakeSureAIFits");

	UNavMeshGoal_PolyEncompassesAI_MakeSureAIFits_Params params {};
	params.NavHandle = NavHandle;
	params.InOverrideExtentToCheck = InOverrideExtentToCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraActor.DisplayDebug
//		Flags  -> ()
// Parameters:
//		class AHUD*                                        HUD                                                        (Parm)
//		float                                              out_YL                                                     (Parm, OutParm)
//		float                                              out_YPos                                                   (Parm, OutParm)
void ACameraActor::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraActor.DisplayDebug");

	ACameraActor_DisplayDebug_Params params {};
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraActor.GetCameraView
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
//		struct FTPOV                                       OutPOV                                                     (Parm, OutParm)
void ACameraActor::GetCameraView(float DeltaTime, struct FTPOV* OutPOV)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraActor.GetCameraView");

	ACameraActor_GetCameraView_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutPOV != nullptr)
		*OutPOV = params.OutPOV;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraAnimInst.SetPlaySpace
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ECameraAnimPlaySpace>           NewSpace                                                   (Parm)
//		struct FRotator                                    UserPlaySpace                                              (OptionalParm, Parm)
void UCameraAnimInst::SetPlaySpace(TEnumAsByte<Engine_ECameraAnimPlaySpace> NewSpace, const struct FRotator& UserPlaySpace)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.SetPlaySpace");

	UCameraAnimInst_SetPlaySpace_Params params {};
	params.NewSpace = NewSpace;
	params.UserPlaySpace = UserPlaySpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraAnimInst.ApplyTransientScaling
//		Flags  -> ()
// Parameters:
//		float                                              Scalar                                                     (Parm)
void UCameraAnimInst::ApplyTransientScaling(float Scalar)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.ApplyTransientScaling");

	UCameraAnimInst_ApplyTransientScaling_Params params {};
	params.Scalar = Scalar;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraAnimInst.Stop
//		Flags  -> ()
// Parameters:
//		bool                                               bImmediate                                                 (OptionalParm, Parm)
void UCameraAnimInst::Stop(bool bImmediate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.Stop");

	UCameraAnimInst_Stop_Params params {};
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraAnimInst.AdvanceAnim
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
//		bool                                               bJump                                                      (Parm)
void UCameraAnimInst::AdvanceAnim(float DeltaTime, bool bJump)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.AdvanceAnim");

	UCameraAnimInst_AdvanceAnim_Params params {};
	params.DeltaTime = DeltaTime;
	params.bJump = bJump;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraAnimInst.Update
//		Flags  -> ()
// Parameters:
//		float                                              NewRate                                                    (Parm)
//		float                                              NewScale                                                   (Parm)
//		float                                              NewBlendInTime                                             (Parm)
//		float                                              NewBlendOutTime                                            (Parm)
//		float                                              NewDuration                                                (OptionalParm, Parm)
void UCameraAnimInst::Update(float NewRate, float NewScale, float NewBlendInTime, float NewBlendOutTime, float NewDuration)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.Update");

	UCameraAnimInst_Update_Params params {};
	params.NewRate = NewRate;
	params.NewScale = NewScale;
	params.NewBlendInTime = NewBlendInTime;
	params.NewBlendOutTime = NewBlendOutTime;
	params.NewDuration = NewDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.CameraAnimInst.Play
//		Flags  -> ()
// Parameters:
//		class UCameraAnim*                                 Anim                                                       (Parm)
//		class AActor*                                      CamActor                                                   (Parm)
//		float                                              InRate                                                     (Parm)
//		float                                              InScale                                                    (Parm)
//		float                                              InBlendInTime                                              (Parm)
//		float                                              InBlendOutTime                                             (Parm)
//		bool                                               bInLoop                                                    (Parm)
//		bool                                               bRandomStartTime                                           (Parm)
//		float                                              Duration                                                   (OptionalParm, Parm)
//		bool                                               bInForceFinished                                           (OptionalParm, Parm)
void UCameraAnimInst::Play(class UCameraAnim* Anim, class AActor* CamActor, float InRate, float InScale, float InBlendInTime, float InBlendOutTime, bool bInLoop, bool bRandomStartTime, float Duration, bool bInForceFinished)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.Play");

	UCameraAnimInst_Play_Params params {};
	params.Anim = Anim;
	params.CamActor = CamActor;
	params.InRate = InRate;
	params.InScale = InScale;
	params.InBlendInTime = InBlendInTime;
	params.InBlendOutTime = InBlendOutTime;
	params.bInLoop = bInLoop;
	params.bRandomStartTime = bRandomStartTime;
	params.Duration = Duration;
	params.bInForceFinished = bInForceFinished;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshPath_WithinDistanceEnvelope.Recycle
//		Flags  -> ()
void UNavMeshPath_WithinDistanceEnvelope::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_WithinDistanceEnvelope.Recycle");

	UNavMeshPath_WithinDistanceEnvelope_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshPath_WithinDistanceEnvelope.StayWithinEnvelopeToLoc
//		Flags  -> ()
// Parameters:
//		class UNavigationHandle*                           NavHandle                                                  (Parm)
//		struct FVector                                     InEnvelopeTestPoint                                        (Parm)
//		float                                              InMaxDistance                                              (Parm)
//		float                                              InMinDistance                                              (Parm)
//		bool                                               bInSoft                                                    (OptionalParm, Parm)
//		float                                              InSoftStartPenalty                                         (OptionalParm, Parm)
//		bool                                               bOnlyTossOutSpecsThatLeave                                 (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavMeshPath_WithinDistanceEnvelope::StayWithinEnvelopeToLoc(class UNavigationHandle* NavHandle, const struct FVector& InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, bool bInSoft, float InSoftStartPenalty, bool bOnlyTossOutSpecsThatLeave)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_WithinDistanceEnvelope.StayWithinEnvelopeToLoc");

	UNavMeshPath_WithinDistanceEnvelope_StayWithinEnvelopeToLoc_Params params {};
	params.NavHandle = NavHandle;
	params.InEnvelopeTestPoint = InEnvelopeTestPoint;
	params.InMaxDistance = InMaxDistance;
	params.InMinDistance = InMinDistance;
	params.bInSoft = bInSoft;
	params.InSoftStartPenalty = InSoftStartPenalty;
	params.bOnlyTossOutSpecsThatLeave = bOnlyTossOutSpecsThatLeave;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshPath_WithinTraversalDist.Recycle
//		Flags  -> ()
void UNavMeshPath_WithinTraversalDist::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_WithinTraversalDist.Recycle");

	UNavMeshPath_WithinTraversalDist_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshPath_WithinTraversalDist.DontExceedMaxDist
//		Flags  -> ()
// Parameters:
//		class UNavigationHandle*                           NavHandle                                                  (Parm)
//		float                                              InMaxTraversalDist                                         (Parm)
//		bool                                               bInSoft                                                    (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavMeshPath_WithinTraversalDist::DontExceedMaxDist(class UNavigationHandle* NavHandle, float InMaxTraversalDist, bool bInSoft)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_WithinTraversalDist.DontExceedMaxDist");

	UNavMeshPath_WithinTraversalDist_DontExceedMaxDist_Params params {};
	params.NavHandle = NavHandle;
	params.InMaxTraversalDist = InMaxTraversalDist;
	params.bInSoft = bInSoft;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkelControlBase.GetControlMetadataWeight
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float USkelControlBase::GetControlMetadataWeight()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkelControlBase.GetControlMetadataWeight");

	USkelControlBase_GetControlMetadataWeight_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkelControlBase.TickSkelControl
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
//		class USkeletalMeshComponent*                      SkelComp                                                   (Parm, EditInline)
void USkelControlBase::TickSkelControl(float DeltaTime, class USkeletalMeshComponent* SkelComp)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkelControlBase.TickSkelControl");

	USkelControlBase_TickSkelControl_Params params {};
	params.DeltaTime = DeltaTime;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkelControlBase.SetSkelControlStrength
//		Flags  -> ()
// Parameters:
//		float                                              NewStrength                                                (Parm)
//		float                                              InBlendTime                                                (Parm)
void USkelControlBase::SetSkelControlStrength(float NewStrength, float InBlendTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkelControlBase.SetSkelControlStrength");

	USkelControlBase_SetSkelControlStrength_Params params {};
	params.NewStrength = NewStrength;
	params.InBlendTime = InBlendTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkelControlBase.SetSkelControlActive
//		Flags  -> ()
// Parameters:
//		bool                                               bInActive                                                  (Parm)
void USkelControlBase::SetSkelControlActive(bool bInActive)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkelControlBase.SetSkelControlActive");

	USkelControlBase_SetSkelControlActive_Params params {};
	params.bInActive = bInActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkelControlLookAt.CanLookAtPoint
//		Flags  -> ()
// Parameters:
//		struct FVector                                     PointLoc                                                   (Parm)
//		bool                                               bDrawDebugInfo                                             (OptionalParm, Parm)
//		bool                                               bDebugUsePersistentLines                                   (OptionalParm, Parm)
//		bool                                               bDebugFlushLinesFirst                                      (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USkelControlLookAt::CanLookAtPoint(const struct FVector& PointLoc, bool bDrawDebugInfo, bool bDebugUsePersistentLines, bool bDebugFlushLinesFirst)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkelControlLookAt.CanLookAtPoint");

	USkelControlLookAt_CanLookAtPoint_Params params {};
	params.PointLoc = PointLoc;
	params.bDrawDebugInfo = bDrawDebugInfo;
	params.bDebugUsePersistentLines = bDebugUsePersistentLines;
	params.bDebugFlushLinesFirst = bDebugFlushLinesFirst;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkelControlLookAt.SetLookAtAlpha
//		Flags  -> ()
// Parameters:
//		float                                              DesiredAlpha                                               (Parm)
//		float                                              DesiredBlendTime                                           (Parm)
void USkelControlLookAt::SetLookAtAlpha(float DesiredAlpha, float DesiredBlendTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkelControlLookAt.SetLookAtAlpha");

	USkelControlLookAt_SetLookAtAlpha_Params params {};
	params.DesiredAlpha = DesiredAlpha;
	params.DesiredBlendTime = DesiredBlendTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkelControlLookAt.InterpolateTargetLocation
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
void USkelControlLookAt::InterpolateTargetLocation(float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkelControlLookAt.InterpolateTargetLocation");

	USkelControlLookAt_InterpolateTargetLocation_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SkelControlLookAt.SetTargetLocation
//		Flags  -> ()
// Parameters:
//		struct FVector                                     NewTargetLocation                                          (Parm)
void USkelControlLookAt::SetTargetLocation(const struct FVector& NewTargetLocation)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SkelControlLookAt.SetTargetLocation");

	USkelControlLookAt_SetTargetLocation_Params params {};
	params.NewTargetLocation = NewTargetLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_GetVelocity.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_GetVelocity::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_GetVelocity.GetObjClassVersion");

	USeqAct_GetVelocity_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_HeadTrackingControl.Activated
//		Flags  -> ()
// Parameters:
void USeqAct_HeadTrackingControl::Activated()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_HeadTrackingControl.Activated");

	USeqAct_HeadTrackingControl_Activated_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_HeadTrackingControl.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_HeadTrackingControl::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_HeadTrackingControl.GetObjClassVersion");

	USeqAct_HeadTrackingControl_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_At.Recycle
//		Flags  -> ()
void UNavMeshGoal_At::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_At.Recycle");

	UNavMeshGoal_At_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_At.AtLocation
//		Flags  -> ()
// Parameters:
//		class UNavigationHandle*                           NavHandle                                                  (Parm)
//		struct FVector                                     GoalLocation                                               (Parm)
//		float                                              Dist                                                       (OptionalParm, Parm)
//		bool                                               bReturnPartial                                             (OptionalParm, Parm)
//		bool                                               bInWeightPartialByDist                                     (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavMeshGoal_At::AtLocation(class UNavigationHandle* NavHandle, const struct FVector& GoalLocation, float Dist, bool bReturnPartial, bool bInWeightPartialByDist)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_At.AtLocation");

	UNavMeshGoal_At_AtLocation_Params params {};
	params.NavHandle = NavHandle;
	params.GoalLocation = GoalLocation;
	params.Dist = Dist;
	params.bReturnPartial = bReturnPartial;
	params.bInWeightPartialByDist = bInWeightPartialByDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_At.AtActor
//		Flags  -> (Singular, Net, Simulated, HasOptionalParms, Private, Delegate, NetServer, HasDefaults, DLLImport, K2Override, K2Pure)
// Parameters:
//		class UNavigationHandle*                           NavHandle                                                  (Parm)
//		class AActor*                                      GoalActor                                                  (Parm)
//		float                                              Dist                                                       (OptionalParm, Parm)
//		bool                                               bReturnPartial                                             (OptionalParm, Parm)
//		bool                                               bInWeightPartialByDist                                     (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavMeshGoal_At::AtActor(class UNavigationHandle* NavHandle, class AActor* GoalActor, float Dist, bool bReturnPartial, bool bInWeightPartialByDist)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_At.AtActor");

	UNavMeshGoal_At_AtActor_Params params {};
	params.NavHandle = NavHandle;
	params.GoalActor = GoalActor;
	params.Dist = Dist;
	params.bReturnPartial = bReturnPartial;
	params.bInWeightPartialByDist = bInWeightPartialByDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_At.RecycleNative
//		Flags  -> ()
void UNavMeshGoal_At::RecycleNative()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_At.RecycleNative");

	UNavMeshGoal_At_RecycleNative_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_ClosestActorInList.RecycleInternal
//		Flags  -> ()
void UNavMeshGoal_ClosestActorInList::RecycleInternal()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_ClosestActorInList.RecycleInternal");

	UNavMeshGoal_ClosestActorInList_RecycleInternal_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_ClosestActorInList.Recycle
//		Flags  -> ()
void UNavMeshGoal_ClosestActorInList::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_ClosestActorInList.Recycle");

	UNavMeshGoal_ClosestActorInList_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_ClosestActorInList.ClosestActorInList
//		Flags  -> ()
// Parameters:
//		class UNavigationHandle*                           NavHandle                                                  (Parm)
//		TArray<struct FBiasedGoalActor>                    InGoalList                                                 (Const, Parm, OutParm, NeedCtorLink)
//		class UNavMeshGoal_ClosestActorInList*             ReturnValue                                                (Parm, OutParm, ReturnParm)
class UNavMeshGoal_ClosestActorInList* UNavMeshGoal_ClosestActorInList::ClosestActorInList(class UNavigationHandle* NavHandle, TArray<struct FBiasedGoalActor>* InGoalList)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_ClosestActorInList.ClosestActorInList");

	UNavMeshGoal_ClosestActorInList_ClosestActorInList_Params params {};
	params.NavHandle = NavHandle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InGoalList != nullptr)
		*InGoalList = params.InGoalList;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_GenericFilterContainer.Recycle
//		Flags  -> ()
void UNavMeshGoal_GenericFilterContainer::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_GenericFilterContainer.Recycle");

	UNavMeshGoal_GenericFilterContainer_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_GenericFilterContainer.GetGoalPoint
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector UNavMeshGoal_GenericFilterContainer::GetGoalPoint()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_GenericFilterContainer.GetGoalPoint");

	UNavMeshGoal_GenericFilterContainer_GetGoalPoint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_GenericFilterContainer.GetFilterOfType
//		Flags  -> ()
// Parameters:
//		class UClass*                                      Filter_Class                                               (Parm)
//		class UNavMeshGoal_Filter*                         ReturnValue                                                (Parm, OutParm, ReturnParm)
class UNavMeshGoal_Filter* UNavMeshGoal_GenericFilterContainer::GetFilterOfType(class UClass* Filter_Class)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_GenericFilterContainer.GetFilterOfType");

	UNavMeshGoal_GenericFilterContainer_GetFilterOfType_Params params {};
	params.Filter_Class = Filter_Class;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_GenericFilterContainer.CreateAndAddFilterToNavHandleFromSeedList
//		Flags  -> ()
// Parameters:
//		class UNavigationHandle*                           NavHandle                                                  (Parm)
//		TArray<struct FVector>                             InSearchSeeds                                              (Parm, OutParm, NeedCtorLink)
//		int                                                InMaxPathVisits                                            (OptionalParm, Parm)
//		class UNavMeshGoal_GenericFilterContainer*         ReturnValue                                                (Parm, OutParm, ReturnParm)
class UNavMeshGoal_GenericFilterContainer* UNavMeshGoal_GenericFilterContainer::CreateAndAddFilterToNavHandleFromSeedList(class UNavigationHandle* NavHandle, TArray<struct FVector>* InSearchSeeds, int InMaxPathVisits)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_GenericFilterContainer.CreateAndAddFilterToNavHandleFromSeedList");

	UNavMeshGoal_GenericFilterContainer_CreateAndAddFilterToNavHandleFromSeedList_Params params {};
	params.NavHandle = NavHandle;
	params.InMaxPathVisits = InMaxPathVisits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InSearchSeeds != nullptr)
		*InSearchSeeds = params.InSearchSeeds;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_GenericFilterContainer.CreateAndAddFilterToNavHandle
//		Flags  -> ()
// Parameters:
//		class UNavigationHandle*                           NavHandle                                                  (Parm)
//		int                                                InMaxPathVisits                                            (OptionalParm, Parm)
//		class UNavMeshGoal_GenericFilterContainer*         ReturnValue                                                (Parm, OutParm, ReturnParm)
class UNavMeshGoal_GenericFilterContainer* UNavMeshGoal_GenericFilterContainer::CreateAndAddFilterToNavHandle(class UNavigationHandle* NavHandle, int InMaxPathVisits)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_GenericFilterContainer.CreateAndAddFilterToNavHandle");

	UNavMeshGoal_GenericFilterContainer_CreateAndAddFilterToNavHandle_Params params {};
	params.NavHandle = NavHandle;
	params.InMaxPathVisits = InMaxPathVisits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_Null.Recycle
//		Flags  -> ()
void UNavMeshGoal_Null::Recycle()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_Null.Recycle");

	UNavMeshGoal_Null_Recycle_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_Null.RecycleNative
//		Flags  -> ()
void UNavMeshGoal_Null::RecycleNative()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_Null.RecycleNative");

	UNavMeshGoal_Null_RecycleNative_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NavMeshGoal_Null.GoUntilBust
//		Flags  -> ()
// Parameters:
//		class UNavigationHandle*                           NavHandle                                                  (Parm)
//		int                                                InMaxPathVisits                                            (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UNavMeshGoal_Null::GoUntilBust(class UNavigationHandle* NavHandle, int InMaxPathVisits)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_Null.GoUntilBust");

	UNavMeshGoal_Null_GoUntilBust_Params params {};
	params.NavHandle = NavHandle;
	params.InMaxPathVisits = InMaxPathVisits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Input.SetBind
//		Flags  -> (Net, Simulated, Exec, Native, Event, HasOptionalParms, Const, Private, Delegate, NetServer, HasDefaults, NetClient, K2Override, K2Pure)
// Parameters:
//		struct FName                                       BindName                                                   (Const, Parm, OutParm)
//		struct FString                                     Command                                                    (Parm, NeedCtorLink)
void UInput::SetBind(struct FName* BindName, const struct FString& Command)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Input.SetBind");

	UInput_SetBind_Params params {};
	params.Command = Command;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (BindName != nullptr)
		*BindName = params.BindName;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Input.GetBind
//		Flags  -> ()
// Parameters:
//		struct FName                                       Key                                                        (Const, Parm, OutParm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UInput::GetBind(struct FName* Key)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Input.GetBind");

	UInput_GetBind_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Key != nullptr)
		*Key = params.Key;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Input.ResetInput
//		Flags  -> ()
void UInput::ResetInput()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Input.ResetInput");

	UInput_ResetInput_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerInput.PreClientTravel
//		Flags  -> ()
// Parameters:
//		struct FString                                     PendingURL                                                 (Parm, NeedCtorLink)
//		TEnumAsByte<Engine_ETravelType>                    TravelType                                                 (Parm)
//		bool                                               bIsSeamlessTravel                                          (Parm)
void UPlayerInput::PreClientTravel(const struct FString& PendingURL, TEnumAsByte<Engine_ETravelType> TravelType, bool bIsSeamlessTravel)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.PreClientTravel");

	UPlayerInput_PreClientTravel_Params params {};
	params.PendingURL = PendingURL;
	params.TravelType = TravelType;
	params.bIsSeamlessTravel = bIsSeamlessTravel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerInput.ClientInitInputSystem
//		Flags  -> ()
void UPlayerInput::ClientInitInputSystem()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.ClientInitInputSystem");

	UPlayerInput_ClientInitInputSystem_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerInput.InitInputSystem
//		Flags  -> ()
void UPlayerInput::InitInputSystem()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.InitInputSystem");

	UPlayerInput_InitInputSystem_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerInput.SmoothMouse
//		Flags  -> ()
// Parameters:
//		float                                              aMouse                                                     (Parm)
//		float                                              DeltaTime                                                  (Parm)
//		unsigned char                                      SampleCount                                                (Parm, OutParm)
//		int                                                Index                                                      (Parm)
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UPlayerInput::SmoothMouse(float aMouse, float DeltaTime, unsigned char* SampleCount, int Index)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SmoothMouse");

	UPlayerInput_SmoothMouse_Params params {};
	params.aMouse = aMouse;
	params.DeltaTime = DeltaTime;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SampleCount != nullptr)
		*SampleCount = params.SampleCount;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerInput.ClearSmoothing
//		Flags  -> ()
void UPlayerInput::ClearSmoothing()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.ClearSmoothing");

	UPlayerInput_ClearSmoothing_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerInput.SmartJump
//		Flags  -> ()
void UPlayerInput::SmartJump()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SmartJump");

	UPlayerInput_SmartJump_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerInput.Jump
//		Flags  -> ()
void UPlayerInput::Jump()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.Jump");

	UPlayerInput_Jump_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerInput.ProcessInputMatching
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
void UPlayerInput::ProcessInputMatching(float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.ProcessInputMatching");

	UPlayerInput_ProcessInputMatching_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerInput.CheckForDoubleClickMove
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
//		TEnumAsByte<Engine_EDoubleClickDir>                ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_EDoubleClickDir> UPlayerInput::CheckForDoubleClickMove(float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.CheckForDoubleClickMove");

	UPlayerInput_CheckForDoubleClickMove_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerInput.CatchDoubleClickInput
//		Flags  -> ()
void UPlayerInput::CatchDoubleClickInput()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.CatchDoubleClickInput");

	UPlayerInput_CatchDoubleClickInput_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerInput.PlayerInput
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
void UPlayerInput::PlayerInput(float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.PlayerInput");

	UPlayerInput_PlayerInput_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerInput.AdjustMouseSensitivity
//		Flags  -> ()
// Parameters:
//		float                                              FOVScale                                                   (Parm)
void UPlayerInput::AdjustMouseSensitivity(float FOVScale)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.AdjustMouseSensitivity");

	UPlayerInput_AdjustMouseSensitivity_Params params {};
	params.FOVScale = FOVScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerInput.PostProcessInput
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
void UPlayerInput::PostProcessInput(float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.PostProcessInput");

	UPlayerInput_PostProcessInput_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerInput.PreProcessInput
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
void UPlayerInput::PreProcessInput(float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.PreProcessInput");

	UPlayerInput_PreProcessInput_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerInput.DrawHUD
//		Flags  -> ()
// Parameters:
//		class AHUD*                                        H                                                          (Parm)
void UPlayerInput::DrawHUD(class AHUD* H)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.DrawHUD");

	UPlayerInput_DrawHUD_Params params {};
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerInput.SetSensitivity
//		Flags  -> ()
// Parameters:
//		float                                              F                                                          (Parm)
void UPlayerInput::SetSensitivity(float F)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SetSensitivity");

	UPlayerInput_SetSensitivity_Params params {};
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerInput.InvertTurn
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UPlayerInput::InvertTurn()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.InvertTurn");

	UPlayerInput_InvertTurn_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerInput.InvertMouse
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UPlayerInput::InvertMouse()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.InvertMouse");

	UPlayerInput_InvertMouse_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerInput.CancelMobileInput
//		Flags  -> ()
void UPlayerInput::CancelMobileInput()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.CancelMobileInput");

	UPlayerInput_CancelMobileInput_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.MorphTargetSet.FindMorphTarget
//		Flags  -> ()
// Parameters:
//		struct FName                                       MorphTargetName                                            (Parm)
//		class UMorphTarget*                                ReturnValue                                                (Parm, OutParm, ReturnParm)
class UMorphTarget* UMorphTargetSet::FindMorphTarget(const struct FName& MorphTargetName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.MorphTargetSet.FindMorphTarget");

	UMorphTargetSet_FindMorphTarget_Params params {};
	params.MorphTargetName = MorphTargetName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DecalManager.SpawnDecal
//		Flags  -> (Singular, Net, Simulated, Exec, Native, Event, Private, Protected, HasOutParms, K2Call, K2Pure)
// Parameters:
//		class UMaterialInterface*                          DecalMaterial                                              (Parm)
//		struct FVector                                     DecalLocation                                              (Parm)
//		struct FRotator                                    DecalOrientation                                           (Parm)
//		float                                              Width                                                      (Parm)
//		float                                              Height                                                     (Parm)
//		float                                              Thickness                                                  (Parm)
//		bool                                               bNoClip                                                    (Parm)
//		float                                              DecalRotation                                              (OptionalParm, Parm)
//		class UPrimitiveComponent*                         HitComponent                                               (OptionalParm, Parm, EditInline)
//		bool                                               bProjectOnTerrain                                          (OptionalParm, Parm)
//		bool                                               bProjectOnSkeletalMeshes                                   (OptionalParm, Parm)
//		struct FName                                       HitBone                                                    (OptionalParm, Parm)
//		int                                                HitNodeIndex                                               (OptionalParm, Parm)
//		int                                                HitLevelIndex                                              (OptionalParm, Parm)
//		float                                              InDecalLifeSpan                                            (OptionalParm, Parm)
//		int                                                InFracturedStaticMeshComponentIndex                        (OptionalParm, Parm)
//		float                                              InDepthBias                                                (OptionalParm, Parm)
//		struct FVector2D                                   InBlendRange                                               (OptionalParm, Parm)
//		bool                                               bRemoveNoReceivers                                         (OptionalParm, Parm)
//		class UDecalComponent*                             ReturnValue                                                (Parm, OutParm, ReturnParm, EditInline)
class UDecalComponent* ADecalManager::SpawnDecal(class UMaterialInterface* DecalMaterial, const struct FVector& DecalLocation, const struct FRotator& DecalOrientation, float Width, float Height, float Thickness, bool bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, bool bProjectOnTerrain, bool bProjectOnSkeletalMeshes, const struct FName& HitBone, int HitNodeIndex, int HitLevelIndex, float InDecalLifeSpan, int InFracturedStaticMeshComponentIndex, float InDepthBias, const struct FVector2D& InBlendRange, bool bRemoveNoReceivers)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.SpawnDecal");

	ADecalManager_SpawnDecal_Params params {};
	params.DecalMaterial = DecalMaterial;
	params.DecalLocation = DecalLocation;
	params.DecalOrientation = DecalOrientation;
	params.Width = Width;
	params.Height = Height;
	params.Thickness = Thickness;
	params.bNoClip = bNoClip;
	params.DecalRotation = DecalRotation;
	params.HitComponent = HitComponent;
	params.bProjectOnTerrain = bProjectOnTerrain;
	params.bProjectOnSkeletalMeshes = bProjectOnSkeletalMeshes;
	params.HitBone = HitBone;
	params.HitNodeIndex = HitNodeIndex;
	params.HitLevelIndex = HitLevelIndex;
	params.InDecalLifeSpan = InDecalLifeSpan;
	params.InFracturedStaticMeshComponentIndex = InFracturedStaticMeshComponentIndex;
	params.InDepthBias = InDepthBias;
	params.InBlendRange = InBlendRange;
	params.bRemoveNoReceivers = bRemoveNoReceivers;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DecalManager.GetPooledComponent
//		Flags  -> ()
// Parameters:
//		class UDecalComponent*                             ReturnValue                                                (Parm, OutParm, ReturnParm, EditInline)
class UDecalComponent* ADecalManager::GetPooledComponent()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.GetPooledComponent");

	ADecalManager_GetPooledComponent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DecalManager.SetDecalParameters
//		Flags  -> ()
// Parameters:
//		class UDecalComponent*                             TheDecal                                                   (Parm, EditInline)
//		class UMaterialInterface*                          DecalMaterial                                              (Parm)
//		struct FVector                                     DecalLocation                                              (Parm)
//		struct FRotator                                    DecalOrientation                                           (Parm)
//		float                                              Width                                                      (Parm)
//		float                                              Height                                                     (Parm)
//		float                                              Thickness                                                  (Parm)
//		bool                                               bNoClip                                                    (Parm)
//		float                                              DecalRotation                                              (Parm)
//		class UPrimitiveComponent*                         HitComponent                                               (Parm, EditInline)
//		bool                                               bProjectOnTerrain                                          (Parm)
//		bool                                               bProjectOnSkeletalMeshes                                   (Parm)
//		struct FName                                       HitBone                                                    (Parm)
//		int                                                HitNodeIndex                                               (Parm)
//		int                                                HitLevelIndex                                              (Parm)
//		int                                                InFracturedStaticMeshComponentIndex                        (Parm)
//		float                                              DepthBias                                                  (Parm)
//		struct FVector2D                                   BlendRange                                                 (Parm)
void ADecalManager::SetDecalParameters(class UDecalComponent* TheDecal, class UMaterialInterface* DecalMaterial, const struct FVector& DecalLocation, const struct FRotator& DecalOrientation, float Width, float Height, float Thickness, bool bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, bool bProjectOnTerrain, bool bProjectOnSkeletalMeshes, const struct FName& HitBone, int HitNodeIndex, int HitLevelIndex, int InFracturedStaticMeshComponentIndex, float DepthBias, const struct FVector2D& BlendRange)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.SetDecalParameters");

	ADecalManager_SetDecalParameters_Params params {};
	params.TheDecal = TheDecal;
	params.DecalMaterial = DecalMaterial;
	params.DecalLocation = DecalLocation;
	params.DecalOrientation = DecalOrientation;
	params.Width = Width;
	params.Height = Height;
	params.Thickness = Thickness;
	params.bNoClip = bNoClip;
	params.DecalRotation = DecalRotation;
	params.HitComponent = HitComponent;
	params.bProjectOnTerrain = bProjectOnTerrain;
	params.bProjectOnSkeletalMeshes = bProjectOnSkeletalMeshes;
	params.HitBone = HitBone;
	params.HitNodeIndex = HitNodeIndex;
	params.HitLevelIndex = HitLevelIndex;
	params.InFracturedStaticMeshComponentIndex = InFracturedStaticMeshComponentIndex;
	params.DepthBias = DepthBias;
	params.BlendRange = BlendRange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DecalManager.CanSpawnDecals
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ADecalManager::CanSpawnDecals()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.CanSpawnDecals");

	ADecalManager_CanSpawnDecals_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DecalManager.DecalFinished
//		Flags  -> ()
// Parameters:
//		class UDecalComponent*                             Decal                                                      (Parm, EditInline)
void ADecalManager::DecalFinished(class UDecalComponent* Decal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.DecalFinished");

	ADecalManager_DecalFinished_Params params {};
	params.Decal = Decal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DecalManager.AreDynamicDecalsEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ADecalManager::AreDynamicDecalsEnabled()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.AreDynamicDecalsEnabled");

	ADecalManager_AreDynamicDecalsEnabled_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NxGenericForceFieldBox.DoInitRBPhys
//		Flags  -> ()
void ANxGenericForceFieldBox::DoInitRBPhys()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NxGenericForceFieldBox.DoInitRBPhys");

	ANxGenericForceFieldBox_DoInitRBPhys_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Terrain.PostBeginPlay
//		Flags  -> ()
void ATerrain::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Terrain.PostBeginPlay");

	ATerrain_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Terrain.CalcLayerBounds
//		Flags  -> ()
void ATerrain::CalcLayerBounds()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Terrain.CalcLayerBounds");

	ATerrain_CalcLayerBounds_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.GetAchievements
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TArray<struct FAchievementDetails>                 Achievements                                               (Parm, OutParm, NeedCtorLink)
//		int                                                TitleId                                                    (OptionalParm, Parm)
//		TEnumAsByte<Engine_EOnlineEnumerationReadState>    ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_EOnlineEnumerationReadState> UOnlinePlayerInterface::GetAchievements(unsigned char LocalUserNum, TArray<struct FAchievementDetails>* Achievements, int TitleId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetAchievements");

	UOnlinePlayerInterface_GetAchievements_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.TitleId = TitleId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Achievements != nullptr)
		*Achievements = params.Achievements;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ClearReadAchievementsCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             ReadAchievementsCompleteDelegate                           (Parm, NeedCtorLink)
void UOnlinePlayerInterface::ClearReadAchievementsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadAchievementsCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReadAchievementsCompleteDelegate");

	UOnlinePlayerInterface_ClearReadAchievementsCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ReadAchievementsCompleteDelegate = ReadAchievementsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddReadAchievementsCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             ReadAchievementsCompleteDelegate                           (Parm, NeedCtorLink)
void UOnlinePlayerInterface::AddReadAchievementsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadAchievementsCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddReadAchievementsCompleteDelegate");

	UOnlinePlayerInterface_AddReadAchievementsCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ReadAchievementsCompleteDelegate = ReadAchievementsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.OnReadAchievementsComplete
//		Flags  -> ()
// Parameters:
//		int                                                TitleId                                                    (Parm)
void UOnlinePlayerInterface::OnReadAchievementsComplete(int TitleId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnReadAchievementsComplete");

	UOnlinePlayerInterface_OnReadAchievementsComplete_Params params {};
	params.TitleId = TitleId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ReadAchievements
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                TitleId                                                    (OptionalParm, Parm)
//		bool                                               bShouldReadText                                            (OptionalParm, Parm)
//		bool                                               bShouldReadImages                                          (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::ReadAchievements(unsigned char LocalUserNum, int TitleId, bool bShouldReadText, bool bShouldReadImages)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ReadAchievements");

	UOnlinePlayerInterface_ReadAchievements_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.TitleId = TitleId;
	params.bShouldReadText = bShouldReadText;
	params.bShouldReadImages = bShouldReadImages;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ClearUnlockAchievementCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             UnlockAchievementCompleteDelegate                          (Parm, NeedCtorLink)
void UOnlinePlayerInterface::ClearUnlockAchievementCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& UnlockAchievementCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearUnlockAchievementCompleteDelegate");

	UOnlinePlayerInterface_ClearUnlockAchievementCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.UnlockAchievementCompleteDelegate = UnlockAchievementCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddUnlockAchievementCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             UnlockAchievementCompleteDelegate                          (Parm, NeedCtorLink)
void UOnlinePlayerInterface::AddUnlockAchievementCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& UnlockAchievementCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddUnlockAchievementCompleteDelegate");

	UOnlinePlayerInterface_AddUnlockAchievementCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.UnlockAchievementCompleteDelegate = UnlockAchievementCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.OnUnlockAchievementComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlinePlayerInterface::OnUnlockAchievementComplete(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnUnlockAchievementComplete");

	UOnlinePlayerInterface_OnUnlockAchievementComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.UnlockAchievement
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                AchievementId                                              (Parm)
//		float                                              PercentComplete                                            (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::UnlockAchievement(unsigned char LocalUserNum, int AchievementId, float PercentComplete)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.UnlockAchievement");

	UOnlinePlayerInterface_UnlockAchievement_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.AchievementId = AchievementId;
	params.PercentComplete = PercentComplete;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.DeleteMessage
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                MessageIndex                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::DeleteMessage(unsigned char LocalUserNum, int MessageIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.DeleteMessage");

	UOnlinePlayerInterface_DeleteMessage_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.MessageIndex = MessageIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ClearFriendMessageReceivedDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             MessageDelegate                                            (Parm, NeedCtorLink)
void UOnlinePlayerInterface::ClearFriendMessageReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& MessageDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearFriendMessageReceivedDelegate");

	UOnlinePlayerInterface_ClearFriendMessageReceivedDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.MessageDelegate = MessageDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddFriendMessageReceivedDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             MessageDelegate                                            (Parm, NeedCtorLink)
void UOnlinePlayerInterface::AddFriendMessageReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& MessageDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddFriendMessageReceivedDelegate");

	UOnlinePlayerInterface_AddFriendMessageReceivedDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.MessageDelegate = MessageDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.OnFriendMessageReceived
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FUniqueNetId                                SendingPlayer                                              (Parm)
//		struct FString                                     SendingNick                                                (Parm, NeedCtorLink)
//		struct FString                                     Message                                                    (Parm, NeedCtorLink)
void UOnlinePlayerInterface::OnFriendMessageReceived(unsigned char LocalUserNum, const struct FUniqueNetId& SendingPlayer, const struct FString& SendingNick, const struct FString& Message)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnFriendMessageReceived");

	UOnlinePlayerInterface_OnFriendMessageReceived_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.SendingPlayer = SendingPlayer;
	params.SendingNick = SendingNick;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.GetFriendMessages
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TArray<struct FOnlineFriendMessage>                FriendMessages                                             (Parm, OutParm, NeedCtorLink)
void UOnlinePlayerInterface::GetFriendMessages(unsigned char LocalUserNum, TArray<struct FOnlineFriendMessage>* FriendMessages)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetFriendMessages");

	UOnlinePlayerInterface_GetFriendMessages_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (FriendMessages != nullptr)
		*FriendMessages = params.FriendMessages;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ClearJoinFriendGameCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             JoinFriendGameCompleteDelegate                             (Parm, NeedCtorLink)
void UOnlinePlayerInterface::ClearJoinFriendGameCompleteDelegate(const struct FScriptDelegate& JoinFriendGameCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearJoinFriendGameCompleteDelegate");

	UOnlinePlayerInterface_ClearJoinFriendGameCompleteDelegate_Params params {};
	params.JoinFriendGameCompleteDelegate = JoinFriendGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddJoinFriendGameCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             JoinFriendGameCompleteDelegate                             (Parm, NeedCtorLink)
void UOnlinePlayerInterface::AddJoinFriendGameCompleteDelegate(const struct FScriptDelegate& JoinFriendGameCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddJoinFriendGameCompleteDelegate");

	UOnlinePlayerInterface_AddJoinFriendGameCompleteDelegate_Params params {};
	params.JoinFriendGameCompleteDelegate = JoinFriendGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.OnJoinFriendGameComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlinePlayerInterface::OnJoinFriendGameComplete(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnJoinFriendGameComplete");

	UOnlinePlayerInterface_OnJoinFriendGameComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.JoinFriendGame
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FUniqueNetId                                Friend                                                     (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::JoinFriendGame(unsigned char LocalUserNum, const struct FUniqueNetId& Friend)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.JoinFriendGame");

	UOnlinePlayerInterface_JoinFriendGame_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.Friend = Friend;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ClearReceivedGameInviteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             ReceivedGameInviteDelegate                                 (Parm, NeedCtorLink)
void UOnlinePlayerInterface::ClearReceivedGameInviteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReceivedGameInviteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReceivedGameInviteDelegate");

	UOnlinePlayerInterface_ClearReceivedGameInviteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ReceivedGameInviteDelegate = ReceivedGameInviteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddReceivedGameInviteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             ReceivedGameInviteDelegate                                 (Parm, NeedCtorLink)
void UOnlinePlayerInterface::AddReceivedGameInviteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReceivedGameInviteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddReceivedGameInviteDelegate");

	UOnlinePlayerInterface_AddReceivedGameInviteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ReceivedGameInviteDelegate = ReceivedGameInviteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.OnReceivedGameInvite
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FString                                     InviterName                                                (Parm, NeedCtorLink)
void UOnlinePlayerInterface::OnReceivedGameInvite(unsigned char LocalUserNum, const struct FString& InviterName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnReceivedGameInvite");

	UOnlinePlayerInterface_OnReceivedGameInvite_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.InviterName = InviterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.SendGameInviteToFriends
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TArray<struct FUniqueNetId>                        Friends                                                    (Parm, NeedCtorLink)
//		struct FString                                     Text                                                       (OptionalParm, Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::SendGameInviteToFriends(unsigned char LocalUserNum, TArray<struct FUniqueNetId> Friends, const struct FString& Text)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SendGameInviteToFriends");

	UOnlinePlayerInterface_SendGameInviteToFriends_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.Friends = Friends;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.SendGameInviteToFriend
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FUniqueNetId                                Friend                                                     (Parm)
//		struct FString                                     Text                                                       (OptionalParm, Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::SendGameInviteToFriend(unsigned char LocalUserNum, const struct FUniqueNetId& Friend, const struct FString& Text)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SendGameInviteToFriend");

	UOnlinePlayerInterface_SendGameInviteToFriend_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.Friend = Friend;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.SendMessageToFriend
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FUniqueNetId                                Friend                                                     (Parm)
//		struct FString                                     Message                                                    (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::SendMessageToFriend(unsigned char LocalUserNum, const struct FUniqueNetId& Friend, const struct FString& Message)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SendMessageToFriend");

	UOnlinePlayerInterface_SendMessageToFriend_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.Friend = Friend;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ClearFriendInviteReceivedDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             InviteDelegate                                             (Parm, NeedCtorLink)
void UOnlinePlayerInterface::ClearFriendInviteReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& InviteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearFriendInviteReceivedDelegate");

	UOnlinePlayerInterface_ClearFriendInviteReceivedDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.InviteDelegate = InviteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddFriendInviteReceivedDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             InviteDelegate                                             (Parm, NeedCtorLink)
void UOnlinePlayerInterface::AddFriendInviteReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& InviteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddFriendInviteReceivedDelegate");

	UOnlinePlayerInterface_AddFriendInviteReceivedDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.InviteDelegate = InviteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.OnFriendInviteReceived
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FUniqueNetId                                RequestingPlayer                                           (Parm)
//		struct FString                                     RequestingNick                                             (Parm, NeedCtorLink)
//		struct FString                                     Message                                                    (Parm, NeedCtorLink)
void UOnlinePlayerInterface::OnFriendInviteReceived(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer, const struct FString& RequestingNick, const struct FString& Message)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnFriendInviteReceived");

	UOnlinePlayerInterface_OnFriendInviteReceived_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.RequestingPlayer = RequestingPlayer;
	params.RequestingNick = RequestingNick;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.RemoveFriend
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FUniqueNetId                                FormerFriend                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::RemoveFriend(unsigned char LocalUserNum, const struct FUniqueNetId& FormerFriend)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.RemoveFriend");

	UOnlinePlayerInterface_RemoveFriend_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.FormerFriend = FormerFriend;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.DenyFriendInvite
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FUniqueNetId                                RequestingPlayer                                           (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::DenyFriendInvite(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.DenyFriendInvite");

	UOnlinePlayerInterface_DenyFriendInvite_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.RequestingPlayer = RequestingPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AcceptFriendInvite
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FUniqueNetId                                RequestingPlayer                                           (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::AcceptFriendInvite(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AcceptFriendInvite");

	UOnlinePlayerInterface_AcceptFriendInvite_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.RequestingPlayer = RequestingPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ClearAddFriendByNameCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             FriendDelegate                                             (Parm, NeedCtorLink)
void UOnlinePlayerInterface::ClearAddFriendByNameCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearAddFriendByNameCompleteDelegate");

	UOnlinePlayerInterface_ClearAddFriendByNameCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.FriendDelegate = FriendDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddAddFriendByNameCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             FriendDelegate                                             (Parm, NeedCtorLink)
void UOnlinePlayerInterface::AddAddFriendByNameCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddAddFriendByNameCompleteDelegate");

	UOnlinePlayerInterface_AddAddFriendByNameCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.FriendDelegate = FriendDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.OnAddFriendByNameComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlinePlayerInterface::OnAddFriendByNameComplete(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnAddFriendByNameComplete");

	UOnlinePlayerInterface_OnAddFriendByNameComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddFriendByName
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FString                                     FriendName                                                 (Parm, NeedCtorLink)
//		struct FString                                     Message                                                    (OptionalParm, Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::AddFriendByName(unsigned char LocalUserNum, const struct FString& FriendName, const struct FString& Message)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddFriendByName");

	UOnlinePlayerInterface_AddFriendByName_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.FriendName = FriendName;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddFriend
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FUniqueNetId                                NewFriend                                                  (Parm)
//		struct FString                                     Message                                                    (OptionalParm, Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::AddFriend(unsigned char LocalUserNum, const struct FUniqueNetId& NewFriend, const struct FString& Message)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddFriend");

	UOnlinePlayerInterface_AddFriend_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.NewFriend = NewFriend;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.GetKeyboardInputResults
//		Flags  -> ()
// Parameters:
//		unsigned char                                      bWasCanceled                                               (Parm, OutParm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UOnlinePlayerInterface::GetKeyboardInputResults(unsigned char* bWasCanceled)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetKeyboardInputResults");

	UOnlinePlayerInterface_GetKeyboardInputResults_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (bWasCanceled != nullptr)
		*bWasCanceled = params.bWasCanceled;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ClearKeyboardInputDoneDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             InputDelegate                                              (Parm, NeedCtorLink)
void UOnlinePlayerInterface::ClearKeyboardInputDoneDelegate(const struct FScriptDelegate& InputDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearKeyboardInputDoneDelegate");

	UOnlinePlayerInterface_ClearKeyboardInputDoneDelegate_Params params {};
	params.InputDelegate = InputDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddKeyboardInputDoneDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             InputDelegate                                              (Parm, NeedCtorLink)
void UOnlinePlayerInterface::AddKeyboardInputDoneDelegate(const struct FScriptDelegate& InputDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddKeyboardInputDoneDelegate");

	UOnlinePlayerInterface_AddKeyboardInputDoneDelegate_Params params {};
	params.InputDelegate = InputDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.OnKeyboardInputComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlinePlayerInterface::OnKeyboardInputComplete(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnKeyboardInputComplete");

	UOnlinePlayerInterface_OnKeyboardInputComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ShowKeyboardUI
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FString                                     TitleText                                                  (Parm, NeedCtorLink)
//		struct FString                                     DescriptionText                                            (Parm, NeedCtorLink)
//		bool                                               bIsPassword                                                (OptionalParm, Parm)
//		bool                                               bShouldValidate                                            (OptionalParm, Parm)
//		struct FString                                     DefaultText                                                (OptionalParm, Parm, NeedCtorLink)
//		int                                                MaxResultLength                                            (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::ShowKeyboardUI(unsigned char LocalUserNum, const struct FString& TitleText, const struct FString& DescriptionText, bool bIsPassword, bool bShouldValidate, const struct FString& DefaultText, int MaxResultLength)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ShowKeyboardUI");

	UOnlinePlayerInterface_ShowKeyboardUI_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.TitleText = TitleText;
	params.DescriptionText = DescriptionText;
	params.bIsPassword = bIsPassword;
	params.bShouldValidate = bShouldValidate;
	params.DefaultText = DefaultText;
	params.MaxResultLength = MaxResultLength;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.SetOnlineStatus
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                StatusId                                                   (Parm)
//		TArray<struct FLocalizedStringSetting>             LocalizedStringSettings                                    (Const, Parm, OutParm, NeedCtorLink)
//		TArray<struct FSettingsProperty>                   Properties                                                 (Const, Parm, OutParm, NeedCtorLink)
void UOnlinePlayerInterface::SetOnlineStatus(unsigned char LocalUserNum, int StatusId, TArray<struct FLocalizedStringSetting>* LocalizedStringSettings, TArray<struct FSettingsProperty>* Properties)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SetOnlineStatus");

	UOnlinePlayerInterface_SetOnlineStatus_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.StatusId = StatusId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (LocalizedStringSettings != nullptr)
		*LocalizedStringSettings = params.LocalizedStringSettings;
	if (Properties != nullptr)
		*Properties = params.Properties;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.GetFriendsList
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TArray<struct FOnlineFriend>                       Friends                                                    (Parm, OutParm, NeedCtorLink)
//		int                                                Count                                                      (OptionalParm, Parm)
//		int                                                StartingAt                                                 (OptionalParm, Parm)
//		TEnumAsByte<Engine_EOnlineEnumerationReadState>    ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_EOnlineEnumerationReadState> UOnlinePlayerInterface::GetFriendsList(unsigned char LocalUserNum, TArray<struct FOnlineFriend>* Friends, int Count, int StartingAt)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetFriendsList");

	UOnlinePlayerInterface_GetFriendsList_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.Count = Count;
	params.StartingAt = StartingAt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Friends != nullptr)
		*Friends = params.Friends;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ClearReadFriendsCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             ReadFriendsCompleteDelegate                                (Parm, NeedCtorLink)
void UOnlinePlayerInterface::ClearReadFriendsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadFriendsCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReadFriendsCompleteDelegate");

	UOnlinePlayerInterface_ClearReadFriendsCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ReadFriendsCompleteDelegate = ReadFriendsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddReadFriendsCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             ReadFriendsCompleteDelegate                                (Parm, NeedCtorLink)
void UOnlinePlayerInterface::AddReadFriendsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadFriendsCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddReadFriendsCompleteDelegate");

	UOnlinePlayerInterface_AddReadFriendsCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ReadFriendsCompleteDelegate = ReadFriendsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.OnReadFriendsComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlinePlayerInterface::OnReadFriendsComplete(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnReadFriendsComplete");

	UOnlinePlayerInterface_OnReadFriendsComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ReadFriendsList
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                Count                                                      (OptionalParm, Parm)
//		int                                                StartingAt                                                 (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::ReadFriendsList(unsigned char LocalUserNum, int Count, int StartingAt)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ReadFriendsList");

	UOnlinePlayerInterface_ReadFriendsList_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.Count = Count;
	params.StartingAt = StartingAt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ClearWritePlayerStorageCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             WritePlayerStorageCompleteDelegate                         (Parm, NeedCtorLink)
void UOnlinePlayerInterface::ClearWritePlayerStorageCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& WritePlayerStorageCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearWritePlayerStorageCompleteDelegate");

	UOnlinePlayerInterface_ClearWritePlayerStorageCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.WritePlayerStorageCompleteDelegate = WritePlayerStorageCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddWritePlayerStorageCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             WritePlayerStorageCompleteDelegate                         (Parm, NeedCtorLink)
void UOnlinePlayerInterface::AddWritePlayerStorageCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& WritePlayerStorageCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddWritePlayerStorageCompleteDelegate");

	UOnlinePlayerInterface_AddWritePlayerStorageCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.WritePlayerStorageCompleteDelegate = WritePlayerStorageCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.OnWritePlayerStorageComplete
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlinePlayerInterface::OnWritePlayerStorageComplete(unsigned char LocalUserNum, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnWritePlayerStorageComplete");

	UOnlinePlayerInterface_OnWritePlayerStorageComplete_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.WritePlayerStorage
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		class UOnlinePlayerStorage*                        PlayerStorage                                              (Parm)
//		int                                                DeviceID                                                   (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::WritePlayerStorage(unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage, int DeviceID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.WritePlayerStorage");

	UOnlinePlayerInterface_WritePlayerStorage_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.PlayerStorage = PlayerStorage;
	params.DeviceID = DeviceID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.GetPlayerStorage
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		class UOnlinePlayerStorage*                        ReturnValue                                                (Parm, OutParm, ReturnParm)
class UOnlinePlayerStorage* UOnlinePlayerInterface::GetPlayerStorage(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetPlayerStorage");

	UOnlinePlayerInterface_GetPlayerStorage_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ClearReadPlayerStorageForNetIdCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                NetId                                                      (Parm)
//		struct FScriptDelegate                             ReadPlayerStorageForNetIdCompleteDelegate                  (Parm, NeedCtorLink)
void UOnlinePlayerInterface::ClearReadPlayerStorageForNetIdCompleteDelegate(const struct FUniqueNetId& NetId, const struct FScriptDelegate& ReadPlayerStorageForNetIdCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReadPlayerStorageForNetIdCompleteDelegate");

	UOnlinePlayerInterface_ClearReadPlayerStorageForNetIdCompleteDelegate_Params params {};
	params.NetId = NetId;
	params.ReadPlayerStorageForNetIdCompleteDelegate = ReadPlayerStorageForNetIdCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddReadPlayerStorageForNetIdCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                NetId                                                      (Parm)
//		struct FScriptDelegate                             ReadPlayerStorageForNetIdCompleteDelegate                  (Parm, NeedCtorLink)
void UOnlinePlayerInterface::AddReadPlayerStorageForNetIdCompleteDelegate(const struct FUniqueNetId& NetId, const struct FScriptDelegate& ReadPlayerStorageForNetIdCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddReadPlayerStorageForNetIdCompleteDelegate");

	UOnlinePlayerInterface_AddReadPlayerStorageForNetIdCompleteDelegate_Params params {};
	params.NetId = NetId;
	params.ReadPlayerStorageForNetIdCompleteDelegate = ReadPlayerStorageForNetIdCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.OnReadPlayerStorageForNetIdComplete
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                NetId                                                      (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlinePlayerInterface::OnReadPlayerStorageForNetIdComplete(const struct FUniqueNetId& NetId, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnReadPlayerStorageForNetIdComplete");

	UOnlinePlayerInterface_OnReadPlayerStorageForNetIdComplete_Params params {};
	params.NetId = NetId;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ReadPlayerStorageForNetId
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FUniqueNetId                                NetId                                                      (Parm)
//		class UOnlinePlayerStorage*                        PlayerStorage                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::ReadPlayerStorageForNetId(unsigned char LocalUserNum, const struct FUniqueNetId& NetId, class UOnlinePlayerStorage* PlayerStorage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ReadPlayerStorageForNetId");

	UOnlinePlayerInterface_ReadPlayerStorageForNetId_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.NetId = NetId;
	params.PlayerStorage = PlayerStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ClearReadPlayerStorageCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             ReadPlayerStorageCompleteDelegate                          (Parm, NeedCtorLink)
void UOnlinePlayerInterface::ClearReadPlayerStorageCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadPlayerStorageCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReadPlayerStorageCompleteDelegate");

	UOnlinePlayerInterface_ClearReadPlayerStorageCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ReadPlayerStorageCompleteDelegate = ReadPlayerStorageCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddReadPlayerStorageCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             ReadPlayerStorageCompleteDelegate                          (Parm, NeedCtorLink)
void UOnlinePlayerInterface::AddReadPlayerStorageCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadPlayerStorageCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddReadPlayerStorageCompleteDelegate");

	UOnlinePlayerInterface_AddReadPlayerStorageCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ReadPlayerStorageCompleteDelegate = ReadPlayerStorageCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.OnReadPlayerStorageComplete
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlinePlayerInterface::OnReadPlayerStorageComplete(unsigned char LocalUserNum, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnReadPlayerStorageComplete");

	UOnlinePlayerInterface_OnReadPlayerStorageComplete_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ReadPlayerStorage
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		class UOnlinePlayerStorage*                        PlayerStorage                                              (Parm)
//		int                                                DeviceID                                                   (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::ReadPlayerStorage(unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage, int DeviceID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ReadPlayerStorage");

	UOnlinePlayerInterface_ReadPlayerStorage_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.PlayerStorage = PlayerStorage;
	params.DeviceID = DeviceID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ClearWriteProfileSettingsCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             WriteProfileSettingsCompleteDelegate                       (Parm, NeedCtorLink)
void UOnlinePlayerInterface::ClearWriteProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& WriteProfileSettingsCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearWriteProfileSettingsCompleteDelegate");

	UOnlinePlayerInterface_ClearWriteProfileSettingsCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.WriteProfileSettingsCompleteDelegate = WriteProfileSettingsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddWriteProfileSettingsCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             WriteProfileSettingsCompleteDelegate                       (Parm, NeedCtorLink)
void UOnlinePlayerInterface::AddWriteProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& WriteProfileSettingsCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddWriteProfileSettingsCompleteDelegate");

	UOnlinePlayerInterface_AddWriteProfileSettingsCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.WriteProfileSettingsCompleteDelegate = WriteProfileSettingsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.OnWriteProfileSettingsComplete
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlinePlayerInterface::OnWriteProfileSettingsComplete(unsigned char LocalUserNum, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnWriteProfileSettingsComplete");

	UOnlinePlayerInterface_OnWriteProfileSettingsComplete_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.WriteProfileSettings
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		class UOnlineProfileSettings*                      ProfileSettings                                            (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::WriteProfileSettings(unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.WriteProfileSettings");

	UOnlinePlayerInterface_WriteProfileSettings_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ProfileSettings = ProfileSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.GetProfileSettings
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		class UOnlineProfileSettings*                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class UOnlineProfileSettings* UOnlinePlayerInterface::GetProfileSettings(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetProfileSettings");

	UOnlinePlayerInterface_GetProfileSettings_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ClearReadProfileSettingsCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             ReadProfileSettingsCompleteDelegate                        (Parm, NeedCtorLink)
void UOnlinePlayerInterface::ClearReadProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReadProfileSettingsCompleteDelegate");

	UOnlinePlayerInterface_ClearReadProfileSettingsCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ReadProfileSettingsCompleteDelegate = ReadProfileSettingsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddReadProfileSettingsCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             ReadProfileSettingsCompleteDelegate                        (Parm, NeedCtorLink)
void UOnlinePlayerInterface::AddReadProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddReadProfileSettingsCompleteDelegate");

	UOnlinePlayerInterface_AddReadProfileSettingsCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ReadProfileSettingsCompleteDelegate = ReadProfileSettingsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.OnReadProfileSettingsComplete
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlinePlayerInterface::OnReadProfileSettingsComplete(unsigned char LocalUserNum, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnReadProfileSettingsComplete");

	UOnlinePlayerInterface_OnReadProfileSettingsComplete_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ReadProfileSettings
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		class UOnlineProfileSettings*                      ProfileSettings                                            (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::ReadProfileSettings(unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ReadProfileSettings");

	UOnlinePlayerInterface_ReadProfileSettings_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ProfileSettings = ProfileSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ClearFriendsChangeDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             FriendsDelegate                                            (Parm, NeedCtorLink)
void UOnlinePlayerInterface::ClearFriendsChangeDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendsDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearFriendsChangeDelegate");

	UOnlinePlayerInterface_ClearFriendsChangeDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.FriendsDelegate = FriendsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddFriendsChangeDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             FriendsDelegate                                            (Parm, NeedCtorLink)
void UOnlinePlayerInterface::AddFriendsChangeDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendsDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddFriendsChangeDelegate");

	UOnlinePlayerInterface_AddFriendsChangeDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.FriendsDelegate = FriendsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ClearMutingChangeDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             MutingDelegate                                             (Parm, NeedCtorLink)
void UOnlinePlayerInterface::ClearMutingChangeDelegate(const struct FScriptDelegate& MutingDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearMutingChangeDelegate");

	UOnlinePlayerInterface_ClearMutingChangeDelegate_Params params {};
	params.MutingDelegate = MutingDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddMutingChangeDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             MutingDelegate                                             (Parm, NeedCtorLink)
void UOnlinePlayerInterface::AddMutingChangeDelegate(const struct FScriptDelegate& MutingDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddMutingChangeDelegate");

	UOnlinePlayerInterface_AddMutingChangeDelegate_Params params {};
	params.MutingDelegate = MutingDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ClearLoginCancelledDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             CancelledDelegate                                          (Parm, NeedCtorLink)
void UOnlinePlayerInterface::ClearLoginCancelledDelegate(const struct FScriptDelegate& CancelledDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearLoginCancelledDelegate");

	UOnlinePlayerInterface_ClearLoginCancelledDelegate_Params params {};
	params.CancelledDelegate = CancelledDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddLoginCancelledDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             CancelledDelegate                                          (Parm, NeedCtorLink)
void UOnlinePlayerInterface::AddLoginCancelledDelegate(const struct FScriptDelegate& CancelledDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddLoginCancelledDelegate");

	UOnlinePlayerInterface_AddLoginCancelledDelegate_Params params {};
	params.CancelledDelegate = CancelledDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ClearLoginStatusChangeDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             LoginStatusDelegate                                        (Parm, NeedCtorLink)
//		unsigned char                                      LocalUserNum                                               (Parm)
void UOnlinePlayerInterface::ClearLoginStatusChangeDelegate(const struct FScriptDelegate& LoginStatusDelegate, unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearLoginStatusChangeDelegate");

	UOnlinePlayerInterface_ClearLoginStatusChangeDelegate_Params params {};
	params.LoginStatusDelegate = LoginStatusDelegate;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddLoginStatusChangeDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             LoginStatusDelegate                                        (Parm, NeedCtorLink)
//		unsigned char                                      LocalUserNum                                               (Parm)
void UOnlinePlayerInterface::AddLoginStatusChangeDelegate(const struct FScriptDelegate& LoginStatusDelegate, unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddLoginStatusChangeDelegate");

	UOnlinePlayerInterface_AddLoginStatusChangeDelegate_Params params {};
	params.LoginStatusDelegate = LoginStatusDelegate;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.OnLoginStatusChange
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ELoginStatus>                   NewStatus                                                  (Parm)
//		struct FUniqueNetId                                NewId                                                      (Parm)
void UOnlinePlayerInterface::OnLoginStatusChange(TEnumAsByte<Engine_ELoginStatus> NewStatus, const struct FUniqueNetId& NewId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnLoginStatusChange");

	UOnlinePlayerInterface_OnLoginStatusChange_Params params {};
	params.NewStatus = NewStatus;
	params.NewId = NewId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ClearLoginChangeDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             LoginDelegate                                              (Parm, NeedCtorLink)
void UOnlinePlayerInterface::ClearLoginChangeDelegate(const struct FScriptDelegate& LoginDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearLoginChangeDelegate");

	UOnlinePlayerInterface_ClearLoginChangeDelegate_Params params {};
	params.LoginDelegate = LoginDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddLoginChangeDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             LoginDelegate                                              (Parm, NeedCtorLink)
void UOnlinePlayerInterface::AddLoginChangeDelegate(const struct FScriptDelegate& LoginDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddLoginChangeDelegate");

	UOnlinePlayerInterface_AddLoginChangeDelegate_Params params {};
	params.LoginDelegate = LoginDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ShowFriendsUI
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::ShowFriendsUI(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ShowFriendsUI");

	UOnlinePlayerInterface_ShowFriendsUI_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.IsMuted
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::IsMuted(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.IsMuted");

	UOnlinePlayerInterface_IsMuted_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AreAnyFriends
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TArray<struct FFriendsQuery>                       Query                                                      (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::AreAnyFriends(unsigned char LocalUserNum, TArray<struct FFriendsQuery>* Query)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AreAnyFriends");

	UOnlinePlayerInterface_AreAnyFriends_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Query != nullptr)
		*Query = params.Query;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.IsFriend
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::IsFriend(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.IsFriend");

	UOnlinePlayerInterface_IsFriend_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.CanShowPresenceInformation
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TEnumAsByte<Engine_EFeaturePrivilegeLevel>         ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_EFeaturePrivilegeLevel> UOnlinePlayerInterface::CanShowPresenceInformation(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanShowPresenceInformation");

	UOnlinePlayerInterface_CanShowPresenceInformation_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.CanViewPlayerProfiles
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TEnumAsByte<Engine_EFeaturePrivilegeLevel>         ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_EFeaturePrivilegeLevel> UOnlinePlayerInterface::CanViewPlayerProfiles(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanViewPlayerProfiles");

	UOnlinePlayerInterface_CanViewPlayerProfiles_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.CanPurchaseContent
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TEnumAsByte<Engine_EFeaturePrivilegeLevel>         ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_EFeaturePrivilegeLevel> UOnlinePlayerInterface::CanPurchaseContent(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanPurchaseContent");

	UOnlinePlayerInterface_CanPurchaseContent_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.CanDownloadUserContent
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TEnumAsByte<Engine_EFeaturePrivilegeLevel>         ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_EFeaturePrivilegeLevel> UOnlinePlayerInterface::CanDownloadUserContent(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanDownloadUserContent");

	UOnlinePlayerInterface_CanDownloadUserContent_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.CanCommunicate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TEnumAsByte<Engine_EFeaturePrivilegeLevel>         ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_EFeaturePrivilegeLevel> UOnlinePlayerInterface::CanCommunicate(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanCommunicate");

	UOnlinePlayerInterface_CanCommunicate_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.CanPlayOnline
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TEnumAsByte<Engine_EFeaturePrivilegeLevel>         ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_EFeaturePrivilegeLevel> UOnlinePlayerInterface::CanPlayOnline(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanPlayOnline");

	UOnlinePlayerInterface_CanPlayOnline_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.IsLocalLogin
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::IsLocalLogin(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.IsLocalLogin");

	UOnlinePlayerInterface_IsLocalLogin_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.IsGuestLogin
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::IsGuestLogin(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.IsGuestLogin");

	UOnlinePlayerInterface_IsGuestLogin_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.GetPlayerNickname
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UOnlinePlayerInterface::GetPlayerNickname(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetPlayerNickname");

	UOnlinePlayerInterface_GetPlayerNickname_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.GetUniquePlayerId
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FUniqueNetId                                PlayerID                                                   (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::GetUniquePlayerId(unsigned char LocalUserNum, struct FUniqueNetId* PlayerID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetUniquePlayerId");

	UOnlinePlayerInterface_GetUniquePlayerId_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (PlayerID != nullptr)
		*PlayerID = params.PlayerID;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.GetLoginStatus
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TEnumAsByte<Engine_ELoginStatus>                   ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_ELoginStatus> UOnlinePlayerInterface::GetLoginStatus(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetLoginStatus");

	UOnlinePlayerInterface_GetLoginStatus_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ClearLogoutCompletedDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             LogoutDelegate                                             (Parm, NeedCtorLink)
void UOnlinePlayerInterface::ClearLogoutCompletedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LogoutDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearLogoutCompletedDelegate");

	UOnlinePlayerInterface_ClearLogoutCompletedDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.LogoutDelegate = LogoutDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddLogoutCompletedDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             LogoutDelegate                                             (Parm, NeedCtorLink)
void UOnlinePlayerInterface::AddLogoutCompletedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LogoutDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddLogoutCompletedDelegate");

	UOnlinePlayerInterface_AddLogoutCompletedDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.LogoutDelegate = LogoutDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.OnLogoutCompleted
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlinePlayerInterface::OnLogoutCompleted(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnLogoutCompleted");

	UOnlinePlayerInterface_OnLogoutCompleted_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.Logout
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::Logout(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.Logout");

	UOnlinePlayerInterface_Logout_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ClearLoginFailedDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             LoginDelegate                                              (Parm, NeedCtorLink)
void UOnlinePlayerInterface::ClearLoginFailedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LoginDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearLoginFailedDelegate");

	UOnlinePlayerInterface_ClearLoginFailedDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.LoginDelegate = LoginDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AddLoginFailedDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             LoginDelegate                                              (Parm, NeedCtorLink)
void UOnlinePlayerInterface::AddLoginFailedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LoginDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddLoginFailedDelegate");

	UOnlinePlayerInterface_AddLoginFailedDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.LoginDelegate = LoginDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.OnLoginFailed
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TEnumAsByte<Engine_EOnlineServerConnectionStatus>  ErrorCode                                                  (Parm)
void UOnlinePlayerInterface::OnLoginFailed(unsigned char LocalUserNum, TEnumAsByte<Engine_EOnlineServerConnectionStatus> ErrorCode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnLoginFailed");

	UOnlinePlayerInterface_OnLoginFailed_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ErrorCode = ErrorCode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.AutoLogin
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::AutoLogin()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AutoLogin");

	UOnlinePlayerInterface_AutoLogin_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.Login
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FString                                     LoginName                                                  (Parm, NeedCtorLink)
//		struct FString                                     Password                                                   (Parm, NeedCtorLink)
//		bool                                               bWantsLocalOnly                                            (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::Login(unsigned char LocalUserNum, const struct FString& LoginName, const struct FString& Password, bool bWantsLocalOnly)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.Login");

	UOnlinePlayerInterface_Login_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.LoginName = LoginName;
	params.Password = Password;
	params.bWantsLocalOnly = bWantsLocalOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.ShowLoginUI
//		Flags  -> ()
// Parameters:
//		bool                                               bShowOnlineOnly                                            (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterface::ShowLoginUI(bool bShowOnlineOnly)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ShowLoginUI");

	UOnlinePlayerInterface_ShowLoginUI_Params params {};
	params.bShowOnlineOnly = bShowOnlineOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.OnFriendsChange
//		Flags  -> ()
void UOnlinePlayerInterface::OnFriendsChange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnFriendsChange");

	UOnlinePlayerInterface_OnFriendsChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.OnMutingChange
//		Flags  -> ()
void UOnlinePlayerInterface::OnMutingChange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnMutingChange");

	UOnlinePlayerInterface_OnMutingChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.OnLoginCancelled
//		Flags  -> ()
void UOnlinePlayerInterface::OnLoginCancelled()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnLoginCancelled");

	UOnlinePlayerInterface_OnLoginCancelled_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterface.OnLoginChange
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
void UOnlinePlayerInterface::OnLoginChange(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnLoginChange");

	UOnlinePlayerInterface_OnLoginChange_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SharedCloudFileInterface.ClearWriteSharedFileCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             WriteSharedFileCompleteDelegate                            (Parm, NeedCtorLink)
void USharedCloudFileInterface::ClearWriteSharedFileCompleteDelegate(const struct FScriptDelegate& WriteSharedFileCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SharedCloudFileInterface.ClearWriteSharedFileCompleteDelegate");

	USharedCloudFileInterface_ClearWriteSharedFileCompleteDelegate_Params params {};
	params.WriteSharedFileCompleteDelegate = WriteSharedFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SharedCloudFileInterface.AddWriteSharedFileCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             WriteSharedFileCompleteDelegate                            (Parm, NeedCtorLink)
void USharedCloudFileInterface::AddWriteSharedFileCompleteDelegate(const struct FScriptDelegate& WriteSharedFileCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SharedCloudFileInterface.AddWriteSharedFileCompleteDelegate");

	USharedCloudFileInterface_AddWriteSharedFileCompleteDelegate_Params params {};
	params.WriteSharedFileCompleteDelegate = WriteSharedFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SharedCloudFileInterface.WriteSharedFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		TArray<unsigned char>                              Contents                                                   (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USharedCloudFileInterface::WriteSharedFile(const struct FString& UserId, const struct FString& Filename, TArray<unsigned char>* Contents)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SharedCloudFileInterface.WriteSharedFile");

	USharedCloudFileInterface_WriteSharedFile_Params params {};
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Contents != nullptr)
		*Contents = params.Contents;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SharedCloudFileInterface.OnWriteSharedFileComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		struct FString                                     SharedHandle                                               (Parm, NeedCtorLink)
void USharedCloudFileInterface::OnWriteSharedFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename, const struct FString& SharedHandle)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SharedCloudFileInterface.OnWriteSharedFileComplete");

	USharedCloudFileInterface_OnWriteSharedFileComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;
	params.Filename = Filename;
	params.SharedHandle = SharedHandle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SharedCloudFileInterface.ClearReadSharedFileCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ReadSharedFileCompleteDelegate                             (Parm, NeedCtorLink)
void USharedCloudFileInterface::ClearReadSharedFileCompleteDelegate(const struct FScriptDelegate& ReadSharedFileCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SharedCloudFileInterface.ClearReadSharedFileCompleteDelegate");

	USharedCloudFileInterface_ClearReadSharedFileCompleteDelegate_Params params {};
	params.ReadSharedFileCompleteDelegate = ReadSharedFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SharedCloudFileInterface.AddReadSharedFileCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ReadSharedFileCompleteDelegate                             (Parm, NeedCtorLink)
void USharedCloudFileInterface::AddReadSharedFileCompleteDelegate(const struct FScriptDelegate& ReadSharedFileCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SharedCloudFileInterface.AddReadSharedFileCompleteDelegate");

	USharedCloudFileInterface_AddReadSharedFileCompleteDelegate_Params params {};
	params.ReadSharedFileCompleteDelegate = ReadSharedFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SharedCloudFileInterface.ReadSharedFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     SharedHandle                                               (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USharedCloudFileInterface::ReadSharedFile(const struct FString& SharedHandle)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SharedCloudFileInterface.ReadSharedFile");

	USharedCloudFileInterface_ReadSharedFile_Params params {};
	params.SharedHandle = SharedHandle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SharedCloudFileInterface.OnReadSharedFileComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     SharedHandle                                               (Parm, NeedCtorLink)
void USharedCloudFileInterface::OnReadSharedFileComplete(bool bWasSuccessful, const struct FString& SharedHandle)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SharedCloudFileInterface.OnReadSharedFileComplete");

	USharedCloudFileInterface_OnReadSharedFileComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.SharedHandle = SharedHandle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SharedCloudFileInterface.ClearSharedFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     SharedHandle                                               (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USharedCloudFileInterface::ClearSharedFile(const struct FString& SharedHandle)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SharedCloudFileInterface.ClearSharedFile");

	USharedCloudFileInterface_ClearSharedFile_Params params {};
	params.SharedHandle = SharedHandle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SharedCloudFileInterface.ClearSharedFiles
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USharedCloudFileInterface::ClearSharedFiles()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SharedCloudFileInterface.ClearSharedFiles");

	USharedCloudFileInterface_ClearSharedFiles_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SharedCloudFileInterface.GetSharedFileContents
//		Flags  -> ()
// Parameters:
//		struct FString                                     SharedHandle                                               (Parm, NeedCtorLink)
//		TArray<unsigned char>                              FileContents                                               (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USharedCloudFileInterface::GetSharedFileContents(const struct FString& SharedHandle, TArray<unsigned char>* FileContents)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SharedCloudFileInterface.GetSharedFileContents");

	USharedCloudFileInterface_GetSharedFileContents_Params params {};
	params.SharedHandle = SharedHandle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (FileContents != nullptr)
		*FileContents = params.FileContents;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.GetLastNCloudSaveOwners
//		Flags  -> ()
// Parameters:
//		TArray<struct FString>                             McpIds                                                     (Parm, OutParm, NeedCtorLink)
void UUserCloudFileInterface::GetLastNCloudSaveOwners(TArray<struct FString>* McpIds)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.GetLastNCloudSaveOwners");

	UUserCloudFileInterface_GetLastNCloudSaveOwners_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (McpIds != nullptr)
		*McpIds = params.McpIds;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.ClearReadLastNCloudSaveOwnersCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             CompleteDelegate                                           (Parm, NeedCtorLink)
void UUserCloudFileInterface::ClearReadLastNCloudSaveOwnersCompleteDelegate(const struct FScriptDelegate& CompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.ClearReadLastNCloudSaveOwnersCompleteDelegate");

	UUserCloudFileInterface_ClearReadLastNCloudSaveOwnersCompleteDelegate_Params params {};
	params.CompleteDelegate = CompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.AddReadLastNCloudSaveOwnersCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             CompleteDelegate                                           (Parm, NeedCtorLink)
void UUserCloudFileInterface::AddReadLastNCloudSaveOwnersCompleteDelegate(const struct FScriptDelegate& CompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.AddReadLastNCloudSaveOwnersCompleteDelegate");

	UUserCloudFileInterface_AddReadLastNCloudSaveOwnersCompleteDelegate_Params params {};
	params.CompleteDelegate = CompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.OnReadLastNCloudSaveOwnersComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UUserCloudFileInterface::OnReadLastNCloudSaveOwnersComplete(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.OnReadLastNCloudSaveOwnersComplete");

	UUserCloudFileInterface_OnReadLastNCloudSaveOwnersComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.ReadLastNCloudSaveOwners
//		Flags  -> ()
// Parameters:
//		int                                                Count                                                      (OptionalParm, Parm)
//		struct FString                                     Filename                                                   (OptionalParm, Parm, NeedCtorLink)
void UUserCloudFileInterface::ReadLastNCloudSaveOwners(int Count, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.ReadLastNCloudSaveOwners");

	UUserCloudFileInterface_ReadLastNCloudSaveOwners_Params params {};
	params.Count = Count;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.ClearAllDelegates
//		Flags  -> ()
void UUserCloudFileInterface::ClearAllDelegates()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.ClearAllDelegates");

	UUserCloudFileInterface_ClearAllDelegates_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.ClearDeleteUserFileCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             DeleteUserFileCompleteDelegate                             (Parm, NeedCtorLink)
void UUserCloudFileInterface::ClearDeleteUserFileCompleteDelegate(const struct FScriptDelegate& DeleteUserFileCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.ClearDeleteUserFileCompleteDelegate");

	UUserCloudFileInterface_ClearDeleteUserFileCompleteDelegate_Params params {};
	params.DeleteUserFileCompleteDelegate = DeleteUserFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.AddDeleteUserFileCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             DeleteUserFileCompleteDelegate                             (Parm, NeedCtorLink)
void UUserCloudFileInterface::AddDeleteUserFileCompleteDelegate(const struct FScriptDelegate& DeleteUserFileCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.AddDeleteUserFileCompleteDelegate");

	UUserCloudFileInterface_AddDeleteUserFileCompleteDelegate_Params params {};
	params.DeleteUserFileCompleteDelegate = DeleteUserFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.DeleteUserFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		bool                                               bShouldCloudDelete                                         (Parm)
//		bool                                               bShouldLocallyDelete                                       (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUserCloudFileInterface::DeleteUserFile(const struct FString& UserId, const struct FString& Filename, bool bShouldCloudDelete, bool bShouldLocallyDelete)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.DeleteUserFile");

	UUserCloudFileInterface_DeleteUserFile_Params params {};
	params.UserId = UserId;
	params.Filename = Filename;
	params.bShouldCloudDelete = bShouldCloudDelete;
	params.bShouldLocallyDelete = bShouldLocallyDelete;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.OnDeleteUserFileComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UUserCloudFileInterface::OnDeleteUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.OnDeleteUserFileComplete");

	UUserCloudFileInterface_OnDeleteUserFileComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.ClearWriteUserFileCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             WriteUserFileCompleteDelegate                              (Parm, NeedCtorLink)
void UUserCloudFileInterface::ClearWriteUserFileCompleteDelegate(const struct FScriptDelegate& WriteUserFileCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.ClearWriteUserFileCompleteDelegate");

	UUserCloudFileInterface_ClearWriteUserFileCompleteDelegate_Params params {};
	params.WriteUserFileCompleteDelegate = WriteUserFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.AddWriteUserFileCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             WriteUserFileCompleteDelegate                              (Parm, NeedCtorLink)
void UUserCloudFileInterface::AddWriteUserFileCompleteDelegate(const struct FScriptDelegate& WriteUserFileCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.AddWriteUserFileCompleteDelegate");

	UUserCloudFileInterface_AddWriteUserFileCompleteDelegate_Params params {};
	params.WriteUserFileCompleteDelegate = WriteUserFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.WriteUserFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		TArray<unsigned char>                              FileContents                                               (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUserCloudFileInterface::WriteUserFile(const struct FString& UserId, const struct FString& Filename, TArray<unsigned char>* FileContents)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.WriteUserFile");

	UUserCloudFileInterface_WriteUserFile_Params params {};
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (FileContents != nullptr)
		*FileContents = params.FileContents;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.OnWriteUserFileComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UUserCloudFileInterface::OnWriteUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.OnWriteUserFileComplete");

	UUserCloudFileInterface_OnWriteUserFileComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.ClearReadUserFileCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ReadUserFileCompleteDelegate                               (Parm, NeedCtorLink)
void UUserCloudFileInterface::ClearReadUserFileCompleteDelegate(const struct FScriptDelegate& ReadUserFileCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.ClearReadUserFileCompleteDelegate");

	UUserCloudFileInterface_ClearReadUserFileCompleteDelegate_Params params {};
	params.ReadUserFileCompleteDelegate = ReadUserFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.AddReadUserFileCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ReadUserFileCompleteDelegate                               (Parm, NeedCtorLink)
void UUserCloudFileInterface::AddReadUserFileCompleteDelegate(const struct FScriptDelegate& ReadUserFileCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.AddReadUserFileCompleteDelegate");

	UUserCloudFileInterface_AddReadUserFileCompleteDelegate_Params params {};
	params.ReadUserFileCompleteDelegate = ReadUserFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.ReadUserFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUserCloudFileInterface::ReadUserFile(const struct FString& UserId, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.ReadUserFile");

	UUserCloudFileInterface_ReadUserFile_Params params {};
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.OnReadUserFileComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UUserCloudFileInterface::OnReadUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.OnReadUserFileComplete");

	UUserCloudFileInterface_OnReadUserFileComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.GetUserFileList
//		Flags  -> ()
// Parameters:
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
//		TArray<struct FEmsFile>                            UserFiles                                                  (Parm, OutParm, NeedCtorLink)
void UUserCloudFileInterface::GetUserFileList(const struct FString& UserId, TArray<struct FEmsFile>* UserFiles)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.GetUserFileList");

	UUserCloudFileInterface_GetUserFileList_Params params {};
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (UserFiles != nullptr)
		*UserFiles = params.UserFiles;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.ClearEnumerateUserFileCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             EnumerateUserFileCompleteDelegate                          (Parm, NeedCtorLink)
void UUserCloudFileInterface::ClearEnumerateUserFileCompleteDelegate(const struct FScriptDelegate& EnumerateUserFileCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.ClearEnumerateUserFileCompleteDelegate");

	UUserCloudFileInterface_ClearEnumerateUserFileCompleteDelegate_Params params {};
	params.EnumerateUserFileCompleteDelegate = EnumerateUserFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.AddEnumerateUserFileCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             EnumerateUserFileCompleteDelegate                          (Parm, NeedCtorLink)
void UUserCloudFileInterface::AddEnumerateUserFileCompleteDelegate(const struct FScriptDelegate& EnumerateUserFileCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.AddEnumerateUserFileCompleteDelegate");

	UUserCloudFileInterface_AddEnumerateUserFileCompleteDelegate_Params params {};
	params.EnumerateUserFileCompleteDelegate = EnumerateUserFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.EnumerateUserFiles
//		Flags  -> ()
// Parameters:
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
void UUserCloudFileInterface::EnumerateUserFiles(const struct FString& UserId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.EnumerateUserFiles");

	UUserCloudFileInterface_EnumerateUserFiles_Params params {};
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.OnEnumerateUserFilesComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
void UUserCloudFileInterface::OnEnumerateUserFilesComplete(bool bWasSuccessful, const struct FString& UserId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.OnEnumerateUserFilesComplete");

	UUserCloudFileInterface_OnEnumerateUserFilesComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.ClearFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUserCloudFileInterface::ClearFile(const struct FString& UserId, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.ClearFile");

	UUserCloudFileInterface_ClearFile_Params params {};
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.ClearFiles
//		Flags  -> ()
// Parameters:
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUserCloudFileInterface::ClearFiles(const struct FString& UserId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.ClearFiles");

	UUserCloudFileInterface_ClearFiles_Params params {};
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileInterface.GetFileContents
//		Flags  -> ()
// Parameters:
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		TArray<unsigned char>                              FileContents                                               (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUserCloudFileInterface::GetFileContents(const struct FString& UserId, const struct FString& Filename, TArray<unsigned char>* FileContents)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.GetFileContents");

	UUserCloudFileInterface_GetFileContents_Params params {};
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (FileContents != nullptr)
		*FileContents = params.FileContents;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSocialInterface.ClearPostLinkCompleted
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             PostLinkDelegate                                           (Parm, NeedCtorLink)
void UOnlineSocialInterface::ClearPostLinkCompleted(unsigned char LocalUserNum, const struct FScriptDelegate& PostLinkDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.ClearPostLinkCompleted");

	UOnlineSocialInterface_ClearPostLinkCompleted_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.PostLinkDelegate = PostLinkDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSocialInterface.AddPostLinkCompleted
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             PostLinkDelegate                                           (Parm, NeedCtorLink)
void UOnlineSocialInterface::AddPostLinkCompleted(unsigned char LocalUserNum, const struct FScriptDelegate& PostLinkDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.AddPostLinkCompleted");

	UOnlineSocialInterface_AddPostLinkCompleted_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.PostLinkDelegate = PostLinkDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSocialInterface.OnPostLinkCompleted
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineSocialInterface::OnPostLinkCompleted(unsigned char LocalUserNum, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.OnPostLinkCompleted");

	UOnlineSocialInterface_OnPostLinkCompleted_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSocialInterface.PostLink
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FSocialPostLinkInfo                         PostLinkInfo                                               (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSocialInterface::PostLink(unsigned char LocalUserNum, struct FSocialPostLinkInfo* PostLinkInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.PostLink");

	UOnlineSocialInterface_PostLink_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (PostLinkInfo != nullptr)
		*PostLinkInfo = params.PostLinkInfo;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSocialInterface.ClearPostImageCompleted
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             PostImageDelegate                                          (Parm, NeedCtorLink)
void UOnlineSocialInterface::ClearPostImageCompleted(unsigned char LocalUserNum, const struct FScriptDelegate& PostImageDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.ClearPostImageCompleted");

	UOnlineSocialInterface_ClearPostImageCompleted_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.PostImageDelegate = PostImageDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSocialInterface.AddPostImageCompleted
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             PostImageDelegate                                          (Parm, NeedCtorLink)
void UOnlineSocialInterface::AddPostImageCompleted(unsigned char LocalUserNum, const struct FScriptDelegate& PostImageDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.AddPostImageCompleted");

	UOnlineSocialInterface_AddPostImageCompleted_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.PostImageDelegate = PostImageDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSocialInterface.OnPostImageCompleted
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineSocialInterface::OnPostImageCompleted(unsigned char LocalUserNum, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.OnPostImageCompleted");

	UOnlineSocialInterface_OnPostImageCompleted_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSocialInterface.PostImage
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FSocialPostImageInfo                        PostImageInfo                                              (Const, Parm, OutParm, NeedCtorLink)
//		TArray<unsigned char>                              FullImage                                                  (Const, Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSocialInterface::PostImage(unsigned char LocalUserNum, struct FSocialPostImageInfo* PostImageInfo, TArray<unsigned char> FullImage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.PostImage");

	UOnlineSocialInterface_PostImage_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.FullImage = FullImage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (PostImageInfo != nullptr)
		*PostImageInfo = params.PostImageInfo;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSocialInterface.ClearQuerySocialPostPrivilegesCompleted
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             PostPrivilegesDelegate                                     (Parm, NeedCtorLink)
void UOnlineSocialInterface::ClearQuerySocialPostPrivilegesCompleted(const struct FScriptDelegate& PostPrivilegesDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.ClearQuerySocialPostPrivilegesCompleted");

	UOnlineSocialInterface_ClearQuerySocialPostPrivilegesCompleted_Params params {};
	params.PostPrivilegesDelegate = PostPrivilegesDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSocialInterface.AddQuerySocialPostPrivilegesCompleted
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             PostPrivilegesDelegate                                     (Parm, NeedCtorLink)
void UOnlineSocialInterface::AddQuerySocialPostPrivilegesCompleted(const struct FScriptDelegate& PostPrivilegesDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.AddQuerySocialPostPrivilegesCompleted");

	UOnlineSocialInterface_AddQuerySocialPostPrivilegesCompleted_Params params {};
	params.PostPrivilegesDelegate = PostPrivilegesDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSocialInterface.OnQuerySocialPostPrivilegesCompleted
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FSocialPostPrivileges                       PostPrivileges                                             (Parm)
void UOnlineSocialInterface::OnQuerySocialPostPrivilegesCompleted(bool bWasSuccessful, const struct FSocialPostPrivileges& PostPrivileges)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.OnQuerySocialPostPrivilegesCompleted");

	UOnlineSocialInterface_OnQuerySocialPostPrivilegesCompleted_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.PostPrivileges = PostPrivileges;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSocialInterface.QuerySocialPostPrivileges
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSocialInterface::QuerySocialPostPrivileges()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.QuerySocialPostPrivileges");

	UOnlineSocialInterface_QuerySocialPostPrivileges_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileCacheInterface.DeleteTitleFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineTitleFileCacheInterface::DeleteTitleFile(const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.DeleteTitleFile");

	UOnlineTitleFileCacheInterface_DeleteTitleFile_Params params {};
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileCacheInterface.DeleteTitleFiles
//		Flags  -> ()
// Parameters:
//		float                                              MaxAgeSeconds                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineTitleFileCacheInterface::DeleteTitleFiles(float MaxAgeSeconds)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.DeleteTitleFiles");

	UOnlineTitleFileCacheInterface_DeleteTitleFiles_Params params {};
	params.MaxAgeSeconds = MaxAgeSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileCacheInterface.ClearCachedFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineTitleFileCacheInterface::ClearCachedFile(const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.ClearCachedFile");

	UOnlineTitleFileCacheInterface_ClearCachedFile_Params params {};
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileCacheInterface.ClearCachedFiles
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineTitleFileCacheInterface::ClearCachedFiles()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.ClearCachedFiles");

	UOnlineTitleFileCacheInterface_ClearCachedFiles_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileCacheInterface.GetTitleFileLogicalName
//		Flags  -> ()
// Parameters:
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UOnlineTitleFileCacheInterface::GetTitleFileLogicalName(const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.GetTitleFileLogicalName");

	UOnlineTitleFileCacheInterface_GetTitleFileLogicalName_Params params {};
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileCacheInterface.GetTitleFileHash
//		Flags  -> ()
// Parameters:
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UOnlineTitleFileCacheInterface::GetTitleFileHash(const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.GetTitleFileHash");

	UOnlineTitleFileCacheInterface_GetTitleFileHash_Params params {};
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileCacheInterface.GetTitleFileState
//		Flags  -> ()
// Parameters:
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		TEnumAsByte<Engine_EOnlineEnumerationReadState>    ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_EOnlineEnumerationReadState> UOnlineTitleFileCacheInterface::GetTitleFileState(const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.GetTitleFileState");

	UOnlineTitleFileCacheInterface_GetTitleFileState_Params params {};
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileCacheInterface.GetTitleFileContents
//		Flags  -> ()
// Parameters:
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		TArray<unsigned char>                              FileContents                                               (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineTitleFileCacheInterface::GetTitleFileContents(const struct FString& Filename, TArray<unsigned char>* FileContents)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.GetTitleFileContents");

	UOnlineTitleFileCacheInterface_GetTitleFileContents_Params params {};
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (FileContents != nullptr)
		*FileContents = params.FileContents;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileCacheInterface.ClearSaveTitleFileCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             SaveCompleteDelegate                                       (Parm, NeedCtorLink)
void UOnlineTitleFileCacheInterface::ClearSaveTitleFileCompleteDelegate(const struct FScriptDelegate& SaveCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.ClearSaveTitleFileCompleteDelegate");

	UOnlineTitleFileCacheInterface_ClearSaveTitleFileCompleteDelegate_Params params {};
	params.SaveCompleteDelegate = SaveCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileCacheInterface.AddSaveTitleFileCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             SaveCompleteDelegate                                       (Parm, NeedCtorLink)
void UOnlineTitleFileCacheInterface::AddSaveTitleFileCompleteDelegate(const struct FScriptDelegate& SaveCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.AddSaveTitleFileCompleteDelegate");

	UOnlineTitleFileCacheInterface_AddSaveTitleFileCompleteDelegate_Params params {};
	params.SaveCompleteDelegate = SaveCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileCacheInterface.OnSaveTitleFileComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UOnlineTitleFileCacheInterface::OnSaveTitleFileComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.OnSaveTitleFileComplete");

	UOnlineTitleFileCacheInterface_OnSaveTitleFileComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileCacheInterface.SaveTitleFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		struct FString                                     LogicalName                                                (Parm, NeedCtorLink)
//		TArray<unsigned char>                              FileContents                                               (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineTitleFileCacheInterface::SaveTitleFile(const struct FString& Filename, const struct FString& LogicalName, TArray<unsigned char> FileContents)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.SaveTitleFile");

	UOnlineTitleFileCacheInterface_SaveTitleFile_Params params {};
	params.Filename = Filename;
	params.LogicalName = LogicalName;
	params.FileContents = FileContents;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileCacheInterface.ClearLoadTitleFileCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             LoadCompleteDelegate                                       (Parm, NeedCtorLink)
void UOnlineTitleFileCacheInterface::ClearLoadTitleFileCompleteDelegate(const struct FScriptDelegate& LoadCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.ClearLoadTitleFileCompleteDelegate");

	UOnlineTitleFileCacheInterface_ClearLoadTitleFileCompleteDelegate_Params params {};
	params.LoadCompleteDelegate = LoadCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileCacheInterface.AddLoadTitleFileCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             LoadCompleteDelegate                                       (Parm, NeedCtorLink)
void UOnlineTitleFileCacheInterface::AddLoadTitleFileCompleteDelegate(const struct FScriptDelegate& LoadCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.AddLoadTitleFileCompleteDelegate");

	UOnlineTitleFileCacheInterface_AddLoadTitleFileCompleteDelegate_Params params {};
	params.LoadCompleteDelegate = LoadCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileCacheInterface.OnLoadTitleFileComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UOnlineTitleFileCacheInterface::OnLoadTitleFileComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.OnLoadTitleFileComplete");

	UOnlineTitleFileCacheInterface_OnLoadTitleFileComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileCacheInterface.LoadTitleFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineTitleFileCacheInterface::LoadTitleFile(const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.LoadTitleFile");

	UOnlineTitleFileCacheInterface_LoadTitleFile_Params params {};
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileInterface.GetTitleFileList
//		Flags  -> ()
// Parameters:
//		TArray<struct FEmsFile>                            FileList                                                   (Parm, OutParm, NeedCtorLink)
void UOnlineTitleFileInterface::GetTitleFileList(TArray<struct FEmsFile>* FileList)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.GetTitleFileList");

	UOnlineTitleFileInterface_GetTitleFileList_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (FileList != nullptr)
		*FileList = params.FileList;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileInterface.ClearRequestTitleFileListCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             RequestTitleFileListDelegate                               (Parm, NeedCtorLink)
void UOnlineTitleFileInterface::ClearRequestTitleFileListCompleteDelegate(const struct FScriptDelegate& RequestTitleFileListDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.ClearRequestTitleFileListCompleteDelegate");

	UOnlineTitleFileInterface_ClearRequestTitleFileListCompleteDelegate_Params params {};
	params.RequestTitleFileListDelegate = RequestTitleFileListDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileInterface.AddRequestTitleFileListCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             RequestTitleFileListDelegate                               (Parm, NeedCtorLink)
void UOnlineTitleFileInterface::AddRequestTitleFileListCompleteDelegate(const struct FScriptDelegate& RequestTitleFileListDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.AddRequestTitleFileListCompleteDelegate");

	UOnlineTitleFileInterface_AddRequestTitleFileListCompleteDelegate_Params params {};
	params.RequestTitleFileListDelegate = RequestTitleFileListDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileInterface.OnRequestTitleFileListComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     ResultStr                                                  (Parm, NeedCtorLink)
void UOnlineTitleFileInterface::OnRequestTitleFileListComplete(bool bWasSuccessful, const struct FString& ResultStr)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.OnRequestTitleFileListComplete");

	UOnlineTitleFileInterface_OnRequestTitleFileListComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.ResultStr = ResultStr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileInterface.RequestTitleFileList
//		Flags  -> ()
void UOnlineTitleFileInterface::RequestTitleFileList()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.RequestTitleFileList");

	UOnlineTitleFileInterface_RequestTitleFileList_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileInterface.ClearDownloadedFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineTitleFileInterface::ClearDownloadedFile(const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.ClearDownloadedFile");

	UOnlineTitleFileInterface_ClearDownloadedFile_Params params {};
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileInterface.ClearDownloadedFiles
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineTitleFileInterface::ClearDownloadedFiles()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.ClearDownloadedFiles");

	UOnlineTitleFileInterface_ClearDownloadedFiles_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileInterface.GetTitleFileState
//		Flags  -> ()
// Parameters:
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		TEnumAsByte<Engine_EOnlineEnumerationReadState>    ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_EOnlineEnumerationReadState> UOnlineTitleFileInterface::GetTitleFileState(const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.GetTitleFileState");

	UOnlineTitleFileInterface_GetTitleFileState_Params params {};
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileInterface.GetTitleFileContents
//		Flags  -> ()
// Parameters:
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		TArray<unsigned char>                              FileContents                                               (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineTitleFileInterface::GetTitleFileContents(const struct FString& Filename, TArray<unsigned char>* FileContents)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.GetTitleFileContents");

	UOnlineTitleFileInterface_GetTitleFileContents_Params params {};
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (FileContents != nullptr)
		*FileContents = params.FileContents;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileInterface.ClearReadTitleFileCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ReadTitleFileCompleteDelegate                              (Parm, NeedCtorLink)
void UOnlineTitleFileInterface::ClearReadTitleFileCompleteDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.ClearReadTitleFileCompleteDelegate");

	UOnlineTitleFileInterface_ClearReadTitleFileCompleteDelegate_Params params {};
	params.ReadTitleFileCompleteDelegate = ReadTitleFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileInterface.AddReadTitleFileCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ReadTitleFileCompleteDelegate                              (Parm, NeedCtorLink)
void UOnlineTitleFileInterface::AddReadTitleFileCompleteDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.AddReadTitleFileCompleteDelegate");

	UOnlineTitleFileInterface_AddReadTitleFileCompleteDelegate_Params params {};
	params.ReadTitleFileCompleteDelegate = ReadTitleFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileInterface.ReadTitleFile
//		Flags  -> ()
// Parameters:
//		struct FString                                     FileToRead                                                 (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineTitleFileInterface::ReadTitleFile(const struct FString& FileToRead)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.ReadTitleFile");

	UOnlineTitleFileInterface_ReadTitleFile_Params params {};
	params.FileToRead = FileToRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineTitleFileInterface.OnReadTitleFileComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UOnlineTitleFileInterface::OnReadTitleFileComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.OnReadTitleFileComplete");

	UOnlineTitleFileInterface_OnReadTitleFileComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePartyChatInterface.IsInPartyChat
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePartyChatInterface::IsInPartyChat(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.IsInPartyChat");

	UOnlinePartyChatInterface_IsInPartyChat_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePartyChatInterface.ShowCommunitySessionsUI
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePartyChatInterface::ShowCommunitySessionsUI(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.ShowCommunitySessionsUI");

	UOnlinePartyChatInterface_ShowCommunitySessionsUI_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePartyChatInterface.ShowVoiceChannelUI
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePartyChatInterface::ShowVoiceChannelUI(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.ShowVoiceChannelUI");

	UOnlinePartyChatInterface_ShowVoiceChannelUI_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePartyChatInterface.ShowPartyUI
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePartyChatInterface::ShowPartyUI(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.ShowPartyUI");

	UOnlinePartyChatInterface_ShowPartyUI_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePartyChatInterface.GetPartyBandwidth
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UOnlinePartyChatInterface::GetPartyBandwidth()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.GetPartyBandwidth");

	UOnlinePartyChatInterface_GetPartyBandwidth_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePartyChatInterface.SetPartyMemberCustomData
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                Data1                                                      (Parm)
//		int                                                Data2                                                      (Parm)
//		int                                                Data3                                                      (Parm)
//		int                                                Data4                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePartyChatInterface::SetPartyMemberCustomData(unsigned char LocalUserNum, int Data1, int Data2, int Data3, int Data4)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.SetPartyMemberCustomData");

	UOnlinePartyChatInterface_SetPartyMemberCustomData_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.Data1 = Data1;
	params.Data2 = Data2;
	params.Data3 = Data3;
	params.Data4 = Data4;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePartyChatInterface.ClearPartyMembersInfoChangedDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             PartyMembersInfoChangedDelegate                            (Parm, NeedCtorLink)
void UOnlinePartyChatInterface::ClearPartyMembersInfoChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& PartyMembersInfoChangedDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.ClearPartyMembersInfoChangedDelegate");

	UOnlinePartyChatInterface_ClearPartyMembersInfoChangedDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.PartyMembersInfoChangedDelegate = PartyMembersInfoChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePartyChatInterface.AddPartyMembersInfoChangedDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             PartyMembersInfoChangedDelegate                            (Parm, NeedCtorLink)
void UOnlinePartyChatInterface::AddPartyMembersInfoChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& PartyMembersInfoChangedDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.AddPartyMembersInfoChangedDelegate");

	UOnlinePartyChatInterface_AddPartyMembersInfoChangedDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.PartyMembersInfoChangedDelegate = PartyMembersInfoChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePartyChatInterface.OnPartyMembersInfoChanged
//		Flags  -> ()
// Parameters:
//		struct FString                                     PlayerName                                                 (Parm, NeedCtorLink)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		int                                                CustomData1                                                (Parm)
//		int                                                CustomData2                                                (Parm)
//		int                                                CustomData3                                                (Parm)
//		int                                                CustomData4                                                (Parm)
void UOnlinePartyChatInterface::OnPartyMembersInfoChanged(const struct FString& PlayerName, const struct FUniqueNetId& PlayerID, int CustomData1, int CustomData2, int CustomData3, int CustomData4)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.OnPartyMembersInfoChanged");

	UOnlinePartyChatInterface_OnPartyMembersInfoChanged_Params params {};
	params.PlayerName = PlayerName;
	params.PlayerID = PlayerID;
	params.CustomData1 = CustomData1;
	params.CustomData2 = CustomData2;
	params.CustomData3 = CustomData3;
	params.CustomData4 = CustomData4;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePartyChatInterface.ClearPartyMemberListChangedDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             PartyMemberListChangedDelegate                             (Parm, NeedCtorLink)
void UOnlinePartyChatInterface::ClearPartyMemberListChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& PartyMemberListChangedDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.ClearPartyMemberListChangedDelegate");

	UOnlinePartyChatInterface_ClearPartyMemberListChangedDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.PartyMemberListChangedDelegate = PartyMemberListChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePartyChatInterface.AddPartyMemberListChangedDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             PartyMemberListChangedDelegate                             (Parm, NeedCtorLink)
void UOnlinePartyChatInterface::AddPartyMemberListChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& PartyMemberListChangedDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.AddPartyMemberListChangedDelegate");

	UOnlinePartyChatInterface_AddPartyMemberListChangedDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.PartyMemberListChangedDelegate = PartyMemberListChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePartyChatInterface.OnPartyMemberListChanged
//		Flags  -> ()
// Parameters:
//		bool                                               bJoinedOrLeft                                              (Parm)
//		struct FString                                     PlayerName                                                 (Parm, NeedCtorLink)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
void UOnlinePartyChatInterface::OnPartyMemberListChanged(bool bJoinedOrLeft, const struct FString& PlayerName, const struct FUniqueNetId& PlayerID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.OnPartyMemberListChanged");

	UOnlinePartyChatInterface_OnPartyMemberListChanged_Params params {};
	params.bJoinedOrLeft = bJoinedOrLeft;
	params.PlayerName = PlayerName;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePartyChatInterface.GetPartyMemberInformation
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                MemberId                                                   (Parm)
//		struct FOnlinePartyMember                          PartyMember                                                (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePartyChatInterface::GetPartyMemberInformation(const struct FUniqueNetId& MemberId, struct FOnlinePartyMember* PartyMember)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.GetPartyMemberInformation");

	UOnlinePartyChatInterface_GetPartyMemberInformation_Params params {};
	params.MemberId = MemberId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (PartyMember != nullptr)
		*PartyMember = params.PartyMember;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePartyChatInterface.GetPartyMembersInformation
//		Flags  -> ()
// Parameters:
//		TArray<struct FOnlinePartyMember>                  PartyMembers                                               (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePartyChatInterface::GetPartyMembersInformation(TArray<struct FOnlinePartyMember>* PartyMembers)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.GetPartyMembersInformation");

	UOnlinePartyChatInterface_GetPartyMembersInformation_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (PartyMembers != nullptr)
		*PartyMembers = params.PartyMembers;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePartyChatInterface.ClearSendPartyGameInvitesCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             SendPartyGameInvitesCompleteDelegate                       (Parm, NeedCtorLink)
void UOnlinePartyChatInterface::ClearSendPartyGameInvitesCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& SendPartyGameInvitesCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.ClearSendPartyGameInvitesCompleteDelegate");

	UOnlinePartyChatInterface_ClearSendPartyGameInvitesCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.SendPartyGameInvitesCompleteDelegate = SendPartyGameInvitesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePartyChatInterface.AddSendPartyGameInvitesCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             SendPartyGameInvitesCompleteDelegate                       (Parm, NeedCtorLink)
void UOnlinePartyChatInterface::AddSendPartyGameInvitesCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& SendPartyGameInvitesCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.AddSendPartyGameInvitesCompleteDelegate");

	UOnlinePartyChatInterface_AddSendPartyGameInvitesCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.SendPartyGameInvitesCompleteDelegate = SendPartyGameInvitesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePartyChatInterface.OnSendPartyGameInvitesComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlinePartyChatInterface::OnSendPartyGameInvitesComplete(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.OnSendPartyGameInvitesComplete");

	UOnlinePartyChatInterface_OnSendPartyGameInvitesComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePartyChatInterface.SendPartyGameInvites
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePartyChatInterface::SendPartyGameInvites(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.SendPartyGameInvites");

	UOnlinePartyChatInterface_SendPartyGameInvites_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineNewsInterface.GetNews
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TEnumAsByte<Engine_EOnlineNewsType>                NewsType                                                   (Parm)
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UOnlineNewsInterface::GetNews(unsigned char LocalUserNum, TEnumAsByte<Engine_EOnlineNewsType> NewsType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.GetNews");

	UOnlineNewsInterface_GetNews_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.NewsType = NewsType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineNewsInterface.ClearReadNewsCompletedDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ReadNewsDelegate                                           (Parm, NeedCtorLink)
void UOnlineNewsInterface::ClearReadNewsCompletedDelegate(const struct FScriptDelegate& ReadNewsDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.ClearReadNewsCompletedDelegate");

	UOnlineNewsInterface_ClearReadNewsCompletedDelegate_Params params {};
	params.ReadNewsDelegate = ReadNewsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineNewsInterface.AddReadNewsCompletedDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ReadNewsDelegate                                           (Parm, NeedCtorLink)
void UOnlineNewsInterface::AddReadNewsCompletedDelegate(const struct FScriptDelegate& ReadNewsDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.AddReadNewsCompletedDelegate");

	UOnlineNewsInterface_AddReadNewsCompletedDelegate_Params params {};
	params.ReadNewsDelegate = ReadNewsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineNewsInterface.OnReadNewsCompleted
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		TEnumAsByte<Engine_EOnlineNewsType>                NewsType                                                   (Parm)
void UOnlineNewsInterface::OnReadNewsCompleted(bool bWasSuccessful, TEnumAsByte<Engine_EOnlineNewsType> NewsType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.OnReadNewsCompleted");

	UOnlineNewsInterface_OnReadNewsCompleted_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.NewsType = NewsType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineNewsInterface.ReadNews
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TEnumAsByte<Engine_EOnlineNewsType>                NewsType                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineNewsInterface::ReadNews(unsigned char LocalUserNum, TEnumAsByte<Engine_EOnlineNewsType> NewsType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.ReadNews");

	UOnlineNewsInterface_ReadNews_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.NewsType = NewsType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsInterface.CalcAggregateSkill
//		Flags  -> ()
// Parameters:
//		TArray<struct FDouble>                             Mus                                                        (Parm, NeedCtorLink)
//		TArray<struct FDouble>                             Sigmas                                                     (Parm, NeedCtorLink)
//		struct FDouble                                     OutAggregateMu                                             (Parm, OutParm)
//		struct FDouble                                     OutAggregateSigma                                          (Parm, OutParm)
void UOnlineStatsInterface::CalcAggregateSkill(TArray<struct FDouble> Mus, TArray<struct FDouble> Sigmas, struct FDouble* OutAggregateMu, struct FDouble* OutAggregateSigma)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.CalcAggregateSkill");

	UOnlineStatsInterface_CalcAggregateSkill_Params params {};
	params.Mus = Mus;
	params.Sigmas = Sigmas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutAggregateMu != nullptr)
		*OutAggregateMu = params.OutAggregateMu;
	if (OutAggregateSigma != nullptr)
		*OutAggregateSigma = params.OutAggregateSigma;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsInterface.RegisterStatGuid
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		struct FString                                     ClientStatGuid                                             (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineStatsInterface::RegisterStatGuid(const struct FUniqueNetId& PlayerID, struct FString* ClientStatGuid)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.RegisterStatGuid");

	UOnlineStatsInterface_RegisterStatGuid_Params params {};
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ClientStatGuid != nullptr)
		*ClientStatGuid = params.ClientStatGuid;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsInterface.GetClientStatGuid
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UOnlineStatsInterface::GetClientStatGuid()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.GetClientStatGuid");

	UOnlineStatsInterface_GetClientStatGuid_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsInterface.ClearRegisterHostStatGuidCompleteDelegateDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             RegisterHostStatGuidCompleteDelegate                       (Parm, NeedCtorLink)
void UOnlineStatsInterface::ClearRegisterHostStatGuidCompleteDelegateDelegate(const struct FScriptDelegate& RegisterHostStatGuidCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ClearRegisterHostStatGuidCompleteDelegateDelegate");

	UOnlineStatsInterface_ClearRegisterHostStatGuidCompleteDelegateDelegate_Params params {};
	params.RegisterHostStatGuidCompleteDelegate = RegisterHostStatGuidCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsInterface.AddRegisterHostStatGuidCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             RegisterHostStatGuidCompleteDelegate                       (Parm, NeedCtorLink)
void UOnlineStatsInterface::AddRegisterHostStatGuidCompleteDelegate(const struct FScriptDelegate& RegisterHostStatGuidCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.AddRegisterHostStatGuidCompleteDelegate");

	UOnlineStatsInterface_AddRegisterHostStatGuidCompleteDelegate_Params params {};
	params.RegisterHostStatGuidCompleteDelegate = RegisterHostStatGuidCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsInterface.OnRegisterHostStatGuidComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineStatsInterface::OnRegisterHostStatGuidComplete(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.OnRegisterHostStatGuidComplete");

	UOnlineStatsInterface_OnRegisterHostStatGuidComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsInterface.RegisterHostStatGuid
//		Flags  -> ()
// Parameters:
//		struct FString                                     HostStatGuid                                               (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineStatsInterface::RegisterHostStatGuid(struct FString* HostStatGuid)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.RegisterHostStatGuid");

	UOnlineStatsInterface_RegisterHostStatGuid_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (HostStatGuid != nullptr)
		*HostStatGuid = params.HostStatGuid;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsInterface.GetHostStatGuid
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString UOnlineStatsInterface::GetHostStatGuid()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.GetHostStatGuid");

	UOnlineStatsInterface_GetHostStatGuid_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsInterface.WriteOnlinePlayerScores
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		int                                                LeaderboardId                                              (Parm)
//		TArray<struct FOnlinePlayerScore>                  PlayerScores                                               (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineStatsInterface::WriteOnlinePlayerScores(const struct FName& SessionName, int LeaderboardId, TArray<struct FOnlinePlayerScore>* PlayerScores)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.WriteOnlinePlayerScores");

	UOnlineStatsInterface_WriteOnlinePlayerScores_Params params {};
	params.SessionName = SessionName;
	params.LeaderboardId = LeaderboardId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (PlayerScores != nullptr)
		*PlayerScores = params.PlayerScores;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsInterface.ClearFlushOnlineStatsCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             FlushOnlineStatsCompleteDelegate                           (Parm, NeedCtorLink)
void UOnlineStatsInterface::ClearFlushOnlineStatsCompleteDelegate(const struct FScriptDelegate& FlushOnlineStatsCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ClearFlushOnlineStatsCompleteDelegate");

	UOnlineStatsInterface_ClearFlushOnlineStatsCompleteDelegate_Params params {};
	params.FlushOnlineStatsCompleteDelegate = FlushOnlineStatsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsInterface.AddFlushOnlineStatsCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             FlushOnlineStatsCompleteDelegate                           (Parm, NeedCtorLink)
void UOnlineStatsInterface::AddFlushOnlineStatsCompleteDelegate(const struct FScriptDelegate& FlushOnlineStatsCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.AddFlushOnlineStatsCompleteDelegate");

	UOnlineStatsInterface_AddFlushOnlineStatsCompleteDelegate_Params params {};
	params.FlushOnlineStatsCompleteDelegate = FlushOnlineStatsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsInterface.OnFlushOnlineStatsComplete
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineStatsInterface::OnFlushOnlineStatsComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.OnFlushOnlineStatsComplete");

	UOnlineStatsInterface_OnFlushOnlineStatsComplete_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsInterface.FlushOnlineStats
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineStatsInterface::FlushOnlineStats(const struct FName& SessionName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.FlushOnlineStats");

	UOnlineStatsInterface_FlushOnlineStats_Params params {};
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsInterface.WriteOnlineStats
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		struct FUniqueNetId                                Player                                                     (Parm)
//		class UOnlineStatsWrite*                           StatsWrite                                                 (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineStatsInterface::WriteOnlineStats(const struct FName& SessionName, const struct FUniqueNetId& Player, class UOnlineStatsWrite* StatsWrite)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.WriteOnlineStats");

	UOnlineStatsInterface_WriteOnlineStats_Params params {};
	params.SessionName = SessionName;
	params.Player = Player;
	params.StatsWrite = StatsWrite;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsInterface.FreeStats
//		Flags  -> ()
// Parameters:
//		class UOnlineStatsRead*                            StatsRead                                                  (Parm)
void UOnlineStatsInterface::FreeStats(class UOnlineStatsRead* StatsRead)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.FreeStats");

	UOnlineStatsInterface_FreeStats_Params params {};
	params.StatsRead = StatsRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsInterface.ClearReadOnlineStatsCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ReadOnlineStatsCompleteDelegate                            (Parm, NeedCtorLink)
void UOnlineStatsInterface::ClearReadOnlineStatsCompleteDelegate(const struct FScriptDelegate& ReadOnlineStatsCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ClearReadOnlineStatsCompleteDelegate");

	UOnlineStatsInterface_ClearReadOnlineStatsCompleteDelegate_Params params {};
	params.ReadOnlineStatsCompleteDelegate = ReadOnlineStatsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsInterface.AddReadOnlineStatsCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ReadOnlineStatsCompleteDelegate                            (Parm, NeedCtorLink)
void UOnlineStatsInterface::AddReadOnlineStatsCompleteDelegate(const struct FScriptDelegate& ReadOnlineStatsCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.AddReadOnlineStatsCompleteDelegate");

	UOnlineStatsInterface_AddReadOnlineStatsCompleteDelegate_Params params {};
	params.ReadOnlineStatsCompleteDelegate = ReadOnlineStatsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsInterface.OnReadOnlineStatsComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineStatsInterface::OnReadOnlineStatsComplete(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.OnReadOnlineStatsComplete");

	UOnlineStatsInterface_OnReadOnlineStatsComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsInterface.ReadOnlineStatsByRankAroundPlayer
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		class UOnlineStatsRead*                            StatsRead                                                  (Parm)
//		int                                                NumRows                                                    (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineStatsInterface::ReadOnlineStatsByRankAroundPlayer(unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead, int NumRows)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ReadOnlineStatsByRankAroundPlayer");

	UOnlineStatsInterface_ReadOnlineStatsByRankAroundPlayer_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.StatsRead = StatsRead;
	params.NumRows = NumRows;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsInterface.ReadOnlineStatsByRank
//		Flags  -> ()
// Parameters:
//		class UOnlineStatsRead*                            StatsRead                                                  (Parm)
//		int                                                StartIndex                                                 (OptionalParm, Parm)
//		int                                                NumToRead                                                  (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineStatsInterface::ReadOnlineStatsByRank(class UOnlineStatsRead* StatsRead, int StartIndex, int NumToRead)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ReadOnlineStatsByRank");

	UOnlineStatsInterface_ReadOnlineStatsByRank_Params params {};
	params.StatsRead = StatsRead;
	params.StartIndex = StartIndex;
	params.NumToRead = NumToRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsInterface.ReadOnlineStatsForFriends
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		class UOnlineStatsRead*                            StatsRead                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineStatsInterface::ReadOnlineStatsForFriends(unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ReadOnlineStatsForFriends");

	UOnlineStatsInterface_ReadOnlineStatsForFriends_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.StatsRead = StatsRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineStatsInterface.ReadOnlineStats
//		Flags  -> ()
// Parameters:
//		TArray<struct FUniqueNetId>                        Players                                                    (Const, Parm, OutParm, NeedCtorLink)
//		class UOnlineStatsRead*                            StatsRead                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineStatsInterface::ReadOnlineStats(TArray<struct FUniqueNetId>* Players, class UOnlineStatsRead* StatsRead)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ReadOnlineStats");

	UOnlineStatsInterface_ReadOnlineStats_Params params {};
	params.StatsRead = StatsRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.UnmuteAll
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineVoiceInterface::UnmuteAll(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.UnmuteAll");

	UOnlineVoiceInterface_UnmuteAll_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.MuteAll
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               bAllowFriends                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineVoiceInterface::MuteAll(unsigned char LocalUserNum, bool bAllowFriends)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.MuteAll");

	UOnlineVoiceInterface_MuteAll_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.bAllowFriends = bAllowFriends;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.SetSpeechRecognitionObject
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		class USpeechRecognition*                          SpeechRecogObj                                             (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineVoiceInterface::SetSpeechRecognitionObject(unsigned char LocalUserNum, class USpeechRecognition* SpeechRecogObj)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.SetSpeechRecognitionObject");

	UOnlineVoiceInterface_SetSpeechRecognitionObject_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.SpeechRecogObj = SpeechRecogObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.SelectVocabulary
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                VocabularyId                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineVoiceInterface::SelectVocabulary(unsigned char LocalUserNum, int VocabularyId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.SelectVocabulary");

	UOnlineVoiceInterface_SelectVocabulary_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.VocabularyId = VocabularyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.ClearRecognitionCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             RecognitionDelegate                                        (Parm, NeedCtorLink)
void UOnlineVoiceInterface::ClearRecognitionCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& RecognitionDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.ClearRecognitionCompleteDelegate");

	UOnlineVoiceInterface_ClearRecognitionCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.RecognitionDelegate = RecognitionDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.AddRecognitionCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             RecognitionDelegate                                        (Parm, NeedCtorLink)
void UOnlineVoiceInterface::AddRecognitionCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& RecognitionDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.AddRecognitionCompleteDelegate");

	UOnlineVoiceInterface_AddRecognitionCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.RecognitionDelegate = RecognitionDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.OnRecognitionComplete
//		Flags  -> ()
void UOnlineVoiceInterface::OnRecognitionComplete()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.OnRecognitionComplete");

	UOnlineVoiceInterface_OnRecognitionComplete_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.GetRecognitionResults
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TArray<struct FSpeechRecognizedWord>               Words                                                      (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineVoiceInterface::GetRecognitionResults(unsigned char LocalUserNum, TArray<struct FSpeechRecognizedWord>* Words)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.GetRecognitionResults");

	UOnlineVoiceInterface_GetRecognitionResults_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Words != nullptr)
		*Words = params.Words;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.StopSpeechRecognition
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineVoiceInterface::StopSpeechRecognition(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.StopSpeechRecognition");

	UOnlineVoiceInterface_StopSpeechRecognition_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.StartSpeechRecognition
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineVoiceInterface::StartSpeechRecognition(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.StartSpeechRecognition");

	UOnlineVoiceInterface_StartSpeechRecognition_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.StopNetworkedVoice
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
void UOnlineVoiceInterface::StopNetworkedVoice(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.StopNetworkedVoice");

	UOnlineVoiceInterface_StopNetworkedVoice_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.StartNetworkedVoice
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
void UOnlineVoiceInterface::StartNetworkedVoice(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.StartNetworkedVoice");

	UOnlineVoiceInterface_StartNetworkedVoice_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.ClearPlayerTalkingDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             TalkerDelegate                                             (Parm, NeedCtorLink)
void UOnlineVoiceInterface::ClearPlayerTalkingDelegate(const struct FScriptDelegate& TalkerDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.ClearPlayerTalkingDelegate");

	UOnlineVoiceInterface_ClearPlayerTalkingDelegate_Params params {};
	params.TalkerDelegate = TalkerDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.AddPlayerTalkingDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             TalkerDelegate                                             (Parm, NeedCtorLink)
void UOnlineVoiceInterface::AddPlayerTalkingDelegate(const struct FScriptDelegate& TalkerDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.AddPlayerTalkingDelegate");

	UOnlineVoiceInterface_AddPlayerTalkingDelegate_Params params {};
	params.TalkerDelegate = TalkerDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.OnPlayerTalkingStateChange
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                Player                                                     (Parm)
//		bool                                               bIsTalking                                                 (Parm)
void UOnlineVoiceInterface::OnPlayerTalkingStateChange(const struct FUniqueNetId& Player, bool bIsTalking)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.OnPlayerTalkingStateChange");

	UOnlineVoiceInterface_OnPlayerTalkingStateChange_Params params {};
	params.Player = Player;
	params.bIsTalking = bIsTalking;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.UnmuteRemoteTalker
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		bool                                               bIsSystemWide                                              (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineVoiceInterface::UnmuteRemoteTalker(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID, bool bIsSystemWide)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.UnmuteRemoteTalker");

	UOnlineVoiceInterface_UnmuteRemoteTalker_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;
	params.bIsSystemWide = bIsSystemWide;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.MuteRemoteTalker
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		bool                                               bIsSystemWide                                              (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineVoiceInterface::MuteRemoteTalker(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID, bool bIsSystemWide)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.MuteRemoteTalker");

	UOnlineVoiceInterface_MuteRemoteTalker_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;
	params.bIsSystemWide = bIsSystemWide;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.SetRemoteTalkerPriority
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		int                                                Priority                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineVoiceInterface::SetRemoteTalkerPriority(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID, int Priority)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.SetRemoteTalkerPriority");

	UOnlineVoiceInterface_SetRemoteTalkerPriority_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;
	params.Priority = Priority;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.IsHeadsetPresent
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineVoiceInterface::IsHeadsetPresent(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.IsHeadsetPresent");

	UOnlineVoiceInterface_IsHeadsetPresent_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.IsRemotePlayerTalking
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineVoiceInterface::IsRemotePlayerTalking(const struct FUniqueNetId& PlayerID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.IsRemotePlayerTalking");

	UOnlineVoiceInterface_IsRemotePlayerTalking_Params params {};
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.IsLocalPlayerTalking
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineVoiceInterface::IsLocalPlayerTalking(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.IsLocalPlayerTalking");

	UOnlineVoiceInterface_IsLocalPlayerTalking_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.UnregisterRemoteTalker
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineVoiceInterface::UnregisterRemoteTalker(const struct FUniqueNetId& PlayerID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.UnregisterRemoteTalker");

	UOnlineVoiceInterface_UnregisterRemoteTalker_Params params {};
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.RegisterRemoteTalker
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineVoiceInterface::RegisterRemoteTalker(const struct FUniqueNetId& PlayerID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.RegisterRemoteTalker");

	UOnlineVoiceInterface_RegisterRemoteTalker_Params params {};
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.UnregisterLocalTalker
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineVoiceInterface::UnregisterLocalTalker(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.UnregisterLocalTalker");

	UOnlineVoiceInterface_UnregisterLocalTalker_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineVoiceInterface.RegisterLocalTalker
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineVoiceInterface::RegisterLocalTalker(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.RegisterLocalTalker");

	UOnlineVoiceInterface_RegisterLocalTalker_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.ClearSaveGames
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineContentInterface::ClearSaveGames(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearSaveGames");

	UOnlineContentInterface_ClearSaveGames_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.DeleteSaveGame
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                DeviceID                                                   (Parm)
//		struct FString                                     FriendlyName                                               (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineContentInterface::DeleteSaveGame(unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.DeleteSaveGame");

	UOnlineContentInterface_DeleteSaveGame_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.ClearWriteSaveGameDataComplete
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             WriteSaveGameDataCompleteDelegate                          (Parm, NeedCtorLink)
void UOnlineContentInterface::ClearWriteSaveGameDataComplete(unsigned char LocalUserNum, const struct FScriptDelegate& WriteSaveGameDataCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearWriteSaveGameDataComplete");

	UOnlineContentInterface_ClearWriteSaveGameDataComplete_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.WriteSaveGameDataCompleteDelegate = WriteSaveGameDataCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.AddWriteSaveGameDataComplete
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             WriteSaveGameDataCompleteDelegate                          (Parm, NeedCtorLink)
void UOnlineContentInterface::AddWriteSaveGameDataComplete(unsigned char LocalUserNum, const struct FScriptDelegate& WriteSaveGameDataCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.AddWriteSaveGameDataComplete");

	UOnlineContentInterface_AddWriteSaveGameDataComplete_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.WriteSaveGameDataCompleteDelegate = WriteSaveGameDataCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.OnWriteSaveGameDataComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                DeviceID                                                   (Parm)
//		struct FString                                     FriendlyName                                               (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		struct FString                                     SaveFileName                                               (Parm, NeedCtorLink)
void UOnlineContentInterface::OnWriteSaveGameDataComplete(bool bWasSuccessful, unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.OnWriteSaveGameDataComplete");

	UOnlineContentInterface_OnWriteSaveGameDataComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;
	params.SaveFileName = SaveFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.WriteSaveGameData
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                DeviceID                                                   (Parm)
//		struct FString                                     FriendlyName                                               (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		struct FString                                     SaveFileName                                               (Parm, NeedCtorLink)
//		TArray<unsigned char>                              SaveGameData                                               (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineContentInterface::WriteSaveGameData(unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName, TArray<unsigned char>* SaveGameData)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.WriteSaveGameData");

	UOnlineContentInterface_WriteSaveGameData_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;
	params.SaveFileName = SaveFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (SaveGameData != nullptr)
		*SaveGameData = params.SaveGameData;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.ClearReadSaveGameDataComplete
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             ReadSaveGameDataCompleteDelegate                           (Parm, NeedCtorLink)
void UOnlineContentInterface::ClearReadSaveGameDataComplete(unsigned char LocalUserNum, const struct FScriptDelegate& ReadSaveGameDataCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearReadSaveGameDataComplete");

	UOnlineContentInterface_ClearReadSaveGameDataComplete_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ReadSaveGameDataCompleteDelegate = ReadSaveGameDataCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.AddReadSaveGameDataComplete
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             ReadSaveGameDataCompleteDelegate                           (Parm, NeedCtorLink)
void UOnlineContentInterface::AddReadSaveGameDataComplete(unsigned char LocalUserNum, const struct FScriptDelegate& ReadSaveGameDataCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.AddReadSaveGameDataComplete");

	UOnlineContentInterface_AddReadSaveGameDataComplete_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ReadSaveGameDataCompleteDelegate = ReadSaveGameDataCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.OnReadSaveGameDataComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                DeviceID                                                   (Parm)
//		struct FString                                     FriendlyName                                               (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		struct FString                                     SaveFileName                                               (Parm, NeedCtorLink)
void UOnlineContentInterface::OnReadSaveGameDataComplete(bool bWasSuccessful, unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.OnReadSaveGameDataComplete");

	UOnlineContentInterface_OnReadSaveGameDataComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;
	params.SaveFileName = SaveFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.GetSaveGameData
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                DeviceID                                                   (Parm)
//		struct FString                                     FriendlyName                                               (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		struct FString                                     SaveFileName                                               (Parm, NeedCtorLink)
//		unsigned char                                      bIsValid                                                   (Parm, OutParm)
//		TArray<unsigned char>                              SaveGameData                                               (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineContentInterface::GetSaveGameData(unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName, unsigned char* bIsValid, TArray<unsigned char>* SaveGameData)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.GetSaveGameData");

	UOnlineContentInterface_GetSaveGameData_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;
	params.SaveFileName = SaveFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (bIsValid != nullptr)
		*bIsValid = params.bIsValid;
	if (SaveGameData != nullptr)
		*SaveGameData = params.SaveGameData;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.ReadSaveGameData
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                DeviceID                                                   (Parm)
//		struct FString                                     FriendlyName                                               (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		struct FString                                     SaveFileName                                               (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineContentInterface::ReadSaveGameData(unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ReadSaveGameData");

	UOnlineContentInterface_ReadSaveGameData_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;
	params.SaveFileName = SaveFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.GetAvailableDownloadCounts
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                NewDownloads                                               (Parm, OutParm)
//		int                                                TotalDownloads                                             (Parm, OutParm)
void UOnlineContentInterface::GetAvailableDownloadCounts(unsigned char LocalUserNum, int* NewDownloads, int* TotalDownloads)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.GetAvailableDownloadCounts");

	UOnlineContentInterface_GetAvailableDownloadCounts_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (NewDownloads != nullptr)
		*NewDownloads = params.NewDownloads;
	if (TotalDownloads != nullptr)
		*TotalDownloads = params.TotalDownloads;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.ClearQueryAvailableDownloadsComplete
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             QueryDownloadsDelegate                                     (Parm, NeedCtorLink)
void UOnlineContentInterface::ClearQueryAvailableDownloadsComplete(unsigned char LocalUserNum, const struct FScriptDelegate& QueryDownloadsDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearQueryAvailableDownloadsComplete");

	UOnlineContentInterface_ClearQueryAvailableDownloadsComplete_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.QueryDownloadsDelegate = QueryDownloadsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.AddQueryAvailableDownloadsComplete
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             QueryDownloadsDelegate                                     (Parm, NeedCtorLink)
void UOnlineContentInterface::AddQueryAvailableDownloadsComplete(unsigned char LocalUserNum, const struct FScriptDelegate& QueryDownloadsDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.AddQueryAvailableDownloadsComplete");

	UOnlineContentInterface_AddQueryAvailableDownloadsComplete_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.QueryDownloadsDelegate = QueryDownloadsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.OnQueryAvailableDownloadsComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineContentInterface::OnQueryAvailableDownloadsComplete(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.OnQueryAvailableDownloadsComplete");

	UOnlineContentInterface_OnQueryAvailableDownloadsComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.QueryAvailableDownloads
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                CategoryMask                                               (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineContentInterface::QueryAvailableDownloads(unsigned char LocalUserNum, int CategoryMask)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.QueryAvailableDownloads");

	UOnlineContentInterface_QueryAvailableDownloads_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.CategoryMask = CategoryMask;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.ClearCrossTitleSaveGames
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineContentInterface::ClearCrossTitleSaveGames(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearCrossTitleSaveGames");

	UOnlineContentInterface_ClearCrossTitleSaveGames_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.ClearReadCrossTitleSaveGameDataComplete
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             ReadSaveGameDataCompleteDelegate                           (Parm, NeedCtorLink)
void UOnlineContentInterface::ClearReadCrossTitleSaveGameDataComplete(unsigned char LocalUserNum, const struct FScriptDelegate& ReadSaveGameDataCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearReadCrossTitleSaveGameDataComplete");

	UOnlineContentInterface_ClearReadCrossTitleSaveGameDataComplete_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ReadSaveGameDataCompleteDelegate = ReadSaveGameDataCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.AddReadCrossTitleSaveGameDataComplete
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             ReadSaveGameDataCompleteDelegate                           (Parm, NeedCtorLink)
void UOnlineContentInterface::AddReadCrossTitleSaveGameDataComplete(unsigned char LocalUserNum, const struct FScriptDelegate& ReadSaveGameDataCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.AddReadCrossTitleSaveGameDataComplete");

	UOnlineContentInterface_AddReadCrossTitleSaveGameDataComplete_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ReadSaveGameDataCompleteDelegate = ReadSaveGameDataCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.OnReadCrossTitleSaveGameDataComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                DeviceID                                                   (Parm)
//		int                                                TitleId                                                    (Parm)
//		struct FString                                     FriendlyName                                               (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		struct FString                                     SaveFileName                                               (Parm, NeedCtorLink)
void UOnlineContentInterface::OnReadCrossTitleSaveGameDataComplete(bool bWasSuccessful, unsigned char LocalUserNum, int DeviceID, int TitleId, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.OnReadCrossTitleSaveGameDataComplete");

	UOnlineContentInterface_OnReadCrossTitleSaveGameDataComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.TitleId = TitleId;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;
	params.SaveFileName = SaveFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.GetCrossTitleSaveGameData
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                DeviceID                                                   (Parm)
//		int                                                TitleId                                                    (Parm)
//		struct FString                                     FriendlyName                                               (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		struct FString                                     SaveFileName                                               (Parm, NeedCtorLink)
//		unsigned char                                      bIsValid                                                   (Parm, OutParm)
//		TArray<unsigned char>                              SaveGameData                                               (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineContentInterface::GetCrossTitleSaveGameData(unsigned char LocalUserNum, int DeviceID, int TitleId, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName, unsigned char* bIsValid, TArray<unsigned char>* SaveGameData)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.GetCrossTitleSaveGameData");

	UOnlineContentInterface_GetCrossTitleSaveGameData_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.TitleId = TitleId;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;
	params.SaveFileName = SaveFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (bIsValid != nullptr)
		*bIsValid = params.bIsValid;
	if (SaveGameData != nullptr)
		*SaveGameData = params.SaveGameData;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.ReadCrossTitleSaveGameData
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                DeviceID                                                   (Parm)
//		int                                                TitleId                                                    (Parm)
//		struct FString                                     FriendlyName                                               (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
//		struct FString                                     SaveFileName                                               (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineContentInterface::ReadCrossTitleSaveGameData(unsigned char LocalUserNum, int DeviceID, int TitleId, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ReadCrossTitleSaveGameData");

	UOnlineContentInterface_ReadCrossTitleSaveGameData_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.TitleId = TitleId;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;
	params.SaveFileName = SaveFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.ClearReadCrossTitleContentCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TEnumAsByte<Engine_EOnlineContentType>             ContentType                                                (Parm)
//		struct FScriptDelegate                             ReadContentCompleteDelegate                                (Parm, NeedCtorLink)
void UOnlineContentInterface::ClearReadCrossTitleContentCompleteDelegate(unsigned char LocalUserNum, TEnumAsByte<Engine_EOnlineContentType> ContentType, const struct FScriptDelegate& ReadContentCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearReadCrossTitleContentCompleteDelegate");

	UOnlineContentInterface_ClearReadCrossTitleContentCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;
	params.ReadContentCompleteDelegate = ReadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.AddReadCrossTitleContentCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TEnumAsByte<Engine_EOnlineContentType>             ContentType                                                (Parm)
//		struct FScriptDelegate                             ReadContentCompleteDelegate                                (Parm, NeedCtorLink)
void UOnlineContentInterface::AddReadCrossTitleContentCompleteDelegate(unsigned char LocalUserNum, TEnumAsByte<Engine_EOnlineContentType> ContentType, const struct FScriptDelegate& ReadContentCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.AddReadCrossTitleContentCompleteDelegate");

	UOnlineContentInterface_AddReadCrossTitleContentCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;
	params.ReadContentCompleteDelegate = ReadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.OnReadCrossTitleContentComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineContentInterface::OnReadCrossTitleContentComplete(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.OnReadCrossTitleContentComplete");

	UOnlineContentInterface_OnReadCrossTitleContentComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.GetCrossTitleContentList
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TEnumAsByte<Engine_EOnlineContentType>             ContentType                                                (Parm)
//		TArray<struct FOnlineCrossTitleContent>            ContentList                                                (Parm, OutParm, NeedCtorLink)
//		TEnumAsByte<Engine_EOnlineEnumerationReadState>    ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_EOnlineEnumerationReadState> UOnlineContentInterface::GetCrossTitleContentList(unsigned char LocalUserNum, TEnumAsByte<Engine_EOnlineContentType> ContentType, TArray<struct FOnlineCrossTitleContent>* ContentList)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.GetCrossTitleContentList");

	UOnlineContentInterface_GetCrossTitleContentList_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ContentList != nullptr)
		*ContentList = params.ContentList;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.ClearCrossTitleContentList
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TEnumAsByte<Engine_EOnlineContentType>             ContentType                                                (Parm)
void UOnlineContentInterface::ClearCrossTitleContentList(unsigned char LocalUserNum, TEnumAsByte<Engine_EOnlineContentType> ContentType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearCrossTitleContentList");

	UOnlineContentInterface_ClearCrossTitleContentList_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.ReadCrossTitleContentList
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TEnumAsByte<Engine_EOnlineContentType>             ContentType                                                (Parm)
//		int                                                TitleId                                                    (OptionalParm, Parm)
//		int                                                DeviceID                                                   (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineContentInterface::ReadCrossTitleContentList(unsigned char LocalUserNum, TEnumAsByte<Engine_EOnlineContentType> ContentType, int TitleId, int DeviceID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ReadCrossTitleContentList");

	UOnlineContentInterface_ReadCrossTitleContentList_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;
	params.TitleId = TitleId;
	params.DeviceID = DeviceID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.GetContentList
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TEnumAsByte<Engine_EOnlineContentType>             ContentType                                                (Parm)
//		TArray<struct FOnlineContent>                      ContentList                                                (Parm, OutParm, NeedCtorLink)
//		TEnumAsByte<Engine_EOnlineEnumerationReadState>    ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_EOnlineEnumerationReadState> UOnlineContentInterface::GetContentList(unsigned char LocalUserNum, TEnumAsByte<Engine_EOnlineContentType> ContentType, TArray<struct FOnlineContent>* ContentList)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.GetContentList");

	UOnlineContentInterface_GetContentList_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ContentList != nullptr)
		*ContentList = params.ContentList;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.ClearContentList
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TEnumAsByte<Engine_EOnlineContentType>             ContentType                                                (Parm)
void UOnlineContentInterface::ClearContentList(unsigned char LocalUserNum, TEnumAsByte<Engine_EOnlineContentType> ContentType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearContentList");

	UOnlineContentInterface_ClearContentList_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.ReadContentList
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TEnumAsByte<Engine_EOnlineContentType>             ContentType                                                (Parm)
//		int                                                DeviceID                                                   (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineContentInterface::ReadContentList(unsigned char LocalUserNum, TEnumAsByte<Engine_EOnlineContentType> ContentType, int DeviceID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ReadContentList");

	UOnlineContentInterface_ReadContentList_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;
	params.DeviceID = DeviceID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.ClearReadContentComplete
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TEnumAsByte<Engine_EOnlineContentType>             ContentType                                                (Parm)
//		struct FScriptDelegate                             ReadContentCompleteDelegate                                (Parm, NeedCtorLink)
void UOnlineContentInterface::ClearReadContentComplete(unsigned char LocalUserNum, TEnumAsByte<Engine_EOnlineContentType> ContentType, const struct FScriptDelegate& ReadContentCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearReadContentComplete");

	UOnlineContentInterface_ClearReadContentComplete_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;
	params.ReadContentCompleteDelegate = ReadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.AddReadContentComplete
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TEnumAsByte<Engine_EOnlineContentType>             ContentType                                                (Parm)
//		struct FScriptDelegate                             ReadContentCompleteDelegate                                (Parm, NeedCtorLink)
void UOnlineContentInterface::AddReadContentComplete(unsigned char LocalUserNum, TEnumAsByte<Engine_EOnlineContentType> ContentType, const struct FScriptDelegate& ReadContentCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.AddReadContentComplete");

	UOnlineContentInterface_AddReadContentComplete_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;
	params.ReadContentCompleteDelegate = ReadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.OnReadContentComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineContentInterface::OnReadContentComplete(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.OnReadContentComplete");

	UOnlineContentInterface_OnReadContentComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.ClearContentChangeDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ContentDelegate                                            (Parm, NeedCtorLink)
//		unsigned char                                      LocalUserNum                                               (OptionalParm, Parm)
void UOnlineContentInterface::ClearContentChangeDelegate(const struct FScriptDelegate& ContentDelegate, unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearContentChangeDelegate");

	UOnlineContentInterface_ClearContentChangeDelegate_Params params {};
	params.ContentDelegate = ContentDelegate;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.AddContentChangeDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ContentDelegate                                            (Parm, NeedCtorLink)
//		unsigned char                                      LocalUserNum                                               (OptionalParm, Parm)
void UOnlineContentInterface::AddContentChangeDelegate(const struct FScriptDelegate& ContentDelegate, unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.AddContentChangeDelegate");

	UOnlineContentInterface_AddContentChangeDelegate_Params params {};
	params.ContentDelegate = ContentDelegate;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineContentInterface.OnContentChange
//		Flags  -> ()
void UOnlineContentInterface::OnContentChange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.OnContentChange");

	UOnlineContentInterface_OnContentChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.ClearJoinMigratedOnlineGameCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             JoinMigratedOnlineGameCompleteDelegate                     (Parm, NeedCtorLink)
void UOnlineGameInterface::ClearJoinMigratedOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinMigratedOnlineGameCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearJoinMigratedOnlineGameCompleteDelegate");

	UOnlineGameInterface_ClearJoinMigratedOnlineGameCompleteDelegate_Params params {};
	params.JoinMigratedOnlineGameCompleteDelegate = JoinMigratedOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.AddJoinMigratedOnlineGameCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             JoinMigratedOnlineGameCompleteDelegate                     (Parm, NeedCtorLink)
void UOnlineGameInterface::AddJoinMigratedOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinMigratedOnlineGameCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddJoinMigratedOnlineGameCompleteDelegate");

	UOnlineGameInterface_AddJoinMigratedOnlineGameCompleteDelegate_Params params {};
	params.JoinMigratedOnlineGameCompleteDelegate = JoinMigratedOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.OnJoinMigratedOnlineGameComplete
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineGameInterface::OnJoinMigratedOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnJoinMigratedOnlineGameComplete");

	UOnlineGameInterface_OnJoinMigratedOnlineGameComplete_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.JoinMigratedOnlineGame
//		Flags  -> ()
// Parameters:
//		unsigned char                                      PlayerNum                                                  (Parm)
//		struct FName                                       SessionName                                                (Parm)
//		struct FOnlineGameSearchResult                     DesiredGame                                                (Const, Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::JoinMigratedOnlineGame(unsigned char PlayerNum, const struct FName& SessionName, struct FOnlineGameSearchResult* DesiredGame)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.JoinMigratedOnlineGame");

	UOnlineGameInterface_JoinMigratedOnlineGame_Params params {};
	params.PlayerNum = PlayerNum;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DesiredGame != nullptr)
		*DesiredGame = params.DesiredGame;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.ClearMigrateOnlineGameCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             MigrateOnlineGameCompleteDelegate                          (Parm, NeedCtorLink)
void UOnlineGameInterface::ClearMigrateOnlineGameCompleteDelegate(const struct FScriptDelegate& MigrateOnlineGameCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearMigrateOnlineGameCompleteDelegate");

	UOnlineGameInterface_ClearMigrateOnlineGameCompleteDelegate_Params params {};
	params.MigrateOnlineGameCompleteDelegate = MigrateOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.AddMigrateOnlineGameCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             MigrateOnlineGameCompleteDelegate                          (Parm, NeedCtorLink)
void UOnlineGameInterface::AddMigrateOnlineGameCompleteDelegate(const struct FScriptDelegate& MigrateOnlineGameCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddMigrateOnlineGameCompleteDelegate");

	UOnlineGameInterface_AddMigrateOnlineGameCompleteDelegate_Params params {};
	params.MigrateOnlineGameCompleteDelegate = MigrateOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.OnMigrateOnlineGameComplete
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineGameInterface::OnMigrateOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnMigrateOnlineGameComplete");

	UOnlineGameInterface_OnMigrateOnlineGameComplete_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.MigrateOnlineGame
//		Flags  -> ()
// Parameters:
//		unsigned char                                      HostingPlayerNum                                           (Parm)
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::MigrateOnlineGame(unsigned char HostingPlayerNum, const struct FName& SessionName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.MigrateOnlineGame");

	UOnlineGameInterface_MigrateOnlineGame_Params params {};
	params.HostingPlayerNum = HostingPlayerNum;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.ClearRecalculateSkillRatingCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             RecalculateSkillRatingGameCompleteDelegate                 (Parm, NeedCtorLink)
void UOnlineGameInterface::ClearRecalculateSkillRatingCompleteDelegate(const struct FScriptDelegate& RecalculateSkillRatingGameCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearRecalculateSkillRatingCompleteDelegate");

	UOnlineGameInterface_ClearRecalculateSkillRatingCompleteDelegate_Params params {};
	params.RecalculateSkillRatingGameCompleteDelegate = RecalculateSkillRatingGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.AddRecalculateSkillRatingCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             RecalculateSkillRatingCompleteDelegate                     (Parm, NeedCtorLink)
void UOnlineGameInterface::AddRecalculateSkillRatingCompleteDelegate(const struct FScriptDelegate& RecalculateSkillRatingCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddRecalculateSkillRatingCompleteDelegate");

	UOnlineGameInterface_AddRecalculateSkillRatingCompleteDelegate_Params params {};
	params.RecalculateSkillRatingCompleteDelegate = RecalculateSkillRatingCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.OnRecalculateSkillRatingComplete
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineGameInterface::OnRecalculateSkillRatingComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnRecalculateSkillRatingComplete");

	UOnlineGameInterface_OnRecalculateSkillRatingComplete_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.RecalculateSkillRating
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		TArray<struct FUniqueNetId>                        Players                                                    (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::RecalculateSkillRating(const struct FName& SessionName, TArray<struct FUniqueNetId>* Players)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.RecalculateSkillRating");

	UOnlineGameInterface_RecalculateSkillRating_Params params {};
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.AcceptGameInvite
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::AcceptGameInvite(unsigned char LocalUserNum, const struct FName& SessionName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AcceptGameInvite");

	UOnlineGameInterface_AcceptGameInvite_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.ClearGameInviteAcceptedDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             GameInviteAcceptedDelegate                                 (Parm, NeedCtorLink)
void UOnlineGameInterface::ClearGameInviteAcceptedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& GameInviteAcceptedDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearGameInviteAcceptedDelegate");

	UOnlineGameInterface_ClearGameInviteAcceptedDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.GameInviteAcceptedDelegate = GameInviteAcceptedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.AddGameInviteAcceptedDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             GameInviteAcceptedDelegate                                 (Parm, NeedCtorLink)
void UOnlineGameInterface::AddGameInviteAcceptedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& GameInviteAcceptedDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddGameInviteAcceptedDelegate");

	UOnlineGameInterface_AddGameInviteAcceptedDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.GameInviteAcceptedDelegate = GameInviteAcceptedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.OnGameInviteAccepted
//		Flags  -> ()
// Parameters:
//		struct FOnlineGameSearchResult                     InviteResult                                               (Const, Parm, OutParm)
void UOnlineGameInterface::OnGameInviteAccepted(struct FOnlineGameSearchResult* InviteResult)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnGameInviteAccepted");

	UOnlineGameInterface_OnGameInviteAccepted_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (InviteResult != nullptr)
		*InviteResult = params.InviteResult;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.GetArbitratedPlayers
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		TArray<struct FOnlineArbitrationRegistrant>        ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
TArray<struct FOnlineArbitrationRegistrant> UOnlineGameInterface::GetArbitratedPlayers(const struct FName& SessionName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.GetArbitratedPlayers");

	UOnlineGameInterface_GetArbitratedPlayers_Params params {};
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.ClearArbitrationRegistrationCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ArbitrationRegistrationCompleteDelegate                    (Parm, NeedCtorLink)
void UOnlineGameInterface::ClearArbitrationRegistrationCompleteDelegate(const struct FScriptDelegate& ArbitrationRegistrationCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearArbitrationRegistrationCompleteDelegate");

	UOnlineGameInterface_ClearArbitrationRegistrationCompleteDelegate_Params params {};
	params.ArbitrationRegistrationCompleteDelegate = ArbitrationRegistrationCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.AddArbitrationRegistrationCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ArbitrationRegistrationCompleteDelegate                    (Parm, NeedCtorLink)
void UOnlineGameInterface::AddArbitrationRegistrationCompleteDelegate(const struct FScriptDelegate& ArbitrationRegistrationCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddArbitrationRegistrationCompleteDelegate");

	UOnlineGameInterface_AddArbitrationRegistrationCompleteDelegate_Params params {};
	params.ArbitrationRegistrationCompleteDelegate = ArbitrationRegistrationCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.OnArbitrationRegistrationComplete
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineGameInterface::OnArbitrationRegistrationComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnArbitrationRegistrationComplete");

	UOnlineGameInterface_OnArbitrationRegistrationComplete_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.RegisterForArbitration
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::RegisterForArbitration(const struct FName& SessionName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.RegisterForArbitration");

	UOnlineGameInterface_RegisterForArbitration_Params params {};
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.ClearEndOnlineGameCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             EndOnlineGameCompleteDelegate                              (Parm, NeedCtorLink)
void UOnlineGameInterface::ClearEndOnlineGameCompleteDelegate(const struct FScriptDelegate& EndOnlineGameCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearEndOnlineGameCompleteDelegate");

	UOnlineGameInterface_ClearEndOnlineGameCompleteDelegate_Params params {};
	params.EndOnlineGameCompleteDelegate = EndOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.AddEndOnlineGameCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             EndOnlineGameCompleteDelegate                              (Parm, NeedCtorLink)
void UOnlineGameInterface::AddEndOnlineGameCompleteDelegate(const struct FScriptDelegate& EndOnlineGameCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddEndOnlineGameCompleteDelegate");

	UOnlineGameInterface_AddEndOnlineGameCompleteDelegate_Params params {};
	params.EndOnlineGameCompleteDelegate = EndOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.OnEndOnlineGameComplete
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineGameInterface::OnEndOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnEndOnlineGameComplete");

	UOnlineGameInterface_OnEndOnlineGameComplete_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.EndOnlineGame
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::EndOnlineGame(const struct FName& SessionName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.EndOnlineGame");

	UOnlineGameInterface_EndOnlineGame_Params params {};
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.ClearStartOnlineGameCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             StartOnlineGameCompleteDelegate                            (Parm, NeedCtorLink)
void UOnlineGameInterface::ClearStartOnlineGameCompleteDelegate(const struct FScriptDelegate& StartOnlineGameCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearStartOnlineGameCompleteDelegate");

	UOnlineGameInterface_ClearStartOnlineGameCompleteDelegate_Params params {};
	params.StartOnlineGameCompleteDelegate = StartOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.AddStartOnlineGameCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             StartOnlineGameCompleteDelegate                            (Parm, NeedCtorLink)
void UOnlineGameInterface::AddStartOnlineGameCompleteDelegate(const struct FScriptDelegate& StartOnlineGameCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddStartOnlineGameCompleteDelegate");

	UOnlineGameInterface_AddStartOnlineGameCompleteDelegate_Params params {};
	params.StartOnlineGameCompleteDelegate = StartOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.OnStartOnlineGameComplete
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineGameInterface::OnStartOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnStartOnlineGameComplete");

	UOnlineGameInterface_OnStartOnlineGameComplete_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.StartOnlineGame
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::StartOnlineGame(const struct FName& SessionName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.StartOnlineGame");

	UOnlineGameInterface_StartOnlineGame_Params params {};
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.ClearUnregisterPlayerCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             UnregisterPlayerCompleteDelegate                           (Parm, NeedCtorLink)
void UOnlineGameInterface::ClearUnregisterPlayerCompleteDelegate(const struct FScriptDelegate& UnregisterPlayerCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearUnregisterPlayerCompleteDelegate");

	UOnlineGameInterface_ClearUnregisterPlayerCompleteDelegate_Params params {};
	params.UnregisterPlayerCompleteDelegate = UnregisterPlayerCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.AddUnregisterPlayerCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             UnregisterPlayerCompleteDelegate                           (Parm, NeedCtorLink)
void UOnlineGameInterface::AddUnregisterPlayerCompleteDelegate(const struct FScriptDelegate& UnregisterPlayerCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddUnregisterPlayerCompleteDelegate");

	UOnlineGameInterface_AddUnregisterPlayerCompleteDelegate_Params params {};
	params.UnregisterPlayerCompleteDelegate = UnregisterPlayerCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.OnUnregisterPlayerComplete
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineGameInterface::OnUnregisterPlayerComplete(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnUnregisterPlayerComplete");

	UOnlineGameInterface_OnUnregisterPlayerComplete_Params params {};
	params.SessionName = SessionName;
	params.PlayerID = PlayerID;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.UnregisterPlayers
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		TArray<struct FUniqueNetId>                        Players                                                    (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::UnregisterPlayers(const struct FName& SessionName, TArray<struct FUniqueNetId>* Players)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.UnregisterPlayers");

	UOnlineGameInterface_UnregisterPlayers_Params params {};
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.UnregisterPlayer
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::UnregisterPlayer(const struct FName& SessionName, const struct FUniqueNetId& PlayerID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.UnregisterPlayer");

	UOnlineGameInterface_UnregisterPlayer_Params params {};
	params.SessionName = SessionName;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.ClearRegisterPlayerCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             RegisterPlayerCompleteDelegate                             (Parm, NeedCtorLink)
void UOnlineGameInterface::ClearRegisterPlayerCompleteDelegate(const struct FScriptDelegate& RegisterPlayerCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearRegisterPlayerCompleteDelegate");

	UOnlineGameInterface_ClearRegisterPlayerCompleteDelegate_Params params {};
	params.RegisterPlayerCompleteDelegate = RegisterPlayerCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.AddRegisterPlayerCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             RegisterPlayerCompleteDelegate                             (Parm, NeedCtorLink)
void UOnlineGameInterface::AddRegisterPlayerCompleteDelegate(const struct FScriptDelegate& RegisterPlayerCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddRegisterPlayerCompleteDelegate");

	UOnlineGameInterface_AddRegisterPlayerCompleteDelegate_Params params {};
	params.RegisterPlayerCompleteDelegate = RegisterPlayerCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.OnRegisterPlayerComplete
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineGameInterface::OnRegisterPlayerComplete(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnRegisterPlayerComplete");

	UOnlineGameInterface_OnRegisterPlayerComplete_Params params {};
	params.SessionName = SessionName;
	params.PlayerID = PlayerID;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.RegisterPlayers
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		TArray<struct FUniqueNetId>                        Players                                                    (Const, Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::RegisterPlayers(const struct FName& SessionName, TArray<struct FUniqueNetId>* Players)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.RegisterPlayers");

	UOnlineGameInterface_RegisterPlayers_Params params {};
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.RegisterPlayer
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		bool                                               bWasInvited                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::RegisterPlayer(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasInvited)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.RegisterPlayer");

	UOnlineGameInterface_RegisterPlayer_Params params {};
	params.SessionName = SessionName;
	params.PlayerID = PlayerID;
	params.bWasInvited = bWasInvited;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.GetResolvedConnectString
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		struct FString                                     ConnectInfo                                                (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::GetResolvedConnectString(const struct FName& SessionName, struct FString* ConnectInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.GetResolvedConnectString");

	UOnlineGameInterface_GetResolvedConnectString_Params params {};
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (ConnectInfo != nullptr)
		*ConnectInfo = params.ConnectInfo;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.ClearJoinOnlineGameCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             JoinOnlineGameCompleteDelegate                             (Parm, NeedCtorLink)
void UOnlineGameInterface::ClearJoinOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinOnlineGameCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearJoinOnlineGameCompleteDelegate");

	UOnlineGameInterface_ClearJoinOnlineGameCompleteDelegate_Params params {};
	params.JoinOnlineGameCompleteDelegate = JoinOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.AddJoinOnlineGameCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             JoinOnlineGameCompleteDelegate                             (Parm, NeedCtorLink)
void UOnlineGameInterface::AddJoinOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinOnlineGameCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddJoinOnlineGameCompleteDelegate");

	UOnlineGameInterface_AddJoinOnlineGameCompleteDelegate_Params params {};
	params.JoinOnlineGameCompleteDelegate = JoinOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.OnJoinOnlineGameComplete
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineGameInterface::OnJoinOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnJoinOnlineGameComplete");

	UOnlineGameInterface_OnJoinOnlineGameComplete_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.JoinOnlineGame
//		Flags  -> ()
// Parameters:
//		unsigned char                                      PlayerNum                                                  (Parm)
//		struct FName                                       SessionName                                                (Parm)
//		struct FOnlineGameSearchResult                     DesiredGame                                                (Const, Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::JoinOnlineGame(unsigned char PlayerNum, const struct FName& SessionName, struct FOnlineGameSearchResult* DesiredGame)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.JoinOnlineGame");

	UOnlineGameInterface_JoinOnlineGame_Params params {};
	params.PlayerNum = PlayerNum;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DesiredGame != nullptr)
		*DesiredGame = params.DesiredGame;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.QueryNonAdvertisedData
//		Flags  -> ()
// Parameters:
//		int                                                StartAt                                                    (Parm)
//		int                                                NumberToQuery                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::QueryNonAdvertisedData(int StartAt, int NumberToQuery)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.QueryNonAdvertisedData");

	UOnlineGameInterface_QueryNonAdvertisedData_Params params {};
	params.StartAt = StartAt;
	params.NumberToQuery = NumberToQuery;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.FreeSearchResults
//		Flags  -> ()
// Parameters:
//		class UOnlineGameSearch*                           Search                                                     (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::FreeSearchResults(class UOnlineGameSearch* Search)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.FreeSearchResults");

	UOnlineGameInterface_FreeSearchResults_Params params {};
	params.Search = Search;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.GetGameSearch
//		Flags  -> ()
// Parameters:
//		class UOnlineGameSearch*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class UOnlineGameSearch* UOnlineGameInterface::GetGameSearch()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.GetGameSearch");

	UOnlineGameInterface_GetGameSearch_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.BindPlatformSpecificSessionToSearch
//		Flags  -> ()
// Parameters:
//		unsigned char                                      SearchingPlayerNum                                         (Parm)
//		class UOnlineGameSearch*                           SearchSettings                                             (Parm)
//		unsigned char*                                     PlatformSpecificInfo                                       (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::BindPlatformSpecificSessionToSearch(unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings, unsigned char* PlatformSpecificInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.BindPlatformSpecificSessionToSearch");

	UOnlineGameInterface_BindPlatformSpecificSessionToSearch_Params params {};
	params.SearchingPlayerNum = SearchingPlayerNum;
	params.SearchSettings = SearchSettings;
	params.PlatformSpecificInfo = PlatformSpecificInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfoBySessionName
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		unsigned char                                      PlatformSpecificInfo                                       (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::ReadPlatformSpecificSessionInfoBySessionName(const struct FName& SessionName, unsigned char* PlatformSpecificInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfoBySessionName");

	UOnlineGameInterface_ReadPlatformSpecificSessionInfoBySessionName_Params params {};
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (PlatformSpecificInfo != nullptr)
		*PlatformSpecificInfo = params.PlatformSpecificInfo;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfo
//		Flags  -> ()
// Parameters:
//		struct FOnlineGameSearchResult                     DesiredGame                                                (Const, Parm, OutParm)
//		unsigned char                                      PlatformSpecificInfo                                       (Parm, OutParm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::ReadPlatformSpecificSessionInfo(struct FOnlineGameSearchResult* DesiredGame, unsigned char* PlatformSpecificInfo)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfo");

	UOnlineGameInterface_ReadPlatformSpecificSessionInfo_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DesiredGame != nullptr)
		*DesiredGame = params.DesiredGame;
	if (PlatformSpecificInfo != nullptr)
		*PlatformSpecificInfo = params.PlatformSpecificInfo;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.ClearQosStatusChangedDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             QosStatusChangedDelegate                                   (Parm, NeedCtorLink)
void UOnlineGameInterface::ClearQosStatusChangedDelegate(const struct FScriptDelegate& QosStatusChangedDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearQosStatusChangedDelegate");

	UOnlineGameInterface_ClearQosStatusChangedDelegate_Params params {};
	params.QosStatusChangedDelegate = QosStatusChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.AddQosStatusChangedDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             QosStatusChangedDelegate                                   (Parm, NeedCtorLink)
void UOnlineGameInterface::AddQosStatusChangedDelegate(const struct FScriptDelegate& QosStatusChangedDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddQosStatusChangedDelegate");

	UOnlineGameInterface_AddQosStatusChangedDelegate_Params params {};
	params.QosStatusChangedDelegate = QosStatusChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.OnQosStatusChanged
//		Flags  -> ()
// Parameters:
//		int                                                NumComplete                                                (Parm)
//		int                                                NumTotal                                                   (Parm)
void UOnlineGameInterface::OnQosStatusChanged(int NumComplete, int NumTotal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnQosStatusChanged");

	UOnlineGameInterface_OnQosStatusChanged_Params params {};
	params.NumComplete = NumComplete;
	params.NumTotal = NumTotal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.ClearCancelFindOnlineGamesCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             CancelFindOnlineGamesCompleteDelegate                      (Parm, NeedCtorLink)
void UOnlineGameInterface::ClearCancelFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& CancelFindOnlineGamesCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearCancelFindOnlineGamesCompleteDelegate");

	UOnlineGameInterface_ClearCancelFindOnlineGamesCompleteDelegate_Params params {};
	params.CancelFindOnlineGamesCompleteDelegate = CancelFindOnlineGamesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.AddCancelFindOnlineGamesCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             CancelFindOnlineGamesCompleteDelegate                      (Parm, NeedCtorLink)
void UOnlineGameInterface::AddCancelFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& CancelFindOnlineGamesCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddCancelFindOnlineGamesCompleteDelegate");

	UOnlineGameInterface_AddCancelFindOnlineGamesCompleteDelegate_Params params {};
	params.CancelFindOnlineGamesCompleteDelegate = CancelFindOnlineGamesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.OnCancelFindOnlineGamesComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineGameInterface::OnCancelFindOnlineGamesComplete(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnCancelFindOnlineGamesComplete");

	UOnlineGameInterface_OnCancelFindOnlineGamesComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.CancelFindOnlineGames
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::CancelFindOnlineGames()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.CancelFindOnlineGames");

	UOnlineGameInterface_CancelFindOnlineGames_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.ClearFindOnlineGamesCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             FindOnlineGamesCompleteDelegate                            (Parm, NeedCtorLink)
void UOnlineGameInterface::ClearFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& FindOnlineGamesCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearFindOnlineGamesCompleteDelegate");

	UOnlineGameInterface_ClearFindOnlineGamesCompleteDelegate_Params params {};
	params.FindOnlineGamesCompleteDelegate = FindOnlineGamesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.AddFindOnlineGamesCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             FindOnlineGamesCompleteDelegate                            (Parm, NeedCtorLink)
void UOnlineGameInterface::AddFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& FindOnlineGamesCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddFindOnlineGamesCompleteDelegate");

	UOnlineGameInterface_AddFindOnlineGamesCompleteDelegate_Params params {};
	params.FindOnlineGamesCompleteDelegate = FindOnlineGamesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.OnFindOnlineGamesComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineGameInterface::OnFindOnlineGamesComplete(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnFindOnlineGamesComplete");

	UOnlineGameInterface_OnFindOnlineGamesComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.FindOnlineGames
//		Flags  -> ()
// Parameters:
//		unsigned char                                      SearchingPlayerNum                                         (Parm)
//		class UOnlineGameSearch*                           SearchSettings                                             (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::FindOnlineGames(unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.FindOnlineGames");

	UOnlineGameInterface_FindOnlineGames_Params params {};
	params.SearchingPlayerNum = SearchingPlayerNum;
	params.SearchSettings = SearchSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.ClearDestroyOnlineGameCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             DestroyOnlineGameCompleteDelegate                          (Parm, NeedCtorLink)
void UOnlineGameInterface::ClearDestroyOnlineGameCompleteDelegate(const struct FScriptDelegate& DestroyOnlineGameCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearDestroyOnlineGameCompleteDelegate");

	UOnlineGameInterface_ClearDestroyOnlineGameCompleteDelegate_Params params {};
	params.DestroyOnlineGameCompleteDelegate = DestroyOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.AddDestroyOnlineGameCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             DestroyOnlineGameCompleteDelegate                          (Parm, NeedCtorLink)
void UOnlineGameInterface::AddDestroyOnlineGameCompleteDelegate(const struct FScriptDelegate& DestroyOnlineGameCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddDestroyOnlineGameCompleteDelegate");

	UOnlineGameInterface_AddDestroyOnlineGameCompleteDelegate_Params params {};
	params.DestroyOnlineGameCompleteDelegate = DestroyOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.OnDestroyOnlineGameComplete
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineGameInterface::OnDestroyOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnDestroyOnlineGameComplete");

	UOnlineGameInterface_OnDestroyOnlineGameComplete_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.DestroyOnlineGame
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::DestroyOnlineGame(const struct FName& SessionName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.DestroyOnlineGame");

	UOnlineGameInterface_DestroyOnlineGame_Params params {};
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.GetGameSettings
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		class UOnlineGameSettings*                         ReturnValue                                                (Parm, OutParm, ReturnParm)
class UOnlineGameSettings* UOnlineGameInterface::GetGameSettings(const struct FName& SessionName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.GetGameSettings");

	UOnlineGameInterface_GetGameSettings_Params params {};
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.ClearUpdateOnlineGameCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             UpdateOnlineGameCompleteDelegate                           (Parm, NeedCtorLink)
void UOnlineGameInterface::ClearUpdateOnlineGameCompleteDelegate(const struct FScriptDelegate& UpdateOnlineGameCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearUpdateOnlineGameCompleteDelegate");

	UOnlineGameInterface_ClearUpdateOnlineGameCompleteDelegate_Params params {};
	params.UpdateOnlineGameCompleteDelegate = UpdateOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.AddUpdateOnlineGameCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             UpdateOnlineGameCompleteDelegate                           (Parm, NeedCtorLink)
void UOnlineGameInterface::AddUpdateOnlineGameCompleteDelegate(const struct FScriptDelegate& UpdateOnlineGameCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddUpdateOnlineGameCompleteDelegate");

	UOnlineGameInterface_AddUpdateOnlineGameCompleteDelegate_Params params {};
	params.UpdateOnlineGameCompleteDelegate = UpdateOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.OnUpdateOnlineGameComplete
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineGameInterface::OnUpdateOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnUpdateOnlineGameComplete");

	UOnlineGameInterface_OnUpdateOnlineGameComplete_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.UpdateOnlineGame
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		class UOnlineGameSettings*                         UpdatedGameSettings                                        (Parm)
//		bool                                               bShouldRefreshOnlineData                                   (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::UpdateOnlineGame(const struct FName& SessionName, class UOnlineGameSettings* UpdatedGameSettings, bool bShouldRefreshOnlineData)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.UpdateOnlineGame");

	UOnlineGameInterface_UpdateOnlineGame_Params params {};
	params.SessionName = SessionName;
	params.UpdatedGameSettings = UpdatedGameSettings;
	params.bShouldRefreshOnlineData = bShouldRefreshOnlineData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.ClearCreateOnlineGameCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             CreateOnlineGameCompleteDelegate                           (Parm, NeedCtorLink)
void UOnlineGameInterface::ClearCreateOnlineGameCompleteDelegate(const struct FScriptDelegate& CreateOnlineGameCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearCreateOnlineGameCompleteDelegate");

	UOnlineGameInterface_ClearCreateOnlineGameCompleteDelegate_Params params {};
	params.CreateOnlineGameCompleteDelegate = CreateOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.AddCreateOnlineGameCompleteDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             CreateOnlineGameCompleteDelegate                           (Parm, NeedCtorLink)
void UOnlineGameInterface::AddCreateOnlineGameCompleteDelegate(const struct FScriptDelegate& CreateOnlineGameCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddCreateOnlineGameCompleteDelegate");

	UOnlineGameInterface_AddCreateOnlineGameCompleteDelegate_Params params {};
	params.CreateOnlineGameCompleteDelegate = CreateOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.OnCreateOnlineGameComplete
//		Flags  -> ()
// Parameters:
//		struct FName                                       SessionName                                                (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlineGameInterface::OnCreateOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnCreateOnlineGameComplete");

	UOnlineGameInterface_OnCreateOnlineGameComplete_Params params {};
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineGameInterface.CreateOnlineGame
//		Flags  -> ()
// Parameters:
//		unsigned char                                      HostingPlayerNum                                           (Parm)
//		struct FName                                       SessionName                                                (Parm)
//		class UOnlineGameSettings*                         NewGameSettings                                            (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineGameInterface::CreateOnlineGame(unsigned char HostingPlayerNum, const struct FName& SessionName, class UOnlineGameSettings* NewGameSettings)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.CreateOnlineGame");

	UOnlineGameInterface_CreateOnlineGame_Params params {};
	params.HostingPlayerNum = HostingPlayerNum;
	params.SessionName = SessionName;
	params.NewGameSettings = NewGameSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSystemInterface.GetLocale
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UOnlineSystemInterface::GetLocale()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.GetLocale");

	UOnlineSystemInterface_GetLocale_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSystemInterface.ClearStorageDeviceChangeDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             StorageDeviceChangeDelegate                                (Parm, NeedCtorLink)
void UOnlineSystemInterface::ClearStorageDeviceChangeDelegate(const struct FScriptDelegate& StorageDeviceChangeDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearStorageDeviceChangeDelegate");

	UOnlineSystemInterface_ClearStorageDeviceChangeDelegate_Params params {};
	params.StorageDeviceChangeDelegate = StorageDeviceChangeDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSystemInterface.AddStorageDeviceChangeDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             StorageDeviceChangeDelegate                                (Parm, NeedCtorLink)
void UOnlineSystemInterface::AddStorageDeviceChangeDelegate(const struct FScriptDelegate& StorageDeviceChangeDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddStorageDeviceChangeDelegate");

	UOnlineSystemInterface_AddStorageDeviceChangeDelegate_Params params {};
	params.StorageDeviceChangeDelegate = StorageDeviceChangeDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSystemInterface.OnStorageDeviceChange
//		Flags  -> ()
void UOnlineSystemInterface::OnStorageDeviceChange()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnStorageDeviceChange");

	UOnlineSystemInterface_OnStorageDeviceChange_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSystemInterface.GetNATType
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ENATType>                       ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_ENATType> UOnlineSystemInterface::GetNATType()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.GetNATType");

	UOnlineSystemInterface_GetNATType_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSystemInterface.ClearConnectionStatusChangeDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ConnectionStatusDelegate                                   (Parm, NeedCtorLink)
void UOnlineSystemInterface::ClearConnectionStatusChangeDelegate(const struct FScriptDelegate& ConnectionStatusDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearConnectionStatusChangeDelegate");

	UOnlineSystemInterface_ClearConnectionStatusChangeDelegate_Params params {};
	params.ConnectionStatusDelegate = ConnectionStatusDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSystemInterface.AddConnectionStatusChangeDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ConnectionStatusDelegate                                   (Parm, NeedCtorLink)
void UOnlineSystemInterface::AddConnectionStatusChangeDelegate(const struct FScriptDelegate& ConnectionStatusDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddConnectionStatusChangeDelegate");

	UOnlineSystemInterface_AddConnectionStatusChangeDelegate_Params params {};
	params.ConnectionStatusDelegate = ConnectionStatusDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSystemInterface.OnConnectionStatusChange
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_EOnlineServerConnectionStatus>  ConnectionStatus                                           (Parm)
void UOnlineSystemInterface::OnConnectionStatusChange(TEnumAsByte<Engine_EOnlineServerConnectionStatus> ConnectionStatus)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnConnectionStatusChange");

	UOnlineSystemInterface_OnConnectionStatusChange_Params params {};
	params.ConnectionStatus = ConnectionStatus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSystemInterface.IsControllerConnected
//		Flags  -> ()
// Parameters:
//		int                                                ControllerId                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSystemInterface::IsControllerConnected(int ControllerId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.IsControllerConnected");

	UOnlineSystemInterface_IsControllerConnected_Params params {};
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSystemInterface.ClearControllerChangeDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ControllerChangeDelegate                                   (Parm, NeedCtorLink)
void UOnlineSystemInterface::ClearControllerChangeDelegate(const struct FScriptDelegate& ControllerChangeDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearControllerChangeDelegate");

	UOnlineSystemInterface_ClearControllerChangeDelegate_Params params {};
	params.ControllerChangeDelegate = ControllerChangeDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSystemInterface.AddControllerChangeDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ControllerChangeDelegate                                   (Parm, NeedCtorLink)
void UOnlineSystemInterface::AddControllerChangeDelegate(const struct FScriptDelegate& ControllerChangeDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddControllerChangeDelegate");

	UOnlineSystemInterface_AddControllerChangeDelegate_Params params {};
	params.ControllerChangeDelegate = ControllerChangeDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSystemInterface.OnControllerChange
//		Flags  -> ()
// Parameters:
//		int                                                ControllerId                                               (Parm)
//		bool                                               bIsConnected                                               (Parm)
void UOnlineSystemInterface::OnControllerChange(int ControllerId, bool bIsConnected)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnControllerChange");

	UOnlineSystemInterface_OnControllerChange_Params params {};
	params.ControllerId = ControllerId;
	params.bIsConnected = bIsConnected;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSystemInterface.SetNetworkNotificationPosition
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ENetworkNotificationPosition>   NewPos                                                     (Parm)
void UOnlineSystemInterface::SetNetworkNotificationPosition(TEnumAsByte<Engine_ENetworkNotificationPosition> NewPos)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.SetNetworkNotificationPosition");

	UOnlineSystemInterface_SetNetworkNotificationPosition_Params params {};
	params.NewPos = NewPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSystemInterface.GetNetworkNotificationPosition
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_ENetworkNotificationPosition>   ReturnValue                                                (Parm, OutParm, ReturnParm)
TEnumAsByte<Engine_ENetworkNotificationPosition> UOnlineSystemInterface::GetNetworkNotificationPosition()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.GetNetworkNotificationPosition");

	UOnlineSystemInterface_GetNetworkNotificationPosition_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSystemInterface.ClearExternalUIChangeDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ExternalUIDelegate                                         (Parm, NeedCtorLink)
void UOnlineSystemInterface::ClearExternalUIChangeDelegate(const struct FScriptDelegate& ExternalUIDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearExternalUIChangeDelegate");

	UOnlineSystemInterface_ClearExternalUIChangeDelegate_Params params {};
	params.ExternalUIDelegate = ExternalUIDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSystemInterface.AddExternalUIChangeDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             ExternalUIDelegate                                         (Parm, NeedCtorLink)
void UOnlineSystemInterface::AddExternalUIChangeDelegate(const struct FScriptDelegate& ExternalUIDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddExternalUIChangeDelegate");

	UOnlineSystemInterface_AddExternalUIChangeDelegate_Params params {};
	params.ExternalUIDelegate = ExternalUIDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSystemInterface.OnExternalUIChange
//		Flags  -> ()
// Parameters:
//		bool                                               bIsOpening                                                 (Parm)
void UOnlineSystemInterface::OnExternalUIChange(bool bIsOpening)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnExternalUIChange");

	UOnlineSystemInterface_OnExternalUIChange_Params params {};
	params.bIsOpening = bIsOpening;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSystemInterface.ClearLinkStatusChangeDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             LinkStatusDelegate                                         (Parm, NeedCtorLink)
void UOnlineSystemInterface::ClearLinkStatusChangeDelegate(const struct FScriptDelegate& LinkStatusDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearLinkStatusChangeDelegate");

	UOnlineSystemInterface_ClearLinkStatusChangeDelegate_Params params {};
	params.LinkStatusDelegate = LinkStatusDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSystemInterface.AddLinkStatusChangeDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             LinkStatusDelegate                                         (Parm, NeedCtorLink)
void UOnlineSystemInterface::AddLinkStatusChangeDelegate(const struct FScriptDelegate& LinkStatusDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddLinkStatusChangeDelegate");

	UOnlineSystemInterface_AddLinkStatusChangeDelegate_Params params {};
	params.LinkStatusDelegate = LinkStatusDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSystemInterface.OnLinkStatusChange
//		Flags  -> ()
// Parameters:
//		bool                                               bIsConnected                                               (Parm)
void UOnlineSystemInterface::OnLinkStatusChange(bool bIsConnected)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnLinkStatusChange");

	UOnlineSystemInterface_OnLinkStatusChange_Params params {};
	params.bIsConnected = bIsConnected;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineSystemInterface.HasLinkConnection
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineSystemInterface::HasLinkConnection()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.HasLinkConnection");

	UOnlineSystemInterface_HasLinkConnection_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.ShowCustomMessageUI
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TArray<struct FUniqueNetId>                        Recipients                                                 (Const, Parm, OutParm, NeedCtorLink)
//		struct FString                                     MessageTitle                                               (Parm, NeedCtorLink)
//		struct FString                                     NonEditableMessage                                         (Parm, NeedCtorLink)
//		struct FString                                     EditableMessage                                            (OptionalParm, Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterfaceEx::ShowCustomMessageUI(unsigned char LocalUserNum, TArray<struct FUniqueNetId>* Recipients, const struct FString& MessageTitle, const struct FString& NonEditableMessage, const struct FString& EditableMessage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowCustomMessageUI");

	UOnlinePlayerInterfaceEx_ShowCustomMessageUI_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.MessageTitle = MessageTitle;
	params.NonEditableMessage = NonEditableMessage;
	params.EditableMessage = EditableMessage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Recipients != nullptr)
		*Recipients = params.Recipients;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.ClearCrossTitleProfileSettings
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                TitleId                                                    (Parm)
void UOnlinePlayerInterfaceEx::ClearCrossTitleProfileSettings(unsigned char LocalUserNum, int TitleId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ClearCrossTitleProfileSettings");

	UOnlinePlayerInterfaceEx_ClearCrossTitleProfileSettings_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.TitleId = TitleId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.GetCrossTitleProfileSettings
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                TitleId                                                    (Parm)
//		class UOnlineProfileSettings*                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class UOnlineProfileSettings* UOnlinePlayerInterfaceEx::GetCrossTitleProfileSettings(unsigned char LocalUserNum, int TitleId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.GetCrossTitleProfileSettings");

	UOnlinePlayerInterfaceEx_GetCrossTitleProfileSettings_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.TitleId = TitleId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.ClearReadCrossTitleProfileSettingsCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             ReadProfileSettingsCompleteDelegate                        (Parm, NeedCtorLink)
void UOnlinePlayerInterfaceEx::ClearReadCrossTitleProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ClearReadCrossTitleProfileSettingsCompleteDelegate");

	UOnlinePlayerInterfaceEx_ClearReadCrossTitleProfileSettingsCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ReadProfileSettingsCompleteDelegate = ReadProfileSettingsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.AddReadCrossTitleProfileSettingsCompleteDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             ReadProfileSettingsCompleteDelegate                        (Parm, NeedCtorLink)
void UOnlinePlayerInterfaceEx::AddReadCrossTitleProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.AddReadCrossTitleProfileSettingsCompleteDelegate");

	UOnlinePlayerInterfaceEx_AddReadCrossTitleProfileSettingsCompleteDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ReadProfileSettingsCompleteDelegate = ReadProfileSettingsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.OnReadCrossTitleProfileSettingsComplete
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                TitleId                                                    (Parm)
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlinePlayerInterfaceEx::OnReadCrossTitleProfileSettingsComplete(unsigned char LocalUserNum, int TitleId, bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.OnReadCrossTitleProfileSettingsComplete");

	UOnlinePlayerInterfaceEx_OnReadCrossTitleProfileSettingsComplete_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.TitleId = TitleId;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.ReadCrossTitleProfileSettings
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                TitleId                                                    (Parm)
//		class UOnlineProfileSettings*                      ProfileSettings                                            (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterfaceEx::ReadCrossTitleProfileSettings(unsigned char LocalUserNum, int TitleId, class UOnlineProfileSettings* ProfileSettings)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ReadCrossTitleProfileSettings");

	UOnlinePlayerInterfaceEx_ReadCrossTitleProfileSettings_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.TitleId = TitleId;
	params.ProfileSettings = ProfileSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.UnlockAvatarAward
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                AvatarItemId                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterfaceEx::UnlockAvatarAward(unsigned char LocalUserNum, int AvatarItemId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.UnlockAvatarAward");

	UOnlinePlayerInterfaceEx_UnlockAvatarAward_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.AvatarItemId = AvatarItemId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.ShowCustomPlayersUI
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		TArray<struct FUniqueNetId>                        Players                                                    (Const, Parm, OutParm, NeedCtorLink)
//		struct FString                                     Title                                                      (Parm, NeedCtorLink)
//		struct FString                                     Description                                                (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterfaceEx::ShowCustomPlayersUI(unsigned char LocalUserNum, TArray<struct FUniqueNetId>* Players, const struct FString& Title, const struct FString& Description)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowCustomPlayersUI");

	UOnlinePlayerInterfaceEx_ShowCustomPlayersUI_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.Title = Title;
	params.Description = Description;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.ShowPlayersUI
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterfaceEx::ShowPlayersUI(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowPlayersUI");

	UOnlinePlayerInterfaceEx_ShowPlayersUI_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.ShowFriendsInviteUI
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterfaceEx::ShowFriendsInviteUI(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowFriendsInviteUI");

	UOnlinePlayerInterfaceEx_ShowFriendsInviteUI_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.ClearProfileDataChangedDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             ProfileDataChangedDelegate                                 (Parm, NeedCtorLink)
void UOnlinePlayerInterfaceEx::ClearProfileDataChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ProfileDataChangedDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ClearProfileDataChangedDelegate");

	UOnlinePlayerInterfaceEx_ClearProfileDataChangedDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ProfileDataChangedDelegate = ProfileDataChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.AddProfileDataChangedDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             ProfileDataChangedDelegate                                 (Parm, NeedCtorLink)
void UOnlinePlayerInterfaceEx::AddProfileDataChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ProfileDataChangedDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.AddProfileDataChangedDelegate");

	UOnlinePlayerInterfaceEx_AddProfileDataChangedDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.ProfileDataChangedDelegate = ProfileDataChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.OnProfileDataChanged
//		Flags  -> ()
void UOnlinePlayerInterfaceEx::OnProfileDataChanged()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.OnProfileDataChanged");

	UOnlinePlayerInterfaceEx_OnProfileDataChanged_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.UnlockGamerPicture
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                PictureId                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterfaceEx::UnlockGamerPicture(unsigned char LocalUserNum, int PictureId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.UnlockGamerPicture");

	UOnlinePlayerInterfaceEx_UnlockGamerPicture_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.PictureId = PictureId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.IsDeviceValid
//		Flags  -> ()
// Parameters:
//		int                                                DeviceID                                                   (Parm)
//		int                                                SizeNeeded                                                 (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterfaceEx::IsDeviceValid(int DeviceID, int SizeNeeded)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.IsDeviceValid");

	UOnlinePlayerInterfaceEx_IsDeviceValid_Params params {};
	params.DeviceID = DeviceID;
	params.SizeNeeded = SizeNeeded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.GetDeviceSelectionResults
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FString                                     DeviceName                                                 (Parm, OutParm, NeedCtorLink)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UOnlinePlayerInterfaceEx::GetDeviceSelectionResults(unsigned char LocalUserNum, struct FString* DeviceName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.GetDeviceSelectionResults");

	UOnlinePlayerInterfaceEx_GetDeviceSelectionResults_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DeviceName != nullptr)
		*DeviceName = params.DeviceName;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.ClearDeviceSelectionDoneDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             DeviceDelegate                                             (Parm, NeedCtorLink)
void UOnlinePlayerInterfaceEx::ClearDeviceSelectionDoneDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& DeviceDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ClearDeviceSelectionDoneDelegate");

	UOnlinePlayerInterfaceEx_ClearDeviceSelectionDoneDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.DeviceDelegate = DeviceDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.AddDeviceSelectionDoneDelegate
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FScriptDelegate                             DeviceDelegate                                             (Parm, NeedCtorLink)
void UOnlinePlayerInterfaceEx::AddDeviceSelectionDoneDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& DeviceDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.AddDeviceSelectionDoneDelegate");

	UOnlinePlayerInterfaceEx_AddDeviceSelectionDoneDelegate_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.DeviceDelegate = DeviceDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.OnDeviceSelectionComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
void UOnlinePlayerInterfaceEx::OnDeviceSelectionComplete(bool bWasSuccessful)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.OnDeviceSelectionComplete");

	UOnlinePlayerInterfaceEx_OnDeviceSelectionComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.ShowDeviceSelectionUI
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                SizeNeeded                                                 (Parm)
//		bool                                               bManageStorage                                             (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterfaceEx::ShowDeviceSelectionUI(unsigned char LocalUserNum, int SizeNeeded, bool bManageStorage)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowDeviceSelectionUI");

	UOnlinePlayerInterfaceEx_ShowDeviceSelectionUI_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.SizeNeeded = SizeNeeded;
	params.bManageStorage = bManageStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.ShowMembershipMarketplaceUI
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterfaceEx::ShowMembershipMarketplaceUI(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowMembershipMarketplaceUI");

	UOnlinePlayerInterfaceEx_ShowMembershipMarketplaceUI_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.ShowContentMarketplaceUI
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		int                                                CategoryMask                                               (OptionalParm, Parm)
//		int                                                OfferId                                                    (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterfaceEx::ShowContentMarketplaceUI(unsigned char LocalUserNum, int CategoryMask, int OfferId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowContentMarketplaceUI");

	UOnlinePlayerInterfaceEx_ShowContentMarketplaceUI_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.CategoryMask = CategoryMask;
	params.OfferId = OfferId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.ShowInviteUI
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FString                                     InviteText                                                 (OptionalParm, Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterfaceEx::ShowInviteUI(unsigned char LocalUserNum, const struct FString& InviteText)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowInviteUI");

	UOnlinePlayerInterfaceEx_ShowInviteUI_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.InviteText = InviteText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.ShowAchievementsUI
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterfaceEx::ShowAchievementsUI(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowAchievementsUI");

	UOnlinePlayerInterfaceEx_ShowAchievementsUI_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.ShowMessagesUI
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterfaceEx::ShowMessagesUI(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowMessagesUI");

	UOnlinePlayerInterfaceEx_ShowMessagesUI_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.ShowGamerCardUI
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterfaceEx::ShowGamerCardUI(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowGamerCardUI");

	UOnlinePlayerInterfaceEx_ShowGamerCardUI_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlinePlayerInterfaceEx.ShowFeedbackUI
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
//		struct FUniqueNetId                                PlayerID                                                   (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlinePlayerInterfaceEx::ShowFeedbackUI(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowFeedbackUI");

	UOnlinePlayerInterfaceEx_ShowFeedbackUI_Params params {};
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAccountInterface.GetLocalAccountNames
//		Flags  -> ()
// Parameters:
//		TArray<struct FString>                             Accounts                                                   (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineAccountInterface::GetLocalAccountNames(TArray<struct FString>* Accounts)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.GetLocalAccountNames");

	UOnlineAccountInterface_GetLocalAccountNames_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Accounts != nullptr)
		*Accounts = params.Accounts;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAccountInterface.DeleteLocalAccount
//		Flags  -> ()
// Parameters:
//		struct FString                                     UserName                                                   (Parm, NeedCtorLink)
//		struct FString                                     Password                                                   (OptionalParm, Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineAccountInterface::DeleteLocalAccount(const struct FString& UserName, const struct FString& Password)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.DeleteLocalAccount");

	UOnlineAccountInterface_DeleteLocalAccount_Params params {};
	params.UserName = UserName;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAccountInterface.RenameLocalAccount
//		Flags  -> ()
// Parameters:
//		struct FString                                     NewUserName                                                (Parm, NeedCtorLink)
//		struct FString                                     OldUserName                                                (Parm, NeedCtorLink)
//		struct FString                                     Password                                                   (OptionalParm, Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineAccountInterface::RenameLocalAccount(const struct FString& NewUserName, const struct FString& OldUserName, const struct FString& Password)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.RenameLocalAccount");

	UOnlineAccountInterface_RenameLocalAccount_Params params {};
	params.NewUserName = NewUserName;
	params.OldUserName = OldUserName;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAccountInterface.CreateLocalAccount
//		Flags  -> ()
// Parameters:
//		struct FString                                     UserName                                                   (Parm, NeedCtorLink)
//		struct FString                                     Password                                                   (OptionalParm, Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineAccountInterface::CreateLocalAccount(const struct FString& UserName, const struct FString& Password)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.CreateLocalAccount");

	UOnlineAccountInterface_CreateLocalAccount_Params params {};
	params.UserName = UserName;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAccountInterface.ClearCreateOnlineAccountCompletedDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             AccountCreateDelegate                                      (Parm, NeedCtorLink)
void UOnlineAccountInterface::ClearCreateOnlineAccountCompletedDelegate(const struct FScriptDelegate& AccountCreateDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.ClearCreateOnlineAccountCompletedDelegate");

	UOnlineAccountInterface_ClearCreateOnlineAccountCompletedDelegate_Params params {};
	params.AccountCreateDelegate = AccountCreateDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAccountInterface.AddCreateOnlineAccountCompletedDelegate
//		Flags  -> ()
// Parameters:
//		struct FScriptDelegate                             AccountCreateDelegate                                      (Parm, NeedCtorLink)
void UOnlineAccountInterface::AddCreateOnlineAccountCompletedDelegate(const struct FScriptDelegate& AccountCreateDelegate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.AddCreateOnlineAccountCompletedDelegate");

	UOnlineAccountInterface_AddCreateOnlineAccountCompletedDelegate_Params params {};
	params.AccountCreateDelegate = AccountCreateDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAccountInterface.OnCreateOnlineAccountCompleted
//		Flags  -> ()
// Parameters:
//		TEnumAsByte<Engine_EOnlineAccountCreateStatus>     ErrorStatus                                                (Parm)
void UOnlineAccountInterface::OnCreateOnlineAccountCompleted(TEnumAsByte<Engine_EOnlineAccountCreateStatus> ErrorStatus)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.OnCreateOnlineAccountCompleted");

	UOnlineAccountInterface_OnCreateOnlineAccountCompleted_Params params {};
	params.ErrorStatus = ErrorStatus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.OnlineAccountInterface.CreateOnlineAccount
//		Flags  -> ()
// Parameters:
//		struct FString                                     UserName                                                   (Parm, NeedCtorLink)
//		struct FString                                     Password                                                   (Parm, NeedCtorLink)
//		struct FString                                     EmailAddress                                               (Parm, NeedCtorLink)
//		struct FString                                     ProductKey                                                 (OptionalParm, Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UOnlineAccountInterface::CreateOnlineAccount(const struct FString& UserName, const struct FString& Password, const struct FString& EmailAddress, const struct FString& ProductKey)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.CreateOnlineAccount");

	UOnlineAccountInterface_CreateOnlineAccount_Params params {};
	params.UserName = UserName;
	params.Password = Password;
	params.EmailAddress = EmailAddress;
	params.ProductKey = ProductKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.VolumeTimer.Timer
//		Flags  -> ()
void AVolumeTimer::Timer()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.VolumeTimer.Timer");

	AVolumeTimer_Timer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.VolumeTimer.PostBeginPlay
//		Flags  -> ()
void AVolumeTimer::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.VolumeTimer.PostBeginPlay");

	AVolumeTimer_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DynamicPhysicsVolume.PostBeginPlay
//		Flags  -> ()
void ADynamicPhysicsVolume::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DynamicPhysicsVolume.PostBeginPlay");

	ADynamicPhysicsVolume_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.DynamicTriggerVolume.PostBeginPlay
//		Flags  -> ()
void ADynamicTriggerVolume::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.DynamicTriggerVolume.PostBeginPlay");

	ADynamicTriggerVolume_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedBaseComponent.GetNumVisibleFragments
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UFracturedBaseComponent::GetNumVisibleFragments()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedBaseComponent.GetNumVisibleFragments");

	UFracturedBaseComponent_GetNumVisibleFragments_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedBaseComponent.GetNumFragments
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UFracturedBaseComponent::GetNumFragments()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedBaseComponent.GetNumFragments");

	UFracturedBaseComponent_GetNumFragments_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedBaseComponent.IsFragmentVisible
//		Flags  -> ()
// Parameters:
//		int                                                FragmentIndex                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UFracturedBaseComponent::IsFragmentVisible(int FragmentIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedBaseComponent.IsFragmentVisible");

	UFracturedBaseComponent_IsFragmentVisible_Params params {};
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedBaseComponent.GetVisibleFragments
//		Flags  -> ()
// Parameters:
//		TArray<unsigned char>                              ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
TArray<unsigned char> UFracturedBaseComponent::GetVisibleFragments()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedBaseComponent.GetVisibleFragments");

	UFracturedBaseComponent_GetVisibleFragments_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedBaseComponent.SetStaticMesh
//		Flags  -> ()
// Parameters:
//		class UStaticMesh*                                 NewMesh                                                    (Parm)
//		bool                                               bForce                                                     (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UFracturedBaseComponent::SetStaticMesh(class UStaticMesh* NewMesh, bool bForce)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedBaseComponent.SetStaticMesh");

	UFracturedBaseComponent_SetStaticMesh_Params params {};
	params.NewMesh = NewMesh;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshComponent.GetFracturedMeshPhysMaterial
//		Flags  -> ()
// Parameters:
//		class UPhysicalMaterial*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class UPhysicalMaterial* UFracturedStaticMeshComponent::GetFracturedMeshPhysMaterial()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetFracturedMeshPhysMaterial");

	UFracturedStaticMeshComponent_GetFracturedMeshPhysMaterial_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshComponent.RecreatePhysState
//		Flags  -> ()
void UFracturedStaticMeshComponent::RecreatePhysState()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.RecreatePhysState");

	UFracturedStaticMeshComponent_RecreatePhysState_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshComponent.GetBoundaryHiddenFragments
//		Flags  -> ()
// Parameters:
//		TArray<int>                                        AdditionalVisibleFragments                                 (Parm, NeedCtorLink)
//		TArray<int>                                        ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
TArray<int> UFracturedStaticMeshComponent::GetBoundaryHiddenFragments(TArray<int> AdditionalVisibleFragments)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetBoundaryHiddenFragments");

	UFracturedStaticMeshComponent_GetBoundaryHiddenFragments_Params params {};
	params.AdditionalVisibleFragments = AdditionalVisibleFragments;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshComponent.GetFragmentGroups
//		Flags  -> ()
// Parameters:
//		TArray<int>                                        IgnoreFragments                                            (Parm, NeedCtorLink)
//		float                                              MinConnectionArea                                          (Parm)
//		TArray<struct FFragmentGroup>                      ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
TArray<struct FFragmentGroup> UFracturedStaticMeshComponent::GetFragmentGroups(TArray<int> IgnoreFragments, float MinConnectionArea)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetFragmentGroups");

	UFracturedStaticMeshComponent_GetFragmentGroups_Params params {};
	params.IgnoreFragments = IgnoreFragments;
	params.MinConnectionArea = MinConnectionArea;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshComponent.GetCoreFragmentIndex
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UFracturedStaticMeshComponent::GetCoreFragmentIndex()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetCoreFragmentIndex");

	UFracturedStaticMeshComponent_GetCoreFragmentIndex_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshComponent.GetFragmentAverageExteriorNormal
//		Flags  -> ()
// Parameters:
//		int                                                FragmentIndex                                              (Parm)
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector UFracturedStaticMeshComponent::GetFragmentAverageExteriorNormal(int FragmentIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetFragmentAverageExteriorNormal");

	UFracturedStaticMeshComponent_GetFragmentAverageExteriorNormal_Params params {};
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshComponent.GetFragmentBox
//		Flags  -> ()
// Parameters:
//		int                                                FragmentIndex                                              (Parm)
//		struct FBox                                        ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FBox UFracturedStaticMeshComponent::GetFragmentBox(int FragmentIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetFragmentBox");

	UFracturedStaticMeshComponent_GetFragmentBox_Params params {};
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshComponent.IsNoPhysFragment
//		Flags  -> ()
// Parameters:
//		int                                                FragmentIndex                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UFracturedStaticMeshComponent::IsNoPhysFragment(int FragmentIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.IsNoPhysFragment");

	UFracturedStaticMeshComponent_IsNoPhysFragment_Params params {};
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshComponent.IsRootFragment
//		Flags  -> ()
// Parameters:
//		int                                                FragmentIndex                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UFracturedStaticMeshComponent::IsRootFragment(int FragmentIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.IsRootFragment");

	UFracturedStaticMeshComponent_IsRootFragment_Params params {};
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshComponent.IsFragmentDestroyable
//		Flags  -> ()
// Parameters:
//		int                                                FragmentIndex                                              (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UFracturedStaticMeshComponent::IsFragmentDestroyable(int FragmentIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.IsFragmentDestroyable");

	UFracturedStaticMeshComponent_IsFragmentDestroyable_Params params {};
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.FracturedStaticMeshComponent.SetVisibleFragments
//		Flags  -> ()
// Parameters:
//		TArray<unsigned char>                              VisibilityFactors                                          (Parm, NeedCtorLink)
void UFracturedStaticMeshComponent::SetVisibleFragments(TArray<unsigned char> VisibilityFactors)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.SetVisibleFragments");

	UFracturedStaticMeshComponent_SetVisibleFragments_Params params {};
	params.VisibilityFactors = VisibilityFactors;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_Teleport.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_Teleport::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Teleport.GetObjClassVersion");

	USeqAct_Teleport_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_Teleport.ShouldTeleport
//		Flags  -> ()
// Parameters:
//		class AActor*                                      TestActor                                                  (Parm)
//		struct FVector                                     TeleportLocation                                           (Parm)
//		float                                              TeleportDist                                               (OptionalParm, Parm)
//		TArray<class AVolume*>                             Volumes                                                    (OptionalParm, Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USeqAct_Teleport::ShouldTeleport(class AActor* TestActor, const struct FVector& TeleportLocation, float TeleportDist, TArray<class AVolume*> Volumes)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Teleport.ShouldTeleport");

	USeqAct_Teleport_ShouldTeleport_Params params {};
	params.TestActor = TestActor;
	params.TeleportLocation = TeleportLocation;
	params.TeleportDist = TeleportDist;
	params.Volumes = Volumes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_SetVelocity.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_SetVelocity::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetVelocity.GetObjClassVersion");

	USeqAct_SetVelocity_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_AttachToActor.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_AttachToActor::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_AttachToActor.GetObjClassVersion");

	USeqAct_AttachToActor_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_SetMatInstVectorParam.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_SetMatInstVectorParam::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetMatInstVectorParam.GetObjClassVersion");

	USeqAct_SetMatInstVectorParam_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_SetVector.Activated
//		Flags  -> (Singular, Net, NetReliable, Simulated, Exec, Native, Event, HasOptionalParms, Const, Private, Delegate, NetServer, HasOutParms, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
void USeqAct_SetVector::Activated()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetVector.Activated");

	USeqAct_SetVector_Activated_Params params {};

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_UpdatePhysBonesFromAnim.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_UpdatePhysBonesFromAnim::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_UpdatePhysBonesFromAnim.GetObjClassVersion");

	USeqAct_UpdatePhysBonesFromAnim_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqEvent_LOS.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqEvent_LOS::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_LOS.GetObjClassVersion");

	USeqEvent_LOS_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Trigger_LOS.Tick
//		Flags  -> (Singular, NetReliable, Simulated, Exec, Event, Static, Const, HasDefaults, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
void ATrigger_LOS::STATIC_Tick(float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Trigger_LOS.Tick");

	ATrigger_LOS_Tick_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TriggeredPath.SuggestMovePreparation
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ATriggeredPath::SuggestMovePreparation(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TriggeredPath.SuggestMovePreparation");

	ATriggeredPath_SuggestMovePreparation_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TriggeredPath.SpecialHandling
//		Flags  -> ()
// Parameters:
//		class APawn*                                       Other                                                      (Parm)
//		class AActor*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class AActor* ATriggeredPath::SpecialHandling(class APawn* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TriggeredPath.SpecialHandling");

	ATriggeredPath_SpecialHandling_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TriggeredPath.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              inAction                                                   (Parm)
void ATriggeredPath::OnToggle(class USeqAct_Toggle* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TriggeredPath.OnToggle");

	ATriggeredPath_OnToggle_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TriggerStreamingLevel.Touch
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		class UPrimitiveComponent*                         OtherComp                                                  (Parm, EditInline)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     HitNormal                                                  (Parm)
void ATriggerStreamingLevel::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TriggerStreamingLevel.Touch");

	ATriggerStreamingLevel_Touch_Params params {};
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.OnDeleteUserFileComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UUserCloudFileCloudSaveSystemDataBlobStore::OnDeleteUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.OnDeleteUserFileComplete");

	UUserCloudFileCloudSaveSystemDataBlobStore_OnDeleteUserFileComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.DeleteDataBlob
//		Flags  -> ()
// Parameters:
//		struct FString                                     StorageID                                                  (Parm, NeedCtorLink)
//		struct FString                                     BlobName                                                   (Parm, NeedCtorLink)
//		struct FScriptDelegate                             InDeleteDataBlobCallback                                   (Parm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUserCloudFileCloudSaveSystemDataBlobStore::DeleteDataBlob(const struct FString& StorageID, const struct FString& BlobName, const struct FScriptDelegate& InDeleteDataBlobCallback)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.DeleteDataBlob");

	UUserCloudFileCloudSaveSystemDataBlobStore_DeleteDataBlob_Params params {};
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.InDeleteDataBlobCallback = InDeleteDataBlobCallback;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.OnWriteUserFileComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UUserCloudFileCloudSaveSystemDataBlobStore::OnWriteUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.OnWriteUserFileComplete");

	UUserCloudFileCloudSaveSystemDataBlobStore_OnWriteUserFileComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.SetDataBlob
//		Flags  -> ()
// Parameters:
//		struct FString                                     StorageID                                                  (Parm, NeedCtorLink)
//		struct FString                                     BlobName                                                   (Parm, NeedCtorLink)
//		TArray<unsigned char>                              DataBlob                                                   (Const, Parm, OutParm, NeedCtorLink)
//		struct FScriptDelegate                             InSetDataBlobCallback                                      (Parm, NeedCtorLink)
void UUserCloudFileCloudSaveSystemDataBlobStore::SetDataBlob(const struct FString& StorageID, const struct FString& BlobName, TArray<unsigned char>* DataBlob, const struct FScriptDelegate& InSetDataBlobCallback)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.SetDataBlob");

	UUserCloudFileCloudSaveSystemDataBlobStore_SetDataBlob_Params params {};
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.InSetDataBlobCallback = InSetDataBlobCallback;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DataBlob != nullptr)
		*DataBlob = params.DataBlob;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.OnReadUserFileComplete
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     UserId                                                     (Parm, NeedCtorLink)
//		struct FString                                     Filename                                                   (Parm, NeedCtorLink)
void UUserCloudFileCloudSaveSystemDataBlobStore::OnReadUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.OnReadUserFileComplete");

	UUserCloudFileCloudSaveSystemDataBlobStore_OnReadUserFileComplete_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.GetDataBlob
//		Flags  -> ()
// Parameters:
//		struct FString                                     StorageID                                                  (Parm, NeedCtorLink)
//		struct FString                                     BlobName                                                   (Parm, NeedCtorLink)
//		struct FScriptDelegate                             InGetDataBlobCallback                                      (Parm, NeedCtorLink)
void UUserCloudFileCloudSaveSystemDataBlobStore::GetDataBlob(const struct FString& StorageID, const struct FString& BlobName, const struct FScriptDelegate& InGetDataBlobCallback)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.GetDataBlob");

	UUserCloudFileCloudSaveSystemDataBlobStore_GetDataBlob_Params params {};
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.InGetDataBlobCallback = InGetDataBlobCallback;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.Init
//		Flags  -> ()
void UUserCloudFileCloudSaveSystemDataBlobStore::Init()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.Init");

	UUserCloudFileCloudSaveSystemDataBlobStore_Init_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.DeleteDataBlobCallbackDelegate
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSucessfull                                             (Parm)
//		struct FString                                     StorageID                                                  (Parm, NeedCtorLink)
//		struct FString                                     BlobName                                                   (Parm, NeedCtorLink)
//		struct FString                                     Error                                                      (Parm, NeedCtorLink)
void UUserCloudFileCloudSaveSystemDataBlobStore::DeleteDataBlobCallbackDelegate(bool bWasSucessfull, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.DeleteDataBlobCallbackDelegate");

	UUserCloudFileCloudSaveSystemDataBlobStore_DeleteDataBlobCallbackDelegate_Params params {};
	params.bWasSucessfull = bWasSucessfull;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.SetDataBlobCallbackDelegate
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSucessfull                                             (Parm)
//		struct FString                                     StorageID                                                  (Parm, NeedCtorLink)
//		struct FString                                     BlobName                                                   (Parm, NeedCtorLink)
//		struct FString                                     Error                                                      (Parm, NeedCtorLink)
void UUserCloudFileCloudSaveSystemDataBlobStore::SetDataBlobCallbackDelegate(bool bWasSucessfull, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.SetDataBlobCallbackDelegate");

	UUserCloudFileCloudSaveSystemDataBlobStore_SetDataBlobCallbackDelegate_Params params {};
	params.bWasSucessfull = bWasSucessfull;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.GetDataBlobCallbackDelegate
//		Flags  -> ()
// Parameters:
//		bool                                               bWasSuccessful                                             (Parm)
//		struct FString                                     StorageID                                                  (Parm, NeedCtorLink)
//		struct FString                                     BlobName                                                   (Parm, NeedCtorLink)
//		TArray<unsigned char>                              DataBlob                                                   (Parm, OutParm, NeedCtorLink)
//		struct FString                                     Error                                                      (Parm, NeedCtorLink)
void UUserCloudFileCloudSaveSystemDataBlobStore::GetDataBlobCallbackDelegate(bool bWasSuccessful, const struct FString& StorageID, const struct FString& BlobName, TArray<unsigned char>* DataBlob, const struct FString& Error)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.GetDataBlobCallbackDelegate");

	UUserCloudFileCloudSaveSystemDataBlobStore_GetDataBlobCallbackDelegate_Params params {};
	params.bWasSuccessful = bWasSuccessful;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (DataBlob != nullptr)
		*DataBlob = params.DataBlob;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WaterVolume.PlayExitSplash
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void AWaterVolume::PlayExitSplash(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WaterVolume.PlayExitSplash");

	AWaterVolume_PlayExitSplash_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WaterVolume.UnTouch
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void AWaterVolume::UnTouch(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WaterVolume.UnTouch");

	AWaterVolume_UnTouch_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WaterVolume.PlayEntrySplash
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void AWaterVolume::PlayEntrySplash(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WaterVolume.PlayEntrySplash");

	AWaterVolume_PlayEntrySplash_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.WaterVolume.Touch
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
//		class UPrimitiveComponent*                         OtherComp                                                  (Parm, EditInline)
//		struct FVector                                     HitLocation                                                (Parm)
//		struct FVector                                     HitNormal                                                  (Parm)
void AWaterVolume::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.WaterVolume.Touch");

	AWaterVolume_Touch_Params params {};
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SoundNodeWave.GeneratePCMData
//		Flags  -> ()
// Parameters:
//		TArray<unsigned char>                              Buffer                                                     (Parm, OutParm, NeedCtorLink)
//		int                                                SamplesNeeded                                              (Parm)
void USoundNodeWave::GeneratePCMData(TArray<unsigned char>* Buffer, int SamplesNeeded)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SoundNodeWave.GeneratePCMData");

	USoundNodeWave_GeneratePCMData_Params params {};
	params.SamplesNeeded = SamplesNeeded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Buffer != nullptr)
		*Buffer = params.Buffer;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SoundNodeWaveStreaming.GeneratePCMData
//		Flags  -> ()
// Parameters:
//		TArray<unsigned char>                              Buffer                                                     (Parm, OutParm, NeedCtorLink)
//		int                                                SamplesNeeded                                              (Parm)
void USoundNodeWaveStreaming::GeneratePCMData(TArray<unsigned char>* Buffer, int SamplesNeeded)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SoundNodeWaveStreaming.GeneratePCMData");

	USoundNodeWaveStreaming_GeneratePCMData_Params params {};
	params.SamplesNeeded = SamplesNeeded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (Buffer != nullptr)
		*Buffer = params.Buffer;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SoundNodeWaveStreaming.AvailableAudioBytes
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USoundNodeWaveStreaming::AvailableAudioBytes()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SoundNodeWaveStreaming.AvailableAudioBytes");

	USoundNodeWaveStreaming_AvailableAudioBytes_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SoundNodeWaveStreaming.ResetAudio
//		Flags  -> ()
void USoundNodeWaveStreaming::ResetAudio()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SoundNodeWaveStreaming.ResetAudio");

	USoundNodeWaveStreaming_ResetAudio_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SoundNodeWaveStreaming.QueueSilence
//		Flags  -> ()
// Parameters:
//		float                                              Seconds                                                    (Parm)
void USoundNodeWaveStreaming::QueueSilence(float Seconds)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SoundNodeWaveStreaming.QueueSilence");

	USoundNodeWaveStreaming_QueueSilence_Params params {};
	params.Seconds = Seconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SoundNodeWaveStreaming.QueueAudio
//		Flags  -> ()
// Parameters:
//		TArray<unsigned char>                              Data                                                       (Parm, NeedCtorLink)
void USoundNodeWaveStreaming::QueueAudio(TArray<unsigned char> Data)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SoundNodeWaveStreaming.QueueAudio");

	USoundNodeWaveStreaming_QueueAudio_Params params {};
	params.Data = Data;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NxForceFieldGeneric.DoInitRBPhys
//		Flags  -> ()
void ANxForceFieldGeneric::DoInitRBPhys()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NxForceFieldGeneric.DoInitRBPhys");

	ANxForceFieldGeneric_DoInitRBPhys_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NxForceFieldRadial.DoInitRBPhys
//		Flags  -> ()
void ANxForceFieldRadial::DoInitRBPhys()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NxForceFieldRadial.DoInitRBPhys");

	ANxForceFieldRadial_DoInitRBPhys_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_DynamicResource.Unregistered
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                PlayerOwner                                                (Parm)
void UUIDataStore_DynamicResource::Unregistered(class ULocalPlayer* PlayerOwner)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_DynamicResource.Unregistered");

	UUIDataStore_DynamicResource_Unregistered_Params params {};
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_DynamicResource.Registered
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                PlayerOwner                                                (Parm)
void UUIDataStore_DynamicResource::Registered(class ULocalPlayer* PlayerOwner)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_DynamicResource.Registered");

	UUIDataStore_DynamicResource_Registered_Params params {};
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_DynamicResource.OnLoginChange
//		Flags  -> ()
// Parameters:
//		unsigned char                                      LocalUserNum                                               (Parm)
void UUIDataStore_DynamicResource::OnLoginChange(unsigned char LocalUserNum)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_DynamicResource.OnLoginChange");

	UUIDataStore_DynamicResource_OnLoginChange_Params params {};
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_DynamicResource.GetResourceProviders
//		Flags  -> ()
// Parameters:
//		struct FName                                       ProviderTag                                                (Parm)
//		TArray<class UUIResourceCombinationProvider*>      out_Providers                                              (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataStore_DynamicResource::GetResourceProviders(const struct FName& ProviderTag, TArray<class UUIResourceCombinationProvider*>* out_Providers)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_DynamicResource.GetResourceProviders");

	UUIDataStore_DynamicResource_GetResourceProviders_Params params {};
	params.ProviderTag = ProviderTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Providers != nullptr)
		*out_Providers = params.out_Providers;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_DynamicResource.FindProviderTypeIndex
//		Flags  -> ()
// Parameters:
//		struct FName                                       ProviderTag                                                (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UUIDataStore_DynamicResource::FindProviderTypeIndex(const struct FName& ProviderTag)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_DynamicResource.FindProviderTypeIndex");

	UUIDataStore_DynamicResource_FindProviderTypeIndex_Params params {};
	params.ProviderTag = ProviderTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_GameResource.GetResourceProviders
//		Flags  -> ()
// Parameters:
//		struct FName                                       ProviderTag                                                (Parm)
//		TArray<class UUIResourceDataProvider*>             out_Providers                                              (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataStore_GameResource::GetResourceProviders(const struct FName& ProviderTag, TArray<class UUIResourceDataProvider*>* out_Providers)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_GameResource.GetResourceProviders");

	UUIDataStore_GameResource_GetResourceProviders_Params params {};
	params.ProviderTag = ProviderTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Providers != nullptr)
		*out_Providers = params.out_Providers;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_GameResource.FindProviderTypeIndex
//		Flags  -> ()
// Parameters:
//		struct FName                                       ProviderTag                                                (Parm)
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int UUIDataStore_GameResource::FindProviderTypeIndex(const struct FName& ProviderTag)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_GameResource.FindProviderTypeIndex");

	UUIDataStore_GameResource_FindProviderTypeIndex_Params params {};
	params.ProviderTag = ProviderTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_MenuItems.Unregistered
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                PlayerOwner                                                (Parm)
void UUIDataStore_MenuItems::Unregistered(class ULocalPlayer* PlayerOwner)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_MenuItems.Unregistered");

	UUIDataStore_MenuItems_Unregistered_Params params {};
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_MenuItems.Registered
//		Flags  -> ()
// Parameters:
//		class ULocalPlayer*                                PlayerOwner                                                (Parm)
void UUIDataStore_MenuItems::Registered(class ULocalPlayer* PlayerOwner)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_MenuItems.Registered");

	UUIDataStore_MenuItems_Registered_Params params {};
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_MenuItems.OnGameSettingsChanged
//		Flags  -> ()
// Parameters:
//		class UUIDataProvider*                             SourceProvider                                             (Parm)
//		struct FName                                       PropTag                                                    (OptionalParm, Parm)
void UUIDataStore_MenuItems::OnGameSettingsChanged(class UUIDataProvider* SourceProvider, const struct FName& PropTag)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_MenuItems.OnGameSettingsChanged");

	UUIDataStore_MenuItems_OnGameSettingsChanged_Params params {};
	params.SourceProvider = SourceProvider;
	params.PropTag = PropTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_GameState.NotifyGameSessionEnded
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataStore_GameState::NotifyGameSessionEnded()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_GameState.NotifyGameSessionEnded");

	UUIDataStore_GameState_NotifyGameSessionEnded_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_GameState.OnRefreshDataFieldValue
//		Flags  -> ()
void UUIDataStore_GameState::OnRefreshDataFieldValue()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_GameState.OnRefreshDataFieldValue");

	UUIDataStore_GameState_OnRefreshDataFieldValue_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_Registry.SetData
//		Flags  -> (Singular, Simulated, Exec, Operator, Public, Protected, HasDefaults, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		struct FString                                     Key                                                        (Parm, NeedCtorLink)
//		struct FString                                     Value                                                      (Parm, NeedCtorLink)
void UUIDataStore_Registry::SetData(const struct FString& Key, const struct FString& Value)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_Registry.SetData");

	UUIDataStore_Registry_SetData_Params params {};
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.UIDataStore_Registry.GetData
//		Flags  -> ()
// Parameters:
//		struct FString                                     Key                                                        (Parm, NeedCtorLink)
//		struct FString                                     out_Data                                                   (Parm, OutParm, NeedCtorLink)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UUIDataStore_Registry::GetData(const struct FString& Key, struct FString* out_Data)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_Registry.GetData");

	UUIDataStore_Registry_GetData_Params params {};
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (out_Data != nullptr)
		*out_Data = params.out_Data;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_SetCameraTarget.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_SetCameraTarget::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetCameraTarget.GetObjClassVersion");

	USeqAct_SetCameraTarget_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_SetFloat.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_SetFloat::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetFloat.GetObjClassVersion");

	USeqAct_SetFloat_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_SetInt.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_SetInt::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetInt.GetObjClassVersion");

	USeqAct_SetInt_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_SetLocation.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_SetLocation::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetLocation.GetObjClassVersion");

	USeqAct_SetLocation_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_SetObject.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_SetObject::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetObject.GetObjClassVersion");

	USeqAct_SetObject_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_SetString.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_SetString::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetString.GetObjClassVersion");

	USeqAct_SetString_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_RandomSwitch.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_RandomSwitch::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_RandomSwitch.GetObjClassVersion");

	USeqAct_RandomSwitch_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_ToggleCinematicMode.SwitchCinematic
//		Flags  -> ()
// Parameters:
//		bool                                               bSwitch                                                    (Parm)
void USeqAct_ToggleCinematicMode::SwitchCinematic(bool bSwitch)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ToggleCinematicMode.SwitchCinematic");

	USeqAct_ToggleCinematicMode_SwitchCinematic_Params params {};
	params.bSwitch = bSwitch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_Trace.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_Trace::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Trace.GetObjClassVersion");

	USeqAct_Trace_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqCond_CompareBool.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqCond_CompareBool::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_CompareBool.GetObjClassVersion");

	USeqCond_CompareBool_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqCond_GetServerType.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqCond_GetServerType::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_GetServerType.GetObjClassVersion");

	USeqCond_GetServerType_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqCond_IsBenchmarking.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqCond_IsBenchmarking::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_IsBenchmarking.GetObjClassVersion");

	USeqCond_IsBenchmarking_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqCond_IsLoggedIn.CheckLogins
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USeqCond_IsLoggedIn::CheckLogins()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_IsLoggedIn.CheckLogins");

	USeqCond_IsLoggedIn_CheckLogins_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqCond_IsPIE.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqCond_IsPIE::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_IsPIE.GetObjClassVersion");

	USeqCond_IsPIE_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqCond_SwitchBase.RemoveValueEntry
//		Flags  -> ()
// Parameters:
//		int                                                RemoveIndex                                                (Parm)
void USeqCond_SwitchBase::RemoveValueEntry(int RemoveIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchBase.RemoveValueEntry");

	USeqCond_SwitchBase_RemoveValueEntry_Params params {};
	params.RemoveIndex = RemoveIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqCond_SwitchBase.InsertValueEntry
//		Flags  -> ()
// Parameters:
//		int                                                InsertIndex                                                (Parm)
void USeqCond_SwitchBase::InsertValueEntry(int InsertIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchBase.InsertValueEntry");

	USeqCond_SwitchBase_InsertValueEntry_Params params {};
	params.InsertIndex = InsertIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqCond_SwitchBase.IsFallThruEnabled
//		Flags  -> ()
// Parameters:
//		int                                                ValueIndex                                                 (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USeqCond_SwitchBase::IsFallThruEnabled(int ValueIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchBase.IsFallThruEnabled");

	USeqCond_SwitchBase_IsFallThruEnabled_Params params {};
	params.ValueIndex = ValueIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqCond_SwitchBase.VerifyDefaultCaseValue
//		Flags  -> ()
void USeqCond_SwitchBase::VerifyDefaultCaseValue()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchBase.VerifyDefaultCaseValue");

	USeqCond_SwitchBase_VerifyDefaultCaseValue_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqCond_SwitchClass.RemoveValueEntry
//		Flags  -> ()
// Parameters:
//		int                                                RemoveIndex                                                (Parm)
void USeqCond_SwitchClass::RemoveValueEntry(int RemoveIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchClass.RemoveValueEntry");

	USeqCond_SwitchClass_RemoveValueEntry_Params params {};
	params.RemoveIndex = RemoveIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqCond_SwitchClass.InsertValueEntry
//		Flags  -> ()
// Parameters:
//		int                                                InsertIndex                                                (Parm)
void USeqCond_SwitchClass::InsertValueEntry(int InsertIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchClass.InsertValueEntry");

	USeqCond_SwitchClass_InsertValueEntry_Params params {};
	params.InsertIndex = InsertIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqCond_SwitchClass.IsFallThruEnabled
//		Flags  -> ()
// Parameters:
//		int                                                ValueIndex                                                 (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USeqCond_SwitchClass::IsFallThruEnabled(int ValueIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchClass.IsFallThruEnabled");

	USeqCond_SwitchClass_IsFallThruEnabled_Params params {};
	params.ValueIndex = ValueIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqCond_SwitchClass.VerifyDefaultCaseValue
//		Flags  -> ()
void USeqCond_SwitchClass::VerifyDefaultCaseValue()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchClass.VerifyDefaultCaseValue");

	USeqCond_SwitchClass_VerifyDefaultCaseValue_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqCond_SwitchObject.RemoveValueEntry
//		Flags  -> ()
// Parameters:
//		int                                                RemoveIndex                                                (Parm)
void USeqCond_SwitchObject::RemoveValueEntry(int RemoveIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchObject.RemoveValueEntry");

	USeqCond_SwitchObject_RemoveValueEntry_Params params {};
	params.RemoveIndex = RemoveIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqCond_SwitchObject.InsertValueEntry
//		Flags  -> ()
// Parameters:
//		int                                                InsertIndex                                                (Parm)
void USeqCond_SwitchObject::InsertValueEntry(int InsertIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchObject.InsertValueEntry");

	USeqCond_SwitchObject_InsertValueEntry_Params params {};
	params.InsertIndex = InsertIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqCond_SwitchObject.IsFallThruEnabled
//		Flags  -> ()
// Parameters:
//		int                                                ValueIndex                                                 (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USeqCond_SwitchObject::IsFallThruEnabled(int ValueIndex)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchObject.IsFallThruEnabled");

	USeqCond_SwitchObject_IsFallThruEnabled_Params params {};
	params.ValueIndex = ValueIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqCond_SwitchObject.VerifyDefaultCaseValue
//		Flags  -> ()
void USeqCond_SwitchObject::VerifyDefaultCaseValue()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchObject.VerifyDefaultCaseValue");

	USeqCond_SwitchObject_VerifyDefaultCaseValue_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqEvent_LevelLoaded.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqEvent_LevelLoaded::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_LevelLoaded.GetObjClassVersion");

	USeqEvent_LevelLoaded_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqEvent_Mover.NotifyFinishedOpen
//		Flags  -> ()
void USeqEvent_Mover::NotifyFinishedOpen()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Mover.NotifyFinishedOpen");

	USeqEvent_Mover_NotifyFinishedOpen_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqEvent_Mover.NotifyDetached
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void USeqEvent_Mover::NotifyDetached(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Mover.NotifyDetached");

	USeqEvent_Mover_NotifyDetached_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqEvent_Mover.NotifyAttached
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Other                                                      (Parm)
void USeqEvent_Mover::NotifyAttached(class AActor* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Mover.NotifyAttached");

	USeqEvent_Mover_NotifyAttached_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqEvent_Mover.NotifyEncroachingOn
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Hit                                                        (Parm)
void USeqEvent_Mover::NotifyEncroachingOn(class AActor* Hit)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Mover.NotifyEncroachingOn");

	USeqEvent_Mover_NotifyEncroachingOn_Params params {};
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqEvent_Mover.RegisterEvent
//		Flags  -> ()
void USeqEvent_Mover::RegisterEvent()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Mover.RegisterEvent");

	USeqEvent_Mover_RegisterEvent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqEvent_ParticleEvent.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqEvent_ParticleEvent::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_ParticleEvent.GetObjClassVersion");

	USeqEvent_ParticleEvent_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqEvent_RemoteEvent.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqEvent_RemoteEvent::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_RemoteEvent.GetObjClassVersion");

	USeqEvent_RemoteEvent_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqEvent_TakeDamage.Toggled
//		Flags  -> ()
void USeqEvent_TakeDamage::Toggled()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_TakeDamage.Toggled");

	USeqEvent_TakeDamage_Toggled_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqEvent_TakeDamage.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqEvent_TakeDamage::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_TakeDamage.GetObjClassVersion");

	USeqEvent_TakeDamage_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqEvent_TakeDamage.Reset
//		Flags  -> ()
void USeqEvent_TakeDamage::Reset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_TakeDamage.Reset");

	USeqEvent_TakeDamage_Reset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqEvent_TakeDamage.HandleDamage
//		Flags  -> ()
// Parameters:
//		class AActor*                                      InOriginator                                               (Parm)
//		class AActor*                                      InInstigator                                               (Parm)
//		class UClass*                                      inDamageType                                               (Parm)
//		int                                                inAmount                                                   (Parm)
void USeqEvent_TakeDamage::HandleDamage(class AActor* InOriginator, class AActor* InInstigator, class UClass* inDamageType, int inAmount)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_TakeDamage.HandleDamage");

	USeqEvent_TakeDamage_HandleDamage_Params params {};
	params.InOriginator = InOriginator;
	params.InInstigator = InInstigator;
	params.inDamageType = inDamageType;
	params.inAmount = inAmount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqEvent_TakeDamage.IsValidDamageType
//		Flags  -> ()
// Parameters:
//		class UClass*                                      inDamageType                                               (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USeqEvent_TakeDamage::IsValidDamageType(class UClass* inDamageType)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_TakeDamage.IsValidDamageType");

	USeqEvent_TakeDamage_IsValidDamageType_Params params {};
	params.inDamageType = inDamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqEvent_Touch.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqEvent_Touch::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Touch.GetObjClassVersion");

	USeqEvent_Touch_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqEvent_Touch.NotifyTouchingPawnDied
//		Flags  -> ()
// Parameters:
//		class APawn*                                       P                                                          (Parm)
void USeqEvent_Touch::NotifyTouchingPawnDied(class APawn* P)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Touch.NotifyTouchingPawnDied");

	USeqEvent_Touch_NotifyTouchingPawnDied_Params params {};
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqEvent_Touch.Toggled
//		Flags  -> ()
void USeqEvent_Touch::Toggled()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Touch.Toggled");

	USeqEvent_Touch_Toggled_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqEvent_Touch.CheckUnTouchActivate
//		Flags  -> ()
// Parameters:
//		class AActor*                                      InOriginator                                               (Parm)
//		class AActor*                                      InInstigator                                               (Parm)
//		bool                                               bTest                                                      (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USeqEvent_Touch::CheckUnTouchActivate(class AActor* InOriginator, class AActor* InInstigator, bool bTest)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Touch.CheckUnTouchActivate");

	USeqEvent_Touch_CheckUnTouchActivate_Params params {};
	params.InOriginator = InOriginator;
	params.InInstigator = InInstigator;
	params.bTest = bTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqEvent_Touch.CheckTouchActivate
//		Flags  -> ()
// Parameters:
//		class AActor*                                      InOriginator                                               (Parm)
//		class AActor*                                      InInstigator                                               (Parm)
//		bool                                               bTest                                                      (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USeqEvent_Touch::CheckTouchActivate(class AActor* InOriginator, class AActor* InInstigator, bool bTest)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Touch.CheckTouchActivate");

	USeqEvent_Touch_CheckTouchActivate_Params params {};
	params.InOriginator = InOriginator;
	params.InInstigator = InInstigator;
	params.bTest = bTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqVar_Object.SetObjectValue
//		Flags  -> ()
// Parameters:
//		class UObject*                                     NewValue                                                   (Parm)
void USeqVar_Object::SetObjectValue(class UObject* NewValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_Object.SetObjectValue");

	USeqVar_Object_SetObjectValue_Params params {};
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqVar_Object.GetObjectValue
//		Flags  -> ()
// Parameters:
//		class UObject*                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
class UObject* USeqVar_Object::GetObjectValue()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_Object.GetObjectValue");

	USeqVar_Object_GetObjectValue_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqVar_ObjectList.SetObjectValue
//		Flags  -> ()
// Parameters:
//		class UObject*                                     NewValue                                                   (Parm)
void USeqVar_ObjectList::SetObjectValue(class UObject* NewValue)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_ObjectList.SetObjectValue");

	USeqVar_ObjectList_SetObjectValue_Params params {};
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqVar_ObjectList.GetObjectValue
//		Flags  -> ()
// Parameters:
//		class UObject*                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
class UObject* USeqVar_ObjectList::GetObjectValue()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_ObjectList.GetObjectValue");

	USeqVar_ObjectList_GetObjectValue_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqVar_Player.GetObjectValue
//		Flags  -> ()
// Parameters:
//		class UObject*                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
class UObject* USeqVar_Player::GetObjectValue()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_Player.GetObjectValue");

	USeqVar_Player_GetObjectValue_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqVar_Player.UpdatePlayersList
//		Flags  -> ()
void USeqVar_Player::UpdatePlayersList()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_Player.UpdatePlayersList");

	USeqVar_Player_UpdatePlayersList_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameReplicationInfo.ShouldShowGore
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameReplicationInfo::ShouldShowGore()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.ShouldShowGore");

	AGameReplicationInfo_ShouldShowGore_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameReplicationInfo.IsCoopMultiplayerGame
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameReplicationInfo::IsCoopMultiplayerGame()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.IsCoopMultiplayerGame");

	AGameReplicationInfo_IsCoopMultiplayerGame_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameReplicationInfo.IsMultiplayerGame
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameReplicationInfo::IsMultiplayerGame()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.IsMultiplayerGame");

	AGameReplicationInfo_IsMultiplayerGame_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameReplicationInfo.EndGame
//		Flags  -> ()
void AGameReplicationInfo::EndGame()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.EndGame");

	AGameReplicationInfo_EndGame_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameReplicationInfo.StartMatch
//		Flags  -> ()
void AGameReplicationInfo::StartMatch()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.StartMatch");

	AGameReplicationInfo_StartMatch_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameReplicationInfo.SetTeam
//		Flags  -> ()
// Parameters:
//		int                                                Index                                                      (Parm)
//		class ATeamInfo*                                   TI                                                         (Parm)
void AGameReplicationInfo::SetTeam(int Index, class ATeamInfo* TI)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.SetTeam");

	AGameReplicationInfo_SetTeam_Params params {};
	params.Index = Index;
	params.TI = TI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameReplicationInfo.RemovePRI
//		Flags  -> ()
// Parameters:
//		class APlayerReplicationInfo*                      PRI                                                        (Parm)
void AGameReplicationInfo::RemovePRI(class APlayerReplicationInfo* PRI)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.RemovePRI");

	AGameReplicationInfo_RemovePRI_Params params {};
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameReplicationInfo.AddPRI
//		Flags  -> ()
// Parameters:
//		class APlayerReplicationInfo*                      PRI                                                        (Parm)
void AGameReplicationInfo::AddPRI(class APlayerReplicationInfo* PRI)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.AddPRI");

	AGameReplicationInfo_AddPRI_Params params {};
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameReplicationInfo.OnSameTeam
//		Flags  -> ()
// Parameters:
//		class AActor*                                      A                                                          (Parm)
//		class AActor*                                      B                                                          (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool AGameReplicationInfo::OnSameTeam(class AActor* A, class AActor* B)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.OnSameTeam");

	AGameReplicationInfo_OnSameTeam_Params params {};
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameReplicationInfo.Timer
//		Flags  -> ()
void AGameReplicationInfo::Timer()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.Timer");

	AGameReplicationInfo_Timer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameReplicationInfo.Reset
//		Flags  -> ()
void AGameReplicationInfo::Reset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.Reset");

	AGameReplicationInfo_Reset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameReplicationInfo.ReceivedGameClass
//		Flags  -> ()
void AGameReplicationInfo::ReceivedGameClass()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.ReceivedGameClass");

	AGameReplicationInfo_ReceivedGameClass_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameReplicationInfo.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void AGameReplicationInfo::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.ReplicatedEvent");

	AGameReplicationInfo_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.GameReplicationInfo.PostBeginPlay
//		Flags  -> ()
// Parameters:
void AGameReplicationInfo::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.PostBeginPlay");

	AGameReplicationInfo_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.IsPrimaryPlayer
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerReplicationInfo::IsPrimaryPlayer()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.IsPrimaryPlayer");

	APlayerReplicationInfo_IsPrimaryPlayer_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.UnregisterPlayerFromSession
//		Flags  -> (Singular, NetReliable, Simulated, Exec, Operator, Static, Delegate, NetServer, HasOutParms, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
void APlayerReplicationInfo::STATIC_UnregisterPlayerFromSession()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.UnregisterPlayerFromSession");

	APlayerReplicationInfo_UnregisterPlayerFromSession_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.RegisterPlayerWithSession
//		Flags  -> (NetReliable, Simulated, Native, Operator, Static, Delegate, NetServer, HasOutParms, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
void APlayerReplicationInfo::STATIC_RegisterPlayerWithSession()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.RegisterPlayerWithSession");

	APlayerReplicationInfo_RegisterPlayerWithSession_Params params {};

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x00000400;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.IsInvalidName
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerReplicationInfo::IsInvalidName()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.IsInvalidName");

	APlayerReplicationInfo_IsInvalidName_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.GetTeamNum
//		Flags  -> ()
// Parameters:
//		unsigned char                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
unsigned char APlayerReplicationInfo::GetTeamNum()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.GetTeamNum");

	APlayerReplicationInfo_GetTeamNum_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.SetUniqueId
//		Flags  -> ()
// Parameters:
//		struct FUniqueNetId                                PlayerUniqueId                                             (Parm)
void APlayerReplicationInfo::SetUniqueId(const struct FUniqueNetId& PlayerUniqueId)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetUniqueId");

	APlayerReplicationInfo_SetUniqueId_Params params {};
	params.PlayerUniqueId = PlayerUniqueId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.SeamlessTravelTo
//		Flags  -> ()
// Parameters:
//		class APlayerReplicationInfo*                      NewPRI                                                     (Parm)
void APlayerReplicationInfo::SeamlessTravelTo(class APlayerReplicationInfo* NewPRI)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SeamlessTravelTo");

	APlayerReplicationInfo_SeamlessTravelTo_Params params {};
	params.NewPRI = NewPRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.IncrementDeaths
//		Flags  -> ()
// Parameters:
//		int                                                Amt                                                        (OptionalParm, Parm)
void APlayerReplicationInfo::IncrementDeaths(int Amt)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.IncrementDeaths");

	APlayerReplicationInfo_IncrementDeaths_Params params {};
	params.Amt = Amt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.CopyProperties
//		Flags  -> ()
// Parameters:
//		class APlayerReplicationInfo*                      PRI                                                        (Parm)
void APlayerReplicationInfo::CopyProperties(class APlayerReplicationInfo* PRI)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.CopyProperties");

	APlayerReplicationInfo_CopyProperties_Params params {};
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.OverrideWith
//		Flags  -> ()
// Parameters:
//		class APlayerReplicationInfo*                      PRI                                                        (Parm)
void APlayerReplicationInfo::OverrideWith(class APlayerReplicationInfo* PRI)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.OverrideWith");

	APlayerReplicationInfo_OverrideWith_Params params {};
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.Duplicate
//		Flags  -> ()
// Parameters:
//		class APlayerReplicationInfo*                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class APlayerReplicationInfo* APlayerReplicationInfo::Duplicate()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.Duplicate");

	APlayerReplicationInfo_Duplicate_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.SetWaitingPlayer
//		Flags  -> ()
// Parameters:
//		bool                                               B                                                          (Parm)
void APlayerReplicationInfo::SetWaitingPlayer(bool B)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetWaitingPlayer");

	APlayerReplicationInfo_SetWaitingPlayer_Params params {};
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.SetPlayerName
//		Flags  -> ()
// Parameters:
//		struct FString                                     S                                                          (Parm, NeedCtorLink)
void APlayerReplicationInfo::SetPlayerName(const struct FString& S)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetPlayerName");

	APlayerReplicationInfo_SetPlayerName_Params params {};
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.DisplayDebug
//		Flags  -> ()
// Parameters:
//		class AHUD*                                        HUD                                                        (Parm)
//		float                                              YL                                                         (Parm, OutParm)
//		float                                              YPos                                                       (Parm, OutParm)
void APlayerReplicationInfo::DisplayDebug(class AHUD* HUD, float* YL, float* YPos)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.DisplayDebug");

	APlayerReplicationInfo_DisplayDebug_Params params {};
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (YL != nullptr)
		*YL = params.YL;
	if (YPos != nullptr)
		*YPos = params.YPos;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.GetHumanReadableName
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString APlayerReplicationInfo::GetHumanReadableName()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.GetHumanReadableName");

	APlayerReplicationInfo_GetHumanReadableName_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.Reset
//		Flags  -> ()
void APlayerReplicationInfo::Reset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.Reset");

	APlayerReplicationInfo_Reset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.Destroyed
//		Flags  -> (Singular, NetReliable, Exec, Event, Operator, Delegate, NetServer, HasOutParms, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
void APlayerReplicationInfo::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.Destroyed");

	APlayerReplicationInfo_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.ShouldBroadCastWelcomeMessage
//		Flags  -> ()
// Parameters:
//		bool                                               bExiting                                                   (OptionalParm, Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APlayerReplicationInfo::ShouldBroadCastWelcomeMessage(bool bExiting)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.ShouldBroadCastWelcomeMessage");

	APlayerReplicationInfo_ShouldBroadCastWelcomeMessage_Params params {};
	params.bExiting = bExiting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.UpdatePing
//		Flags  -> ()
// Parameters:
//		float                                              TimeStamp                                                  (Parm)
void APlayerReplicationInfo::UpdatePing(float TimeStamp)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.UpdatePing");

	APlayerReplicationInfo_UpdatePing_Params params {};
	params.TimeStamp = TimeStamp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.ReplicatedEvent
//		Flags  -> (Net, Static, Delegate, NetServer, HasOutParms, NetClient, DLLImport, K2Override, K2Pure)
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void APlayerReplicationInfo::STATIC_ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.ReplicatedEvent");

	APlayerReplicationInfo_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.SetPlayerTeam
//		Flags  -> ()
// Parameters:
//		class ATeamInfo*                                   NewTeam                                                    (Parm)
void APlayerReplicationInfo::SetPlayerTeam(class ATeamInfo* NewTeam)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetPlayerTeam");

	APlayerReplicationInfo_SetPlayerTeam_Params params {};
	params.NewTeam = NewTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.ClientInitialize
//		Flags  -> ()
// Parameters:
//		class AController*                                 C                                                          (Parm)
void APlayerReplicationInfo::ClientInitialize(class AController* C)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.ClientInitialize");

	APlayerReplicationInfo_ClientInitialize_Params params {};
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PlayerReplicationInfo.PostBeginPlay
//		Flags  -> ()
void APlayerReplicationInfo::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.PostBeginPlay");

	APlayerReplicationInfo_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TeamInfo.GetTeamNum
//		Flags  -> ()
// Parameters:
//		unsigned char                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
unsigned char ATeamInfo::GetTeamNum()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.GetTeamNum");

	ATeamInfo_GetTeamNum_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TeamInfo.GetHumanReadableName
//		Flags  -> ()
// Parameters:
//		struct FString                                     ReturnValue                                                (Parm, OutParm, ReturnParm, NeedCtorLink)
struct FString ATeamInfo::GetHumanReadableName()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.GetHumanReadableName");

	ATeamInfo_GetHumanReadableName_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TeamInfo.RemoveFromTeam
//		Flags  -> ()
// Parameters:
//		class AController*                                 Other                                                      (Parm)
void ATeamInfo::RemoveFromTeam(class AController* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.RemoveFromTeam");

	ATeamInfo_RemoveFromTeam_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TeamInfo.AddToTeam
//		Flags  -> ()
// Parameters:
//		class AController*                                 Other                                                      (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ATeamInfo::AddToTeam(class AController* Other)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.AddToTeam");

	ATeamInfo_AddToTeam_Params params {};
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TeamInfo.Destroyed
//		Flags  -> ()
void ATeamInfo::Destroyed()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.Destroyed");

	ATeamInfo_Destroyed_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TeamInfo.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void ATeamInfo::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.ReplicatedEvent");

	ATeamInfo_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TextureFlipBook.SetCurrentFrame
//		Flags  -> ()
// Parameters:
//		int                                                Row                                                        (Parm)
//		int                                                Col                                                        (Parm)
void UTextureFlipBook::SetCurrentFrame(int Row, int Col)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TextureFlipBook.SetCurrentFrame");

	UTextureFlipBook_SetCurrentFrame_Params params {};
	params.Row = Row;
	params.Col = Col;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TextureFlipBook.Stop
//		Flags  -> ()
void UTextureFlipBook::Stop()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TextureFlipBook.Stop");

	UTextureFlipBook_Stop_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TextureFlipBook.Pause
//		Flags  -> ()
void UTextureFlipBook::Pause()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TextureFlipBook.Pause");

	UTextureFlipBook_Pause_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TextureFlipBook.Play
//		Flags  -> ()
void UTextureFlipBook::Play()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TextureFlipBook.Play");

	UTextureFlipBook_Play_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Texture2DComposite.ResetSourceRegions
//		Flags  -> ()
void UTexture2DComposite::ResetSourceRegions()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Texture2DComposite.ResetSourceRegions");

	UTexture2DComposite_ResetSourceRegions_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Texture2DComposite.UpdateCompositeTexture
//		Flags  -> ()
// Parameters:
//		int                                                NumMipsToGenerate                                          (Parm)
void UTexture2DComposite::UpdateCompositeTexture(int NumMipsToGenerate)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Texture2DComposite.UpdateCompositeTexture");

	UTexture2DComposite_UpdateCompositeTexture_Params params {};
	params.NumMipsToGenerate = NumMipsToGenerate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Texture2DComposite.SourceTexturesFullyStreamedIn
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UTexture2DComposite::SourceTexturesFullyStreamedIn()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Texture2DComposite.SourceTexturesFullyStreamedIn");

	UTexture2DComposite_SourceTexturesFullyStreamedIn_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Texture2DDynamic.Create
//		Flags  -> ()
// Parameters:
//		int                                                InSizeX                                                    (Parm)
//		int                                                InSizeY                                                    (Parm)
//		TEnumAsByte<Engine_EPixelFormat>                   InFormat                                                   (OptionalParm, Parm)
//		bool                                               InIsResolveTarget                                          (OptionalParm, Parm)
//		class UTexture2DDynamic*                           ReturnValue                                                (Parm, OutParm, ReturnParm)
class UTexture2DDynamic* UTexture2DDynamic::Create(int InSizeX, int InSizeY, TEnumAsByte<Engine_EPixelFormat> InFormat, bool InIsResolveTarget)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Texture2DDynamic.Create");

	UTexture2DDynamic_Create_Params params {};
	params.InSizeX = InSizeX;
	params.InSizeY = InSizeY;
	params.InFormat = InFormat;
	params.InIsResolveTarget = InIsResolveTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Texture2DDynamic.UpdateMipFromJPEG
//		Flags  -> ()
// Parameters:
//		int                                                MipIdx                                                     (Parm)
//		TArray<unsigned char>                              MipData                                                    (Const, Parm, OutParm, NeedCtorLink)
void UTexture2DDynamic::UpdateMipFromJPEG(int MipIdx, TArray<unsigned char>* MipData)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Texture2DDynamic.UpdateMipFromJPEG");

	UTexture2DDynamic_UpdateMipFromJPEG_Params params {};
	params.MipIdx = MipIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (MipData != nullptr)
		*MipData = params.MipData;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Texture2DDynamic.UpdateMip
//		Flags  -> ()
// Parameters:
//		int                                                MipIdx                                                     (Parm)
//		TArray<unsigned char>                              MipData                                                    (Const, Parm, OutParm, NeedCtorLink)
void UTexture2DDynamic::UpdateMip(int MipIdx, TArray<unsigned char>* MipData)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Texture2DDynamic.UpdateMip");

	UTexture2DDynamic_UpdateMip_Params params {};
	params.MipIdx = MipIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (MipData != nullptr)
		*MipData = params.MipData;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Texture2DDynamic.Init
//		Flags  -> ()
// Parameters:
//		int                                                InSizeX                                                    (Parm)
//		int                                                InSizeY                                                    (Parm)
//		TEnumAsByte<Engine_EPixelFormat>                   InFormat                                                   (OptionalParm, Parm)
//		bool                                               InIsResolveTarget                                          (OptionalParm, Parm)
void UTexture2DDynamic::Init(int InSizeX, int InSizeY, TEnumAsByte<Engine_EPixelFormat> InFormat, bool InIsResolveTarget)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Texture2DDynamic.Init");

	UTexture2DDynamic_Init_Params params {};
	params.InSizeX = InSizeX;
	params.InSizeY = InSizeY;
	params.InFormat = InFormat;
	params.InIsResolveTarget = InIsResolveTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TextureMovie.SetPause
//		Flags  -> ()
// Parameters:
//		bool                                               argPause                                                   (Parm)
void UTextureMovie::SetPause(bool argPause)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TextureMovie.SetPause");

	UTextureMovie_SetPause_Params params {};
	params.argPause = argPause;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TextureMovie.Close
//		Flags  -> ()
void UTextureMovie::Close()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TextureMovie.Close");

	UTextureMovie_Close_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TextureMovie.Stop
//		Flags  -> ()
void UTextureMovie::Stop()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TextureMovie.Stop");

	UTextureMovie_Stop_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TextureMovie.Pause
//		Flags  -> ()
void UTextureMovie::Pause()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TextureMovie.Pause");

	UTextureMovie_Pause_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TextureMovie.Play
//		Flags  -> ()
void UTextureMovie::Play()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TextureMovie.Play");

	UTextureMovie_Play_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.TextureRenderTarget2D.Create
//		Flags  -> ()
// Parameters:
//		int                                                InSizeX                                                    (Parm)
//		int                                                InSizeY                                                    (Parm)
//		TEnumAsByte<Engine_EPixelFormat>                   InFormat                                                   (OptionalParm, Parm)
//		struct FLinearColor                                InClearColor                                               (OptionalParm, Parm)
//		bool                                               bOnlyRenderOnce                                            (OptionalParm, Parm)
//		class UTextureRenderTarget2D*                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class UTextureRenderTarget2D* UTextureRenderTarget2D::Create(int InSizeX, int InSizeY, TEnumAsByte<Engine_EPixelFormat> InFormat, const struct FLinearColor& InClearColor, bool bOnlyRenderOnce)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.TextureRenderTarget2D.Create");

	UTextureRenderTarget2D_Create_Params params {};
	params.InSizeX = InSizeX;
	params.InSizeY = InSizeY;
	params.InFormat = InFormat;
	params.InClearColor = InClearColor;
	params.bOnlyRenderOnce = bOnlyRenderOnce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ScriptedTexture.Render
//		Flags  -> ()
// Parameters:
//		class UCanvas*                                     C                                                          (Parm)
void UScriptedTexture::Render(class UCanvas* C)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ScriptedTexture.Render");

	UScriptedTexture_Render_Params params {};
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AudioDevice.FindSoundClass
//		Flags  -> ()
// Parameters:
//		struct FName                                       SoundClassName                                             (Parm)
//		class USoundClass*                                 ReturnValue                                                (Parm, OutParm, ReturnParm)
class USoundClass* UAudioDevice::FindSoundClass(const struct FName& SoundClassName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AudioDevice.FindSoundClass");

	UAudioDevice_FindSoundClass_Params params {};
	params.SoundClassName = SoundClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AudioDevice.SetSoundMode
//		Flags  -> ()
// Parameters:
//		struct FName                                       NewMode                                                    (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool UAudioDevice::SetSoundMode(const struct FName& NewMode)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AudioDevice.SetSoundMode");

	UAudioDevice_SetSoundMode_Params params {};
	params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Scout.PreBeginPlay
//		Flags  -> ()
void AScout::PreBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Scout.PreBeginPlay");

	AScout_PreBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Light.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void ALight::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Light.OnToggle");

	ALight_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Light.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void ALight::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Light.ReplicatedEvent");

	ALight_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.PointLightToggleable.ApplyCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct APointLightToggleable_FCheckpointRecord     Record                                                     (Const, Parm, OutParm)
//void APointLightToggleable::ApplyCheckpointRecord(struct APointLightToggleable_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PointLightToggleable.ApplyCheckpointRecord");
//
//	APointLightToggleable_ApplyCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}
//
//
//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.PointLightToggleable.CreateCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct APointLightToggleable_FCheckpointRecord     Record                                                     (Parm, OutParm)
//void APointLightToggleable::CreateCheckpointRecord(struct APointLightToggleable_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PointLightToggleable.CreateCheckpointRecord");
//
//	APointLightToggleable_CreateCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PointLightToggleable.ShouldSaveForCheckpoint
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool APointLightToggleable::ShouldSaveForCheckpoint()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PointLightToggleable.ShouldSaveForCheckpoint");

	APointLightToggleable_ShouldSaveForCheckpoint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.SpotLightToggleable.ApplyCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct ASpotLightToggleable_FCheckpointRecord      Record                                                     (Const, Parm, OutParm)
//void ASpotLightToggleable::ApplyCheckpointRecord(struct ASpotLightToggleable_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SpotLightToggleable.ApplyCheckpointRecord");
//
//	ASpotLightToggleable_ApplyCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}
//
//
//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.SpotLightToggleable.CreateCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct ASpotLightToggleable_FCheckpointRecord      Record                                                     (Parm, OutParm)
//void ASpotLightToggleable::CreateCheckpointRecord(struct ASpotLightToggleable_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SpotLightToggleable.CreateCheckpointRecord");
//
//	ASpotLightToggleable_CreateCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SpotLightToggleable.ShouldSaveForCheckpoint
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool ASpotLightToggleable::ShouldSaveForCheckpoint()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SpotLightToggleable.ShouldSaveForCheckpoint");

	ASpotLightToggleable_ShouldSaveForCheckpoint_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NxForceFieldTornado.DoInitRBPhys
//		Flags  -> ()
void ANxForceFieldTornado::DoInitRBPhys()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NxForceFieldTornado.DoInitRBPhys");

	ANxForceFieldTornado_DoInitRBPhys_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_CylindricalForceActor.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              inAction                                                   (Parm)
void ARB_CylindricalForceActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_CylindricalForceActor.OnToggle");

	ARB_CylindricalForceActor_OnToggle_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.RB_RadialForceActor.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              inAction                                                   (Parm)
void ARB_RadialForceActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.RB_RadialForceActor.OnToggle");

	ARB_RadialForceActor_OnToggle_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShape.GetDrawComponent
//		Flags  -> ()
// Parameters:
//		class UPrimitiveComponent*                         ReturnValue                                                (Parm, OutParm, ReturnParm, EditInline)
class UPrimitiveComponent* UForceFieldShape::GetDrawComponent()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShape.GetDrawComponent");

	UForceFieldShape_GetDrawComponent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShape.FillByCylinder
//		Flags  -> ()
// Parameters:
//		float                                              BottomRadius                                               (Parm)
//		float                                              TopRadius                                                  (Parm)
//		float                                              Height                                                     (Parm)
//		float                                              HeightOffset                                               (Parm)
void UForceFieldShape::FillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShape.FillByCylinder");

	UForceFieldShape_FillByCylinder_Params params {};
	params.BottomRadius = BottomRadius;
	params.TopRadius = TopRadius;
	params.Height = Height;
	params.HeightOffset = HeightOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShape.FillByCapsule
//		Flags  -> ()
// Parameters:
//		float                                              Height                                                     (Parm)
//		float                                              Radius                                                     (Parm)
void UForceFieldShape::FillByCapsule(float Height, float Radius)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShape.FillByCapsule");

	UForceFieldShape_FillByCapsule_Params params {};
	params.Height = Height;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShape.FillByBox
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Dimension                                                  (Parm)
void UForceFieldShape::FillByBox(const struct FVector& Dimension)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShape.FillByBox");

	UForceFieldShape_FillByBox_Params params {};
	params.Dimension = Dimension;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShape.FillBySphere
//		Flags  -> ()
// Parameters:
//		float                                              Radius                                                     (Parm)
void UForceFieldShape::FillBySphere(float Radius)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShape.FillBySphere");

	UForceFieldShape_FillBySphere_Params params {};
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShapeBox.GetDrawComponent
//		Flags  -> ()
// Parameters:
//		class UPrimitiveComponent*                         ReturnValue                                                (Parm, OutParm, ReturnParm, EditInline)
class UPrimitiveComponent* UForceFieldShapeBox::GetDrawComponent()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeBox.GetDrawComponent");

	UForceFieldShapeBox_GetDrawComponent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShapeBox.FillByCylinder
//		Flags  -> ()
// Parameters:
//		float                                              BottomRadius                                               (Parm)
//		float                                              TopRadius                                                  (Parm)
//		float                                              Height                                                     (Parm)
//		float                                              HeightOffset                                               (Parm)
void UForceFieldShapeBox::FillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeBox.FillByCylinder");

	UForceFieldShapeBox_FillByCylinder_Params params {};
	params.BottomRadius = BottomRadius;
	params.TopRadius = TopRadius;
	params.Height = Height;
	params.HeightOffset = HeightOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShapeBox.FillByCapsule
//		Flags  -> ()
// Parameters:
//		float                                              Height                                                     (Parm)
//		float                                              Radius                                                     (Parm)
void UForceFieldShapeBox::FillByCapsule(float Height, float Radius)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeBox.FillByCapsule");

	UForceFieldShapeBox_FillByCapsule_Params params {};
	params.Height = Height;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShapeBox.FillByBox
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Extent                                                     (Parm)
void UForceFieldShapeBox::FillByBox(const struct FVector& Extent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeBox.FillByBox");

	UForceFieldShapeBox_FillByBox_Params params {};
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShapeBox.FillBySphere
//		Flags  -> ()
// Parameters:
//		float                                              Radius                                                     (Parm)
void UForceFieldShapeBox::FillBySphere(float Radius)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeBox.FillBySphere");

	UForceFieldShapeBox_FillBySphere_Params params {};
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShapeBox.GetRadii
//		Flags  -> ()
// Parameters:
//		struct FVector                                     ReturnValue                                                (Parm, OutParm, ReturnParm)
struct FVector UForceFieldShapeBox::GetRadii()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeBox.GetRadii");

	UForceFieldShapeBox_GetRadii_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShapeCapsule.GetDrawComponent
//		Flags  -> ()
// Parameters:
//		class UPrimitiveComponent*                         ReturnValue                                                (Parm, OutParm, ReturnParm, EditInline)
class UPrimitiveComponent* UForceFieldShapeCapsule::GetDrawComponent()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeCapsule.GetDrawComponent");

	UForceFieldShapeCapsule_GetDrawComponent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShapeCapsule.FillByCylinder
//		Flags  -> ()
// Parameters:
//		float                                              BottomRadius                                               (Parm)
//		float                                              TopRadius                                                  (Parm)
//		float                                              Height                                                     (Parm)
//		float                                              HeightOffset                                               (Parm)
void UForceFieldShapeCapsule::FillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeCapsule.FillByCylinder");

	UForceFieldShapeCapsule_FillByCylinder_Params params {};
	params.BottomRadius = BottomRadius;
	params.TopRadius = TopRadius;
	params.Height = Height;
	params.HeightOffset = HeightOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShapeCapsule.FillByCapsule
//		Flags  -> ()
// Parameters:
//		float                                              Height                                                     (Parm)
//		float                                              Radius                                                     (Parm)
void UForceFieldShapeCapsule::FillByCapsule(float Height, float Radius)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeCapsule.FillByCapsule");

	UForceFieldShapeCapsule_FillByCapsule_Params params {};
	params.Height = Height;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShapeCapsule.FillByBox
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Extent                                                     (Parm)
void UForceFieldShapeCapsule::FillByBox(const struct FVector& Extent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeCapsule.FillByBox");

	UForceFieldShapeCapsule_FillByBox_Params params {};
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShapeCapsule.FillBySphere
//		Flags  -> ()
// Parameters:
//		float                                              Radius                                                     (Parm)
void UForceFieldShapeCapsule::FillBySphere(float Radius)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeCapsule.FillBySphere");

	UForceFieldShapeCapsule_FillBySphere_Params params {};
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShapeCapsule.GetRadius
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UForceFieldShapeCapsule::GetRadius()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeCapsule.GetRadius");

	UForceFieldShapeCapsule_GetRadius_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShapeCapsule.GetHeight
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UForceFieldShapeCapsule::GetHeight()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeCapsule.GetHeight");

	UForceFieldShapeCapsule_GetHeight_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShapeSphere.GetDrawComponent
//		Flags  -> ()
// Parameters:
//		class UPrimitiveComponent*                         ReturnValue                                                (Parm, OutParm, ReturnParm, EditInline)
class UPrimitiveComponent* UForceFieldShapeSphere::GetDrawComponent()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeSphere.GetDrawComponent");

	UForceFieldShapeSphere_GetDrawComponent_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShapeSphere.FillByCylinder
//		Flags  -> ()
// Parameters:
//		float                                              BottomRadius                                               (Parm)
//		float                                              TopRadius                                                  (Parm)
//		float                                              Height                                                     (Parm)
//		float                                              HeightOffset                                               (Parm)
void UForceFieldShapeSphere::FillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeSphere.FillByCylinder");

	UForceFieldShapeSphere_FillByCylinder_Params params {};
	params.BottomRadius = BottomRadius;
	params.TopRadius = TopRadius;
	params.Height = Height;
	params.HeightOffset = HeightOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShapeSphere.FillByCapsule
//		Flags  -> ()
// Parameters:
//		float                                              Height                                                     (Parm)
//		float                                              Radius                                                     (Parm)
void UForceFieldShapeSphere::FillByCapsule(float Height, float Radius)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeSphere.FillByCapsule");

	UForceFieldShapeSphere_FillByCapsule_Params params {};
	params.Height = Height;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShapeSphere.FillByBox
//		Flags  -> ()
// Parameters:
//		struct FVector                                     Extent                                                     (Parm)
void UForceFieldShapeSphere::FillByBox(const struct FVector& Extent)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeSphere.FillByBox");

	UForceFieldShapeSphere_FillByBox_Params params {};
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShapeSphere.FillBySphere
//		Flags  -> ()
// Parameters:
//		float                                              Radius                                                     (Parm)
void UForceFieldShapeSphere::FillBySphere(float Radius)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeSphere.FillBySphere");

	UForceFieldShapeSphere_FillBySphere_Params params {};
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.ForceFieldShapeSphere.GetRadius
//		Flags  -> ()
// Parameters:
//		float                                              ReturnValue                                                (Parm, OutParm, ReturnParm)
float UForceFieldShapeSphere::GetRadius()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeSphere.GetRadius");

	UForceFieldShapeSphere_GetRadius_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Sequence.SetEnabled
//		Flags  -> ()
// Parameters:
//		bool                                               bInEnabled                                                 (Parm)
void USequence::SetEnabled(bool bInEnabled)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Sequence.SetEnabled");

	USequence_SetEnabled_Params params {};
	params.bInEnabled = bInEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Sequence.Reset
//		Flags  -> ()
// Parameters:
void USequence::Reset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Sequence.Reset");

	USequence_Reset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Sequence.FindSeqObjectsByName
//		Flags  -> ()
// Parameters:
//		struct FString                                     SeqObjName                                                 (Parm, NeedCtorLink)
//		bool                                               bCheckComment                                              (Parm)
//		TArray<class USequenceObject*>                     OutputObjects                                              (Parm, OutParm, NeedCtorLink)
//		bool                                               bRecursive                                                 (OptionalParm, Parm)
//		bool                                               bUseFullLevelName                                          (OptionalParm, Parm)
void USequence::FindSeqObjectsByName(const struct FString& SeqObjName, bool bCheckComment, TArray<class USequenceObject*>* OutputObjects, bool bRecursive, bool bUseFullLevelName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Sequence.FindSeqObjectsByName");

	USequence_FindSeqObjectsByName_Params params {};
	params.SeqObjName = SeqObjName;
	params.bCheckComment = bCheckComment;
	params.bRecursive = bRecursive;
	params.bUseFullLevelName = bUseFullLevelName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutputObjects != nullptr)
		*OutputObjects = params.OutputObjects;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.Sequence.FindSeqObjectsByClass
//		Flags  -> ()
// Parameters:
//		class UClass*                                      DesiredClass                                               (Parm)
//		bool                                               bRecursive                                                 (Parm)
//		TArray<class USequenceObject*>                     OutputObjects                                              (Parm, OutParm, NeedCtorLink)
void USequence::FindSeqObjectsByClass(class UClass* DesiredClass, bool bRecursive, TArray<class USequenceObject*>* OutputObjects)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.Sequence.FindSeqObjectsByClass");

	USequence_FindSeqObjectsByClass_Params params {};
	params.DesiredClass = DesiredClass;
	params.bRecursive = bRecursive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

	if (OutputObjects != nullptr)
		*OutputObjects = params.OutputObjects;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrefabSequence.GetOwnerPrefab
//		Flags  -> ()
// Parameters:
//		class APrefabInstance*                             ReturnValue                                                (Parm, OutParm, ReturnParm)
class APrefabInstance* UPrefabSequence::GetOwnerPrefab()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrefabSequence.GetOwnerPrefab");

	UPrefabSequence_GetOwnerPrefab_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.PrefabSequence.SetOwnerPrefab
//		Flags  -> ()
// Parameters:
//		class APrefabInstance*                             InOwner                                                    (Parm)
void UPrefabSequence::SetOwnerPrefab(class APrefabInstance* InOwner)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.PrefabSequence.SetOwnerPrefab");

	UPrefabSequence_SetOwnerPrefab_Params params {};
	params.InOwner = InOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_ActivateRemoteEvent.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_ActivateRemoteEvent::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ActivateRemoteEvent.GetObjClassVersion");

	USeqAct_ActivateRemoteEvent_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.NxForceFieldSpawnable.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              inAction                                                   (Parm)
void ANxForceFieldSpawnable::OnToggle(class USeqAct_Toggle* inAction)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.NxForceFieldSpawnable.OnToggle");

	ANxForceFieldSpawnable_OnToggle_Params params {};
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_DrawText.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_DrawText::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_DrawText.GetObjClassVersion");

	USeqAct_DrawText_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_GetLocationAndRotation.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_GetLocationAndRotation::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_GetLocationAndRotation.GetObjClassVersion");

	USeqAct_GetLocationAndRotation_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_Latent.Update
//		Flags  -> ()
// Parameters:
//		float                                              DeltaTime                                                  (Parm)
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USeqAct_Latent::Update(float DeltaTime)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Latent.Update");

	USeqAct_Latent_Update_Params params {};
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_Latent.AbortFor
//		Flags  -> ()
// Parameters:
//		class AActor*                                      latentActor                                                (Parm)
void USeqAct_Latent::AbortFor(class AActor* latentActor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Latent.AbortFor");

	USeqAct_Latent_AbortFor_Params params {};
	params.latentActor = latentActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_ActorFactory.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_ActorFactory::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ActorFactory.GetObjClassVersion");

	USeqAct_ActorFactory_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_ProjectileFactory.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_ProjectileFactory::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ProjectileFactory.GetObjClassVersion");

	USeqAct_ProjectileFactory_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_AIMoveToActor.PickDestination
//		Flags  -> ()
// Parameters:
//		class AActor*                                      Requestor                                                  (Parm)
//		class AActor*                                      ReturnValue                                                (Parm, OutParm, ReturnParm)
class AActor* USeqAct_AIMoveToActor::PickDestination(class AActor* Requestor)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_AIMoveToActor.PickDestination");

	USeqAct_AIMoveToActor_PickDestination_Params params {};
	params.Requestor = Requestor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_AIMoveToActor.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_AIMoveToActor::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_AIMoveToActor.GetObjClassVersion");

	USeqAct_AIMoveToActor_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_Delay.ResetDelayActive
//		Flags  -> ()
void USeqAct_Delay::ResetDelayActive()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Delay.ResetDelayActive");

	USeqAct_Delay_ResetDelayActive_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_Delay.Reset
//		Flags  -> ()
void USeqAct_Delay::Reset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Delay.Reset");

	USeqAct_Delay_Reset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_Interp.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_Interp::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Interp.GetObjClassVersion");

	USeqAct_Interp_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_Interp.Reset
//		Flags  -> ()
void USeqAct_Interp::Reset()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Interp.Reset");

	USeqAct_Interp_Reset_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_Interp.AddPlayerToDirectorTracks
//		Flags  -> ()
// Parameters:
//		class APlayerController*                           PC                                                         (Parm)
void USeqAct_Interp::AddPlayerToDirectorTracks(class APlayerController* PC)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Interp.AddPlayerToDirectorTracks");

	USeqAct_Interp_AddPlayerToDirectorTracks_Params params {};
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_Interp.Stop
//		Flags  -> ()
void USeqAct_Interp::Stop()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Interp.Stop");

	USeqAct_Interp_Stop_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_Interp.SetPosition
//		Flags  -> ()
// Parameters:
//		float                                              NewPosition                                                (Parm)
//		bool                                               bJump                                                      (OptionalParm, Parm)
void USeqAct_Interp::SetPosition(float NewPosition, bool bJump)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Interp.SetPosition");

	USeqAct_Interp_SetPosition_Params params {};
	params.NewPosition = NewPosition;
	params.bJump = bJump;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_PlaySound.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_PlaySound::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_PlaySound.GetObjClassVersion");

	USeqAct_PlaySound_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_StreamInTextures.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_StreamInTextures::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_StreamInTextures.GetObjClassVersion");

	USeqAct_StreamInTextures_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_WaitForLevelsVisible.Activated
//		Flags  -> ()
void USeqAct_WaitForLevelsVisible::Activated()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_WaitForLevelsVisible.Activated");

	USeqAct_WaitForLevelsVisible_Activated_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_WaitForLevelsVisible.CheckLevelsVisible
//		Flags  -> ()
// Parameters:
//		bool                                               ReturnValue                                                (Parm, OutParm, ReturnParm)
bool USeqAct_WaitForLevelsVisible::CheckLevelsVisible()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_WaitForLevelsVisible.CheckLevelsVisible");

	USeqAct_WaitForLevelsVisible_CheckLevelsVisible_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_Log.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_Log::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Log.GetObjClassVersion");

	USeqAct_Log_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_ModifyHealth.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_ModifyHealth::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ModifyHealth.GetObjClassVersion");

	USeqAct_ModifyHealth_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_ParticleEventGenerator.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_ParticleEventGenerator::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ParticleEventGenerator.GetObjClassVersion");

	USeqAct_ParticleEventGenerator_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.SeqAct_PlayCameraAnim.GetObjClassVersion
//		Flags  -> ()
// Parameters:
//		int                                                ReturnValue                                                (Parm, OutParm, ReturnParm)
int USeqAct_PlayCameraAnim::GetObjClassVersion()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_PlayCameraAnim.GetObjClassVersion");

	USeqAct_PlayCameraAnim_GetObjClassVersion_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;


	return params.ReturnValue;
}


//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.AmbientSoundSimpleToggleable.ApplyCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct AAmbientSoundSimpleToggleable_FCheckpointRecord Record                                                     (Const, Parm, OutParm)
//void AAmbientSoundSimpleToggleable::ApplyCheckpointRecord(struct AAmbientSoundSimpleToggleable_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.ApplyCheckpointRecord");
//
//	AAmbientSoundSimpleToggleable_ApplyCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}
//
//
//// Function:
////		Offset -> 0x00000000
////		Name   -> Function Engine.AmbientSoundSimpleToggleable.CreateCheckpointRecord
////		Flags  -> ()
//// Parameters:
////		struct AAmbientSoundSimpleToggleable_FCheckpointRecord Record                                                     (Parm, OutParm)
//void AAmbientSoundSimpleToggleable::CreateCheckpointRecord(struct AAmbientSoundSimpleToggleable_FCheckpointRecord* Record)
//{
//	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.CreateCheckpointRecord");
//
//	AAmbientSoundSimpleToggleable_CreateCheckpointRecord_Params params {};
//
//	auto flags = fn->FunctionFlags;
//
//	UObject::ProcessEvent(fn, &params);
//	fn->FunctionFlags = flags;
//
//	if (Record != nullptr)
//		*Record = params.Record;
//
//}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AmbientSoundSimpleToggleable.OnToggle
//		Flags  -> ()
// Parameters:
//		class USeqAct_Toggle*                              Action                                                     (Parm)
void AAmbientSoundSimpleToggleable::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.OnToggle");

	AAmbientSoundSimpleToggleable_OnToggle_Params params {};
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AmbientSoundSimpleToggleable.StopPlaying
//		Flags  -> ()
void AAmbientSoundSimpleToggleable::StopPlaying()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.StopPlaying");

	AAmbientSoundSimpleToggleable_StopPlaying_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AmbientSoundSimpleToggleable.StartPlaying
//		Flags  -> ()
void AAmbientSoundSimpleToggleable::StartPlaying()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.StartPlaying");

	AAmbientSoundSimpleToggleable_StartPlaying_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AmbientSoundSimpleToggleable.ReplicatedEvent
//		Flags  -> ()
// Parameters:
//		struct FName                                       VarName                                                    (Parm)
void AAmbientSoundSimpleToggleable::ReplicatedEvent(const struct FName& VarName)
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.ReplicatedEvent");

	AAmbientSoundSimpleToggleable_ReplicatedEvent_Params params {};
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


// Function:
//		Offset -> 0x00000000
//		Name   -> Function Engine.AmbientSoundSimpleToggleable.PostBeginPlay
//		Flags  -> ()
void AAmbientSoundSimpleToggleable::PostBeginPlay()
{
	static UFunction* fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.PostBeginPlay");

	AAmbientSoundSimpleToggleable_PostBeginPlay_Params params {};

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);
	fn->FunctionFlags = flags;

}


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
